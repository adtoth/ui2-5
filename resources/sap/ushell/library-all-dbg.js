// This file has been generated by the SAPUI5 'AllInOne' Builder
sap.ui.controller("sap.ushell.components.factsheet.views.ThingViewer", {
	
	setService : function(sUri) {
		this.getView().setModel(new sap.ui.model.odata.ODataModel(sUri));
	}

});
/**
 * Created by i041099 on 14/08/13.
 * Performance UI monitor
 */
window.f2pMonitor = (function () {
    'use strict';
    /*global jQuery, sap, window, document, f2p */

    jQuery.sap.declare("sap.ushell.components.perf.monitor");
    jQuery.sap.require("sap.m.library");

    var oPerfMonitorApp,
        sRootPageId,
        oItemTemplate,
        oPerfMonitorModel;

    function setItemsIconColor (aItems){
        for (var i = 0; i < aItems.length;i++){
            var icon = aItems[i].getIcon();
            if (icon && icon.indexOf('alert') !== -1){
                aItems[i].addStyleClass('PerfMonitorRedIcon');
            }else if(icon && icon.indexOf('accept') !== -1){
                aItems[i].addStyleClass('PerfMonitorGreenIcon');
            }
        }
    }

    function _navigate(event) {
        event.stopImmediatePropagation();
        var oCtx, sCurrentPath, sNewPath, oNewData;
        oCtx = event.srcControl.getBindingContext();
        sCurrentPath = oPerfMonitorModel.getProperty('/currentListPath');
        sNewPath = sCurrentPath + oCtx.sPath.replace('/currentModel','');
        oNewData = oPerfMonitorModel.getProperty('/data' + sNewPath);
        if (oNewData.items && oNewData.items.length){
            oPerfMonitorModel.setProperty('/currentListPath', sNewPath);
            oPerfMonitorModel.setProperty('/currentModel', oNewData);
        }
    }
    
    function _navigateBack(event){
        var sNewPath, oNewData,
            sCurrentPath = oPerfMonitorModel.getProperty('/currentListPath');
        if (sCurrentPath){
            sNewPath = sCurrentPath.substring(0,sCurrentPath.lastIndexOf('/'));
            sNewPath = sNewPath.substring(0,sNewPath.lastIndexOf('/'));
            oNewData = oPerfMonitorModel.getProperty('/data' + sNewPath);
            oPerfMonitorModel.setProperty('/currentListPath', sNewPath);
            oPerfMonitorModel.setProperty('/currentModel', oNewData);
        }else{
            oPerfMonitorApp.backToTop();
        }
    }

    oItemTemplate = new sap.m.ObjectListItem({
        title: "{title}",
        type: "{type}",
        number: "{number}",
        numberUnit: "{i18n>milliseconds}",
        icon : "{icon}"
    }).addEventDelegate({
        onclick: _navigate    // workaround, press event should be used
    });

    function _addPage(oData, sPath, showNavButton) {
        var oPage ,oList = new sap.m.List({
            inset: false
        });
        oPerfMonitorModel.setProperty("/currentListPath","");
        oPerfMonitorModel.setProperty('/currentModel', oPerfMonitorModel.getProperty('/data'));
        oList.setModel(oPerfMonitorModel);
        oList.bindItems("/currentModel/items", oItemTemplate);
        oList.onBeforeRendering  = function (event){
            setItemsIconColor(event.srcControl.getItems());
        };
        oPage = new sap.m.Page(oData.id, {
            title: "{i18n>fioriLaunchPadMonitor}",
            showNavButton: showNavButton,
            content: [oList]
        }).addEventDelegate({
            onclick: _navigateBack
        });
        oPerfMonitorApp.addPage(oPage);
    }

    return {
        _getStaticJSON : function () {
        return {
            id: "overview",
            title: "Overview",
            items: [
                {
                    id: "homepage",
                    title: "All Groups",
                    type: "Navigation",
                    number: 10500,
                    items: [
                        {
                            title: "Self Service Group",
                            /*  type: "Navigation",*/
                            number: 100
                        },
                        {
                            id: "salesGroup",
                            title: "Sales Group",
                            type: "Navigation",
                            number: 10250,
                            items: [
                                {
                                    title: "Create Sales Order Tile",
                                    number: 300
                                },
                                {
                                    title: "Product HT-1000 Tile",
                                    number: 250
                                },
                                {
                                    title: "Approve Shopping Cart Tile",
                                    number: 350
                                },
                                {
                                    title: "Sales Order 27 Tile",
                                    number: 8000
                                },
                                {
                                    title: "Npr News Tile",
                                    number: 250
                                }
                            ]
                        }
                    ]
                },
                {
                    id: "shell",
                    title: "Shell bootstrap",
                    /*type: "Navigation",*/
                    number: 1000
                },
                {
                    id: "searches",
                    title: "Searches Terms",
                    /*type: "Navigation",*/
                    number: 1000
                },
                {
                    id: "appNavigation",
                    title: "App Navigation",
                    /*type: "Navigation",*/
                    number: 250
                }
            ]
        };
    },
        open: function () {
            if (!oPerfMonitorApp) {
                this.init();
            }
            else {
               this.update();                    
            }
            oPerfMonitorApp.to(sRootPageId);
        },
        close: function () {
            if (oPerfMonitorApp) {
                oPerfMonitorApp.backToTop();
            }

        },
        load: function (loadDataFunction) {
            var data = loadDataFunction();
            if (!oPerfMonitorModel){
                oPerfMonitorModel = new sap.ui.model.json.JSONModel();
            }
            oPerfMonitorModel.setProperty('/data',data);
            sRootPageId = data.id;
            _addPage(data, "/items/", true);
        },
        registerWindowKeyCombo: function () {
            jQuery(document).keydown(function (e) {
                //CTRL + ALT +  L keydown combo
                if (e.ctrlKey && e.altKey && e.keyCode === 76) {
                    if (!oPerfMonitorApp) {
                        this.init();
                    }
                    else {
                        this.update();
                    }
                    oPerfMonitorApp.to(sRootPageId);
                }
                //ESC
                if (e.keyCode === 27) {
                    if (oPerfMonitorApp) {
                        oPerfMonitorApp.backToTop();
                    }
                }
            }.bind(this));
        },
        update: function() {
            if (window.f2p) {
                var oData = f2p.get();
                oPerfMonitorModel.setProperty('/data', oData);
                oPerfMonitorModel.setProperty('/currentModel', oData);
            }
        },
        /***
         *
         * @param {object}
         *   navigationApp
         */
        init: function (navigationApp) {
//            this.registerWindowKeyCombo();
            if (navigationApp) {
                oPerfMonitorApp = navigationApp;
            } else {
                return;
            }
            
            if (window.f2p)
                this.load(f2p.get);
            else
                this.load(this._getStaticJSON);
        }

    };
}());
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, $, sap, console, window */
    /*jslint nomen: true */

    sap.ui.controller("sap.ushell.renderers.fiori2.launchpad.catalog.Catalog", {
        onInit: function () {
            var oModel = sap.ui.getCore().byId("navContainer").getModel();
            oModel.setProperty("/showCatalogHeaders", true);
            oModel.setProperty("/states/catalog/search", new sap.m.Text("catalogTitle", {
                text : "{i18n>tile_catalog}",
                width : "100%",
                textAlign : sap.ui.core.TextAlign.Center
            }).getId());
            sap.ui.getCore().getEventBus().subscribe("openCatalog", this.onShow, this);
        },

        onExit: function () {
            sap.ui.getCore().getEventBus().unsubscribe("openCatalog", this.onShow);
        },

        onAfterRendering: function () {
            // disable swipe gestures -> never show master in Portait mode
            sap.ui.getCore().byId("catalogSplitContainer").onswiperight = function () {};
        },

        onShow: function (sChannelId, sEventId, oData) {
            $.extend(this.getView().getViewData(), oData);
            //reset active tiles
            var oModel = sap.ui.getCore().byId("navContainer").getModel(),
                aCatalogTiles = oModel.getProperty("/catalogTiles") || [],
                i;
            for (i = 0; i < aCatalogTiles.length; i = i + 1) {
                aCatalogTiles[i].active = false;
            }
            this.applyTileFilters();
            window.setTimeout($.proxy(sap.ui.getCore().byId("catalogSelect").setSelectedItemId, sap.ui.getCore().byId("catalogSelect"), this.selectedCategory), 500);
        },

        setCategoryFilter : function (aFilter) {
            this.categoryFilter = aFilter || null;
            this.applyTileFilters();
        },

        setSearchFilter : function (aFilter) {
            this.searchFilter = aFilter || null;
            this.applyTileFilters();
        },

        applyTileFilters : function () {
            var aFilters = [],
                oSearchFilter,
                oCategoryFilter;
            if (this.searchFilter) {
                oSearchFilter = new sap.ui.model.Filter($.map(this.searchFilter.split(/[\s,]+/), function (v) {
                    return (v && new sap.ui.model.Filter("keywords", sap.ui.model.FilterOperator.Contains, v)) || undefined;
                }), true);
                aFilters.push(oSearchFilter);
            }
            if (this.categoryFilter) {
                oCategoryFilter = new sap.ui.model.Filter("catalog", sap.ui.model.FilterOperator.EQ, this.categoryFilter);
                aFilters.push(oCategoryFilter);
            }
            sap.ui.getCore().byId("catalogTiles").getBinding("tiles").filter(aFilters);
        },

        onLiveFilter : function (oEvent) {
            var sQuery = oEvent.getParameter("newValue");
            if (sQuery) {
                this.setSearchFilter(sQuery);
            } else {
                this.setSearchFilter();
            }
        },

        onCategoryFilter : function (oEvent) {
            var oSource = oEvent.getParameter("selectedItem"),
                oSourceContext = oSource.getBindingContext(),
                oModel = oSourceContext.getModel();
            if (oModel.getProperty("static", oSourceContext)) { // show all categories
                oModel.setProperty("/showCatalogHeaders", true);
                this.setCategoryFilter();
                this.selectedCategory = undefined;
            } else { // filter to category
                oModel.setProperty("/showCatalogHeaders", false);
                this.setCategoryFilter(oSource.getText());
                this.selectedCategory = oSource.getId();
            }
        },

        onTileDragStart : function (oEvent) {
            var oScroller = sap.ui.getCore().byId("catalogTilesPage").getScrollDelegate()._scroller;
            if (oScroller) {
                window.setTimeout($.proxy(oScroller.disable, oScroller), 1);
            }
        },

        onTileDragStop : function (oEvent) {
            var oScroller = sap.ui.getCore().byId("catalogTilesPage").getScrollDelegate()._scroller;
            if (oScroller) {
                oScroller.enable();
                oScroller.scrollTo(0, 0, 1, true);
            }
        },

        /**
         * Event handler triggered if tile should be added to the default group.
         * 
         * @param {sap.ui.base.Event} oEvent
         *     the event object. It is expected that the binding context of the event source points to the tile to add.
         */
        onAddTileToDefault : function (oEvent) {
            var oSourceContext = oEvent.getSource().getBindingContext();
            if (!oSourceContext.getProperty("active")) {
                this._addTile(oSourceContext, this.getView().getViewData().groupContext
                        || new sap.ui.model.Context(oSourceContext.getModel(), "/groups/0"));
            }
        },

        /**
         * Event handler triggered if tile should be added to a specified group.
         * 
         * @param {sap.ui.base.Event} oEvent
         *     the event object. It is expected that the binding context of the event source points to the group. Also,
         *     the event must contain a "control" parameter whose binding context points to the tile.
         */
        onAddTile : function (oEvent) {
            var oSourceContext = oEvent.getParameter("control").getBindingContext();
            if (!oSourceContext.getProperty("active")) {
                this._addTile(oSourceContext, oEvent.getSource().getBindingContext());
            }
        },

        /**
         * Send request to add a tile to a group. Request is triggered asynchronously, so UI is not blocked.
         *
         * @param {sap.ui.model.Context} oTileContext
         *     the catalog tile to add
         * @param {sap.ui.model.Context} oGroupContext
         *     the group where the tile should be added
         * @private
         */
        _addTile : function (oTileContext, oGroupContext) {
            var oBus = sap.ui.getCore().getEventBus();
            window.setTimeout($.proxy(oBus.publish, oBus, "launchpad", "addTile", {
                catalogTileContext : oTileContext,
                groupContext: oGroupContext
            }), 0);
        }
    });
}());

// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, console, window, $ */
    /*jslint plusplus: true, nomen: true*/

    sap.ui.controller("sap.ushell.renderers.fiori2.launchpad.group_list.GroupList", {
        onInit : function () {
            // #groupList
            this.sViewId = "#" + this.getView().getId();
            // #__list4
            this.sGroupListId = "#" + this.getView().oGroupList.getId();

            jQuery(".sapUshellGroupList").data("dropGroup", null);

            //Internal counter for over and out events thrown by GroupListItems
            //This is needed because of a jQuery bug that throws over and out events in the wrong order
            this.iOutEventCounter = 0;
            this.iOverEventCounter = 0;
            //Internal flag to detect "real" GroupListOut-events
            this.iOutEventFlag = false;
        },

        onAfterRendering : function () {
            this.jqView = jQuery(this.sViewId);
            this.jgGroupList = jQuery(this.sGroupListId);

            this.lastItemWithEditMode = null;

            // The delete area is moved out of the scrollable area
            jQuery("#__area1").appendTo("#shell-cntnt");
            
            //Bind the resize handler
            var fResizeHandler = function (event) {
                var jqGrouplist = jQuery(event.currentTarget),
                    jqTitleOnly = jQuery(".sapMSLITitleOnly"),
                    jqInputField = jQuery(".sapUshellGroupLI").find(".sapMInput");
                
                jqTitleOnly.css("width", (jqGrouplist.width() - parseInt(jqTitleOnly.css("padding-left"))) + "px");
                jqInputField.css("width", (jqGrouplist.width() - (2 * parseInt(jqInputField.css("margin-left")))) + "px");
            }
            var jqOuterGroupList = jQuery("#groupList");
            jqOuterGroupList.unbind("resize", fResizeHandler);
            jqOuterGroupList.bind("resize", fResizeHandler);
            jqOuterGroupList.trigger("resize", [jqOuterGroupList.width(), jqOuterGroupList.height()]);
        },
        onGroupTitleChange : function (oEvent) {
            this._publishAsync("launchpad", "changeGroupTitle", {
                groupId : oEvent.getSource().getGroupId(),
                newTitle : oEvent.getParameter("newTitle")
            });
        },
        makeSortable : function () {
            this.jgGroupList = jQuery(this.sGroupListId);
            this._sortable();
        },
        _getJqAllListItems : function () {
            this.jqView = jQuery(this.sViewId);
            return this.jqView.find(".sapUshellGroupListItem");
        },
        _getJqGroupListItems : function () {
            this.jgGroupList = jQuery(this.sGroupListId);
            return this.jgGroupList.find(".sapUshellGroupListItem");
        },

        _getGroupTopOffset : function (oGroup) {
            var iGroupTopOffset = 0,
                oDashboardPage = sap.ui.getCore().byId("groupListPage");

            iGroupTopOffset += oGroup.parent().parent().position().top;
            iGroupTopOffset += oGroup.position().top;
            iGroupTopOffset -= oGroup.parent().parent().parent().position().top;

            return iGroupTopOffset;
        },

        _sortable : function () {
            var that = this,
                jqParentGroupListPage = jQuery("#groupListPage").parent();

            that.bActive = false;

            this.jgGroupList.find(".sapMListUl").sortable({
                containment: jqParentGroupListPage,
                items: '>:not(.sapUshellDefaultGroupItem)',
                placeholder: "sapUshellGroupLI-placeholder",
                helper: function (event, element) {
                    var clone = element.clone(),
                        jqGroupListItem = jQuery(".sapUshellGroupListItem");
                    clone.addClass("sortableHelperClone");
                    clone.addClass("sapUshellClonedGrouplistItem");
                    clone.removeClass("li");
                    clone.css("font-size", element.css("font-size"));
                    clone.css("width", jqGroupListItem.first().parent().width());
                    clone.css("height", jqGroupListItem.first().height() + parseInt(jqGroupListItem.first().css("border-bottom-width")));

                    clone.hide();
                    window.setTimeout(function () {
                        clone.appendTo('body');
                        clone.show();
                    }, 1);

                    return clone;
                },
                revert: jQuery.proxy(this._handleSortableRevert, this),
                start: jQuery.proxy(this._handleSortableStart, this),
                stop: jQuery.proxy(this._handleSortableStop, this),
                change: jQuery.proxy(this._handleSortableChange, this)
            }).disableSelection(); //disable text selection browser-behaviour

            if (!jQuery.device.is.desktop) {
                this.jgGroupList.find(".sapMListUl").sortable('disable');
            }
        },

        _bindGroupListItemEvents : function(oEvent) {
            var oGroupListItem = oEvent.getSource();

            if (!jQuery.device.is.tablet) {
                return;
            }

            var that = this;

            jQuery.sap.byId(oGroupListItem.sId).bind("mousedown", function (event) {
                var _this = jQuery(this);

                if (that.bActive === false && !_this.hasClass("sapUshellDefaultGroupItem")) {
                    var _event = event;

                    jQuery(".sapUshellGroupItemList").find(".ui-sortable").sortable('disable');

                    clearTimeout(this.fdownTimer);
                    this.fdownTimer = setTimeout(function () {
                        that.bActive = true;
                        jQuery(_this).effect("shake", {
                            times: 1,
                            distance: 5,
                            complete: function () {
                                if( !that.bActive ) {
                                    return;
                                }
                                jQuery(".sapUshellGroupItemList").find(".ui-sortable").sortable('enable');

                                //deactivate scrolling during drag and drop on mobile devices
                                var oGroupListPage = sap.ui.getCore().byId("groupListPage"),
                                    oScroller = oGroupListPage.getScrollDelegate();

                                oScroller._scroller.disable();

                                _this.trigger(_event);
                            }
                        }, 50);
                    }, 150);
                }
            });

            jQuery.sap.byId(oGroupListItem.sId).bind("mouseup", function (event) {
                clearTimeout(this.fdownTimer);
                that.bActive = false;

                if (!jQuery.device.is.desktop) {
                    //activate scrolling after drag and drop on mobile devices
                    var oGroupListPage = sap.ui.getCore().byId("groupListPage"),
                        oScroller = oGroupListPage.getScrollDelegate();

                    if(!oScroller._scroller.enabled) {
                        oScroller._scroller.enable();
                        //workaround to enable addGroup on iOS after enabling iScroll
                        oScroller._scroller.scrollTo(oScroller._scroller.absStartX, oScroller._scroller.absStartY);
                    }
                }
            });

            jQuery.sap.byId(oGroupListItem.sId).bind("mousemove", function (event) {
                clearTimeout(this.fdownTimer);
                that.bActive = false;
            });
        },

        _handleSortableRevert : function (event, ui) {
            //Return desired return duration
            return 250;
        },

        _handleSortableStart : function (event, ui) {
            ui.placeholder.height(ui.helper.outerHeight());
            var that = this,
                jqCloneArea = jQuery(this.sViewId).find(".cloneArea");

            if (jqCloneArea.length <= 0) {
                jqCloneArea = jQuery("<div id='cloneArea' class='cloneArea'></div>");
                jQuery(this.sViewId).append(jqCloneArea);
            }

            //Flag the original group that is currently being dragged
            ui.item.addClass("exclude-me");

            //Clone all existing groups
            //Iterate through all groups
            this._getJqAllListItems().each(function () {
                //Clone the current group (including style)
                var oGroup = jQuery(this),
                    oClonedGroup = oGroup.clone(),
                    //Position the clone inside the cloneArea
                    sGroupLeftOffset = oGroup.position().left,
                    iGroupTopOffset = that._getGroupTopOffset(oGroup),
                    jqGroupListItem = jQuery(".sapUshellGroupListItem");

                oClonedGroup.addClass("clonedGrouplistItem");

                //Save the clone and the current group (sapUshellDashboardGroupsContainerItem)
                oGroup.data("clone", oClonedGroup);

                //Set the new position
                oClonedGroup.css("left", sGroupLeftOffset);
                oClonedGroup.css("top", iGroupTopOffset + "px");

                //Append the clone...
                jqCloneArea.append(oClonedGroup);

                //Fix some styling
                oClonedGroup.css("font-size", jqGroupListItem.first().css("font-size"));
                oClonedGroup.css("width", jqGroupListItem.first().parent().width());
                oClonedGroup.css("height", jqGroupListItem.first().height() + parseInt(jqGroupListItem.first().css("border-bottom-width")));
            });

            //Hide all other original groups
            this._getJqAllListItems().not(".sortableHelperClone").not(".exclude-me").not(".clonedGrouplistItem").css("visibility", "hidden");
            //Get the clone that is under the current original tile and hide it...
            ui.item.data("clone").hide();
            ui.item.startPos = ui.item.index();
            //show delete-area
            this.oView.oGrouplistDeleteArea.show();
        },

        _updateGroupSelection : function() {

            //Check if something is currently being dragged or sorted (there is a helper in the dom)
            //If so, cancel this whole update action
            if(jQuery(".ui-sortable-helper").length > 0) {
                return;
            }

            var fHandleScroll = function (nScrollTop) {
                var jqContainer = jQuery('#dashboardGroups').find('.sapUshellTileContainer'),
                    oOffset = jqContainer && jqContainer.first().parent().offset(),
                    firstContainerOffset = oOffset && oOffset.top || 0,
                    oOffset = jQuery('#dashboardPage').offset(),
                    edgeMargin = oOffset && oOffset.top,
                    animationTime = 1200,
                    contentTop = [];

                // In some weird corner cases, those may not be defined -> bail out.
                if(!jqContainer || !oOffset) {
                    return;
                }

                jqContainer.each(function () {
                    var nContainerTopPos = jQuery(this).parent().offset().top;
                    contentTop.push([nContainerTopPos, nContainerTopPos + jQuery(this).parent().height()]);
                });

                var nBottomSpace = jQuery(window).height() - edgeMargin - jqContainer.last().parent().height();
                nBottomSpace = (nBottomSpace < 0) ? 0 : nBottomSpace;

                jQuery('.sapUshellDashboardGroupsContainer').css("margin-bottom", nBottomSpace + "px");

                var winTop = nScrollTop + firstContainerOffset;
                jQuery.each(contentTop, function (i, currentPos) {
                    if (currentPos[0] <= winTop && winTop <= currentPos[1]) {
                        jQuery('#groupList .sapUshellDefaultGroupItem, #groupList .sapUshellGroupListItem')
                            .removeClass('over')
                            .eq(i).addClass('over');
                    }
                });
            },
            oDashboardPageContent = jQuery("#dashboardPage-cont");

            if (!jQuery.device.is.desktop) {
                var that = this;

                if (!this.oDashboardPage) {
                    this.oDashboardPage = sap.ui.getCore().byId("dashboardPage");
                    this.oScroller = this.oDashboardPage.getScrollDelegate();
                    this.oOriginalScrollMove = this.oScroller._scroller.options.onScrollMove;
                }

                this.oScroller._scroller.options.onScrollMove = function (oEvent) {
                    that.oOriginalScrollMove.apply(that.oScroller);

                    var nScrollTop = that.oScroller.getScrollTop();
                    fHandleScroll.call(oDashboardPageContent, nScrollTop);
                };

                var nScrollTop = this.oScroller.getScrollTop();
                fHandleScroll.call(oDashboardPageContent, nScrollTop);
            } else {
                oDashboardPageContent.unbind('scroll');
                oDashboardPageContent.scroll(function () {
                    var nScrollTop = jQuery("#dashboardPage-cont").scrollTop();
                    fHandleScroll(nScrollTop);
                });

                var nScrollTop = jQuery("#dashboardPage-cont").scrollTop();
                fHandleScroll(nScrollTop);
            }
        },

        _handleSortableStop : function (event, ui) {
            //Show all original tiles and reset everything
            this._getJqAllListItems().removeData("clone").removeClass("exclude-me").css("visibility", "visible");
            //Delete all clones
            jQuery(".clonedGrouplistItem").remove();

            //hide delete-area
            this.oView.oGrouplistDeleteArea.hide();

            var fromIndex = ui.item.startPos,
                toIndex = ui.item.index(),
                oTile = sap.ui.getCore().byId(ui.item[0].id);

            // If there is an oTile, something has been sorted.
            // Don't sort when we actually want to delete/reset tiles.
            if(oTile) {
                if(!oTile.bDeletionFlag) {
                    this._handleGroupMove(event, ui);

                    // Workaround: Prevent a new sort from being started before re-rendering has happened.
                    // This is necessary because the delayed rendering would corrupt an ongoing sort, as it
                    // deletes the current container (& sortable) and creates a new one.)
                    // (But don't do this, when we're deleting tiles. In this case rerendering was already
                    // triggered by the deletion handler in mouseStop.)
                    this.jgGroupList.find(".sapMListUl").sortable('disable');
                    // TODO: Rerendering is necessary to enable the sortable again.
                    //  But changing the order does not always trigger it, so we force it. Why is this necessary?
                    this.oView.oGroupList.invalidate();
                } else {
                    oTile.bDeletionFlag = false;
                }
            }

            this.jgGroupList.find(".sapMListUl").sortable('cancel');

            //Call the resize handler to trigger group name truncation (some delay for IE9)
            setTimeout(function () {
                var jqOuterGroupList = jQuery("#groupList");
                jqOuterGroupList.trigger("resize", [jqOuterGroupList.width(), jqOuterGroupList.height()]);
            }, 5);

            if (!jQuery.device.is.desktop) {
                this.bActive = false;
                this.jgGroupList.find(".sapMListUl").sortable('disable');
            }

            var oGroup = sap.ui.getCore().byId(ui.item.attr("id"));

            // Wait until dashboard is rerendered
            window.setTimeout(jQuery.proxy(function() {
                this._handleScrollToGroup(oGroup);
                this._updateGroupSelection();
            }, this), 1000);
        },

        _handleSortableChange : function (event, ui) {
            var that = this,
                //Get all invisible, original tiles that are not placeholders
                oOriginalGroups = this._getJqAllListItems().not(".exclude-me").not(".clonedTile");

            oOriginalGroups.each(function () {
                //Get the original tile and its clone
                var oGroup = jQuery(this),
                    oClonedGroup = oGroup.data("clone"),
                    //Position the clone inside the cloneArea
                    sGroupLeftOffset = oGroup.position().left,
                    iGroupTopOffset = that._getGroupTopOffset(oGroup);

                if (oClonedGroup) {
                    //Stop currently running animations
                    //Without this, animations would queue up
                    oClonedGroup.stop(true, false);

                    //Get the invisible tile that has snapped to the new
                    //location, get its position, and animate the visible
                    //clone to it

                    //Animate everything to their new locations
                    oClonedGroup.animate({
                        left: sGroupLeftOffset,
                        top: iGroupTopOffset + "px"
                    }, {
                        duration: 250
                    }, {
                        easing: "swing"
                    });
                }
            });
        },

        // Model Event Handlers
        _handleGroupCreate : function () {
            var focused = jQuery(':focus');
            if (focused) {
                focused.blur();
            }
            this._publishAsync("launchpad", "createGroup", {
                title : sap.ushell.resources.i18n.getText("new_group_name")
            });
        },
        
        _handleGroupListItemPress : function (oSource) {
            //Close the grouplist on phone if not editing
            if(jQuery.device.is.phone) {
                sap.ui.getCore().byId("shell").setShowPane(false);
                //Scroll to the new group
                var that = this;
                setTimeout(function () {
                    that._handleScrollToGroup(oSource);
                    that._updateGroupSelection();
                }, 1000);
            } else {
                this._handleScrollToGroup(oSource);
                this._updateGroupSelection();
            }
        },

        _handleScrollToGroup : function (oGroupItem) {
            if(!oGroupItem) {
                return;
            }

            this._publishAsync("launchpad", "scrollToGroup", {
                groupId : oGroupItem.getGroupId()
            });
        },

        _handleGroupMove : function (event, ui) {
            var oEventBus = sap.ui.getCore().getEventBus(),
                fromIndex = ui.item.startPos,
                toIndex = ui.item.index();

            if (fromIndex !== toIndex && toIndex !== -1) {
                this._publishAsync("launchpad", "moveGroup", {
                    fromIndex  : fromIndex,
                    toIndex    : toIndex
                });
            }
        },

        // TODO: This is done in _mouseStop in the view.js, but should be handled here.
        /*
        _handleGroupDelete : function (event, ui) {
            var oEventBus = sap.ui.getCore().getEventBus(),
                oGroup = sap.ui.getCore().byId(ui.draggable[0].id);
            oEventBus.publish("launchpad", "deleteGroup", {
                groupId : oGroup.getGroupId()
            });
        },
        */

        onCategoryFilter : function (oEvent) {
            var oBus = sap.ui.getCore().getEventBus(),
                sQuery = oEvent.getParameter("selectedItem").getText();

            // Async publication of category filter
            window.setTimeout(jQuery.proxy(oBus.publish, oBus, "catalog", "categoryFilter", {
                category : (sQuery !== "All") ? sQuery : null
            }), 1);
        },

        _publishAsync : function (sChannelId, sEventId, oData) {
            var oBus = sap.ui.getCore().getEventBus();
            window.setTimeout($.proxy(oBus.publish, oBus, sChannelId, sEventId, oData), 1);
        },

        //Group List Items
        _handleGroupListItemOver : function (oEvent) {
            //If this is the first GroupListItemOver, then the tile probably just started hovering the group list
            //Due to wrong order and number of events we still have to check if this has already happened
            if(this.iOutEventCounter === 0 && this.iOverEventCounter === 0) {
                this._handleGroupListOver(oEvent);
            }

            //Flag that this event has happened
            this.iOutEventFlag = true;

            //Notify dashboard
            var oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.publish("grouplist", "GroupListItemOver", oEvent);

            this.iOutEventCounter++;
        },
        _handleGroupListItemOut : function (oEvent) {
            this.iOutEventCounter--;

            //Check if there is an OVER-event happening within the next few ms
            this.iOutEventFlag = false;
            var that = this;
            setTimeout(function () {
                if(that.iOutEventFlag === false) {
                    //There was NO next over event, it could be a GroupListOut
                    //but we still have to check if the order and number of the events was correct
                    //If every over has an out, the tile cannot be over the group list anymore
                    if(that.iOutEventCounter === 0 && that.iOverEventCounter === 1) {
                        that._handleGroupListOut(oEvent);
                    }
                }
            }, 1);

            //Notify dashboard
            var oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.publish("grouplist", "GroupListItemOut", oEvent);
        },
        _handleGroupListItemDrop : function (oEvent) {
            //Reset some stuff
            this.iOutEventCounter = 0;
            this.iOverEventCounter = 0;
            this.iOutEventFlag = false;

            //Notify dashboard
            var oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.publish("grouplist", "GroupListItemDrop", oEvent);
        },

        //Group List
        _handleGroupListOver : function (oEvent) {
            this.iOverEventCounter++;

            //Notify dashboard
            var oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.publish("grouplist", "GroupListOver", oEvent);
        },
        _handleGroupListOut : function (oEvent) {
            this.iOverEventCounter = 0;

            //Notify dashboard
            var oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.publish("grouplist", "GroupListOut", oEvent);
        }
    });
}());

// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, console */

    /**
     * @name "sap.ushell.renderers.fiori2.SearchFilter
     * @extends sap.ui.core.mvc.Controller
     * @public
     */
    sap.ui.controller("sap.ushell.renderers.fiori2.search.ResultFilterInfo", {

        /**
         * SAPUI5 lifecycle hook.
         * @public
         */
        onInit: function () {
            var oModel = new sap.ui.model.json.JSONModel();
            oModel.setData({filter: []});
            this.getView().setModel(oModel, "filter");

            sap.ui.getCore().getEventBus().subscribe("search", this.searchInvoked, this);
            sap.ui.getCore().getEventBus().subscribe("searchDataSourceChange", this.dataSourceSelected, this);
        },

        onExit: function () {
            sap.ui.getCore().getEventBus().unsubscribe("search", this.searchInvoked, this);
            sap.ui.getCore().getEventBus().unsubscribe("searchDataSourceChange", this.dataSourceSelected, this);
        },

        dataSourceSelected: function (sChannelId, sEventId, oData) {
            this.setResultFilterInfo([oData]);
        },

        searchInvoked: function (sChannelId, sEventId, oData) {
            if (oData.dataSource && oData.dataSource.label) {
                this.setResultFilterInfo([oData.dataSource]);
            } else {
                this.setResultFilterInfo([]);
            }
        },

        setResultFilterInfo: function (aFilters) {
            var oModel = this.getView().getModel("filter");

            // do not display "$$ALL$$" filter
            if (aFilters.length > 0 && aFilters[0].objectName && (aFilters[0].objectName === "$$ALL$$"
                || aFilters[0].objectName.value === "$$ALL$$")) {
                aFilters.splice(0, 1);
            }

            if (aFilters.length > 0) {
                sap.ui.getCore().byId("searchResultPage").removeStyleClass("sapSearchResultFilterInfoHidden");
                this.showCategoryMarker = true;
                oModel.setProperty("/filter", aFilters);
            } else {
                sap.ui.getCore().byId("searchResultPage").addStyleClass("sapSearchResultFilterInfoHidden");
                this.showCategoryMarker = false;
                oModel.setProperty("/filter", []);
            }
        },

        onBeforeRendering: function () {
            this.getView().getModel().setProperty("/states/searchResults/showCategoryMarker", this.showCategoryMarker);
        }
    });
}());

//Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap */

    sap.ui.jsview("sap.ushell.renderers.fiori2.search.ResultFilterInfo", {

        createContent: function (controller) {
            return new sap.m.HBox({
                visible: {
                    path: "/currentState/showCurtainPane",
                    formatter: function (bShowCurtainPane) {
                        return !bShowCurtainPane;
                    }
                },
                items: {
                    path: "filter>/filter",
                    factory: function (sId, oContext) {
                        var oFilter = new sap.m.HBox(),
                            aFilter = oContext.getModel().getProperty("/filter");

                        if (aFilter.indexOf(oContext.getObject()) === 0) {
                            oFilter.addItem(new sap.m.Text({
                                text: {path: "i18n>searchedIn"},
                                layoutData: new sap.m.FlexItemData({
                                    alignSelf: sap.m.FlexAlignSelf.Center
                                })
                            }));
                        }

                        return oFilter.addItem(new sap.m.Text({
                            text: {path: "filter>label"},
                            layoutData: new sap.m.FlexItemData({
                                alignSelf: sap.m.FlexAlignSelf.Center
                            })
                        }).addStyleClass("sapSearchResultFilterInfoLabel"));
                    }
                }
            }).addStyleClass("sapSearchResultFilterInfo");
        },

        getControllerName: function () {
            return "sap.ushell.renderers.fiori2.search.ResultFilterInfo";
        }
    });
}());
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, console */

    /**
     * @name "sap.ushell.renderers.fiori2.SearchFilter
     * @extends sap.ui.core.mvc.Controller
     * @public
     */
    sap.ui.controller("sap.ushell.renderers.fiori2.search.SearchFilter", {

        /**
         * SAPUI5 lifecycle hook.
         * @public
         */
        onInit: function () {
            var searchResultView = sap.ui.getCore().byId("searchResultsView");
            this.getView().setModel(searchResultView.getModel(), 'SearchFilter');

            var oEventBus = sap.ui.getCore().getEventBus();

            oEventBus.subscribe("search", this.buildCategoryTreeForSuggestion, this);
            oEventBus.subscribe("searchSuggest", this.buildCategoryTreeForNoSearchTerm, this);
            oEventBus.subscribe("closeCurtain", this.buildCategoryTreeForCloseCurtain, this);

//            this.onInit = true;
        },


        selectCategory : function(event,category){
            sap.ushell.Container.getService("Search").setDataSource(category.dataSource, this.getView().getModel('SearchFilter'));
            sap.ui.getCore().getEventBus().publish("selectCategory", category.dataSource);
        },


        buildCategoryTreeForSuggestion: function (sChannelId, sEventId, oData) {
            var self = this;
            self.getView().getModel("SearchFilter").setProperty("/currentState/showCurtainPane", false);
            if(oData.categorySuggested){
                sap.ushell.Container.getService("Search").setSearchCategoryTree(oData);
            }
        },

        buildCategoryTreeForNoSearchTerm: function(sChannelId, sEventId, oData){
            var self = this;
//            if(!self.onInit){
//                self.onInit = false;
                if(oData.searchTerm === ""){
                    sap.ushell.Container.getService("Search").setQueryForAll(this.getView().getModel('SearchFilter'), false);
                } else {
                    sap.ushell.Container.getService("Search").setSearchTermWithoutQuery(oData.searchTerm);
                }
//            };
        },

        buildCategoryTreeForCloseCurtain: function(){
            sap.ushell.Container.getService("Search").setQueryForAll(this.getView().getModel('SearchFilter'), true);
        }



    });
}());

//Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap */

    sap.m.ListItemBase.extend("sap.search.CategoryTreeItem", {
        metadata : {
            aggregations: {
                left: {multiple:false },
                right: {multiple:false }
            }
        },

        renderer : function(oRm, oControl) {      // the part creating the HTML

            oRm.write("<div");
            oRm.writeControlData(oControl);  // writes the Control ID
            oRm.writeClasses();
            oRm.write(">");

            oRm.write("<div class=treeRight>");
            if (oControl.getRight())
            {
                oRm.renderControl( oControl.getRight());
            }
            oRm.write("</div>");

            oRm.write("<div class=treeLeft>");
            if (oControl.getLeft()){
                oRm.renderControl( oControl.getLeft());
            }
            oRm.write("</div>");

            oRm.write("</div>");

        }
    });

    sap.ui.jsview("sap.ushell.renderers.fiori2.search.SearchFilter", {

        createContent: function (controller) {

            var self = this;
            var list = new sap.m.List({

            });


            list.bindAggregation("items", "SearchFilter>/categoryTree", function (sId, oContext) {
                var category = oContext.getObject();
                var item= self.assembleCategoryListItem(controller,category);
                return item;
            });


            list.addStyleClass("searchFilterList");
            return list;
        },

        assembleCategoryListItem: function (controller,category) {
            // var item = new sap.m.CustomListItem();

            var content = [];

            var link;
            var number;


            if(category.dataSource.label === ''){
                return null;
            }

            if(category.dataSource.level === 0){
                link = new sap.m.Link({text : "All Content"});
//              link = new sap.m.Link({text :category.dataSource.label+" + "+category.current.toString() + " + " + category.dataSource.level});
//                item.addContent(link);

            }else{
                link = new sap.m.Link({text :category.dataSource.label});
//              link = new sap.m.Link({text :category.dataSource.label+" + "+category.current.toString() + " + " + category.dataSource.level});
            }
            // item.addContent(link);
            content.push(link);
            link.attachPress(category,controller.selectCategory,controller);
            link.addStyleClass("link");


            if(category.value !== undefined){
                number = new sap.m.Label({text :category.value.toString()});
                number.addStyleClass("number");
                if(category.value === -1){
                    number.addStyleClass("hide");
                }else{
                    number.removeStyleClass("hide");
                }
                // item.addContent(number);
                content.push(number);
            }

            var item = new sap.search.CategoryTreeItem({
                left : link,
                right: number
            });


            item.addStyleClass("searchFilterItem");
            item.addStyleClass("searchFilterItemLevel" + category.dataSource.level);
            if(category.current){
                item.addStyleClass("active");
            }
            return item;
        },

        getControllerName: function () {
            return "sap.ushell.renderers.fiori2.search.SearchFilter";
        },

    });
}());
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview
 *
 * @version
 */
(function () {
    "use strict";
    /*global jQuery, sap */


    sap.ui.core.Control.extend("SearchResultListWithDetail", {
    // the control API:
    metadata : {
        properties : {

        },
        aggregations : {
            "resultList":      {type: "sap.ui.core.Control", multiple: false},
            "preview":         {type: "sap.ui.core.Control", multiple: false}
        }
    },

    // the part creating the HTML:
    renderer : function(oRm, oControl) { // static function, so use the given "oControl" instance instead of "this" in the renderer function
        /// outer div
        oRm.write("<div");
        oRm.writeControlData(oControl);  // writes the Control ID
        oRm.addClass("searchResultListWithDetail");
        oRm.writeClasses();              // this call writes the above class plus enables support for Square.addStyleClass(...)
        oRm.write('>');

        oRm.write('<div class="searchLayout-left">');
        if (oControl.getResultList())
        {
            oRm.renderControl(oControl.getResultList());
        }
        oRm.write('</div>');

        oRm.write('<div');
        oRm.addClass("searchLayout-right");
        oRm.writeClasses();
        oRm.write('>');
        if (oControl.getPreview())
        {
            oRm.renderControl(oControl.getPreview());
        }
        oRm.write('</div>');


        /// close outer div
        oRm.write("</div>"); // end of the complete control
    },

    onAfterRendering: function() {
        var self = this;
        var preview = $(this.getDomRef()).find(".searchResultListItemDetail");
        var updatePos = function(){

            var openItem = $(".searchResultListItem-open");
            if (openItem.length !== 0)
            {
                var currentPos = openItem.position().top;
                preview.css('margin-top', currentPos );
            }

            // if ($("#searchResultPage-scroll").length > 0) {
            //     var pos = - $("#searchResultPage-scroll").position().top; //TODO: Check position()
            //     pos = Math.max(0, pos);
            //     preview.css('top', pos );
            // }
        };

        // $("#searchResultPage-cont").on("scroll", updatePos);

        // $("#searchResultPage-cont").bind('touchmove', function(e){
        //     e.preventDefault();
        //     updatePos();
        // });

        updatePos();

    }

    });





    sap.ui.core.Control.extend("SearchLayout", {
    // the control API:
    metadata : {
        properties : {
            showMainHeader  : {type : "boolean", defaultValue : false},
            topHeader       : "string",
            topCount        : "int",
            bottomHeader    : "string",
            bottomHeaderIsUnspecific: {type : "boolean", defaultValue : true}, // is "Others" or similar, $$ALL$$
            bottomCount     : "int"
        },
        aggregations : {
            "topList"       : {type: "sap.ui.core.Control", multiple: false},
            "bottomList"    : {type: "sap.ui.core.Control", multiple: false},
        }
    },

    // the part creating the HTML:
    renderer : function(oRm, oControl) { // static function, so use the given "oControl" instance instead of "this" in the renderer function
        /// outer div
        oRm.write("<div");
        oRm.writeControlData(oControl);  // writes the Control ID
        oRm.addClass("searchLayout");
        oRm.writeClasses();              // this call writes the above class plus enables support for Square.addStyleClass(...)
        oRm.write('>');

        //Show main header when there are two lists, or no list
        // var topAndBottomList = oControl.getTopList() && oControl.getBottomList();
        // var noTopAndBottomList = !(oControl.getTopList() || oControl.getBottomList());

        if (oControl.getShowMainHeader() === true )
        {
            var totalCount = 0;
            if (oControl.getTopCount())
            {
                totalCount = totalCount + oControl.getTopCount();
            }
            if (oControl.getBottomCount())
            {
                totalCount = totalCount + oControl.getBottomCount();
            }
            oRm.write('<div class="searchLayout-mainHeader">');
            oRm.renderControl((new sap.m.Label({text: sap.ushell.resources.i18n.getText("searchResults") })).addStyleClass('searchLayout-mainHeaderName'));
            oRm.renderControl((new sap.m.Label({text: '('+totalCount+')' })).addStyleClass('searchLayout-mainHeaderCount'));
            oRm.write('</div>');
        }

        if (oControl.getTopList() && oControl.getTopHeader()) // no header without list
        {
            oRm.write('<div class="searchLayout-bucket">');
            oRm.renderControl((new sap.m.Label({text: oControl.getTopHeader()})).addStyleClass('searchLayout-bucketName'));
            if (oControl.getTopCount())
                oRm.renderControl((new sap.m.Label({text: '('+oControl.getTopCount()+')' })).addStyleClass('searchLayout-bucketCount'));
            oRm.write('</div>');
        }
        if (oControl.getTopList())
        {
            oRm.renderControl(oControl.getTopList());
        }

        if (oControl.getBottomList() && oControl.getBottomHeader()) // no header without list
        {
            if (oControl.getBottomHeaderIsUnspecific() === true && oControl.getTopCount() === 0)
            {

            }else{
                oRm.write('<div class="searchLayout-bucket">');
                oRm.renderControl((new sap.m.Label({text: oControl.getBottomHeader()})).addStyleClass('searchLayout-bucketName'));
                if (oControl.getBottomCount())
                    oRm.renderControl((new sap.m.Label({text: '('+oControl.getBottomCount()+')' })).addStyleClass('searchLayout-bucketCount'));
                oRm.write('</div>');
            }

        }
        if (oControl.getBottomList())
        {
            oRm.renderControl(oControl.getBottomList());
        }
        /// close outer div
        oRm.write("</div>"); // end of the complete control
    }

    });

}(window));
(function (global) {
    "use strict";

    var sap = global.sap;
    var console = global.console;

    sap.ui.model.json.JSONModel.extend("sap.ushell.renderers.fiori2.search.SearchModel", {

        searchInit: function () {
            var self = this;
            if (self.searchInitialized) {
                return;
            }
            self.searchInitialized = true;
            self.searchRequestID = 0;
            self.searchDataSource = new sap.bc.ina.api.impl.inav2.filter.DataSource({
                objectName: "$$ALL$$",
                packageName: "ABAP",
                type: "Category",
                label: "All"
            });
            self.searchDataSource.level = 0;
            self.searchTerm = "";
            self.searchCategoryTree = [];
            self.searchTop=5;
            self.searchSkip=0;
        },

        searchGetGenericResults: function (results) {

            function getImageUrl(result) {
                var imageAttr = { 
                                    imageUrl: '',
                                    name: ''
                                };
                for (var prop in result) {
                    if (result[prop].label && result[prop].value) {
                        if (result[prop].value && jQuery.type(result[prop].value) === 'string' &&
                            (result[prop].value.split('.').pop() === 'jpg' || result[prop].value.split('.').pop() === 'png')) {
                            imageAttr.imageUrl = result[prop].value;
                            imageAttr.name = prop;
                            return imageAttr;
                        }
                    }
                }
                return imageAttr;

            }
            
            var moveWhyFound2ResponseAttr = function (whyfounds, property) {
                var l = whyfounds.length;
                while (l--) {
                    if (whyfounds[l].labelRaw === property.labelRaw && property !== undefined) {
                        property.value = whyfounds[l].value;
                        whyfounds.splice(l, 1);
                    }
                }
            };
            
            var genericResults = [];
            for (var i = 0; i < results.length; i++) {
                var result = results[i];

                var uri = '';
                var relatedActions = result.$$RelatedActions$$;
                for (var relatedAction in relatedActions) {
                    if (relatedActions[relatedAction].type === "Navigation") {
                        uri = relatedActions[relatedAction].uri;
//                        uri = "#SalesOrder-DisplayFactSheet?SalesOrder=27";
//                        uri = "/sap/bc/ui5_ui5/ui2/ushell/shells/abap/FioriLaunchpad.html?sap-client=111#SalesOrder-DisplayFactSheet?SalesOrder=27"
                    }
                }
                var whyfounds = result.$$WhyFound$$ || [];

                var summaryAttrs = [];
                var detailAttrs = [];
                var title = '';

                for (var prop in result) {
                    if(result[prop].label && result[prop].value) {
                        var presentationUsage = result[prop].$$MetaData$$.presentationUsage || [];
                        if (presentationUsage && presentationUsage.length>0) {
                            if (result[prop].$$MetaData$$.isTitle === true) {
                                moveWhyFound2ResponseAttr(whyfounds, result[prop]);
                                title = title + " " + result[prop].value;
                            } else if (presentationUsage.indexOf("Summary")>-1) {
                                summaryAttrs.push(prop);
                            } else if (presentationUsage.indexOf("Detail")>-1) {
                                detailAttrs.push(prop);
                            }
                        }
                    }
                }

                var displayRelevantAttrs = summaryAttrs.concat(detailAttrs);
                var attNum = 1;
                var listResult = {};
                var imageAttr = getImageUrl(result);
                listResult.imageUrl = imageAttr.imageUrl;
                listResult.dataSourceName = result.$$DataSourceMetaData$$.label;
                listResult.uri = uri;
                listResult.$$Name$$ = '';
                
                for (var z=0; z<displayRelevantAttrs.length; z++){
                    var propDisplay = displayRelevantAttrs[z];
                    // image attribute shall not be displayed as a normal key value pair
                    if (propDisplay !== imageAttr.name){
                        moveWhyFound2ResponseAttr(whyfounds, result[propDisplay]);
                        listResult["attr"+attNum+"Name"] = result[propDisplay].label;
                        listResult["attr"+attNum] = result[propDisplay].value;

                        attNum = attNum + 1;                        
                    }
                }

                
                listResult.$$Name$$ = title.trim();
                listResult.numberofattributes = attNum;
                //TODO: replace it with dataSourceName + $$Name$$ in view
                listResult.title=result.title;
                listResult.whyfounds = whyfounds;
                genericResults.push(listResult);
            }

            return genericResults;

        },

        searchPrepareResultList: function (resultset, append) {
            var self = this;

            var resultListHeader = {};
            resultListHeader.type = "title";
            resultListHeader.title = sap.ushell.resources.i18n.getText("searchResults") + " (" + resultset.getSearchResultSet().totalcount + ")";

            var resultsForList;
            if (append) {
                self.resultsForList.pop(); //Remove footer
                resultsForList = self.resultsForList;

            } else {
                resultsForList = [];
                resultsForList.push(resultListHeader); //Add footer to new lists
            }

            var results = resultset.getSearchResultSet().getElements();
            resultsForList = resultsForList.concat(self.searchGetGenericResults(results));

            if (results.length === this.searchTop) // There is more
            {
                var resultListFooter = {};
                resultListFooter.type = "footer";
                resultsForList.push(resultListFooter);
            }

            self.resultsForList = resultsForList;

            var oModel = self;
            oModel.setProperty("/results", {});
            oModel.setProperty("/results", resultsForList);
            // oModel.setProperty("/stats/number", results.length);

            if (window.f2p) window.f2p.add(window.f2p.m.endSearch, {
                    st: ""
                });

        },

//        searchPrepareCategoryFacet: function (resultset) {
//            var self = this;
//
//            // remove old categories
//            for (var i = 0; i < self.searchCategoryTree.length; ++i) {
//                var category = self.searchCategoryTree[i];
//                if (category.dataSource.level === self.searchDataSource.level) {
//                    self.searchCategoryTree.splice(i, self.searchCategoryTree.length - i);
//                    break;
//                }else{
//                    category.value=-1;
//                    category.current=false;
//                }
//            }
//
//            // add current category
//            self.searchCategoryTree.push({
//                dataSource: self.searchDataSource,
//                value     : resultset.getSearchResultSet().totalcount,
//                current   : true
//            });
//
//            // add child categories
//            var chartFacets = resultset.getChartFacets();
//            if (chartFacets.length !== 0) {
//                var categoryFacet = chartFacets[0];
//                if (categoryFacet.facetType === 'datasource') {
//                    var categoryFacetResultSet = categoryFacet.getQuery().getResultSetSync();
//                    var elements = categoryFacetResultSet.getElements();
//                    for (i = 0; i < elements.length; ++i) {
//                        var element = elements[i];
//                        element.current=false;
//                        element.dataSource.level = self.searchDataSource.level + 1;
//                        self.searchCategoryTree.push(element);
//                    }
//                }
//            }
//
//            self.setProperty("/categoryTree", []);
//            self.setProperty("/categoryTree", self.searchCategoryTree);
//        },

        searchLoadedResultset: function (resultset, append) {
            var self = this;
            self.searchPrepareResultList(resultset, append);
            self.searchPrepareCategoryFacet(resultset);
        },

        searchWithObjectName: function (searchTerm, objectNameValue) {
        	var self = this;
        	var dataSource = null;
        	if (objectNameValue) {
        		dataSource = new sap.bc.ina.api.impl.inav2.filter.DataSource({
                    objectName: objectNameValue,
                    packageName: "",
                    type: ""
                });
        	}
        	self.setQuery(searchTerm, dataSource);
        },
        
        setDataSource: function (dataSource) {
            var self = this;
            self.searchInit();
            self.searchDataSource = dataSource;
            self.searchSkip = 0;
            sap.ui.getCore().getEventBus().publish("searchDataSourceChange", dataSource);
            self.searchFireQuery();
        },

        setSearchTerm: function (searchTerm) {
            var self = this;
            self.setQuery(searchTerm, null);
        },

        setQuery: function (searchTerm, dataSource) {
            var self = this;
            self.searchInit();
            if (searchTerm!==null) {
            	self.searchTerm = searchTerm;
            }
            if (dataSource!==null) {
            	self.searchDataSource = dataSource;
            }
            self.searchSkip = 0;
            self.searchFireQuery();
        },
        	
        searchAppendNextPage : function(){
            var self = this;
            self.searchInit();
            self.searchSkip+=self.searchTop;
            self.searchFireQuery();
        },
        
        searchFireQuery: function () {
            var self = this;
            var sina = sap.ushell.Container.getService("Search").getSina();
            if (!sina) {
                jQuery.sap.log.info("Current Search adapter does not support Sina queries");
                return;
            }
            // create query
            var query = sina.createPerspectiveQuery();
            query.top(self.searchTop);
            query.skip(self.searchSkip);
            query.setSearchTerms(self.searchTerm);
            query.dataSource(self.searchDataSource);
            query.filter.addFilterCondition('$$RenderingTemplatePlatform$$', '=', 'html', '', '', false);
            query.filter.addFilterCondition('$$RenderingTemplateTechnology$$', '=', 'Tempo', '', '', false);
            query.filter.addFilterCondition('$$RenderingTemplateVariant$$', '=', '', '', '', false);
            query.filter.addFilterCondition('$$RenderingTemplateType$$', '=', 'ItemDetails', '', '', false);
            query.filter.addFilterCondition('$$RenderingTemplateType$$', '=', 'ResultItem', '', '', false);

            // increment request id
            self.searchRequestID = self.searchRequestID + 1;
            var currentSearchRequestID = self.searchRequestID;

            // fire query
            query.getResultSet(function (resultset) {
                if (currentSearchRequestID !== self.searchRequestID) //Request is deprecated
                {
                    console.log("Searchrequest deprecated");
                    return;
                }
                self.searchLoadedResultset(resultset, self.searchSkip !== 0);
            });

        }

    });

})(window);
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview
 *
 * @version
 */
(function () {
    "use strict";
    /*global jQuery, sap */

    //////////  Internally-Used Button //////////

    sap.ui.core.Control.extend("SearchResultListItemButton", {
        metadata : {
            properties : {
                status: "string", // closed (default) or open
            },
            events: {
                press: {}
            }
        },
        renderer : function(oRm, oControl) { // static function, so use the given "oControl" instance instead of "this" in the renderer function
            /// outer div
            oRm.write('<a href="javascript:void(0);"');
            oRm.writeControlData(oControl);  // writes the Control ID
            oRm.addClass("searchResultListItemButton");
            oRm.writeClasses();              // this call writes the above class plus enables support for Square.addStyleClass(...)
            oRm.write(">");

            var open = new sap.ui.core.Icon({
                src: sap.ui.core.IconPool.getIconURI("open-command-field")
            });
            oRm.renderControl(open);
            // oRm.write('<span data-sap-ui-icon-content="'+"\ue1c6"+'" style="font-family:\'SAP-icons\'" class="sapMBtnCustomIcon sapUiIcon sapUiIconMirrorInRTL');
            // if (oControl.getStatus() !== "open") {
                // oRm.write(" searchResultListItemButton-closed");
            // }
            // oRm.write('"></span>');

            oRm.write("</a>");
        },
        onclick : function(evt) {
            this.firePress();
        }
    });


    //////////  The ResultListItem Control //////////

    sap.m.ListItemBase.extend("SearchResultListItem", {
        // the control API:
        metadata : {
            properties : {
                title: "string",
                titleUrl: "string",
                type: "string",
                imageUrl: "string",
                status: "string",  // closed (default) or open
                previewButton: "string", // true (default) or false, implemented for tablet only acc. to. visual design
                data: "object",
                visibleAttributes: "int"
            },
            events: {
                navigate: {},
                previewOpen: {},
                previewClose: {}
            }
        },

        // the part creating the HTML:
        renderer : function(oRm, oControl) { // static function, so use the given "oControl" instance instead of "this" in the renderer function
            var labelText,
                valueText,
                label,
                value;

            /// outer div
            oRm.write("<div");
            oRm.writeControlData(oControl);  // writes the Control ID
            if (oControl.getStatus() === "open" || oControl.getData()['selected'] === true ) {
                oRm.addClass("searchResultListItem-open");
            }
            oRm.addClass("searchResultListItem");
            oRm.writeClasses();              // this call writes the above class plus enables support for Square.addStyleClass(...)
            oRm.write(">");

            oRm.write('<div class="searchResultListItem-main"><div>');
            oRm.write('<div class="searchResultListItem-left">');

            /// /// image1 (phone)
            /// use as background because of cover feature
            oRm.write('<div class="searchResultListItem-image searchResultListItem-image1" style="background-image:url(\'');
            oRm.write(oControl.getImageUrl());
            oRm.write('\')"></div>');

            /// /// type 2 (tablet)
            var type1 = new sap.m.Text({text: oControl.getType()});
            type1.setTooltip(oControl.getType().replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
            type1.addStyleClass("searchResultListItem-type searchResultListItem-type1");
            oRm.renderControl(type1);

            /// /// title
            var title = new sap.m.Link({text: oControl.getTitle(), href: oControl.getTitleUrl()});
            title.setTooltip(oControl.getTitle().replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
            title.addStyleClass("searchResultListItem-title");
            oRm.renderControl(title);
            //oControl._setSaveText(title.getDomRef(), oControl.getTitle());

            /// /// type 2 (tablet)
            var type2 = new sap.m.Text({text: oControl.getType()});
            type2.setTooltip(oControl.getType().replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
            type2.addStyleClass("searchResultListItem-type searchResultListItem-type2");
            oRm.renderControl(type2);

            /// /// attributes
            oRm.write('<div class="searchResultListItem-attributes">');
            for (var i = 1; i <= oControl.getVisibleAttributes(); i++) {
                var attrName = "attr"+i+"Name";
                var attr = "attr"+i;
                labelText = oControl.getData()[attrName];
                valueText = oControl.getData()[attr];
                if(labelText===undefined||valueText===undefined){
                    continue;
                }
                oRm.write('<div class="searchResultListItem-attribute">');
                label = new sap.m.Label({text: labelText});
                label.setTooltip((''+labelText).replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
                label.addStyleClass("searchResultListItem-attribute-label");
                oRm.renderControl(label);
                value = new sap.m.Text({text: valueText});
                value.setTooltip((''+valueText).replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
                value.addStyleClass("searchResultListItem-attribute-value");
                oRm.renderControl(value);
                oRm.write("</div>");
            }
            oRm.write("</div>");

            /// why found attributes
            oRm.write('<div class="searchResultListItem-attributes">');
            for (i = 0; i < oControl.getData().whyfounds.length; i++) {
                labelText = oControl.getData().whyfounds[i].label;
                valueText = oControl.getData().whyfounds[i].valueHighlighted;
                if(labelText===undefined||valueText===undefined){
                    continue;
                }
                oRm.write('<div class="searchResultListItem-attribute">');
                label = new sap.m.Label({text: labelText});
                label.setTooltip((''+labelText).replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
                label.addStyleClass("searchResultListItem-attribute-label");
                oRm.renderControl(label);
                value = new sap.m.Text({text: valueText});
                value.setTooltip((''+valueText).replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
                value.addStyleClass("searchResultListItem-attribute-value");
                oRm.renderControl(value);
                oRm.write("</div>");
            }
            oRm.write("</div>");

            oRm.write("</div>");

            /// /// image2 (tablet+)
            /// use as background because of cover feature
            oRm.write('<div class="searchResultListItem-image2Container"><div class="searchResultListItem-image searchResultListItem-image2" style="background-image:url(\'');
            oRm.write(oControl.getImageUrl());
            oRm.write('\')"></div></div>');

            oRm.write("</div></div>"); // close main

            /// /// button
            if (oControl.getPreviewButton() !== "false") {
                this.button = new SearchResultListItemButton({
                    status: oControl.getStatus(),
                    press: function(){
                        if (oControl.getStatus() === "open") {
                            oControl.firePreviewClose();
                            // oControl.setStatus("closed");
                        } else {
                            oControl.firePreviewOpen();
                            // oControl.setStatus("open");

                        }
                    }
                });
                oRm.renderControl(this.button);
            }

            /// close outer div
            oRm.write("</div>"); // end of the complete control
        },

        // allow <b> in title and attributes
        onAfterRendering: function() {
            var self = this;
            $(this.getDomRef()).find(".searchResultListItem-main").on("click", function(){ self.fireNavigate(); });
            this._setSafeText(
                $(this.getDomRef()).find(".searchResultListItem-title, .searchResultListItem-attribute-value"));
        },

        _setSafeText: function(objs) {
            objs.each(function(i,d) {
                var $d = $(d);
                var s = $d.text().replace(/<b>/gi, '').replace(/<\/b>/gi, '');  /// Only those two HTML tags are allowed.
                if (s.indexOf('<') === -1) {
                    $d.html($d.text());
                }
            });
        }

    });


    sap.m.ListItemBase.extend("SearchResultListItemFooter", {
        // the control API:
        metadata : {
            properties : {
                showSpinner: {type : "boolean", defaultValue : false},
                text: "string"
            },
            aggregations: {
                content: {singularName: "content"} // default type is "sap.ui.core.Control", multiple is "true"
            },
            events: {
                showMore: {}
            }
        },

        // the part creating the HTML:
        renderer : function(oRm, oControl) { // static function, so use the given "oControl" instance instead of "this" in the renderer function

            var footertext = new sap.m.Label({
                text: oControl.getText()
            });
            footertext.addStyleClass('resultListMoreFooter');

            var dotted = new sap.ui.core.Icon({
                src: sap.ui.core.IconPool.getIconURI("sys-overflow")
            });

            this.busy = new sap.m.BusyIndicator({
                // visible: false
                size:"22px"
            });
            this.busy.addStyleClass('resultListBusyFooter');
            if (oControl.getShowSpinner() === false)
            {
                this.busy.addStyleClass('hidden');
            }


            oRm.write("<div");
            oRm.writeControlData(oControl);  // writes the Control ID
            oRm.addClass("resultListFooterContainer");
            oRm.writeClasses();
            oRm.write(">");

            oRm.write("<div class='resultListFooterContent'>");
            oRm.renderControl(dotted);
            oRm.renderControl(footertext);
            oRm.renderControl(this.busy);
            oRm.write("</div>");

            oRm.write("</div>");
        },

        // allow <b> in title and attributes
        onAfterRendering: function(oRm, oControl) {
            var self = this;
            var $item = $(this.getDomRef());
            $item.click(function(){
                self.setShowSpinner(true);
                self.fireShowMore();
                $item.off('click'); // Prevent multiple more clicks
            });
        }
    });


    sap.m.ListItemBase.extend("CategoryTreeItem", {
        // the control API:
        metadata : {
            properties : {
                name: "string",
                count: "int"
            },
            events: {
                clicked: {}
            }
        },

        // the part creating the HTML:
        renderer : function(oRm, oControl) { // static function, so use the given "oControl" instance instead of "this" in the renderer function

            oRm.write("<div");
            oRm.writeControlData(oControl);  // writes the Control ID
            oRm.addClass("resultListFooterContainer");
            oRm.writeClasses();
            oRm.write(">");

            oRm.write("<div class='resultListFooterContent'>");
            oRm.write("</div>");

            oRm.write("</div>");
        },

        // allow <b> in title and attributes
        onAfterRendering: function(oRm, oControl) {
            var self = this;
            var $item = $(this.getDomRef());
            $item.click(function(){
                self.fireClicked();
            });
        }
    });



}());
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview
 *
 * @version
 */
(function () {
    "use strict";
    /*global jQuery, sap */


    //////////  The ResultListItemDetail Control //////////
    sap.ui.core.Control.extend("SearchResultListItemDetail", {
        // the control API:
        metadata : {
            properties : {
                headerLabel: {type:"string", defaultValue:"More Information On"},
                itemTitle: "string",
                itemTitleUrl: "string",
                itemType: "string",
                status: "string",  // closed (default) or open
                itemData: "object",
                firstDetailAttribute: {type:"int", defaultValue:4},
                maxDetailAttributes: {type:"int", defaultValue:0}
            }
        },

        // the part creating the HTML:
        renderer : function(oRm, oControl) { // static function, so use the given "oControl" instance instead of "this" in the renderer function
            /// outer div
            oRm.write('<div');
            oRm.writeControlData(oControl);  // writes the Control ID
            oRm.addClass('searchResultListItemDetail');
            oRm.writeClasses();
            oRm.write('>');

            // header div
            // oRm.write('<div class="searchResultListItemDetail-header">');
            // var header = new sap.m.Label({text: oControl.getHeaderLabel()});
            // header.addStyleClass("searchResultListItemDetail-title");
            // oRm.renderControl(header);
            // oRm.write('</div>');

            // detail title and attributes (aka the detail)
            oRm.write('<div class="searchResultListItemDetail-content">');

            // header of the item
            oRm.write('<div class="searchResultListItemDetail-contentTitle">');

            // item type
            // if ( oControl.getItemType() )
            // {
            //     oRm.write('<div>');
            //     var type1 = new sap.m.Text({text: oControl.getItemType()});
            //     type1.addStyleClass("searchResultListItemDetail-type");
            //     oRm.renderControl(type1);
            //     oRm.write("</div>");
            // }


            // // item title
            // if (oControl.getItemTitle())
            // {
            //     oRm.write('<div>');
            //     var title = new sap.m.Link({text: oControl.getItemTitle(), href: oControl.getItemTitleUrl()});
            //     title.addStyleClass("searchResultListItemDetail-title");
            //     oRm.renderControl(title);
            //     oRm.write("</div>");
            // }


            // close header
            oRm.write("</div>");

            // detail attributes
            oRm.write('<div class="searchResultListItemDetail-attributes">');
            if (oControl.getItemData())
            {
                for (var i = oControl.getFirstDetailAttribute(); i <= oControl.getMaxDetailAttributes(); i++) {
                    var attrName = "attr"+i+"Name";
                    var attr = "attr"+i;
                    var labelText = oControl.getItemData()[attrName];
                    var valueText = oControl.getItemData()[attr];
                    if(labelText===undefined||valueText===undefined){
                        continue;
                    }
                    oRm.write('<div class="searchResultListItemDetail-attribute">');

                    var label = new sap.m.Label({text: labelText});
                    label.setTooltip((''+labelText).replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
                    label.addStyleClass("searchResultListItemDetail-attribute-label");
                    oRm.renderControl(label);

                    var value = new sap.m.Text({text: valueText});
                    value.setTooltip((''+valueText).replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
                    value.addStyleClass("searchResultListItemDetail-attribute-value");
                    oRm.renderControl(value);

                    // close detail content block
                    oRm.write("</div>");
                }
            }

            // close attributes div
            oRm.write("</div>");
            // close detail div
            oRm.write("</div>");
            // close outer div
            oRm.write("</div>"); // end of the complete control
        },

        // allow <b> in title and attributes
        onAfterRendering: function() {
            var self = this;
            // $(this.getDomRef()).find(".searchResultListItem-left").on("click", function(){ self.fireNavigate(); });
            this._setSafeText(
                $(this.getDomRef()).find(".searchResultListItemDetail-title, .searchResultListItemDetail-attribute-value"));
        },

        _setSafeText: function(objs) {
            objs.each(function(i,d) {
                var $d = $(d);
                var s = $d.text().replace(/<b>/gi, '').replace(/<\/b>/gi, '');  /// Only those two HTML tags are allowed.
                if (s.indexOf('<') === -1) {
                    $d.html($d.text());
                }
            });
        }


    });

}());
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, console, window */

    /**
     * @name "sap.ushell.renderers.fiori2.SearchFilter
     * @extends sap.ui.core.mvc.Controller
     * @public
     */
    sap.ui.controller("sap.ushell.renderers.fiori2.search.SearchSuggestions", {

        /**
         * SAPUI5 lifecycle hook.
         * @public
         */
        onInit: function () {
            var oModel = new sap.ui.model.json.JSONModel();
            this.getView().setModel(oModel, "suggestions");
            this.closeSuggestions();

            if (jQuery.device.is.phone || jQuery.device.is.tablet) {
                this.suggestionLimit = 4;
            } else {
                this.suggestionLimit = 5;
            }

            sap.ui.getCore().getEventBus().subscribe("searchDataSourceChange", this.dataSourceSelected, this);
            sap.ui.getCore().getEventBus().subscribe("searchSuggest", this.doSuggestion, this);
            sap.ui.getCore().getEventBus().subscribe("search", this.closeSuggestions, this);
        },

        onExit: function () {
            sap.ui.getCore().getEventBus().unsubscribe("searchDataSourceChange", this.dataSourceSelected, this);
            sap.ui.getCore().getEventBus().unsubscribe("searchSuggest", this.doSuggestion, this);
            sap.ui.getCore().getEventBus().unsubscribe("search", this.closeSuggestions, this);
        },

        closeSuggestions: function (sChannelId, sEventId, oData) {
            this.getView().getModel("suggestions").setData({
                items: [{visible: false, type: "app"},
                        {visible: false, type: "suggestion"},
                        {visible: false, type: "suggestion"},
                        {visible: false, type: "suggestion"},
                        {visible: false, type: "suggestion"},
                        {visible: false, type: "suggestion"},
                        {visible: false, type: "suggestion", isGroupFooter: true}],
                suggestionsVisible: false,
                visible: false
            });
        },

        dataSourceSelected: function (sChannelId, sEventId, oData) {
            if (this.getView().getModel("suggestions").getProperty("/visible")) {
                this.doSuggestion(null, null, {searchTerm: this.lastSearchTerm});
            }
        },

        onClickSuggestion: function (oEvent) {
            var oSuggestion = oEvent.getSource().getBindingContext("suggestions").getObject(),
                oDataSource,
                sSearchTerm,
                bCategorySuggested = false;

            if (oSuggestion.type === "app") {
                if (oSuggestion.targetURL) {
                    window.location = oSuggestion.targetURL;
                }
            } else {
                if (oSuggestion.data) {
                    sSearchTerm = oSuggestion.data.labelRaw;
                    oDataSource = oSuggestion.data.dataSource;
                    oDataSource.label = oDataSource.objectName.label;
                    bCategorySuggested = true;
                } else {
                    sSearchTerm = oSuggestion.labelRaw;
                    oDataSource = sap.ushell.Container.getService("Search").getDataSource();
                }
                sap.ui.getCore().getEventBus().publish("externalSearch", {
                    searchTerm: sSearchTerm,
                    dataSource: oDataSource,
                    categorySuggested: bCategorySuggested
                });
            }
        },

        doSuggestion: function (sChannelId, sEventId, oData) {
            var oFilter = new sap.ui.model.Filter("visible", sap.ui.model.FilterOperator.EQ, true),
                oModel = this.getView().getModel("suggestions"),
                appQuery,
                query;

            // do not trigger requests twice if view is not visible at the moment
            if (oData.activeViews && oData.activeViews.indexOf(this.getView().getId()) === -1) {
                return;
            }

            this.lastSearchTerm = oData.searchTerm;

            if (oData.searchTerm.length === 0) {
                this.closeSuggestions();
                return;
            }

            oModel.setProperty("/visible", true);

            appQuery = sap.ushell.Container.getService("Search").queryApplications(oData.searchTerm, jQuery.proxy(function (resultset) {
                var result = resultset.getElements();

                if (resultset.searchTerm !== this.lastSearchTerm) {
                    return;
                }

                if (result.length > 0) {
                    oModel.setProperty("/items/0", {
                        label: result[0].label,
                        icon: result[0].icon,
                        targetURL: result[0].targetURL,
                        app: result[0],
                        visible: true,
                        type: "app"
                    });
                } else {
                    oModel.setProperty("/items/0/visible", false);
                }

                this.getView().getContent()[0].getBinding("items").filter([oFilter]);
            }, this));

            query = sap.ushell.Container.getService("Search").querySuggestions(oData.searchTerm, jQuery.proxy(function (resultset) {
                var suggestions = resultset.getElements(),
                    oSuggestions = [],
                    i = 1;

                if (resultset.searchTerm !== this.lastSearchTerm) {
                    return;
                }

                if (suggestions.length > 0) {
                    oSuggestions = this.buildSuggestions(suggestions);
                    oModel.setProperty("/suggestionsVisible", true);
                } else {
                    oModel.setProperty("/suggestionsVisible", false);
                }

                for (i; i <= this.suggestionLimit; i = i + 1) {
                    if (oSuggestions[i - 1]) {
                        oModel.setProperty("/items/" + i, oSuggestions[i - 1]);
                    } else {
                        oModel.setProperty("/items/" + i + "/visible", false);
                    }
                }

                if (oSuggestions.length > 0) {
                    oModel.setProperty("/items/" + (i + 1), {visible: true, type: "suggestion", isGroupFooter: true});
                } else {
                    oModel.setProperty("/items/" + (i + 1) + "/visible", false);
                }

                this.getView().getContent()[0].getBinding("items").filter([oFilter]);
            }, this));
        },

        buildSuggestions: function (aSuggestions) {
            var oResult = {};

            jQuery.each(aSuggestions, function (i, value) {

                if (value.filter.attribute !== "$$AllAttributes$$") {
                    return;
                }

                if (!oResult[value.labelRaw]) {
                    oResult[value.labelRaw] = value;
                    oResult[value.labelRaw].categories = [];
                    oResult[value.labelRaw].visible = true;
                    oResult[value.labelRaw].type = "suggestion";
                }

                if (oResult[value.labelRaw].label.length === 0) {
                    oResult[value.labelRaw].label = value.labelRaw;
                }

                if (value.dataSource.getObjectName().value !== "$$AllDataSources$$") {
                    oResult[value.labelRaw].categories.push({
                        label: value.dataSource.getObjectName().label,
                        data: value
                    });
                }
            });

            return jQuery.map(oResult, function (k, v) {
                return [k];
            });
        }
    });
}());

jQuery.sap.declare('sap.ushell.library-all');
jQuery.sap.declare('sap.ushell.components.factsheet.views.ThingViewer.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.components.perf.monitor'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.launchpad.catalog.Catalog.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.launchpad.group_list.GroupList.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.ResultFilterInfo.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.ResultFilterInfo.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchFilter.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchFilter.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchLayout'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchModel'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchResultListItem'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchResultListItemDetail'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchSuggestions.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.ushell.System') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The <code>sap.ushell.System</code> object with related functions.
 */

(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.System");

    // "private" methods (static) without need to access properties -------------


    // "public class" -----------------------------------------------------------

    /**
     * Constructs a new representation (wrapper) of the system object as loaded by the
     * startup service.
     *
     * @param {object} oData
     *    the result of the startup service call
     * @class A representation of a system
     * @constructor
     * @since 1.15.0
     */
    sap.ushell.System = function (oData) {

        // BEWARE: constructor code below!

        // "private" or hidden methods --------------------------------------------

        // "public" methods -------------------------------------------------------

        /**
         * Returns this system's alias.
         *
         * @returns {string}
         *   this system's alias
         * @since 1.15.0
         */
        this.getAlias = function () {
            return oData.alias;
        };

        /**
         * Returns this system's base URL.
         *
         * @returns {string}
         *   this system's base URL
         * @since 1.15.0
         */
        this.getBaseUrl = function () {
            return oData.baseUrl;
        };

        /**
         * Returns this system's client.
         *
         * @returns {string}
         *   this system's client
         * @since 1.15.0
         */
        this.getClient = function () {
            return oData.client;
        };

        /**
         * Returns this system's name.
         *
         * @returns {string}
         *   this system's name
         * @since 1.15.0
         */
        this.getName = function () {
            return oData.system;
        };

        /**
         * Returns this system's platform.
         *
         * @returns {string}
         *   this system's platform ("abap", "hana" etc.)
         * @since 1.15.0
         */
        this.getPlatform = function () {
            return oData.platform;
        };

        /**
         * Adjusts the given URL so that it will be passed to this system.
         *
         * @param {string} sUrl
         *      the URL (which must be server-absolute)
         * @returns {string}
         *      the adjusted URL
         * @since 1.15.0
         */
        this.adjustUrl = function (sUrl) {
            /*jslint regexp:true */
            if (sUrl.indexOf('/') !== 0 || sUrl === '/') {
                throw new Error("Invalid URL: " + sUrl);
            }
            if (oData.baseUrl) {
                sUrl = oData.baseUrl.replace(/\/$/, "") + sUrl;
//            } else if (oData.alias) {
//                sUrl = sUrl.replace(/(\/.*?)(\/|$)/, "$1;s=" + oData.alias + "$2");
            }
            return sUrl;
        };

        // constructor code -------------------------------------------------------

        // "public" methods (static) ------------------------------------------------

    };

}());

}; // end of sap/ushell/System.js
if ( !jQuery.sap.isDeclared('sap.ushell.User') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The <code>sap.ushell.User</code> object with related functions.
 */

(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.User");

    // "private" methods (static) without need to access properties -------------

    // "public class" -----------------------------------------------------------

    /**
     * Constructs a new representation (wrapper) of the user object as loaded by the
     * startup service.
     *
     * @param {object} oData
     *    the result of the startup service call
     * @class A representation of a user
     * @constructor
     * @since 1.15.0
     */
    sap.ushell.User = function (oData) {

        // BEWARE: constructor code below!

        // "private" or hidden methods --------------------------------------------

        // "public" methods -------------------------------------------------------

        /**
         * Returns this user's email address.
         *
         * @returns {string}
         *   this user's email address
         * @since 1.15.0
         */
        this.getEmail = function () {
            return oData.email;
        };

        /**
         * Returns this user's first name.
         *
         * @returns {string}
         *   this user's first name
         * @since 1.15.0
         */
        this.getFirstName = function () {
            return oData.firstName;
        };

        /**
         * Returns this user's full name.
         *
         * @returns {string}
         *   this user's full name
         * @since 1.15.0
         */
        this.getFullName = function () {
            return oData.fullName;
        };

        /**
         * Returns this user's ID.
         *
         * @returns {string}
         *   this user's ID
         * @since 1.15.0
         */
        this.getId = function () {
            return oData.id;
        };

        /**
         * Returns this user's language.
         *
         * @returns {string}
         *   this user's language
         * @since 1.15.0
         */
        this.getLanguage = function () {
            return oData.language;
        };

        /**
         * Returns this user's language tag as defined by this
         * <a href="http://tools.ietf.org/html/bcp47">spec</a>.
         *
         * @returns {string}
         *   this user's language tag according to BCP 47
         * @since 1.15.0
         */
        this.getLanguageBcp47 = function () {
            return oData.languageBcp47;
        };

        /**
         * Returns this user's last name.
         *
         * @returns {string}
         *   this user's last name
         * @since 1.15.0
         */
        this.getLastName = function () {
            return oData.lastName;
        };

        /**
         * Returns <code>true</code> if SAP Jam is active for this user.
         *
         * @returns {boolean}
         *   <code>true</code> if SAP Jam is active for this user
         * @since 1.15.0
         */
        this.isJamActive = function () {
            return oData.isJamActive === true;
        };
      // constructor code -------------------------------------------------------

      // "public" methods (static) ------------------------------------------------

    };

}());

}; // end of sap/ushell/User.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.Component') ) {
//define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.ushell.components.factsheet.Component");
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained


//new Component
sap.ui.core.UIComponent.extend("factsheet.Component", {

    oMainView : null,

    // use inline declaration instead of component.json to save 1 round trip
    metadata : {
        version : "1.16.3",
        library : "factsheet",
        includes : [ "css/custom.css" ],
        dependencies : {
            libs : [ "sap.m" ],
            components : []
        },
    },

    createContent : function() {
        var oComponentData = this.getComponentData();
        // startup parameters are passed as a property bag as componentData.startupParameters
        var oStartupParameters = ( oComponentData && oComponentData.startupParameters) || {};
        // factsheet component needs 100% height otherwise it does not work
        this.oMainView = sap.ui.view({
            type: sap.ui.core.mvc.ViewType.JS,
            viewName:  "sap.ushell.components.factsheet.views.ThingViewer",
            viewData: oStartupParameters,
            height: "100%"
        }).addStyleClass("ThingViewer");

        /* *StartupParameters* (2)   */
        /* http://localhost:8080/ushell/test-resources/sap/ushell/shells/sandbox/fioriSandbox.html#UI2Fiori2SampleApps-appnavsample?AAA=BBB&DEF=HIJ */
        /* results in   { AAA : [ "BBB"], DEF: ["HIJ"] }  */
//      var oComponentData = this.getComponentData();
//      console.log("app was started with parameters " + JSON.stringify(oComponentData));

//      oModel.setData( this.createStartupParametersData(oComponentData));
//      this.oMainView.setModel(oModel, "startupParameters");

        return this.oMainView;
    },

//  createStartupParametersData : function(oComponentData) {
//  // convert the raw componentData into a model that is consumed by the UI
//  var aParameters = [];
//  if (oComponentData) {
//  for (sKey in oComponentData) {
//  aParameters.push({
//  key : sKey,
//  value : oComponentData[sKey].toString()
//  });
//  }
//  }
//  return {
//  "parameters" : aParameters
//  };
//  },

    exit : function() {
        window.console.log("On Exit of factsheet Component.js called : this.getView().getId()" + this.getId() );
    },

    // this event does not exist !?
    onExit : function() {
        window.console.log("On Exit of factsheet Component.js called : this.getView().getId()" + this.getId() );
    }
});
}; // end of sap/ushell/components/factsheet/Component.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.annotation.Mapping') ) {
//Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview This file contains an annotation parser for factsheets.
 */

(function () {
    "use strict";
    /*global sap, jQuery, window, XMLHttpRequest, ActiveXObject, XPathResult */

    jQuery.sap.declare("sap.ushell.components.factsheet.annotation.Mapping");
    var cbesh;
    if (typeof cbesh === "undefined") {
        cbesh = sap.ushell.components.factsheet;
    }
    if (!cbesh) {
        cbesh = {};
    }
    if (!cbesh.annotation) {
        cbesh.annotation = {};
    }
    cbesh.annotation.Mapping = {};
    cbesh.annotation.Mapping.initialized = [];

    cbesh.annotation.Mapping.parse = function (oMetadata, sAnnotationUri) {
        var xPath = {}, getHttpResponseXML, getAllPropertiesMetadata, setEdmTypes, getEdmType, getPropertyValueAttributes,
            replaceWithAlias, getSimpleNodeValue, getPropertyValue, getPropertyValues, getApplyFunctions, isNavProperty,
            sAlias, mappingList = {}, xmlDoc, schemaNodes, oSchema = {}, i, schemaNode, oAlias = {},
            oAnnotations = {}, sAnnoNameSpace = "", refNodes, refNode, aliasNodes, aliasNode, annoNodes, annoNode,
            termNodes, oTerms, nodeIndex, termNode, sTermType, oMetadataProperties, annotationNodes, j, annotationNode,
            annotationTarget, annotationNamespace, annotation, propertyAnnotation, propertyAnnotationNodes,
            propertyAnnotationNode, nodeIndexValue, sTermValue, nodeIndexAnnotation, targetAnnotation, annotationQualifier,
            annotationTerm, valueAnnotation, expandNodes, expandNode, path, pathValues, expandNodesApplFunc;
        if (window.ActiveXObject) {//IE
            xPath = {
                setNameSpace: function (outNode) {
                    outNode.setProperty("SelectionNamespaces", 'xmlns:edmx="http://docs.oasis-open.org/odata/ns/edmx" xmlns:d="http://docs.oasis-open.org/odata/ns/edm"');
                    outNode.setProperty("SelectionLanguage", "XPath");
                    return outNode;
                },
                selectNodes: function (outNode, xPath, inNode) {
                    return inNode.selectNodes(xPath);
                },
                nextNode: function (node) {
                    return node.nextNode();
                },
                getNodeText: function (node) {
                    return node.text;
                }
            };
        } else {//Chrome, Firefox, Opera, etc.
            xPath = {
                setNameSpace: function (outNode) { return outNode; },
                nsResolver: function (prefix) {
                    var ns = {"edmx": "http://docs.oasis-open.org/odata/ns/edmx", "d": "http://docs.oasis-open.org/odata/ns/edm"};
                    return ns[prefix] || null;
                },
                selectNodes: function (outNode, sPath, inNode) {
                    var xmlNodes = outNode.evaluate(sPath, inNode, this.nsResolver, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
                    xmlNodes.length = xmlNodes.snapshotLength;
                    return xmlNodes;
                },
                nextNode: function (node, item) { return node.snapshotItem(item); },
                getNodeText: function (node) { return node.textContent; }
            };
        }
        getHttpResponseXML = function (uri) {
            var oXHRResponse = jQuery.sap.sjax({url: uri});
            if (oXHRResponse.success) {
                return oXHRResponse.data;
            }
        };
        getAllPropertiesMetadata = function (oMetadata) {
            var oMetadataSchema = {}, oPropertyTypes = {}, oPropertyExtensions = {}, bPropertyExtensions = false,
                i, sNamespace, aEntityTypes, aComplexTypes, oEntityType = {}, j, oProperties = {}, oExtensions = {},
                bExtensions = false, oProperty, l, k, oComplexTypeProp, sPropertyName, sType, oPropExtension, p,
                oReturn;
            for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                oMetadataSchema = oMetadata.dataServices.schema[i];
                if (oMetadataSchema.entityType) {
                    sNamespace = oMetadataSchema.namespace;
                    aEntityTypes = oMetadataSchema.entityType;
                    aComplexTypes = oMetadataSchema.complexType;
                    for (j in aEntityTypes) {
                        oEntityType = aEntityTypes[j];
                        oExtensions = {};
                        if (oEntityType.hasStream && oEntityType.hasStream === "true") {
                            continue;
                        }
                        for (k in oEntityType.property) {
                            oProperty = oEntityType.property[k];
                            if (oProperty.type.substring(0, sNamespace.length) === sNamespace) {
                                for (l in aComplexTypes) {
                                    if (aComplexTypes[l].name === oProperty.type.substring(sNamespace.length + 1)) {
                                        for (k in aComplexTypes[l].property) {
                                            oComplexTypeProp = aComplexTypes[l].property[k];
                                            oProperties[aComplexTypes[l].name + "/" + oComplexTypeProp.name] = oComplexTypeProp.type;
                                        }
                                    }
                                }
                            } else {
                                sPropertyName = oProperty.name;
                                sType = oProperty.type;
                                for (p in oProperty.extensions) {
                                    oPropExtension = oProperty.extensions[p];
                                    if ((oPropExtension.name === "display-format") && (oPropExtension.value === "Date")) {
                                        sType = "Edm.Date";
                                    } else {
                                        bExtensions = true;
                                        if (!oExtensions[sPropertyName]) {
                                            oExtensions[sPropertyName] = {};
                                        }
                                        if (oPropExtension.namespace && !oExtensions[sPropertyName][oPropExtension.namespace]) {
                                            oExtensions[sPropertyName][oPropExtension.namespace] = {};
                                        }
                                        oExtensions[sPropertyName][oPropExtension.namespace][oPropExtension.name] = oPropExtension.value;
                                    }
                                }
                                oProperties[sPropertyName] = sType;
                            }
                        }
                        if (!oPropertyTypes[sNamespace + "." + oEntityType.name]) {
                            oPropertyTypes[sNamespace + "." + oEntityType.name] = {};
                        }
                        oPropertyTypes[sNamespace + "." + oEntityType.name] = oProperties;
                        if (bExtensions) {
                            if (!oPropertyExtensions[sNamespace + "." + oEntityType.name]) {
                                bPropertyExtensions = true;
                            }
                            oPropertyExtensions[sNamespace + "." + oEntityType.name] = {};
                            oPropertyExtensions[sNamespace + "." + oEntityType.name] = oExtensions;
                        }
                    }
                }
            }
            if (bPropertyExtensions) {
                oReturn = { types: oPropertyTypes, extensions: oPropertyExtensions };
            } else {
                oReturn = { types: oPropertyTypes };
            }
            return oReturn;
        };
        setEdmTypes = function (aPropertyValues, oProperties, sTarget, oSchema) {
            var pValueIndex, oPropertyValue, sEdmType = '';
            for (pValueIndex in aPropertyValues) {
                if (aPropertyValues[pValueIndex]) {
                    oPropertyValue = aPropertyValues[pValueIndex];
                    if (oPropertyValue.Value && oPropertyValue.Value.Path) {
                        sEdmType = getEdmType(oPropertyValue.Value.Path, oProperties, sTarget, oSchema);
                        if (sEdmType) {
                            aPropertyValues[pValueIndex].EdmType = sEdmType;
                        }
                        continue;
                    }
                    if (oPropertyValue.Path) {
                        sEdmType = getEdmType(oPropertyValue.Path, oProperties, sTarget, oSchema);
                        if (sEdmType) {
                            aPropertyValues[pValueIndex].EdmType = sEdmType;
                        }
                        continue;
                    }
                    if (oPropertyValue.Facets) {
                        aPropertyValues[pValueIndex].Facets = setEdmTypes(oPropertyValue.Facets, oProperties, sTarget, oSchema);
                        continue;
                    }
                    if (oPropertyValue.Data) {
                        aPropertyValues[pValueIndex].Data = setEdmTypes(oPropertyValue.Data, oProperties, sTarget, oSchema);
                        continue;
                    }
                    if (pValueIndex === "Data") {
                        aPropertyValues.Data = setEdmTypes(oPropertyValue, oProperties, sTarget, oSchema);
                        continue;
                    }
                    if (oPropertyValue.Value && oPropertyValue.Value.Apply) {
                        aPropertyValues[pValueIndex].Value.Apply.Parameters = setEdmTypes(oPropertyValue.Value.Apply.Parameters, oProperties, sTarget, oSchema);
                        continue;
                    }
                    if (oPropertyValue.Value && oPropertyValue.Type && (oPropertyValue.Type === "Path")) {
                        sEdmType = getEdmType(oPropertyValue.Value, oProperties, sTarget, oSchema);
                        if (sEdmType) {
                            aPropertyValues[pValueIndex].EdmType = sEdmType;
                        }
                    }
                }
            }
            return aPropertyValues;
        };
        getEdmType = function (sPath, oProperties, sTarget, oSchema) {
            var pIndex;
            if ((sPath.charAt(0) === "@") && (sPath.indexOf(oSchema.Alias) === 1)) {
                sPath = sPath.slice(oSchema.Alias.length + 2);
            }
            if (sPath.indexOf("/") >= 0) {
                if (oProperties[sPath.slice(0, sPath.indexOf("/"))]) {
                    sTarget = sPath.slice(0, sPath.indexOf("/"));
                    sPath = sPath.slice(sPath.indexOf("/") + 1);
                }
            }
            for (pIndex in oProperties[sTarget]) {
                if (sPath === pIndex) {
                    return oProperties[sTarget][pIndex];
                }
            }
        };
        getPropertyValueAttributes = function (documentNode) {
            var attrName = "", attrValue = "", i, propertyValueAttributes = {};
            for (i = 0; i < documentNode.attributes.length; i += 1) {
                if ((documentNode.attributes[i].name !== "Property") && (documentNode.attributes[i].name !== "Term")) {
                    attrName = documentNode.attributes[i].name;
                    attrValue = documentNode.attributes[i].value;
                }
            }
            if (attrName.length > 0) {
                propertyValueAttributes[attrName] = replaceWithAlias(attrValue);
            }
            return propertyValueAttributes;
        };
        getSimpleNodeValue = function (xmlDoc, documentNode) {
            var oValue = {}, stringValueNodes, stringValueNode, pathValueNodes, pathValueNode, applyValueNodes, applyValueNode;
            if (documentNode.hasChildNodes()) {
                stringValueNodes = xPath.selectNodes(xmlDoc, "./d:String", documentNode);
                if (stringValueNodes.length > 0) {
                    stringValueNode = xPath.nextNode(stringValueNodes, 0);
                    oValue["String"] = xPath.getNodeText(stringValueNode);
                } else {
                    pathValueNodes = xPath.selectNodes(xmlDoc, "./d:Path", documentNode);
                    if (pathValueNodes.length > 0) {
                        pathValueNode = xPath.nextNode(pathValueNodes, 0);
                        oValue["Path"] = xPath.getNodeText(pathValueNode);
                    } else {
                        applyValueNodes = xPath.selectNodes(xmlDoc, "./d:Apply", documentNode);
                        if (applyValueNodes.length > 0) {
                            applyValueNode = xPath.nextNode(applyValueNodes, 0);
                            oValue["Apply"] = getApplyFunctions(xmlDoc, applyValueNode);
                        }
                    }
                }
            }
            return oValue;
        };
        getPropertyValue = function (xmlDoc, documentNode, target) {
            var propertyValue = {}, recordNodes, recordNodeCnt, nodeIndex, recordNode, propertyValues, urlValueNodes, urlValueNode,
                pathNode, oPath = {}, annotationNodes, annotationNode, nodeIndexValue, termValue, collectionNodes;
            if (documentNode.hasChildNodes()) {
                recordNodes = xPath.selectNodes(xmlDoc, "./d:Record | ./d:Collection/d:Record | ./d:Collection/d:If/d:Record", documentNode);
                if (recordNodes.length) {
                    recordNodeCnt = 0;
                    for (nodeIndex = 0; nodeIndex < recordNodes.length; nodeIndex += 1) {
                        recordNode = xPath.nextNode(recordNodes, nodeIndex);
                        propertyValues = getPropertyValues(xmlDoc, recordNode, target);
                        if (recordNode.getAttribute("Type")) {
                            propertyValues["RecordType"] = replaceWithAlias(recordNode.getAttribute("Type"));
                        }
                        if (recordNodeCnt === 0) {
                            if (recordNode.nextElementSibling || (recordNode.parentNode.nodeName === "Collection") || (recordNode.parentNode.nodeName === "If")) {
                                propertyValue = [];
                                propertyValue.push(propertyValues);
                            } else {
                                propertyValue = propertyValues;
                            }
                        } else {
                            propertyValue.push(propertyValues);
                        }
                        recordNodeCnt += 1;
                    }
                } else {
                    urlValueNodes = xPath.selectNodes(xmlDoc, "./d:UrlRef", documentNode);
                    if (urlValueNodes.length > 0) {
                        for (nodeIndex = 0; nodeIndex < urlValueNodes.length; nodeIndex += 1) {
                            urlValueNode = xPath.nextNode(urlValueNodes, nodeIndex);
                            propertyValue["UrlRef"] = getSimpleNodeValue(xmlDoc, urlValueNode);              		
                        }
                    } else {
                        urlValueNodes = xPath.selectNodes(xmlDoc, "./d:Url", documentNode);
                        if (urlValueNodes.length > 0) {
                            for (nodeIndex = 0; nodeIndex < urlValueNodes.length; nodeIndex += 1) {
                                urlValueNode = xPath.nextNode(urlValueNodes, nodeIndex);
                                propertyValue["Url"] = getSimpleNodeValue(xmlDoc, urlValueNode);
                            }
                        } else {
                            collectionNodes = xPath.selectNodes(xmlDoc, "./d:Collection/d:AnnotationPath | ./d:Collection/d:PropertyPath", documentNode);
                            if (collectionNodes.length > 0) {
                                propertyValue = [];
                                for (nodeIndex = 0; nodeIndex < collectionNodes.length; nodeIndex += 1) {
                                    pathNode = xPath.nextNode(collectionNodes, nodeIndex);
                                    oPath = {};
                                    oPath[pathNode.nodeName] = pathNode.textContent;
                                    propertyValue.push(oPath);
                                }
                            } else {
                                propertyValue = getPropertyValueAttributes(documentNode);
                                annotationNodes = xPath.selectNodes(xmlDoc, "./d:Annotation", documentNode);
                                annotationNode = {};
                                for (nodeIndexValue = 0; nodeIndexValue < annotationNodes.length; nodeIndexValue += 1) {
                                    annotationNode = xPath.nextNode(annotationNodes, nodeIndexValue);
                                    if (annotationNode.hasChildNodes() === false) {
                                        termValue = replaceWithAlias(annotationNode.getAttribute("Term"));
                                        propertyValue[termValue] = getPropertyValueAttributes(annotationNode);
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                propertyValue = getPropertyValueAttributes(documentNode);
            }
            return propertyValue;
        };
        getPropertyValues = function (xmlDoc, documentNode, target) {
            var properties = {}, annotationNode = {}, annotationNodes, nodeIndexValue, termValue, propertyValueNodes, nodeIndex,
                propertyValueNode, propertyName, applyNodes, applyNode, applyNodeIndex;
            annotationNodes = xPath.selectNodes(xmlDoc, "./d:Annotation", documentNode);
            for (nodeIndexValue = 0; nodeIndexValue < annotationNodes.length; nodeIndexValue += 1) {
                annotationNode = xPath.nextNode(annotationNodes, nodeIndexValue);
                if (annotationNode.hasChildNodes() === false) {
                    termValue = replaceWithAlias(annotationNode.getAttribute("Term"));
                    properties[termValue] = getPropertyValueAttributes(annotationNode);
                }
            }
            propertyValueNodes = xPath.selectNodes(xmlDoc, "./d:PropertyValue", documentNode);
            if (propertyValueNodes.length > 0) {
                for (nodeIndex = 0; nodeIndex < propertyValueNodes.length; nodeIndex += 1) {
                    propertyValueNode = xPath.nextNode(propertyValueNodes, nodeIndex);
                    propertyName = propertyValueNode.getAttribute("Property");
                    properties[propertyName] = getPropertyValue(xmlDoc, propertyValueNode, target);
                    applyNodes = xPath.selectNodes(xmlDoc, "./d:Apply", propertyValueNode);
                    applyNode = null;
                    for (applyNodeIndex = 0; applyNodeIndex < applyNodes.length; applyNodeIndex += 1) {
                        applyNode = xPath.nextNode(applyNodes, applyNodeIndex);
                        if (applyNode) {
                            properties[propertyName] = {};
                            properties[propertyName]['Apply'] = getApplyFunctions(xmlDoc, applyNode);
                        }
                    }
                }
            } else {
                properties = getPropertyValue(xmlDoc, documentNode, target);

            }
            return properties;
        };
        getApplyFunctions = function (xmlDoc, applyNode) {
            var apply = {}, parameterNodes, paraNode = null, parameters = [], i;
            parameterNodes = xPath.selectNodes(xmlDoc, "./d:*", applyNode);
            for (i = 0; i < parameterNodes.length; i += 1) {
                paraNode = xPath.nextNode(parameterNodes, i);
                switch (paraNode.nodeName) {
                case "Apply":
                    parameters.push({"Type": "Apply", "Value": getApplyFunctions(xmlDoc, paraNode)});
                    break;
                case "LabeledElement":
                    parameters.push({"Name": paraNode.getAttribute("Name"), "Value": getSimpleNodeValue(xmlDoc, paraNode)});
                    break;
                default:
                    parameters.push({"Type": paraNode.nodeName, "Value": xPath.getNodeText(paraNode)});
                    break;
                }
            }
            apply['Name'] = applyNode.getAttribute('Function');
            apply['Parameters'] = parameters;
            return apply;
        };
        isNavProperty = function (sEntityType, sPathValue, metadata) {
            var oMetadataSchema, i, namespace, aEntityTypes, j, k;
            for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                oMetadataSchema = oMetadata.dataServices.schema[i];
                if (oMetadataSchema.entityType) {
                    namespace = oMetadataSchema.namespace + ".";
                    aEntityTypes = oMetadataSchema.entityType;
                    for (k = aEntityTypes.length - 1; k >= 0; k -= 1) {
                        if (namespace + aEntityTypes[k].name === sEntityType && aEntityTypes[k].navigationProperty) {
                            for (j = 0; j < aEntityTypes[k].navigationProperty.length; j += 1) {
                                if (aEntityTypes[k].navigationProperty[j].name === sPathValue) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
            return false;
        };

        replaceWithAlias = function (sValue) {
            for (sAlias in oAlias) {
                if (sValue.indexOf(sAlias + ".") >= 0) {
                    sValue = sValue.replace(sAlias + ".", oAlias[sAlias] + ".");
                    return sValue;
                }
            }
            return sValue;
        };
        if (this.initialized[sAnnotationUri]) {
            return this.initialized[sAnnotationUri];
        }
        // Read Annotation File
        xmlDoc = getHttpResponseXML(sAnnotationUri);
        //Set XPath namespace
        xmlDoc = xPath.setNameSpace(xmlDoc);
        //Schema Alias
        schemaNodes = xPath.selectNodes(xmlDoc, "//d:Schema", xmlDoc);
        for (i = 0; i < schemaNodes.length; i += 1) {
            schemaNode = xPath.nextNode(schemaNodes, i);
            oSchema.Alias = schemaNode.getAttribute("Alias");
            oSchema.Namespace = schemaNode.getAttribute("Namespace");
        }
        //Alias nodes
        refNodes = xPath.selectNodes(xmlDoc, "//edmx:Reference", xmlDoc);
        for (i = 0; i < refNodes.length; i += 1) {
            refNode = xPath.nextNode(refNodes, i);
            aliasNodes = xPath.selectNodes(xmlDoc, "./edmx:Include", refNode);
            if (aliasNodes && aliasNodes.length > 0) {
                aliasNode = xPath.nextNode(aliasNodes, 0);
                if (aliasNode.getAttribute("Alias")) {
                    oAlias[aliasNode.getAttribute("Alias")] = aliasNode.getAttribute("Namespace");
                } else {
                    oAlias[aliasNode.getAttribute("Namespace")] = aliasNode.getAttribute("Namespace");
                }
            }
            annoNodes = xPath.selectNodes(xmlDoc, "./edmx:IncludeAnnotations", refNode);
            if (annoNodes.length > 0) {
                for (j = 0; j < annoNodes.length; j += 1) {
                    annoNode = xPath.nextNode(annoNodes, j);
                    if (annoNode.getAttribute("TargetNamespace")) {
                        sAnnoNameSpace = annoNode.getAttribute("TargetNamespace");
                        if (!oAnnotations[sAnnoNameSpace]) {
                            oAnnotations[sAnnoNameSpace] = {};
                        }
                        oAnnotations[sAnnoNameSpace][annoNode.getAttribute("TermNamespace")] = refNode.getAttribute("Uri");
                    } else {
                        oAnnotations[annoNode.getAttribute("TermNamespace")] = refNode.getAttribute("Uri");
                    }
                }
            }
        }
        if (oAnnotations) {
            mappingList.annotationReferences = oAnnotations;
        }
        mappingList.aliasDefinitions = oAlias;
        //Term nodes
        termNodes = xPath.selectNodes(xmlDoc, "//d:Term", xmlDoc);
        if (termNodes.length > 0) {
            oTerms = {};
            for (nodeIndex = 0; nodeIndex < termNodes.length; nodeIndex += 1) {
                termNode = xPath.nextNode(termNodes, nodeIndex);
                sTermType = replaceWithAlias(termNode.getAttribute("Type"));
                oTerms["@" + oSchema.Alias + "." + termNode.getAttribute("Name")] = sTermType;
            }
            mappingList.termDefinitions = oTerms;
        }
        //Metadata information of all properties
        oMetadataProperties = getAllPropertiesMetadata(oMetadata);
        if (oMetadataProperties.extensions) {
            mappingList.propertyExtensions = oMetadataProperties.extensions;
        }
        //Annotations
        annotationNodes = xPath.selectNodes(xmlDoc, "//d:Annotations ", xmlDoc);
        for (nodeIndex = 0; nodeIndex < annotationNodes.length; nodeIndex += 1) {
            annotationNode = xPath.nextNode(annotationNodes, nodeIndex);
            if (annotationNode.hasChildNodes() === false) {
                continue;
            }
            annotationTarget = annotationNode.getAttribute("Target");
            annotationNamespace = annotationTarget.split(".")[0];
            if (annotationNamespace && oAlias[annotationNamespace]) {
                annotationTarget = annotationTarget.replace(new RegExp(annotationNamespace, ""), oAlias[annotationNamespace]);
            }
            annotation = annotationTarget;
            propertyAnnotation = null;
            if (annotationTarget.indexOf("/") > 0) {
                annotation = annotationTarget.split("/")[0];
                propertyAnnotation = annotationTarget.replace(annotation + "/", "");
            }
            if (!mappingList[annotation]) {
                mappingList[annotation] = {};
            }
            // --- Value annotation of complex types. ---
            if (propertyAnnotation) {
                if (!mappingList.propertyAnnotations) {
                    mappingList.propertyAnnotations = {};
                }
                if (!mappingList.propertyAnnotations[annotation]) {
                    mappingList.propertyAnnotations[annotation] = {};
                }
                mappingList.propertyAnnotations[annotation][propertyAnnotation] = {};
                propertyAnnotationNodes = xPath.selectNodes(xmlDoc, "./d:Annotation", annotationNode);
                for (nodeIndexValue = 0; nodeIndexValue < propertyAnnotationNodes.length; nodeIndexValue += 1) {
                    propertyAnnotationNode = xPath.nextNode(propertyAnnotationNodes, nodeIndexValue);
                    if (propertyAnnotationNode.hasChildNodes() === false) {
                        sTermValue = replaceWithAlias(propertyAnnotationNode.getAttribute("Term"));
                        mappingList.propertyAnnotations[annotation][propertyAnnotation][sTermValue] = getPropertyValueAttributes(propertyAnnotationNode);
                    }
                }
                // --- Annotations ---
            } else {
                targetAnnotation = annotation.replace(oAlias[annotationNamespace], annotationNamespace);
                propertyAnnotationNodes = xPath.selectNodes(xmlDoc, "./d:Annotation", annotationNode);
                for (nodeIndexAnnotation = 0; nodeIndexAnnotation < propertyAnnotationNodes.length; nodeIndexAnnotation += 1) {
                    propertyAnnotationNode = xPath.nextNode(propertyAnnotationNodes, nodeIndexAnnotation);
                    annotationQualifier = propertyAnnotationNode.getAttribute("Qualifier");
                    annotationTerm = replaceWithAlias(propertyAnnotationNode.getAttribute("Term"));
                    if (annotationQualifier) {
                        annotationTerm += "#" + annotationQualifier;
                    }
                    valueAnnotation = getPropertyValue(xmlDoc, propertyAnnotationNode, targetAnnotation);
                    valueAnnotation = setEdmTypes(valueAnnotation, oMetadataProperties.types, annotation, oSchema);
                    mappingList[annotation][annotationTerm] = valueAnnotation;
                }
                // --- Setup of Expand nodes. ---                         
                expandNodes = xPath.selectNodes(xmlDoc, "//d:Annotations[contains(@Target, '" + targetAnnotation + "')]//d:PropertyValue[contains(@Path, '/')]//@Path", xmlDoc);
                for (i = 0; i < expandNodes.length; i += 1) {
                    expandNode = xPath.nextNode(expandNodes, i);
                    path = expandNode.value;
                    if (mappingList.propertyAnnotations) {
                        if (mappingList.propertyAnnotations[annotation]) {
                            if (mappingList.propertyAnnotations[annotation][path]) {
                                continue;
                            }
                        }
                    }
                    pathValues = path.split('/');
                    if (isNavProperty(annotation, pathValues[0], oMetadata)) {
                        if (!mappingList.expand) {
                            mappingList.expand = {};
                        }
                        if (!mappingList.expand[annotation]) {
                            mappingList.expand[annotation] = {};
                        }
                        mappingList.expand[annotation][pathValues[0]] = pathValues[0];
                    }
                }
                expandNodesApplFunc = xPath.selectNodes(xmlDoc, "//d:Annotations[contains(@Target, '" + targetAnnotation + "')]//d:Path[contains(., '/')]", xmlDoc);
                for (i = 0; i < expandNodesApplFunc.length; i += 1) {
                    expandNode = xPath.nextNode(expandNodesApplFunc, i);
                    path = xPath.getNodeText(expandNode);
                    if (mappingList.propertyAnnotations[annotation]) {
                        if (mappingList.propertyAnnotations[annotation][path]) {
                            continue;
                        }
                    }
                    if (!mappingList.expand) {
                        mappingList.expand = {};
                    }
                    if (!mappingList.expand[annotation]) {
                        mappingList.expand[annotation] = {};
                    }
                    pathValues = path.split('/');
                    if (isNavProperty(annotation, pathValues[0], oMetadata)) {
                        if (!mappingList.expand) {
                            mappingList.expand = {};
                        }
                        if (!mappingList.expand[annotation]) {
                            mappingList.expand[annotation] = {};
                        }
                        mappingList.expand[annotation][pathValues[0]] = pathValues[0];
                    }
                }
            }
            this.initialized[sAnnotationUri] = mappingList;
        }
        return mappingList;
    };
}());
}; // end of sap/ushell/components/factsheet/annotation/Mapping.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.factory.ThingInspector') ) {
//Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview This file contains an annotation parser for factsheets.
 */

(function () {
    "use strict";
    /*global sap, jQuery, $, setTimeout, window, console */

    jQuery.sap.declare("sap.ushell.components.factsheet.factory.ThingInspector");

    var cbesh;
    if (typeof cbesh === "undefined") {
        cbesh = sap.ushell.components.factsheet;
    }
    cbesh.factory = (function () {

        jQuery.sap.require("sap.suite.ui.commons.UnifiedThingInspector");
        jQuery.sap.require("sap.ushell.components.factsheet.annotation.Mapping");

        // Begin
        var oTI, oMapping = {}, getServiceFromUri, getEntitySetFromUri, getEntitySetFromType, getEntityType, getAssociation, getNavEntitySet, getAssociationMultiplicity,
            getExpand, propertyPartsWithStrings, newJSONModels = {}, newModelValue, dataField, labelBinding, fieldBinding, getEntityKeyFromUri, getKeyProperty, 
            navigationBinding, columnHAlign, annotationFormLayout, showHTML, Table, RowRepeater, genericThingViewer,
            FACTSHEET = "displayFactSheet",
            ANNOTATION = "annotation=",//"__anno=",
            ENTITY = "entity=";//"__entity="; 

        //Until a formatter is available to short numbers for the KPIs the following workaround does this
        //Begin workaround
        jQuery.sap.require("sap.ui.base.Object");
        jQuery.sap.require("sap.ui.core.format.NumberFormat");

        var oLocale = sap.ui.getCore().getConfiguration().getFormatSettings().getFormatLocale();
        if (sap.ui.getCore().getConfiguration().getLanguage() == "ZH") {
            oLocale = new sap.ui.core.Locale("zh_CN");
        }

        var oShortDecimalFormat = sap.ui.core.LocaleData.getInstance(oLocale)._get("decimalFormat-short");

        function toShortValue(value) {
            var shortFormat = "";
            var shortValue = "";
            var shortNumberAsString = "";
            var indexOfZero = 0;
            var result = "";
            var positiveNumberWithoutDecimals = toPositiveNumberWithoutDecimals(value);
            var sourceType = Math.pow(10, positiveNumberWithoutDecimals.toString().length - 1);

            if (oShortDecimalFormat == null)
                return sap.ui.core.format.NumberFormat.getIntegerInstance().format(value);
            if (oShortDecimalFormat[sourceType] == null
                    || oShortDecimalFormat[sourceType] == undefined
                    || oShortDecimalFormat[sourceType] == "0")
                return sap.ui.core.format.NumberFormat.getIntegerInstance().format(value);

            shortFormat = oShortDecimalFormat[sourceType];
            var numberOfZerosInPattern = shortFormat.match(/0/g).length;

            var numberPart = shortFormat.substring(0, shortFormat.lastIndexOf("0") + 1);
            var abbreviationPart = shortFormat.substring(shortFormat.lastIndexOf("0") + 1, shortFormat.length);
            abbreviationPart = abbreviationPart.replace(/'.'/g, ".");

            shortValue = numberPart;
            shortNumberAsString = positiveNumberWithoutDecimals.toString();

            for ( var i = 0; i < numberOfZerosInPattern; i += 1) {
                indexOfZero = shortValue.indexOf("0", indexOfZero);
                if (indexOfZero == -1)
                    break;
                shortValue = shortValue.substring(0, indexOfZero) + shortNumberAsString[i]
                + shortValue.substring(indexOfZero + 1);
                indexOfZero += 1;
            }

            if (isNegativeValue(value)) {
                shortValue = toNegativeValue(shortValue);
            }
            result = sap.ui.core.format.NumberFormat.getFloatInstance().format(shortValue);
            result = result + abbreviationPart;
            return result;
        }

        function toPositiveNumberWithoutDecimals(value) {
            var result = Number(value).toFixed(0);
            if (isNegativeValue(value)) {
                result = Number(result) * -1;
            }
            return result;
        }

        function toNegativeValue(value) {
            return Number(value) * -1;
        }

        function isNegativeValue(value) {
            return value < 0 ? true : false;
        }  

        function kpiValueFormatter(value, fractionDigits) {
            var result, oRegExp;
            if (!value) {
                return "";
            }
            oRegExp = new RegExp(sap.ui.core.format.NumberFormat.oDefaultFloatFormat.groupingSeparator,"g");
            if (fractionDigits && fractionDigits > 0) {
                var oNumberFormatter = sap.ui.core.format.NumberFormat.getFloatInstance({minFractionDigits: fractionDigits, maxFractionDigits: fractionDigits}, oLocale);
                result = oNumberFormatter.format(value);
                if (result && result.length > 6) {
                    value = value.replace(oRegExp, "");
                    return(toShortValue(value));
                }
                else {
                    return result;
                }
            } else {
                if (value && value.length > 6) {
                    value = value.replace(oRegExp, "");
                    return(toShortValue(value));
                } else {
                    return value;
                }
            }
        };
        //End workaround
        // HANA Live
        function fnChange() {
        	var sProperty, sPropertyValue, oUrl= "";
        	var sPath = this.getElementBinding().sPath.split("/")[1];
        	var oModel = this.getModel();
        	var aUrl = this.mBindingInfos.value.parameters;
        	var aParameters = this.mBindingInfos.value.parts;

        	for (var i=0;i<aUrl.length;i++){
//        		if (oHANAUrl[i].Type == "Path"){
//        			sProperty = oHANAUrl[i].Value;
//        			sPropertyValue = oModel.oData[sPath][sProperty];
//        			oUrl = oUrl + sPropertyValue;
//        		} else {
        			oUrl = oUrl + aUrl[i].string;
//        		}
        	}
        	for (var j=0;j<aParameters.length;j++){
        		sProperty = aParameters[j].path;
        		var sPropertyName = "{"+sProperty+"}";
        		sPropertyValue = oModel.oData[sPath][sProperty];
        		oUrl = oUrl.replace(sPropertyName, sPropertyValue);
        	}
        	var sNewValue = newModelValue(oUrl);
        	if ($.isNumeric(sNewValue)){
        		var sValueFormat = this.mBindingInfos.value.parts.filter(function(obj) {
        		    return (obj.path == sProperty);
        		});
        		sNewValue = kpiValueFormatter(sNewValue, sValueFormat[0].type.oFormatOptions.maxFractionDigits);
        		this.setDoubleFontSize(true);
        	}
        	this.setValue(sNewValue);
        	
        	this.getElementBinding().detachChange(fnChange);
        }

        getServiceFromUri = function (sUri) {
            var aUriParts, sService, i;
            aUriParts = sUri.slice(1).split("/");
            sService = "/";
            for (i = 0; i < aUriParts.length; i += 1) {
                if (aUriParts[i].indexOf("(") > 0) {
                    break;
                } else {
                    sService += aUriParts[i] + "/";
                }
            }
            return sService;
        };
        getEntitySetFromUri = function (sUri, oModel) {
            var sEntitySet, sEntityUri, aServiceParts, sNavProperty;
            sEntityUri = sUri.slice(oModel.sServiceUrl.length + 1);
            if (sEntityUri.indexOf("/") >= 0) {
                aServiceParts = sEntityUri.split("/");
                sNavProperty = aServiceParts[aServiceParts.length];
                sEntitySet = aServiceParts[aServiceParts.length - 1];
                if (sEntitySet.indexOf("(") >= 0) {
                    sEntitySet = sEntitySet.slice(sEntitySet.indexOf("("));
                }
                sEntitySet = this.getNavEntitySet(sEntitySet, sNavProperty, oModel.getMetadata());
            } else {
                if (sEntityUri.indexOf("(") >= 0) {
                    sEntitySet = sEntityUri.slice(0, sEntityUri.indexOf("("));
                } else {
                    if (sEntityUri.indexOf("?") >= 0) {
                        sEntitySet = sEntityUri.slice(0, sEntityUri.indexOf("?"));
                    } else {
                        sEntitySet = sEntityUri;
                    }
                }
            }
            return sEntitySet;
        };
        getEntityKeyFromUri = function (sUri, oModel) {
            var sEntityUri, sKey, oMetadata, sEntityType;
            sEntityUri = sUri.slice(oModel.sServiceUrl.length + 1);
            if (sEntityUri.indexOf("(") >= 0) {
                sKey = sEntityUri.slice(sEntityUri.indexOf("(")+1, sEntityUri.indexOf(")"));
                if (sKey.indexOf("=") <= 0) {
//                  there is just one key property and the shortened notation was used, get name of the key property
                    oMetadata = oModel.getServiceMetadata();
                    sEntityType = getEntityType(getEntitySetFromUri(sUri, oModel), oMetadata);
                    sKey = getKeyProperty(sEntityType, oMetadata)+"="+sKey;
                }
            } else {
                sKey = new String();
            }
            return sKey;
        };
        getKeyProperty = function (sEntityType, oMetadata) {
            var i, metadataSchema, j;
            for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                metadataSchema = oMetadata.dataServices.schema[i];
                if (metadataSchema.namespace === sEntityType.slice(0, sEntityType.lastIndexOf("."))) {
                    for (j = 0; j < metadataSchema.entityType.length; j += 1) {
                        if (metadataSchema.entityType[j].name === sEntityType.slice(sEntityType.lastIndexOf(".")+1)) {
                            return metadataSchema.entityType[j].key.propertyRef[0].name;
                        }
                    }
                }
            }
        };

        getEntitySetFromType = function (sEntityType, oMetadata) {
            var modelEntityType = sEntityType;
            for (var i = oMetadata.dataServices.schema.length-1; i >= 0 ; i--) {
                var metadataSchema = oMetadata.dataServices.schema[i];
                if (metadataSchema.entityContainer) {
                    var aEntitySets = metadataSchema.entityContainer[0].entitySet;
                    for (var j = aEntitySets.length-1; j >= 0; j--) {
                        if (aEntitySets[j].entityType == modelEntityType) {
                            return aEntitySets[j].name;
                        }
                    }				
                }
            }
        };
        getEntityType = function (sEntitySet, oMetadata, bWithoutNamespace) {
            var i, metadataSchema, aEntitySets, j;
            for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                metadataSchema = oMetadata.dataServices.schema[i];
                if (metadataSchema.entityContainer) {
                    aEntitySets = metadataSchema.entityContainer[0].entitySet;
                    for (j = aEntitySets.length - 1; j >= 0; j -= 1) {
                        if (aEntitySets[j].name === sEntitySet) {
                            if (bWithoutNamespace) {
                                return aEntitySets[j].entityType.slice(metadataSchema.namespace.length+1)
                            } else {
                                return aEntitySets[j].entityType;
                            }
                        }
                    }
                }
            }
        };
        getAssociation = function (sEntityType, sNavProperty, oMetadata) {
            var aNsEntityType, i, metadataSchema, sNameSpace, k, j, oNavProperty;
            aNsEntityType = sEntityType.split(".");
            for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                metadataSchema = oMetadata.dataServices.schema[i];
                sNameSpace = aNsEntityType[0];
                if (aNsEntityType.length > 2) {
                    for (k = 1; k < aNsEntityType.length - 1; k += 1) {
                        sNameSpace += "." + aNsEntityType[k];
                    }
                }
                if (metadataSchema.namespace === sNameSpace) {
                    for (j = 0; j < metadataSchema.entityType.length; j += 1) {
                        if (metadataSchema.entityType[j].name === aNsEntityType[aNsEntityType.length - 1]) {
                            if (metadataSchema.entityType[j].navigationProperty) {
                                for (k = 0; k < metadataSchema.entityType[j].navigationProperty.length; k += 1) {
                                    if (metadataSchema.entityType[j].navigationProperty[k].name === sNavProperty) {
                                        oNavProperty = metadataSchema.entityType[j].navigationProperty[k];
                                        return {name: oNavProperty.relationship, toRole: oNavProperty.toRole};
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
        getNavEntitySet = function (sEntitySet, sNavProperty, oMetadata) {
            var sEntityType, termTargetType, oAssociation, i, metadataSchema, j, sAssociationSet, k;
            sEntityType = getEntityType(sEntitySet, oMetadata);
            if (sNavProperty.charAt(0) === "@") {
                if (oMapping.termDefinitions && oMapping.termDefinitions[sNavProperty]) {
                    termTargetType = oMapping.termDefinitions[sNavProperty];
                    if (termTargetType.indexOf("Collection") >= 0) {
                        termTargetType = termTargetType.slice(termTargetType.indexOf("(") + 1, termTargetType.indexOf(")"));
                    }
                    return getEntitySetFromType(termTargetType, oMetadata);
                }
            } else {
                oAssociation = getAssociation(sEntityType, sNavProperty, oMetadata);
                if (oAssociation) {
                    for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                        metadataSchema = oMetadata.dataServices.schema[i];
                        if (metadataSchema.entityContainer && metadataSchema.entityContainer[0].associationSet) {
                            for (j = metadataSchema.entityContainer[0].associationSet.length - 1; j >= 0; j -= 1) {
                                sAssociationSet = metadataSchema.entityContainer[0].associationSet[j];
                                if (sAssociationSet.association === oAssociation.name) {
                                    for (k = 0; k <  sAssociationSet.end.length; k += 1) {
                                        if (sAssociationSet.end[k].role === oAssociation.toRole) {
                                            return sAssociationSet.end[k].entitySet;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
        getAssociationMultiplicity = function (sEntitySet, sNavProperty, oMetadata) {
            var sEntityType, oAssociation, i, metadataSchema, j, sAssociation, k;
            sEntityType = getEntityType(sEntitySet, oMetadata);
            oAssociation = getAssociation(sEntityType, sNavProperty, oMetadata);
            for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                metadataSchema = oMetadata.dataServices.schema[i];
                for (j = metadataSchema.association.length - 1; j >= 0; j -= 1) {
                    sAssociation = metadataSchema.association[j];
                    if (metadataSchema.namespace + '.' + sAssociation.name === oAssociation.name) {
                        for (k = 0; k <  sAssociation.end.length; k += 1) {
                            if (sAssociation.end[k].role.substr(0, 7) === "ToRole_") {
                                return sAssociation.end[k].multiplicity;
                            }
                        }
                    }
                }
            }
        };
        getExpand = function (sEntitySet, oMetadata) {
            var oExpand, oExpandEntities, aExpand, elem;
            oExpand = {};
            if (oMapping.expand) {
                if (oMapping.expand[getEntityType(sEntitySet, oMetadata)]) {
                    oExpandEntities = oMapping.expand[getEntityType(sEntitySet, oMetadata)];
                    aExpand = [];
                    for (elem in oExpandEntities) {
                        aExpand.push(oExpandEntities[elem]);
                    }
                    oExpand.expand = aExpand.join(", ");
                }
            }
            return oExpand;
        };

        /* UI Renderer */

        propertyPartsWithStrings = function (aParts, oFormatter) {
            var that, oBinding = {}, j;
            oBinding.parts = [];
            oBinding.parameters = [];
            for (j = aParts.length - 1; j >= 0; j -= 1) {
                if (aParts[j].Type === "Path") {
                    if (aParts[j].EdmType) {
                        switch (aParts[j].EdmType) {
                            case "Edm.DateTimeOffset":
                            case "Edm.DateTime":
                                oBinding.parts.push({path: aParts[j].Value, type: new sap.ui.model.type.DateTime()});
                                break;
                            case "Edm.Time":
                                oBinding.parts.push({path: aParts[j].Value + "/ms", type: new sap.ui.model.type.Time({
                                    source: {
                                        pattern: "timestamp"
                                    }
                                })});
                                break;
                            case "Edm.Date":
                                oBinding.parts.push({path: aParts[j].Value, type: new sap.ui.model.type.Date()});
                                break;
                            case "Edm.Decimal":
                            case "Edm.Double":
                            case "Edm.Single":
                                oBinding.parts.push({path: aParts[j].Value, type: new sap.ui.model.type.Float()});
                                break;
                            case "Edm.Int16":
                            case "Edm.Int32":
                            case "Edm.Int64":
                                oBinding.parts.push({path: aParts[j].Value, type: new sap.ui.model.type.Integer()});
                                break;
                            default:
                                oBinding.parts.push({path: aParts[j].Value});
                            break;
                        }
                    } else {
                        oBinding.parts.push({path: aParts[j].Value});
                    }
                }
                // HANA Live: set strings as parameter
                else if (aParts[j].Type === "String") {
                	oBinding.parameters.unshift({string: aParts[j].Value});
                }
            }
            oBinding.formatter = function () {
                var sValue = "", sPathIndex, k, i;
                that = this;
                if (arguments && arguments.length >= 1) {
                    sPathIndex = arguments.length - 1;
                    if (arguments[sPathIndex]) {
                        for (k = 0; k < aParts.length; k += 1) {
                            if (aParts[k].Type === "Path") {
                                sValue += arguments[sPathIndex];
                                sPathIndex -= 1;
                            } else {
                                sValue += aParts[k].Value;
                            }
                        }
                        if (oFormatter) {
                            sValue = oFormatter(sValue);
                        }
                    }
                    return sValue;
                }
            };
            return oBinding;
        };

        var searchObj = function (obj,property){
            for ( var key in obj ) {
                if (key == '__metadata'){
                    continue;
                } else if ( key == property ){
                    return obj[key];		            
                } else if ( typeof obj[key] === 'object' ){
                    return searchObj( obj[key], property ); 
                }
            }
        };

        newModelValue = function (sUrl) {
            var iLastSlash, newUrl, newProp, newJSONModel = {}, returnValue;
            iLastSlash = sUrl.lastIndexOf("/");
            newUrl = sUrl.slice(0, iLastSlash);
            newProp = sUrl.slice(iLastSlash + 1);
            if (!newJSONModels[sUrl]) {
                newJSONModel = new sap.ui.model.json.JSONModel();
                newJSONModel.loadData(newUrl, null, false);
                newJSONModels[sUrl] = newJSONModel.getData();
            } else {
                newJSONModel = newJSONModels[sUrl];
            }
            if (newJSONModels[sUrl] && newJSONModels[sUrl].d){
            	if (!newJSONModels[sUrl].d[newProp]){
            		returnValue = searchObj(newJSONModels[sUrl].d,newProp);
            	} else {
            		returnValue = newJSONModels[sUrl].d[newProp];
            	}	
            }
            
            return returnValue;
        };

        dataField = function (oField, sEntityType, oMetadata) {
            var oControl, oBinding;
            oControl = new sap.ui.core.Control();
            oBinding = fieldBinding(oField.Value, oField.EdmType, sEntityType);
            if (oField.Value && oField.Value["com.sap.vocabularies.UI.v1.IsImageURL"]) {
                oControl = new sap.m.Image({height: "50px"});
                if (oBinding.BindingInfo) {
                    oControl.bindProperty("src", oBinding.BindingInfo);
                } else {
                    oControl.setProperty("src", oBinding.String);
                }
            } else {
                if (oField.UrlRef || (oField.Target && oField.Target.Path)) {
                    oControl = new sap.m.Link();
                } else {
                    oControl = new sap.m.Text();
                }
                if (oBinding.BindingInfo) {
                    oControl.bindProperty("text", oBinding.BindingInfo);
                } else {
                    oControl.setProperty("text", oBinding.String);
                }
                if (oField.EdmType === "Edm.Decimal" || oField.EdmType === "Edm.Double" || oField.EdmType === "Edm.Single" ||
                        oField.EdmType === "Edm.Int16" || oField.EdmType === "Edm.Int32" || oField.EdmType === "Edm.Int64") {
                    oControl.setTextAlign(sap.ui.core.TextAlign.End);
                }
            }
            if ((oField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithNavigation") && oMetadata) {
                var sNavProperty = oField.Target.Path;
                if (oMapping[sEntityType][sNavProperty.slice(1)]) {
                    oControl.bindProperty("href", navigationBinding(sEntityType, sNavProperty, oMetadata));
                }
                oControl.attachPress(function(oEvent) {
                    oEvent.preventDefault();
                    oEvent.stopPropagation();
                }); 
            }
            //TODO: Check
//          else if (oField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithNavigation") {
//          var sNavPath = oField.Target.AnnotationPath;
//          var sAnnoPath = sNavPath.substring(sNavPath.lastIndexOf("@")+1);
//          sNavPath = sNavPath.substring(0, sNavPath.lastIndexOf("@")-1);
//          var aAnnoPath = sAnnoPath.split("#");
//          }

            return oControl;
        };

        labelBinding = function (oField, oLabelProperties, aPropExtensions, bWithColon) {
            var oLabel = new sap.m.Label(oLabelProperties);
            var sColon = "";
            if (bWithColon) {
                sColon = ":";
            }
            if (oField.Label) {
                if (oField.Label.String) {
                    oLabel.setText(oField.Label.String+sColon);				
                }
                else {
                    if (oField.Label.Path) {
                        oLabel.bindProperty("text", oField.Label.Path);		
                    }			
                }
            } else {
                if (oField.Value) {
                    var sLabel = new String();
                    if (oField.Value.Path && aPropExtensions){
                        var oPropertyExt = aPropExtensions[oField.Value.Path];
                        for (var j in oPropertyExt){
                            if (j = "http://www.sap.com/Protocols/SAPData") {
                                if (oPropertyExt[j].label) {
                                    sLabel = oPropertyExt[j].label;
                                    break;														
                                }
                            }
                        }
                    } else if (oField.Value.Apply && oField.Value.Apply.Name == "odata.concat") {
                        for (var k in oField.Value.Apply.Parameters){
                            var oParameter = oField.Value.Apply.Parameters[k];
                            if (oParameter.Type == "Path"){
                                var oPropertyExt = aPropExtensions[oParameter.Value];
                                for (var j in oPropertyExt){
                                    if (j = "http://www.sap.com/Protocols/SAPData") {
                                        if (oPropertyExt[j].label) {
                                            sLabel = oPropertyExt[j].label;
                                            break;														
                                        }
                                    }
                                }						
                                break;
                            }
                        }
                    }
                    oLabel.setText(sLabel+sColon);				
                }
            }
            return oLabel;
        };

        var fieldBinding = function (oFieldValue, sEdmType, sEntityType) {
            if (!oFieldValue) {
                return false;
            }
            var oBinding = {};
            if (oFieldValue.Apply) {  //apply function
                if (oFieldValue.Apply.Name = "odata.concat") {
                    if (sEntityType && oMapping.propertyAnnotations && oMapping.propertyAnnotations[sEntityType]) {
                        var oPropAnnotations = oMapping.propertyAnnotations[sEntityType];
                        var aParts = oFieldValue.Apply.Parameters;
                        var aPartsWithPropAnnotations = [];
                        for (j = 0; j < aParts.length; j += 1) {
                            if (aParts[j].Type === "Path") {
                                aPartsWithPropAnnotations.push(aParts[j]);
                                if (oPropAnnotations && oPropAnnotations[aParts[j].Value] && oPropAnnotations[aParts[j].Value]["Org.OData.Measures.V1.ISOCurrency"]) {       
                                    aPartsWithPropAnnotations.push({Type: "String", Value: " "});
                                    if (oPropAnnotations[aParts[j].Value]["Org.OData.Measures.V1.ISOCurrency"].Path) {
                                        aPartsWithPropAnnotations.push({Type: "Path", Value: oPropAnnotations[aParts[j].Value]["Org.OData.Measures.V1.ISOCurrency"].Path});
                                    } else {
                                        aPartsWithPropAnnotations.push({Type: "String", Value: oPropAnnotations[aParts[j].Value]["Org.OData.Measures.V1.ISOCurrency"].String});
                                    }
                                }
                                else {
                                    if (oPropAnnotations && oPropAnnotations[aParts[j].Value] && oPropAnnotations[aParts[j].Value]["Org.OData.Measures.V1.Unit"]) {
                                        aPartsWithPropAnnotations.push({Type: "String", Value: " "});
                                        if (oPropAnnotations[aParts[j].Value]["Org.OData.Measures.V1.Unit"].Path) {
                                            aPartsWithPropAnnotations.push({Type: "Path", Value: oPropAnnotations[aParts[j].Value]["Org.OData.Measures.V1.Unit"].Path});
                                        } else {
                                            aPartsWithPropAnnotations.push({Type: "String", Value: oPropAnnotations[aParts[j].Value]["Org.OData.Measures.V1.Unit"].String});
                                        }
                                    }
                                }
                            } else {
                                aPartsWithPropAnnotations.push(aParts[j]);
                            }
                        }
                        oBinding.BindingInfo = propertyPartsWithStrings(aPartsWithPropAnnotations);
                    } else {
                        oBinding.BindingInfo = propertyPartsWithStrings(oFieldValue.Apply.Parameters);
                    }
                }			
            } else {  //property path 
                if (oFieldValue.Path) {
                    if (oFieldValue.Path.charAt(0)=="@") {  //property path with navigation defined in annotation
                        var oUrl = oMapping[sEntityType][oFieldValue.Path.slice(1, oFieldValue.Path.indexOf("/"))].UrlRef;
                        var sUrlProperties = oFieldValue.Path.slice(oFieldValue.Path.indexOf("/")+1);
                        var aParameters = [];	
                        if (oUrl && oUrl.Apply) {
                            var aParams = oUrl.Apply.Parameters;
                            switch (oUrl.Apply.Name) {
                                case "odata.concat":						
                                    aParameters = aParams;
                                    aParameters.push({Type: "String", Value: "/"+sUrlProperties});
                                    break;
                                case "odata.fillUriTemplate":
                                    var aTemplProperties = aParams[0].Value.split("{");
                                    for (var i in aTemplProperties) {
                                        if (aTemplProperties[i].indexOf("}") < 0) {
                                            aParameters.push({Type: "String", Value: aTemplProperties[i]});
                                        } else {	
                                            var aUrlPathProperties = aTemplProperties[i].split("}");
                                            for (var j = 1; j < aParams.length; j += 1) {
                                                if (aParams[j].Name == aUrlPathProperties[0]) {
                                                    var oParaValue = aParams[j].Value;
                                                    if (oParaValue.Path){
                                                        aParameters.push({Type: "Path", Value: oParaValue.Path});										
                                                    } else {
                                                        if (oParaValue.Apply && oParaValue.Apply.Name == "odata.UriEncode") {
                                                            var oParam = oParaValue.Apply.Parameters[0];
                                                            aParameters.push({Type: oParam.Type, Value: encodeURIComponent(oParam.Value)});
                                                            // HANA Live - put property as string to parameters (later needed for constructing URL)
                                                            aParameters.push({Type:"String", Value: "{"+encodeURIComponent(oParam.Value)+"}"});
                                                        }
                                                    }
                                                }
                                            }
                                            aParameters.push({Type: "String", Value: aUrlPathProperties[1]});
                                        }
                                    }
                                    aParameters.push({Type: "String", Value: "/"+sUrlProperties});
                                  //HANA Live
                                    oBinding.fnChange = fnChange;
                                    break;
                                default:
                                    break;
                            }
                            oBinding.BindingInfo = propertyPartsWithStrings(aParameters, newModelValue);				
                        } else {
                            if (oUrl && oUrl.Path) {
                                aParameters.push({Type: "Path", Value: oUrl.Path}, {Type: "String", Value: "/"+sUrlProperties});
                                oBinding.BindingInfo = propertyPartsWithStrings(aParameters, newModelValue);
                            } else {
                                if (oUrl && oUrl.String) {
                                    oBinding.String = newModelValue(oUrl.String+"/"+sUrlProperties);
                                }
                            }
                        }					
                    } else {   //property path defined in the model
                        oBinding.BindingInfo = {};
                        var fnType;
                        switch (sEdmType) {
                            case "Edm.DateTimeOffset":
                            case "Edm.DateTime":	
                                oBinding.BindingInfo = {path: oFieldValue.Path, type: new sap.ui.model.type.DateTime()};				
                                break;
                            case "Edm.Time":
                                oBinding.BindingInfo = {path: oFieldValue.Path+"/ms", type: new sap.ui.model.type.Time({
                                    source: {
                                        pattern: "timestamp"
                                    }
                                })};				
                                break;
                            case "Edm.Date":	
                                oBinding.BindingInfo = {path: oFieldValue.Path, type: new sap.ui.model.type.Date()};				
                                break;
                            case "Edm.Decimal":
                            case "Edm.Double":
                            case "Edm.Single":
                            case "Edm.Int16":
                            case "Edm.Int32":
                            case "Edm.Int64":
                                if ((sEdmType === "Edm.Decimal") || (sEdmType === "Edm.Double") || (sEdmType === "Edm.Single")) {
                                    fnType = new sap.ui.model.type.Float();
                                } else if ((sEdmType === "Edm.Int16") || (sEdmType === "Edm.Int32") || (sEdmType === "Edm.Int64")) {
                                    fnType = new sap.ui.model.type.Integer();
                                }
                                if (oMapping.propertyAnnotations) {
                                    var aTextParts = [];
                                    var oPropAnnotations = oMapping.propertyAnnotations[sEntityType];
                                    aTextParts.push({Type: "Path", Value: oFieldValue.Path, EdmType: sEdmType}, {Type: "String", Value: " "});
                                    if (oPropAnnotations && oPropAnnotations[oFieldValue.Path] && oPropAnnotations[oFieldValue.Path]["Org.OData.Measures.V1.ISOCurrency"]) {	   
                                        if (oPropAnnotations[oFieldValue.Path]["Org.OData.Measures.V1.ISOCurrency"].Path)
                                            aTextParts.push({Type: "Path", Value: oPropAnnotations[oFieldValue.Path]["Org.OData.Measures.V1.ISOCurrency"].Path});
                                        else
                                            aTextParts.push({Type: "String", Value: oPropAnnotations[oFieldValue.Path]["Org.OData.Measures.V1.ISOCurrency"].String});
                                    }
                                    else {
                                        if (oPropAnnotations && oPropAnnotations[oFieldValue.Path] && oPropAnnotations[oFieldValue.Path]["Org.OData.Measures.V1.Unit"]) {			
                                            if (oPropAnnotations[oFieldValue.Path]["Org.OData.Measures.V1.Unit"].Path)
                                                aTextParts.push({Type: "Path", Value: oPropAnnotations[oFieldValue.Path]["Org.OData.Measures.V1.Unit"].Path});
                                            else
                                                aTextParts.push({Type: "String", Value: oPropAnnotations[oFieldValue.Path]["Org.OData.Measures.V1.Unit"].String});				
                                        }
                                    }
                                    oBinding.BindingInfo = propertyPartsWithStrings(aTextParts);
                                } else {
                                    oBinding.BindingInfo = {path: oFieldValue.Path, type: fnType};
                                }	
                                break;
                            default:
                                oBinding.BindingInfo = {path: oFieldValue.Path};
                            break;				
                        }					
                    }
                } else {  //hard coded string in annotation
                    if (oFieldValue.String) {
                        oBinding.String = oFieldValue.String;
                    }
                }
            }
            return oBinding;	
        };

        navigationBinding = function (sEntityType, sNavProperty, oMetadata) {
            var oUrl = {}, aUrlParts = [], aParams, sUrlProperties, aTemplateParts, j, aTemplValueParts, oUrlParts = {}, j, oParaValue, sAnnotation, oElement;
            if (sNavProperty.charAt(0) === "@") {
                if (sNavProperty.indexOf("/") < 0) {
                    oUrl = oMapping[sEntityType][sNavProperty.slice(1)].UrlRef;
                } else {
                    oUrl = oMapping[sEntityType][sNavProperty.slice(1, sNavProperty.indexOf("/"))].UrlRef;
                    sUrlProperties = sNavProperty.slice(sNavProperty.indexOf("/") + 1);
                }
                if (oUrl && oUrl.Apply) {
                    aParams = oUrl.Apply.Parameters;
                    switch (oUrl.Apply.Name) {
                        case "odata.fillUriTemplate":
                            aTemplateParts = aParams[0].Value.split("{");
                            for (j = 0; j < aTemplateParts.length; j += 1) {
                                if (aTemplateParts[j].indexOf("}") < 0) {
                                    aUrlParts.push({"Value" : aTemplateParts[j], "Type" : "String"});
                                } else {
                                    aTemplValueParts = aTemplateParts[j].split("}");
                                    oUrlParts = {};
                                    oUrlParts.Value = aTemplValueParts[0];
                                    oUrlParts.Type = "Path";
                                    for (j = 1; j < aParams.length; j += 1) {
                                        if (aParams[j].Name === oUrlParts.Value) {
                                            oParaValue = aParams[j].Value;
                                            if (oParaValue.Path) {
                                                oUrlParts.Value = oParaValue.Path;
                                            } else {
                                                if (oParaValue.Apply && oParaValue.Apply.Name === "odata.UriEncode") {
                                                    oUrlParts.Value = oParaValue.Apply.Parameters[0].Value;
                                                }
                                            }
                                            break;
                                        }
                                    }
                                    aUrlParts.push(oUrlParts);
                                    aUrlParts.push({"Value" : aTemplValueParts[1], "Type" : "String"});
                                }
                            }
                            for (oElement in oMapping.aliasAnnotations) {
                                if (aParams[0].Value.indexOf("/" + oElement + "/") >= 0) {
                                    sAnnotation = oMapping.aliasAnnotations[oElement];
                                    break;
                                }
                            }
                            break;
                        default:
                            break;
                    }
                }
                return propertyPartsWithStrings(aUrlParts);
            }/* else {
//          var sNavEntitySet = getNavEntitySet(sEntitySet, sNavProperty, oMetadata);
//          oControl.setTooltip(this.QuickView(oModel, sNavEntitySet, sAnnotationUri, aColumns[i].NavigationPath.NavigationPropertyPath, oPressCallBack, oMetadata));
//          oControl.setHref(sNavProperty);
//          oControl.attachPress(function (oEvent) {});
        }*/
        };

        columnHAlign = function (oField) {
            var hAlign = sap.ui.core.TextAlign.Begin;
            if (oField.EdmType === "Edm.Decimal" || oField.EdmType === "Edm.Double" || oField.EdmType === "Edm.Single" ||
                    oField.EdmType === "Edm.Int16" || oField.EdmType === "Edm.Int32" || oField.EdmType === "Edm.Int64") {
                hAlign = sap.ui.core.TextAlign.End;
            }
            return hAlign;
        };

        var annotationFormLayout = function (oModel, sEntitySet, sAnnotationUri, aFormData, oMaxItems, oMetadata, aColumnSize) {
            if (!oMetadata) {
                var oMetadata = oModel.getServiceMetadata();	
            }			
            if (!aFormData) aFormData = [];
            var sEntityType = getEntityType(sEntitySet, oMetadata);
            if (!aColumnSize) {
                aColumnSize = ["50%", "50%"];
            }
            
            var oContent = new sap.m.Table({
                backgroundDesign: sap.m.BackgroundDesign.Transparent,
                showSeparators: sap.m.ListSeparators.None,
                columns: [
                          new sap.m.Column({
                              width: aColumnSize[0],
                              hAlign: sap.ui.core.TextAlign.End
                          }),
                          new sap.m.Column({
                              width: aColumnSize[1]
                          })
                          ]
            });
            oContent.addStyleClass("sapFactsheetUtiTilePadding");
            var sEntity = sEntityType.substr(sEntityType.indexOf(".")+1);
            var aPropertyExtensions = (oMapping.propertyExtensions) ? oMapping.propertyExtensions[sEntityType] : [];
            var j = 0;
            var iSumPrioHigh = 0;
            var iSumPrioMedium = 0;
            var iSumPrioLow = 0;
            if (oMaxItems && oMaxItems.High) {
                iSumPrioHigh = oMaxItems.High;
            }
            if (oMaxItems && oMaxItems.Medium) {
                iSumPrioMedium = oMaxItems.Medium;
            }

            if (oMaxItems && oMaxItems.Low) {
                iSumPrioLow = oMaxItems.Low;
            }
            
            for (var i=0; i < aFormData.length; i += 1) {
                if (oMaxItems && aFormData[i].Importance && aFormData[i].Importance.EnumMember === "com.sap.vocabularies.UI.v1.Priority/High") {
                    if (iSumPrioHigh) {
                        iSumPrioHigh -= 1;
                    } else {
                        continue;
                    }
                }
                else if (oMaxItems && aFormData[i].Importance && aFormData[i].Importance.EnumMember === "com.sap.vocabularies.UI.v1.Priority/Medium") {
                    if (iSumPrioMedium) {
                        iSumPrioMedium -= 1;
                    } else {
                        continue;
                    }
                }
                else if (oMaxItems && aFormData[i].Importance && aFormData[i].Importance.EnumMember === "com.sap.vocabularies.UI.v1.Priority/Low") {
                    if (iSumPrioLow) {
                        iSumPrioLow -= 1;
                    } else {
                        continue;
                    }
                }
                if (oMaxItems && oMaxItems.Total && j >= oMaxItems.Total) {
                    break;
                }
                j += 1;
                var oControl = new sap.ui.core.Control().setModel(oModel);
                var oLabel = labelBinding(aFormData[i], {textAlign: sap.ui.core.TextAlign.End}, aPropertyExtensions, true);
                oLabel.addStyleClass("sapFactsheetUtiLabel");				
                oControl = dataField(aFormData[i], sEntityType, oMetadata);
                oContent.addItem(new sap.m.ColumnListItem({	cells : [ oLabel, oControl ] }));
            }
            return oContent;	
        };

        var createFacet = function(oModel, sEntitySet, sAnnotationUri, oSelectedFacet, sBindingPath) {
            var oMetadata = oModel.getServiceMetadata();
            var sAssociationMultiplicity = new String();
            switch (oSelectedFacet.RecordType) {
                case "com.sap.vocabularies.UI.v1.ReferenceFacet":				
                    var oTG = new sap.suite.ui.commons.UnifiedThingGroup();
                    if (oSelectedFacet.Label && oSelectedFacet.Label.String) 
                        oTG.setTitle(oSelectedFacet.Label.String);
                    var sNavPath = oSelectedFacet.Target.AnnotationPath;
                    var sAnnoPath = sNavPath.substring(sNavPath.lastIndexOf("@")+1);
                    sNavPath = sNavPath.substring(0, sNavPath.lastIndexOf("@")-1);
                    if (sNavPath) {
                        sAssociationMultiplicity = getAssociationMultiplicity(sEntitySet, sNavPath, oMetadata);
                    }
                    var aAnnoPath = sAnnoPath.split("#");
                    switch (aAnnoPath[0]) {
                        case "com.sap.vocabularies.UI.v1.LineItem":
                        case "com.sap.vocabularies.UI.v1.Badge":
                        case "com.sap.vocabularies.UI.v1.Identification":					
                            if (sNavPath) {
                                var sNavEntitySet = getNavEntitySet(sEntitySet, sNavPath, oMetadata);
                                //TODO: Remove check for identification
                                if (sAssociationMultiplicity == "*" && aAnnoPath[0] != "com.sap.vocabularies.UI.v1.Identification") {
                                    if (sNavPath.charAt(0)!="@") {										
                                        var list = itemList(oModel, sNavEntitySet, sAnnotationUri, oMetadata, sNavPath, sBindingPath+"/"+sNavPath, oSelectedFacet); 
                                        oTG.setContent(list);
                                    }  						
                                } else {
                                    if (aAnnoPath[0]=="com.sap.vocabularies.UI.v1.Identification") {
                                        var oNavHeaderInfo = oMapping[getEntityType(sNavEntitySet, oMetadata)]["com.sap.vocabularies.UI.v1.HeaderInfo"];
                                        var aIdentification = oMapping[getEntityType(sNavEntitySet, oMetadata)]["com.sap.vocabularies.UI.v1.Identification"];							
                                        var oVL = new sap.ui.layout.VerticalLayout({width:"100%"}).setModel(oModel);
                                        oVL.addContent(annotationFormLayout(oModel, sNavEntitySet, sAnnotationUri, aIdentification)).addStyleClass("sapFactsheetUtiPanel").bindElement(sBindingPath+"/"+sNavPath);
                                        oTG.setContent(oVL);										
                                    } else {
                                        oTG.setContent(new sap.m.Text({text: "You should use Identification for 1:1 relations."}));
                                    }
                                }
                            } else {
                                if (sAssociationMultiplicity == "*") {
                                    var list = itemList(oModel, sEntitySet, sAnnotationUri, oMetadata, sNavPath, sBindingPath+"/"+sNavPath, oSelectedFacet);
                                    oTG.setContent(list);
                                } else {
                                    if (aAnnoPath[0]=="com.sap.vocabularies.UI.v1.Identification") {
                                        var oHeaderInfo = oMapping[getEntityType(sEntitySet, oMetadata)]["com.sap.vocabularies.UI.v1.HeaderInfo"];
                                        var aIdentification = oMapping[getEntityType(sEntitySet, oMetadata)]["com.sap.vocabularies.UI.v1.Identification"];
                                        var oVL = new sap.ui.layout.VerticalLayout({width:"100%"}).setModel(oModel);
                                        oVL.addContent(annotationFormLayout(oModel, sEntitySet, sAnnotationUri, aIdentification).addStyleClass("sapFactsheetUtiPanel"));
                                        oTG.setContent(oVL);								
                                    } else {
                                        oTG.setContent(new sap.m.Text({text: "You should use Identification for 1:1 relations."}));
                                    }
                                }
                            }			
                            break;								
                        case "com.sap.vocabularies.UI.v1.StatusInfo":
                            if (sNavPath) {
                                var sNavEntitySet = getNavEntitySet(sEntitySet, sNavPath, oMetadata);
                                var aStatusInfo = oMapping[getEntityType(sNavEntitySet, oMetadata)]["com.sap.vocabularies.UI.v1.StatusInfo"];
                                oTG.setContent(annotationFormLayout(oModel, sNavEntitySet, sAnnotationUri, aStatusInfo).addStyleClass("sapFactsheetUtiPanel").bindElement(sBindingPath+"/"+sNavPath));
                            } else {
                                var aStatusInfo = oMapping[getEntityType(sEntitySet, oMetadata)]["com.sap.vocabularies.UI.v1.StatusInfo"];
                                oTG.setContent(annotationFormLayout(oModel, sEntitySet, sAnnotationUri, aStatusInfo).addStyleClass("sapFactsheetUtiPanel"));	    		  					  					
                            }
                            break;
                        case "com.sap.vocabularies.UI.v1.FieldGroup":
                            var oFG = oMapping[getEntityType(sEntitySet, oMetadata)][sAnnoPath];
                            if (oFG) {
                                if (!oTG.getTitle() || oTG.getTitle() == "") {
                                    if (oFG.Label) {
                                        if (oFG.Label.String) {
                                            oTG.setTitle(oFG.Label.String);
                                        } else {
                                            if (oFG.Label.Path) oTG.bindProperty("title", oFG.Label.Path);							
                                        }
                                    }
                                }
                                if (sNavPath) {
                                    var sNavEntitySet = getNavEntitySet(sEntitySet, sNavPath, oMetadata);					
                                    oTG.setContent(annotationFormLayout(oModel, sNavEntitySet, sAnnotationUri, oFG.Data).addStyleClass("sapFactsheetUtiPanel").bindElement(sBindingPath+"/"+sNavPath));
                                } else {
                                    oTG.setContent(annotationFormLayout(oModel, sEntitySet, sAnnotationUri, oFG.Data).addStyleClass("sapFactsheetUtiPanel"));	    		  					  					
                                }
                            }
                            break;					
                        default:
                            oTG.setContent(new sap.m.Text({text:"not yet implemented"}));
                        break;
                    }
                    return oTG;
                    break;		
                case "com.sap.vocabularies.UI.v1.ReferenceURLFacet":
                    //TODO: Check
                    var oTG = new sap.ui.ux3.ThingGroup({title: oSelectedFacet.Label.String});
                    oTG.setContent(showHTML(oSelectedFacet));                                                		
                    return oTG;
                    break;			
                case "com.sap.vocabularies.UI.v1.CollectionFacet":	
                    var aTG = [];
                    for (var i = 0; i < oSelectedFacet.Facets.length; i += 1) {
                        aTG.push(createFacet(oModel, sEntitySet, sAnnotationUri, oSelectedFacet.Facets[i], sBindingPath));
                    }
                    return aTG;
                    break;
                default:
                    return new sap.suite.ui.commons.UnifiedThingGroup().setContent(new sap.m.Text({text:"Not yet implemented"}));
                break;
            }
        };

        showHTML = function (oHTMLData) {
            var oImage, oHTMLCtrl, sIframe;
            switch (oHTMLData.UrlContentType.String) {
                case "image/png":
                case "image/jpeg":
                case "image/gif":
                    oImage =  new sap.m.Image({width: "100%"});
                    if (oHTMLData.Url.String) {
                        oImage.setSrc(oHTMLData.Url.String);
                    }
                    return oImage;
                default:
                    oHTMLCtrl = new sap.ui.core.HTML();
                if (oHTMLData.Url.String) {
                    oHTMLCtrl.setContent("<iframe src = '" + oHTMLData.Url.String + "' width='100%' height='250px' frameborder='0'></iframe>");
                } else {
                    if (oHTMLData.Url.Path) {
                        oHTMLCtrl.bindProperty("content",
                                {path: oHTMLData.Url.Path,
                            formatter: function (value) {
                                sIframe = "<iframe src = '" + oHTMLData.Url.Path + "' width='100%' height='250px' frameborder='0'></iframe>";
                                return sIframe;
                            }
                                }
                        );
                    }
                }
                return oHTMLCtrl;
            }
        };

        var itemList =  function (oModel, sEntitySet, sAnnotationUri, oMetadata, sNavPath, sBindingPath, oFacet) {
            if (!oMetadata) {
                oMetadata = oModel.getServiceMetadata();	
            }			
            var sEntityType = getEntityType(sEntitySet, oMetadata);		
            var sEntity = sEntityType.substr(sEntityType.indexOf(".")+1);
            var aPropertyExtensions = (oMapping.propertyExtensions) ? oMapping.propertyExtensions[sEntityType] : [];
            var aColumns = oMapping[sEntityType]["com.sap.vocabularies.UI.v1.LineItem"];

            var iMaxColumns = 6; //Default value for desktop
            if (jQuery.device.is.tablet && jQuery.device.is.landscape) {
                iMaxColumns = 5;
            } else if (jQuery.device.is.tablet && jQuery.device.is.portrait) {
                iMaxColumns = 4;
            } else if (jQuery.device.is.phone && jQuery.device.is.landscape) {
                iMaxColumns = 4;
            } else if (jQuery.device.is.phone && jQuery.device.is.portrait) {
                iMaxColumns = 3;
            }
            var iPrioHighColumnCount = 0;
            var iPrioMediumColumnCount = 0;
            for (var i=0; i < aColumns.length; i += 1) {
                if (aColumns[i].Importance && (aColumns[i].Importance.EnumMember === "com.sap.vocabularies.UI.v1.Priority/High")) {
                    iPrioHighColumnCount += 1;
                }
            }
            if (iMaxColumns > iPrioHighColumnCount) {
                iPrioMediumColumnCount = iMaxColumns - iPrioHighColumnCount;
            }

            var cells = [];
            var columns = [];
            var aLabels = [];
            var aControls = [];
            var oLabel;
            var bVisible;
            columns.push(new sap.m.Column({visible:false}));
            cells.push(new sap.m.Text().bindText("__metadata/uri"));
            for (var i=0; i < aColumns.length; i += 1) {
                var oControl = new sap.ui.core.Control();
                oControl = dataField(aColumns[i], sEntityType, oMetadata);
                oLabel = labelBinding(aColumns[i], null, aPropertyExtensions);
                aLabels.push(oLabel);
                aControls.push(oControl);
                if (aColumns[i].Importance && (aColumns[i].Importance.EnumMember === "com.sap.vocabularies.UI.v1.Priority/High")) {
                    if (iPrioHighColumnCount > 0) {
                        bVisible = true;
                        iPrioHighColumnCount -= 1;
                    } else {
                        bVisible = false;
                    }
                } else if (aColumns[i].Importance && (aColumns[i].Importance.EnumMember === "com.sap.vocabularies.UI.v1.Priority/Medium")) {
                    if (iPrioMediumColumnCount > 0) {
                        bVisible = true;
                        iPrioMediumColumnCount -= 1;
                    } else {
                        bVisible = false;
                    }
                } else {
                    bVisible = false;
                }
                columns.push(new sap.m.Column({header: oLabel, hAlign: columnHAlign(aColumns[i]), visible: bVisible}));
                cells.push(oControl);
            }  


            var oTemplateData = new sap.m.ColumnListItem({
                type : sap.m.ListType.Navigation,	        
                unread : false,
                cells : cells,
            });
            var sTitle;
            if (oFacet) {
                sTitle = oFacet.Label.String;
            }

            oTemplateData.attachPress({aColumns:aColumns, aLabels:aLabels, aControls:aControls, sTitle:sTitle}, function(oEvent, oData){ 
                var oTableData = {};
                oTableData.items = {};

                var sItem = oEvent.getSource().getCells()[0].getText().substr(oEvent.getSource().getCells()[0].getText().lastIndexOf("/"));
                var oContent = new sap.m.Table({
                    backgroundDesign: sap.m.BackgroundDesign.Transparent,
                    showSeparators: sap.m.ListSeparators.None,
                    columns: [
                              new sap.m.Column({ hAlign: sap.ui.core.TextAlign.End }),
                              new sap.m.Column()
                              ]
                });
                oContent.addStyleClass("sapFactsheetUtiPanel");
                oContent.addStyleClass("sapFactsheetUtiTilePadding");
                oContent.bindElement(sItem);
                var oLabel;
                for (var i = 0;i < aColumns.length; i += 1) {
                    oLabel = aLabels[i].clone();
                    oLabel.setText(oLabel.getText()+":");
                    oContent.addItem(new sap.m.ColumnListItem({	cells : [ oLabel, aControls[i].clone() ] }));
                }

                var sTGDescription = ""; 
                if (oTI.getName() && oTI.getDescription())
                    sTGDescription = oTI.getName() + ", " + oTI.getDescription();
                else if (oTI.getName() && !oTI.getDescription())
                    sTGDescription = oTI.getName();
                else if (!oTI.getName() && oTI.getDescription())
                    sTGDescription = oTI.getDescription();
                var oThingGroup = new sap.suite.ui.commons.UnifiedThingGroup({
                    content: oContent,
                    title : sTitle,
                    description: sTGDescription
                });

                var oPage = new sap.m.Page({
                    title : oTI.getTitle(),
                    showNavButton : true,
                    content : [ oThingGroup ]
                });
                oTI.navigateToPage(oPage, true);

            });

            var oTable = new sap.m.Table({growing : true, columns: columns});
            oTable.setModel(oModel);
            oTable.bindItems({
                path : sBindingPath,
                template : oTemplateData
            });
            //While data is loading display a loading text
            oTable.setNoDataText(sap.ui.getCore().getLibraryResourceBundle("sap.m").getText("PULL2REFRESH_LOADING_LONG"));
            //When data gets updated check if there are no items and set a no data text in that case
            var fnUpdated = function() {
                if(this.getItems().length === 0) {
                    this.setNoDataText(sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons").getText("FACETOVERVIEW_NO_CONTENT_TEXT"));
                } else {
                    this.setNoDataText(sap.ui.getCore().getLibraryResourceBundle("sap.m").getText("PULL2REFRESH_LOADING_LONG"));
                }                         
            };
            oTable.attachUpdateFinished(fnUpdated);
            return oTable;
        };

        /**
         * Returns tile height in rem, depending on device type and number of segments the tile consists of.
         * @param {number=} [iSegments=1] Number of segments the tile will take vertically in the grid (optional).
         *                  Currently expected values are 1, 2, 3, however any positive number is supported.
         *                  Default value is 1.
         * @return {string} Tile height in rem.
         */
        var fnGetTeaserTileHeight = function(iSegments) {
            iSegments = iSegments || 1;
            if (jQuery.device.is.phone) {
                return (7 * iSegments)+"rem";
            } else {
                return (11 * iSegments - 1)+"rem";
            }
        };
        
        var fnGetFieldSumsByPriority = function(aFields) {
            var i, iFieldsWithPrioHigh = 0, iFieldsWithPrioMedium = 0, iFieldsWithPrioLow = 0;
            for (i = 0; i < aFields.length; i += 1) {
                if (aFields[i].Importance) {
                    switch(aFields[i].Importance.EnumMember) {
                        case "com.sap.vocabularies.UI.v1.Priority/High":
                            iFieldsWithPrioHigh += 1;
                            break
                        case "com.sap.vocabularies.UI.v1.Priority/Medium":
                            iFieldsWithPrioMedium += 1;
                            break
                        case "com.sap.vocabularies.UI.v1.Priority/Low":
                            iFieldsWithPrioLow += 1;                            
                    }
                }
            }
            return {High: iFieldsWithPrioHigh, Medium: iFieldsWithPrioMedium, Low: iFieldsWithPrioLow};
        }

        genericThingViewer = function (sUri, sAnnotationUri, oTI, oThingCollection) {
            var sService, oModel, sEntitySet, sBindingPath, oMetadata, sEntityType, oHeaderInfo, aFacets, oBindingInfo, aHeaderInfoFacets,
            i, oContent = {}, sNavPath, sTargetEntitySet, sTargetEntityType, aRelatedLinks, that, modelReadCallback, jsonModel, oTable,
            sCount, functionParameters, oNavigationItem, j, k, sBusinessParams,
            oGeneralFacet, oNavModel, oTransactionSheet, aOverviewColumnSize, sLinkPath, oTransactionSheet, oActionSheet, oConfigurationSheet;
            sService = getServiceFromUri(sUri);
            oModel = new sap.ui.model.odata.ODataModel(sService, true);
            oModel.setCountSupported(false);
            oTI.setModel(oModel);
            sEntitySet = getEntitySetFromUri(sUri, oModel);
            sBindingPath = "/" + sUri.slice(sService.length);
            oMetadata = oModel.getServiceMetadata();
            //Because of a bug in icm the bsp application name and file name must be in lower case
            var sAnnotationUriPath = sAnnotationUri.substring(0, sAnnotationUri.substring(0, sAnnotationUri.lastIndexOf("/")).lastIndexOf("/"));
            var sAnnotationUriAppAndFilename = sAnnotationUri.substring(sAnnotationUri.substring(0, sAnnotationUri.lastIndexOf("/")).lastIndexOf("/"));
            sAnnotationUriAppAndFilename =  sAnnotationUriAppAndFilename.toLowerCase()
            oMapping = cbesh.annotation.Mapping.parse(oMetadata, sAnnotationUriPath+sAnnotationUriAppAndFilename);
            sEntityType = getEntityType(sEntitySet, oMetadata);
            oHeaderInfo = oMapping[sEntityType]["com.sap.vocabularies.UI.v1.HeaderInfo"];
            aFacets = oMapping[sEntityType]["com.sap.vocabularies.UI.v1.Facets"];
            aOverviewColumnSize = ["40%", "60%"];
            oTI.bindElement(sBindingPath, getExpand(sEntitySet, oMetadata));
            var oSapSuiteRb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
            // KPI's
            var numKpiTiles = 0;
            for (var key in oMapping[sEntityType] ){
                if (key.search("com.sap.vocabularies.UI.v1.DataPoint") != -1){
                    var aDataPoint = oMapping[sEntityType][key];
                    if (aDataPoint){
                        var bIsNumeric = false;
                        var oTile = new sap.suite.ui.commons.KpiTile({
                            doubleFontSize: false,
                        });
                        // set ValueFormat
                        var fractionDigits = 0; 
                        var oValueFormat;
                        if (aDataPoint.ValueFormat){
                            oValueFormat = new sap.ui.model.type.Float({
                                minFractionDigits: aDataPoint.ValueFormat.NumberOfFractionalDigits.Int,
                                maxFractionDigits: aDataPoint.ValueFormat.NumberOfFractionalDigits.Int
                            });    
                            fractionDigits = aDataPoint.ValueFormat.NumberOfFractionalDigits.Int;
                        } else oValueFormat = undefined;
                        if (aDataPoint.Title && aDataPoint.Title.String) {
                            oTile.setDescription(aDataPoint.Title.String);
                        } else {
                            if (aDataPoint.Title && aDataPoint.Title.Path) {
                                oTile.bindProperty("description", {path: aDataPoint.Title.Path} );
                            }
                        }
                        if (aDataPoint.Value && aDataPoint.Value.String) {
                            oTile.setValue(aDataPoint.Value.String);
                        } else {
                            if (aDataPoint.Value && aDataPoint.Value.Path) {
                                var oBinding = fieldBinding(aDataPoint.Value, aDataPoint.Value.EdmType, sEntityType);
                                // HANA Live                       
                                if (oBinding.fnChange){                        	
                                	oTile.setModel(oModel);
                                	oTile.bindElement(sBindingPath);
                                	oTile.getElementBinding().attachChange(oBinding.fnChange, oTile);
                                }
                                if (oBinding.String) {
                                    // live KPIs detected
                                    if ($.isNumeric(oBinding.String)) {
                                        bIsNumeric = true;
                                        oTile.setValue(kpiValueFormatter(oBinding.String, fractionDigits));
                                    } else {
                                        oTile.setValue(oBinding.String);
                                    }
                                } else if (oBinding.BindingInfo) {
                                    // check for currencies/unit of measures
                                    var oBindingInfo = oBinding.BindingInfo;
                                    if (oBindingInfo.parts && oBindingInfo.parts.length == 2){
                                        oTile.bindProperty("valueUnit", oBindingInfo.parts[0]);
                                        if (fractionDigits > 0) {
                                            oBindingInfo.parts[1].type = oValueFormat;   
                                        } else {
                                            oBindingInfo.parts[1].formatter = kpiValueFormatter;
                                            oBindingInfo.parts[1].type = oValueFormat;
                                        }   
                                        oTile.bindProperty("value", oBindingInfo.parts[1]);                                            
                                    } else if (oBindingInfo.parts && oBindingInfo.parts.length == 1) {
                                        if (fractionDigits > 0)                                                                 
                                            oBindingInfo.parts[0].type = oValueFormat;
                                        else
                                            oBindingInfo.parts[0].formatter = kpiValueFormatter;                                                               
                                        oTile.bindProperty("value",  oBindingInfo);
                                    }
                                    else {
                                        oTile.bindProperty("value", oBindingInfo);
                                    }
                                }
                            }
                        }
                        // set font size
                        if (aDataPoint.Value.EdmType === "Edm.Decimal" || aDataPoint.Value.EdmType === "Edm.Double" || aDataPoint.Value.EdmType === "Edm.Single" ||
                                aDataPoint.Value.EdmType === "Edm.Int16" || aDataPoint.Value.EdmType === "Edm.Int32" || aDataPoint.Value.EdmType === "Edm.Int64" || bIsNumeric == true) {
                            oTile.setDoubleFontSize(true);
                        }
                        oTI.addKpi(oTile);
                        numKpiTiles += 1;
                    }
                }
                // max. 3 KPIs supported
                if (numKpiTiles >= 3) 
                    break;
            }

            if (oHeaderInfo.TypeName.String) {
                oTI.setTitle(oHeaderInfo.TypeName.String);
            } else {
                if (oHeaderInfo.TypeName.Path) {
                    oTI.bindProperty("title", {path: oHeaderInfo.TypeName.Path});
                }
            }

            if (oHeaderInfo.Title.Value.String) {
                oTI.setName(oHeaderInfo.Title.Value.String);
            } else {
                oTI.bindProperty("name", fieldBinding(oHeaderInfo.Title.Value, oHeaderInfo.Title.EdmType, sEntityType).BindingInfo);
            }
            if (oHeaderInfo.Description && oHeaderInfo.Description.Value) {
                if (oHeaderInfo.Description.Value.String) {
                    oTI.setDescription(oHeaderInfo.Description.Value.String);
                } else {
                    oTI.bindProperty("description", fieldBinding(oHeaderInfo.Description.Value, oHeaderInfo.Description.EdmType, sEntityType).BindingInfo);
                }
            }

            if (oHeaderInfo.ImageUrl && oHeaderInfo.ImageUrl.String) {
                oTI.setIcon(oHeaderInfo.ImageUrl.String);
            } else {
                if (oHeaderInfo.ImageUrl && oHeaderInfo.ImageUrl.Path) {
                    oTI.bindProperty("icon", {path: oHeaderInfo.ImageUrl.Path});
                }
            }

            for (i = 0;i < aFacets.length; i += 1) {
                if (aFacets[i]["com.sap.vocabularies.UI.v1.IsSummary"]) {
                    oGeneralFacet = aFacets[i];
                    break;
                }
            }
            if (oGeneralFacet) {
                var iMaxItemsInGeneral = 17;
                var iFieldsWithPrioHigh = 0;
                var iFieldsWithPrioMedium = 0;
                var iSeparators = 0;
                var aAllReferenceFacets = [];
                var aDisplayFields = [];
                for (var j = 0; j < oGeneralFacet.Facets.length; j += 1) {
                    var sUseTerm = oGeneralFacet.Facets[j].Target.AnnotationPath.substring(oGeneralFacet.Facets[j].Target.AnnotationPath.lastIndexOf("@") + 1);
                    var sNavPath = oGeneralFacet.Facets[j].Target.AnnotationPath;
                    sNavPath = sNavPath.substring(0, sNavPath.lastIndexOf("@") - 1);
                    oGeneralFacet.Facets[j].NavPath = sNavPath;
                    var sNavEntitySet = getNavEntitySet(sEntitySet, sNavPath, oMetadata);
                    oGeneralFacet.Facets[j].NavEntitySet = sNavEntitySet;
                    var sEntitySetForFacet;
                    if (sNavEntitySet) {
                        sEntitySetForFacet = sNavEntitySet;
                    } else {
                        sEntitySetForFacet = sEntitySet;
                    }
                    oGeneralFacet.Facets[j].EntitySet = sEntitySetForFacet;
                    var sNavEntityType = getEntityType(sNavEntitySet, oMetadata);
                    var sEntityTypeForFacet;
                    if (sNavEntityType) {
                        sEntityTypeForFacet = sNavEntityType;
                    } else {
                        sEntityTypeForFacet = sEntityType;
                    }
                    oGeneralFacet.Facets[j].EntityType = sEntityTypeForFacet;
                    var aFacetContent = [];
                    if (oMapping[sEntityTypeForFacet][sUseTerm].length) {
                        aFacetContent = oMapping[sEntityTypeForFacet][sUseTerm];
                    }
                    else if (oMapping[sEntityTypeForFacet][sUseTerm].Data.length) {
                        aFacetContent = oMapping[sEntityTypeForFacet][sUseTerm].Data;
                    }
                    oGeneralFacet.Facets[j].Content = aFacetContent;
                    for (var i = 0;i < aFacetContent.length; i += 1) {
                        if (aFacetContent[i].Importance && (aFacetContent[i].Importance.EnumMember === "com.sap.vocabularies.UI.v1.Priority/High")){
                            iFieldsWithPrioHigh += 1;
                        } else if (aFacetContent[i].Importance && (aFacetContent[i].Importance.EnumMember === "com.sap.vocabularies.UI.v1.Priority/Medium")){
                            iFieldsWithPrioMedium += 1;
                        }
                    }
                }
                if ((iFieldsWithPrioHigh + iFieldsWithPrioMedium) > iMaxItemsInGeneral) {
                    iFieldsWithPrioMedium = iMaxItemsInGeneral - iFieldsWithPrioHigh;
                    if (iFieldsWithPrioMedium < 0) {
                        iFieldsWithPrioMedium = 0;
                    }
                }
                //On mobile phones only fields with priority high should be displayed
                if (jQuery.device.is.phone) {
                    iFieldsWithPrioMedium = 0;
                }
                var iFreeSpaceBuffer = iMaxItemsInGeneral - iFieldsWithPrioHigh - iFieldsWithPrioMedium;
                var aContent = []; 
                var oFieldSumsByPriority;
                var iFieldsOnOverview = iFieldsWithPrioMedium + iFieldsWithPrioHigh;
                var oFormLayout;
                for (var j = 0; j < oGeneralFacet.Facets.length; j += 1) {
                    oFormLayout = annotationFormLayout(oModel, oGeneralFacet.Facets[j].EntitySet, sAnnotationUri, oGeneralFacet.Facets[j].Content, {High: iFieldsWithPrioHigh, Medium: iFieldsWithPrioMedium, Low: 0}, null, aOverviewColumnSize).addStyleClass("sapFactsheetUtiTilePadding").addStyleClass("sapFactsheetUtiTable");
                    if (j > 0) {
                        oFormLayout.addStyleClass("sapFactsheetUtiPaddingTop"); 
                    }
                    if (oGeneralFacet.Facets[j].NavPath) {
                        oFormLayout.bindElement(sBindingPath+"/"+oGeneralFacet.Facets[j].NavPath);   
                    }                        
                    oFieldSumsByPriority = fnGetFieldSumsByPriority(oGeneralFacet.Facets[j].Content);
                    iFieldsWithPrioHigh -= oFieldSumsByPriority.High;
                    iFieldsWithPrioMedium -= oFieldSumsByPriority.Medium;
                    if (((oFieldSumsByPriority.High > 0) && ((iFieldsWithPrioHigh + oFieldSumsByPriority.High) > 0)) || ((oFieldSumsByPriority.Medium > 0) && ((iFieldsWithPrioMedium + oFieldSumsByPriority.Medium) > 0))) {
                        aContent.push(oFormLayout);
                        //If there is more than one facet there will be some space between the facets. Because of this the number of fields
                        //to be displayed must be reduced.
                        if (j > 0) {
                            if (iFreeSpaceBuffer > 0) {
                                iFreeSpaceBuffer -= 1;
                            }
                            else if (iFieldsWithPrioMedium > 0) {
                                iFieldsWithPrioMedium -= 1;
                            } else if (iFieldsWithPrioHigh > 0) {
                                iFieldsWithPrioHigh -= 1;
                            }
                        }
                    }
                    if ((iFieldsWithPrioHigh < 1) && (iFieldsWithPrioMedium < 1)) {
                        break;
                    }
                }
                if (iFieldsWithPrioHigh < 0) {
                    iFieldsWithPrioHigh = 0;
                }
                if (iFieldsWithPrioMedium < 0) {
                    iFieldsWithPrioMedium = 0;
                }
                var oContent = new sap.ui.layout.VerticalLayout({content: aContent});
                var sGeneralTileHeight = fnGetTeaserTileHeight();
                var iRowSpan = 1;
                if ((iFieldsOnOverview > 3) && (iFieldsOnOverview <= 9)) {
                    sGeneralTileHeight = fnGetTeaserTileHeight(2);
                    iRowSpan = 2;
                } else if (iFieldsOnOverview > 9) {
                    sGeneralTileHeight = fnGetTeaserTileHeight(3);
                    iRowSpan = 3;
                }
                facet = new sap.suite.ui.commons.FacetOverview({
                    title: oSapSuiteRb.getText("UNIFIEDTHINGINSPECTOR_GENERAL_INFORMATION_HEADER_TEXT"),
                    height: sGeneralTileHeight,
                    rowSpan: iRowSpan,
                    content: oContent 
                });

                facet.attachPress({facets: oGeneralFacet}, function(oEvent, oData){ 
                    oTI.removeAllFacetContent();
                    for (i = 0;i < oData.facets.Facets.length; i += 1) {
                        var oContent = createFacet(oModel, sEntitySet, sAnnotationUri, oData.facets.Facets[i], sBindingPath);
                        if (i === 0) {
                            var sTGDescription = ""; 
                            if (oTI.getName() && oTI.getDescription())
                                sTGDescription = oTI.getName() + ", " + oTI.getDescription();
                            else if (oTI.getName() && !oTI.getDescription())
                                sTGDescription = oTI.getName();
                            else if (!oTI.getName() && oTI.getDescription())
                                sTGDescription = oTI.getDescription();
                            oContent.setDescription(sTGDescription);
                        } else {
                            oContent.setDescription(oContent.getTitle());
                            oContent.setTitle("");
                        }
                        oTI.addFacetContent(oContent);	
                    }            
                    oTI.navigateToDetail();
                });
                oTI.addFacet(facet);
            }
            modelReadCallback = function (functionParameters) {
                return function (data) {
                    var oJsonModel = new sap.ui.model.json.JSONModel();
                    var sFacetEntityType = getEntityType(sEntitySet, oMetadata);
                    var oBadge = oMapping[functionParameters.navigationType]["com.sap.vocabularies.UI.v1.Badge"];
                    if (functionParameters.cardinality == "*") {
                        if(data.results && data.results.length) {
                            oJsonModel.setData(data);
                            var tableItemFactory = function(sId, oContext) {
                                var oTitle = dataField(oBadge.Title, functionParameters.navigationType, oMetadata);
                                var oData = oContext.oModel.oData.results[oContext.sPath.substring(oContext.sPath.lastIndexOf("/") + 1)];
                                if (oBadge.Title.RecordType && (oBadge.Title.RecordType === "com.sap.vocabularies.UI.v1.DataField")) {
                                    oTitle.addStyleClass("sapFactsheetUtiLabel");
                                }
                                if (oBadge.MainInfo) {
                                    var oMainInfo = dataField(oBadge.MainInfo, functionParameters.navigationType, oMetadata);    
                                } else {
                                    var oMainInfo = new sap.m.Text({text:""});
                                }

                                var oHLayout = new sap.ui.layout.HorizontalLayout();
                                if(oData[oBadge.Title.Value.Path] || oBadge.Title.Value.Apply) {
                                    oHLayout.addContent(oTitle);
                                    if(oBadge.MainInfo) {
                                        oHLayout.addContent(new sap.m.Text({text: " - "}).addStyleClass("sapFactsheetUtiSeparatorPadding"));
                                    }
                                }
                                if(oBadge.MainInfo) {
                                    oHLayout.addContent(oMainInfo);
                                }
                                return new sap.m.ColumnListItem({
                                    cells: [ oHLayout ]
                                })
                            };

                            var oContent = new sap.m.Table({
                                backgroundDesign: sap.m.BackgroundDesign.Transparent,
                                showSeparators: sap.m.ListSeparators.None,
                                columns: [
                                          new sap.m.Column({width: "100%" })
                                          ],
                                          items: 
                                          {
                                              path: "/results",
                                              factory: tableItemFactory
                                          }
                            });
                            oContent.setModel(oJsonModel);
                            oContent.addStyleClass("sapFactsheetUtiTilePadding");
                            oContent.addStyleClass("sapFactsheetUtiTable");

                            var count = parseInt(data.__count);
                            if (Number(count)) {
                                functionParameters.facet.setQuantity(count);
                                functionParameters.facet.setContent(oContent);
                            }    
                        } else {
                            functionParameters.facet.setQuantity(0);
                        }                        
                    } else {
                        oJsonModel.setData({result: data});
                        var oVLayoutForLabelValuePairs = new sap.ui.layout.VerticalLayout();
                        var aPropertyExtensions = (oMapping.propertyExtensions) ? oMapping.propertyExtensions[functionParameters.navigationType] : [];
                        var oHLayoutForTitle = new sap.ui.layout.HorizontalLayout().addStyleClass("sapFactsheetUtiHLayoutLabelValue");
                        var oTitleLabel = labelBinding(oBadge.Title, {}, aPropertyExtensions, true).addStyleClass("sapFactsheetUtiLabelMargin");
                        var oTitle = dataField(oBadge.Title, functionParameters.navigationType, oMetadata).setModel(oJsonModel).bindElement("/result");
                        oHLayoutForTitle.addContent(oTitleLabel);
                        oHLayoutForTitle.addContent(oTitle);
                        oVLayoutForLabelValuePairs.addContent(oHLayoutForTitle);
                        if(oBadge.MainInfo) {
                            var oHLayoutForMainInfo = new sap.ui.layout.HorizontalLayout().addStyleClass("sapFactsheetUtiHLayoutLabelValue");
                            var oMainInfoLabel = labelBinding(oBadge.MainInfo, {}, aPropertyExtensions, true).addStyleClass("sapFactsheetUtiLabelMargin");
                            var oMainInfo = dataField(oBadge.MainInfo, functionParameters.navigationType, oMetadata).setModel(oJsonModel).bindElement("/result");
                            oHLayoutForMainInfo.addContent(oMainInfoLabel);
                            oHLayoutForMainInfo.addContent(oMainInfo);
                            oVLayoutForLabelValuePairs.addContent(oHLayoutForMainInfo);
                        }
                        if(oBadge.SecondaryInfo) {
                            var oHLayoutForSecondaryInfo = new sap.ui.layout.HorizontalLayout().addStyleClass("sapFactsheetUtiHLayoutLabelValue");
                            var oSecondaryInfoLabel = labelBinding(oBadge.SecondaryInfo, {}, aPropertyExtensions, true).addStyleClass("sapFactsheetUtiLabelMargin");
                            var oSecondaryInfo = dataField(oBadge.SecondaryInfo, functionParameters.navigationType, oMetadata).setModel(oJsonModel).bindElement("/result");
                            oHLayoutForSecondaryInfo.addContent(oSecondaryInfoLabel);
                            oHLayoutForSecondaryInfo.addContent(oSecondaryInfo);
                            oVLayoutForLabelValuePairs.addContent(oHLayoutForSecondaryInfo);
                        }
                        if(oBadge.TypeImageUrl) {
                            var oHLayoutForIconAndText = new sap.ui.layout.HorizontalLayout();
                            var iIconSize = "64px";
                            if(jQuery.device.is.phone) {
                                iIconSize = "48px";
                            }
                            var oIcon = new sap.ui.core.Icon({size: iIconSize, width: iIconSize});
                            oIcon.addStyleClass("sapFactsheetUtiRelIcon");
                            if (oBadge.TypeImageUrl && oBadge.TypeImageUrl.String) {
                                oIcon.setSrc(oBadge.TypeImageUrl.String);
                            } else {
                                if (oBadge.TypeImageUrl && oBadge.TypeImageUrl.Path) {
                                    oIcon.bindProperty("src", oBadge.TypeImageUrl.Path);
                                }
                            }    
                            oHLayoutForIconAndText.addContent(oIcon);
                            oHLayoutForIconAndText.addContent(oVLayoutForLabelValuePairs);

                            functionParameters.facet.setContent(oHLayoutForIconAndText);  
                        } else {
                            functionParameters.facet.setContent(oVLayoutForLabelValuePairs);
                        }
                    }
                };
            };

            var facet;
            var sNavType;
            for (var i=0; i < aFacets.length; i += 1) {
                if (aFacets[i].Target) {
                    var sNavPath = aFacets[i].Target.AnnotationPath;
                    sNavPath = sNavPath.substring(0, sNavPath.lastIndexOf("@")-1);
                    if (sNavPath) {

                        var aNsEntityType = sEntityType.split(".");	
                        for (var m = oMetadata.dataServices.schema.length-1; m >= 0 ; m--) {
                            var metadataSchema = oMetadata.dataServices.schema[m];
                            var sNameSpace = aNsEntityType[0];
                            if (aNsEntityType.length > 2) {
                                for (var k = 1; k < aNsEntityType.length-1; k += 1) {
                                    sNameSpace += "."+aNsEntityType[k];					
                                }
                            }
                            if (metadataSchema.namespace == sNameSpace) {
                                for (var j = 0; j < metadataSchema.association.length; j += 1) {
                                    if (metadataSchema.association[j].name == sNavPath) {
                                        sNavType = metadataSchema.association[j].end[1].type;
                                    }
                                }
                            }
                        }
                        facet = new sap.suite.ui.commons.FacetOverview({
                            title: aFacets[i].Label.String,
                            height: fnGetTeaserTileHeight(),
                        });
                        facet.attachPress({facet:aFacets[i]}, function(oEvent, oData){ 
                            oTI.removeAllFacetContent();
                            var oContent = createFacet(oModel, sEntitySet, sAnnotationUri, oData.facet, sBindingPath);
                            var sTGDescription = ""; 
                            if (oTI.getName() && oTI.getDescription())
                                sTGDescription = oTI.getName() + ", " + oTI.getDescription();
                            else if (oTI.getName() && !oTI.getDescription())
                                sTGDescription = oTI.getName();
                            else if (!oTI.getName() && oTI.getDescription())
                                sTGDescription = oTI.getDescription();
                            oContent.setDescription(sTGDescription);
                            oTI.addFacetContent(oContent);
                            oTI.navigateToDetail();
                        });
                        var cardinality = getAssociationMultiplicity(sEntitySet, sNavPath, oMetadata);
                        functionParameters = { cardinality: cardinality, navigationPath: sNavPath, facet: facet, navigationType: sNavType, metadata: oMetadata };
                        var parameters;
                        if (cardinality == "*") {
                            parameters = ["$inlinecount=allpages","$top=3"];
                        } else {
                            parameters = [];
                        }
                        oModel.read(sBindingPath+"/"+sNavPath, "", parameters, true, modelReadCallback(functionParameters));
                        oTI.addFacet(facet);
                    }
                }
            }
            
            //Footer area
            oTI.setActionsVisible(true);
            var oEmailBtn = new sap.m.Button({text: oSapSuiteRb.getText("UNIFIEDTHINGINSPECTOR_FOOTER_BUTTON_EMAIL_LINK"),
              icon : "sap-icon://email",
              press : function(oE) {
              sap.m.URLHelper.triggerEmail("", oTI.getName(), window.location.href);
            }});
            oActionSheet = new sap.m.ActionSheet({ placement: sap.m.PlacementType.Top });
            oActionSheet.addButton(new sap.ushell.ui.footerbar.JamDiscussButton()); 
            oActionSheet.addButton(new sap.ushell.ui.footerbar.JamShareButton({ 
//              jamData: { oDataServiceUrl: "/sap/opu/odata/sap/sm_integration_srv", 
//              object: { id: sUri, display: new sap.m.Text({text:"123"}), share: "note text"}
//              } 
            }));
            var oAddBookmarkButton = new sap.ushell.ui.footerbar.AddBookmarkButton();
            var fnBindingChanged = function() {
                oAddBookmarkButton.setAppData({title: oTI.getTitle(), subtitle: oTI.getName() + " - " + oTI.getDescription()});
                oAddBookmarkButton.setEnabled(true);
                if (jQuery.device.is.desktop) {
                    oNavModel = new sap.ui.model.odata.ODataModel("/sap/opu/odata/UI2/INTEROP", true);
                    sLinkPath = "/SemanticObjects('"+getEntityType(sEntitySet, oMetadata, true)+"')/Links";
                    oTransactionSheet = new sap.suite.ui.commons.LinkActionSheet({
                        showCancelButton: true,
                        placement: sap.m.PlacementType.Top
                    });
                    sBusinessParams = getEntityKeyFromUri(sUri, oModel);
                    var aBusinessParams = sBusinessParams.split(",");
                    for(i = 0; i < aBusinessParams.length; i += 1) {
                         aBusinessParams[i] = aBusinessParams[i].replace("='", "=", "g");
                         if (aBusinessParams[i].lastIndexOf("'") == aBusinessParams[i].length-1) 
                               aBusinessParams[i] = aBusinessParams[i].slice(0,-1);
                    }
                    for (var sTerm in oMapping[sEntityType] ){ 
                     if (sTerm.indexOf("com.sap.vocabularies.Common.v1.SecondaryKey") == 0) {
                           var aTerm = oMapping[sEntityType][sTerm];
                           for(i = 0; i < aTerm.length; i += 1) {
                                  var oParaValue = oModel.getContext(sBindingPath).getProperty(aTerm[i].PropertyPath);
                                  if (oParaValue) {
                                         aBusinessParams.push(aTerm[i].PropertyPath+"="+oParaValue)                                               
                                  }
                           }                          
                     }
                    }
                    sBusinessParams = aBusinessParams.join("&");
                    oNavModel.read(sLinkPath, "", "", true, function (data) {
                        var i, sHashValue;
                        if (data && data.results) {
                            for (i = 0; i < data.results.length; i += 1) {
                                if (data.results[i].id.indexOf(FACTSHEET) < 0) {
                                    sHashValue = "#" + data.results[i].id + "?" + sBusinessParams; 
                                    oTransactionSheet.addItem( new sap.m.Link({text: data.results[i].text, href: sHashValue}) );
                                    oTI.setTransactionsVisible(true);
                                }
                            }
                        }
                    });
                    oTI.attachTransactionsButtonPress(function(oEvent) { oTransactionSheet.openBy(oEvent.getParameter("caller"))});
                }
                this.detachChange(fnBindingChanged);                          
            };

            oTI.getElementBinding().attachChange(fnBindingChanged);

            oActionSheet.addButton(oAddBookmarkButton);
            oActionSheet.addButton(oEmailBtn);
            oTI.attachActionsButtonPress(function(oEvent) { oActionSheet.openBy(oEvent.getParameter("caller")) });

            oConfigurationSheet = new sap.m.ActionSheet({placement: sap.m.PlacementType.Top});
            oConfigurationSheet.addButton(new sap.ushell.ui.footerbar.AboutButton());  
            oConfigurationSheet.addButton(new sap.ushell.ui.footerbar.LoginDetailsButton());         
            oConfigurationSheet.addButton(new sap.ushell.ui.footerbar.LogoutButton());
            oTI.attachConfigurationButtonPress(function(oEvent) { oConfigurationSheet.openBy(oEvent.getParameter("caller")) });

            oTI.attachBackAction(function (oEvent) {
                history.back();
            });
            
            return oTI;
        };

        return {
            ThingViewer :  function (sUri, sAnnotationUri) {

                try {
                    oTI = genericThingViewer(sUri, sAnnotationUri, new sap.suite.ui.commons.UnifiedThingInspector());
                } catch (e) {
                    throw e;
                }
                return oTI;
            }
        };
        // End
    })();
}());

}; // end of sap/ushell/components/factsheet/factory/ThingInspector.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.tools.ODataUrlTemplating') ) {
//Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview This file contains an annotation parser for factsheets.
 */

(function() {
    "use strict";

 // Exception Object
    function ParameterException(parameter, template, url) {
        this.parameter = parameter;
        this.template = template;
        this.semiConvertedUrl = url;
        this.message = " is a missing key parameter for constructing the entity url";
        this.toString = function() {
           return this.parameter + this.message
        };
    }
    
    jQuery.sap
            .declare("sap.ushell.components.factsheet.tools.ODataUrlTemplating");

    sap.ushell.components.factsheet.tools.ODataUrlTemplating = {
        ParameterException : ParameterException,
        resolve : function(template, data) {
            var sEntityUrl, value, parameter, i,
            businessParameter = template.match(/{\s*[\w\.]+\s*}/g);
            sEntityUrl = template;

            for (i = businessParameter.length - 1; i >= 0; i -= 1) {
                parameter = businessParameter[i];
                value = data[parameter.replace(/[{}]/g, "")];
                if (value !== undefined) {
                    if (typeof value !== "string") {
                        value = value[0];
                    }
                    sEntityUrl = sEntityUrl.replace(parameter, value);
                }
            }
            // Is there a parameter left
            if (parameter = sEntityUrl.match(/{\s*[\w\.]+\s*}/g)) {
                jQuery.sap.log.error(" "
                        + sEntityUrl);
                // TODO: Raise exception
                throw new this.ParameterException(parameter, template, sEntityUrl);
            }

            return sEntityUrl;
        }
    }
})();
}; // end of sap/ushell/components/factsheet/tools/ODataUrlTemplating.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.views.ThingViewer.view') ) {
  jQuery.sap.declare('sap.ushell.components.factsheet.views.ThingViewer.view');
(function () {
    "use strict";
    /*global jQuery, sap */
    
    sap.ui.jsview("sap.ushell.components.factsheet.views.ThingViewer", {

        getControllerName : function () {
            return "sap.ushell.components.factsheet.views.ThingViewer";
        },
        createContent : function (oController) {
            var sEntityUrl, sAnnotationUrl, sEntityUrlTemplate, oTI, businessParameter, i, parameter, value, oViewData;
            oViewData = this.getViewData();

            jQuery.sap.require("sap.ushell.components.factsheet.factory.ThingInspector");

            // Sample Hash UI2_DEMO_PRODUCT-DisplayFactSheet~6bpO?ProductID=HT-1000
            sEntityUrl = oViewData.entity || oViewData.service;// Old Parameter Name was Service
            if (!sEntityUrl) {
                sEntityUrlTemplate = oViewData.entityTemplateURI || oViewData.template;
                
                if (sEntityUrlTemplate) {
                    // Parameters may be arrays 
                    if (typeof sEntityUrlTemplate !== "string") {
                        sEntityUrlTemplate = sEntityUrlTemplate[0];
                    }
                    //regEx = /{[A-Za-z0-9_]*}/g;
  
                    sEntityUrl = sap.ushell.components.factsheet.tools.ODataUrlTemplating.resolve(sEntityUrlTemplate, oViewData);
                  }

            }
            sAnnotationUrl = oViewData.annotationURI || oViewData.annotation;

            if (typeof sEntityUrl !== "string") {
                sEntityUrl = sEntityUrl[0];
            }
            if (typeof sAnnotationUrl !== "string") {
                sAnnotationUrl = sAnnotationUrl[0];
            }

            //TODO: Replace the 3rd Parameter which was originally for the carousel control with something else. Maybe
            //      a callback function or something???
            oTI = sap.ushell.components.factsheet.factory.ThingViewer(sEntityUrl, sAnnotationUrl, new sap.ui.core.Control());

            //Add min-height
            oTI.addStyleClass("ThingInspector");
            return oTI;
        }
    });
}());

}; // end of sap/ushell/components/factsheet/views/ThingViewer.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.functionBindPrototype') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview This file adds the missing Function.bind function for Webkit browsers.
 */

(function () {
    "use strict";
    /*global jQuery, sap */

    // ensure that sap.ushell exists
    jQuery.sap.declare("sap.ushell.functionBindPrototype");

    if (!Function.prototype.bind) {
        Function.prototype.bind = function(oThis) {
            if (typeof this !== "function") {
                // closest thing possible to the ECMAScript 5 internal IsCallable function
                throw new TypeError(
                        "Function.prototype.bind - what is trying to be bound is not callable");
            }

            var aArgs = Array.prototype.slice.call(arguments, 1), fToBind = this, fNOP = function() {
            }, fBound = function() {
                return fToBind.apply(this instanceof fNOP && oThis ? this
                        : oThis, aArgs.concat(Array.prototype.slice
                        .call(arguments)));
            };

            fNOP.prototype = this.prototype;
            fBound.prototype = new fNOP();

            return fBound;
        };
    }
}());

}; // end of sap/ushell/functionBindPrototype.js
if ( !jQuery.sap.isDeclared('sap.ushell.functionOverrideResizeEvent') ) {
/*!
 * Modified version of
 * jQuery resize event - v1.1 - 3/14/2010
 * http://benalman.com/projects/jquery-resize-plugin/
 * 
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 *
 * Version: 1.1
 *
 * Author:    "Cowboy" Ben Alman
 * Web:       http://benalman.com/projects/jquery-resize-plugin/
 * License:   Dual licensed under the MIT and GPL licenses.
 *            http://benalman.com/about/license/
 *
 */
// Script: jQuery resize event
//
// *Version: 1.1, Last updated: 3/14/2010*
// 
// Project Home - http://benalman.com/projects/jquery-resize-plugin/
// GitHub       - http://github.com/cowboy/jquery-resize/
// Source       - http://github.com/cowboy/jquery-resize/raw/master/jquery.ba-resize.js
// (Minified)   - http://github.com/cowboy/jquery-resize/raw/master/jquery.ba-resize.min.js (1.0kb)
// 
// About: License
// 
// Copyright (c) 2010 "Cowboy" Ben Alman,
// Dual licensed under the MIT and GPL licenses.
// http://benalman.com/about/license/
// 
// About: Examples
// 
// This working example, complete with fully commented code, illustrates a few
// ways in which this plugin can be used.
// 
// resize event - http://benalman.com/code/projects/jquery-resize/examples/resize/
// 
// About: Support and Testing
// 
// Information about what version or versions of jQuery this plugin has been
// tested with, what browsers it has been tested in, and where the unit tests
// reside (so you can test it yourself).
// 
// jQuery Versions - 1.3.2, 1.4.1, 1.4.2
// Browsers Tested - Internet Explorer 6-8, Firefox 2-3.6, Safari 3-4, Chrome, Opera 9.6-10.1.
// Unit Tests      - http://benalman.com/code/projects/jquery-resize/unit/
// 
// About: Release History
// 
// 1.1 - (3/14/2010) Fixed a minor bug that was causing the event to trigger
//       immediately after bind in some circumstances. Also changed $.fn.data
//       to $.data to improve performance.
// 1.0 - (2/10/2010) Initial release

(function () {
    "use strict";
    /*global jQuery, sap, clearTimeout, console, window */

    // ensure that sap.ushell exists
    jQuery.sap.declare("sap.ushell.functionOverrideResizeEvent");

    //This method will create a watch deamon to check for resizing of dom elements

        //Elements to be watched
    var jqaElements = jQuery([]),
        //Extend the jQuery resize event if it already exists, otherwise create it
        jqResizeEvent = jQuery.resize = jQuery.extend(jQuery.resize, {}),
        //Window timeout id
        sTimeoutId,
        watchDeamon;

    //Watch interval
    jqResizeEvent.delay = 250;
    //Throttle the default resize event
    jqResizeEvent.throttleWindow = true;

    jQuery.event.special.resize = {

        //Setup is called when this event is bound for the first time
        setup: function () {

            //Check if this event is being bound to the window object
            //If so: Don't use this custom binding, but the default DOM event
            if (jqResizeEvent.throttleWindow && this.setTimeout) {
                return false;
            }

            //Get the current element
            var jqCurrentElement = jQuery(this);

            //Add the current element to the watch list
            jqaElements = jqaElements.add(jqCurrentElement);

            //Store the current dimensions of the element in the jQuery data hub
            jQuery.data(this, "resize-special-event", {
                width:  jqCurrentElement.width(),
                height: jqCurrentElement.height()
            });

            //If this is the first element in the watch list, start the deamon
            if (jqaElements.length === 1) {
                watchDeamon();
            }
        },

        //Reset everything if the last element has been removed from the watchlist
        teardown: function () {
            //Check if this event is being unbound from the window object
            //If so: Don't unbind here, but forward the unbinding to the default DOM event
            if (jqResizeEvent.throttleWindow && this.setTimeout) {
                return false;
            }

            //Get the current element
            var jqCurrentElement = jQuery(this);

            //Remove the current element from the watch list
            jqaElements = jqaElements.not(jqCurrentElement);

            //Remove all data stored in that element
            jqCurrentElement.removeData("resize-special-event");

            //If this was the last element in the watchlist, stop the deamon
            if (!jqaElements.length) {
                clearTimeout(sTimeoutId);
            }
        },

        //Add a new element to the watchlist
        add: function (oNewElement) {

            //Check if this event is being bound to the window object
            //If so: Don't use this custom binding, but the default DOM event
            if (jqResizeEvent.throttleWindow && this.setTimeout) {
                return false;
            }

            //Save the old event handler
            var oOldEventHandler,
                that = this,
                fNewEventHandler;

            //This will be the new event handler
            fNewEventHandler = function (event, width, height) {

                    //Get the current element
                var jqCurrentElement = jQuery(that),
                    //Get the event data object for the current element
                    oData = jQuery.data(that, "resize-special-event");

                //If called from the deamon, the width and height will be passed over as arguments
                //When triggered manually, these values will have to be computed
                if (width && height) {
                    oData.width = width;
                    oData.height = height;
                } else {
                    oData.width = jqCurrentElement.width();
                    oData.height = jqCurrentElement.height();
                }

                oOldEventHandler.apply(that, arguments);
            };

            //jQuery version compatibility
            if (jQuery.isFunction(oNewElement)) {
                oOldEventHandler = oNewElement;
                return fNewEventHandler;
            }
            oOldEventHandler = oNewElement.handler;
            oNewElement.handler = fNewEventHandler;
        }
    };

    watchDeamon = function () {
        //Start the deamon asynchonously
        sTimeoutId = window.setTimeout(function () {

            //Loop through all elements in the watchlist
            jqaElements.each(function () {
                    //Get the current element
                var jqCurrentElement = jQuery(this),
                    //Get the current dimensions of the element
                    width  = jqCurrentElement.width(),
                    height = jqCurrentElement.height(),
                    //Get the previous dimensions of the element
                    oData = jQuery.data(this, "resize-special-event");

                //Check if the element's size has changed
                if (width !== oData.width || height !== oData.height) {
                    //Raise the resize event
                    jqCurrentElement.trigger("resize", [oData.width = width, oData.height = height]);
                }
            });

            //And repeat (regarding the timeout)
            watchDeamon();

        }, jqResizeEvent.delay);

    };

}());

}; // end of sap/ushell/functionOverrideResizeEvent.js
if ( !jQuery.sap.isDeclared('sap.ushell.iconfonts') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview This file contains the functionality needed to register
 * the Fiori Wave 2 font icons
 */

(function () {
    "use strict";
    /*global jQuery, sap, setTimeout */

    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


    jQuery.sap.declare("sap.ushell.iconfonts");
    sap.ushell.iconfonts = { };

    /*
     * loads SAP Fiori Wave 2 launch icon font and font icons that are needed in
     * launchpad UI itself
     */
    sap.ushell.iconfonts.registerFiori2IconFont = function () {
        // the lists of icons as [name, unicode code point] tuples
        // ... for Launchpad UI
        var oLaunchpadIcons = {
                fontFamily: "BusinessSuiteInAppSymbols",
                collectionName: "BusinessSuiteInAppSymbols",
                icons : [
                    ["icon-heart", "E000"], ["icon-quarter", "E001"], ["icon-year", "E002"],
                    ["icon-equalizer", "E003"], ["icon-component", "E004"], ["icon-component-private", "E005"],
                    ["icon-raw-material", "E006"], ["icon-sms", "E007"], ["icon-add-note", "E008"],
                    ["icon-change-time-horizon", "E009"], ["icon-table-chart-customization", "E00a"], ["icon-delegated-important-task", "E00b"],
                    ["icon-forklift", "E00c"], ["icon-coins", "E00d"], ["icon-filter-menu", "E00e"],
                    ["icon-target-to-date", "E00f"], ["icon-program", "E010"], ["icon-phase", "E011"],
                    ["icon-checklist", "E012"], ["icon-mirrored-task", "E013"], ["icon-sub-project", "E014"],
                    ["icon-checklist-item", "E015"], ["icon-adhoc-analysis", "E016"], ["icon-change-analysis", "E017"],
                    ["icon-review-demands", "E018"], ["icon-project-definition", "E019"], ["icon-data-access", "E01a"],
                    ["icon-define-shortage", "E01b"], ["icon-review-supplies", "E01c"], ["icon-change-log", "E01d"],
                    ["icon-priority-1", "E01e"], ["icon-priority-2", "E01f"], ["icon-jam", "E020"], ["icon-milestone", "E021"]
                ]
            },
            // old Fiori1 app icons
            oFiori1Icons = {
                fontFamily: "SAP-Icons",
                collectionName: "Fiori2",
                icons: [
                    ["F0017", "e05e"], ["F0018", "e0c3"], ["F0019", "e0c3"], ["F0020", "e0c3"],
                    ["F0021", "e10d"], ["F0366", "e129"], ["F0392", "e04f"], ["F0394", "e044"],
                    ["F0395", "e132"], ["F0396", "e064"], ["F0397", "e0a4"], ["F0398", "e0a4"],
                    ["F0399", "e044"],
                    // TODO: as soon as it's created, add
                    //["F0400", ""],
                    ["F0401", "e08d"], ["F0402", "e13e"],
                    ["F0403", "e13e"], ["F0404", "e033"], ["F0405", "e0b3"], ["F0406", "e043"],
                    ["F0407", "e043"], ["F0408", "e043"], ["F0409", "e075"], ["F0410", "e007"],
                    ["F0411", "e075"]
                ]
            },
            // Fiori2 app icons
            oAppIcons = {
                fontFamily: "Fiori2",
                collectionName: "Fiori2",
                icons : [
                    // transaction app icons
                    ["F0002", "E236"], ["F0003", "E202"], ["F0004", "E203"], ["F0005", "E204"],
                    ["F0006", "E205"], ["F0009", "E206"], ["F0010", "E207"], ["F0012", "E208"],
                    ["F0014", "E209"], ["F0018", "E200"], ["F0019", "E201"], ["F0023", "E20A"],
                    ["F0024", "E20B"], ["F0025", "E20C"], ["F0026", "E20D"], ["F0072", "E23A"],
                    ["F0100", "E23B"], ["F0101", "E23C"], ["F0102", "E23D"], ["F0106", "E20F"],
                    ["F0144", "E210"], ["F0190", "E23E"], ["F0194", "E23F"], ["F0210", "E242"],
                    ["F0211", "E243"], ["F0212", "E244"], ["F0217", "E211"], ["F0220", "E213"],
                    ["F0243", "E215"], ["F0244", "E216"], ["F0245", "E217"], ["F0246", "E218"],
                    ["F0247", "E219"], ["F0248", "E21A"], ["F0249", "E21B"], ["F0250", "E21C"],
                    ["F0251", "E21D"], ["F0252", "E21E"], ["F0257", "E21F"], ["F0281", "E220"],
                    ["F0282", "E221"], ["F0283", "E222"], ["F0284", "E223"], ["F0292", "E224"],
                    ["F0295", "E225"], ["F0296", "E226"], ["F0316", "E227"], ["F0317", "E228"],
                    ["F0321", "E229"], ["F0339", "E22A"], ["F0340", "E22B"], ["F0341", "E22C"],
                    ["F0342", "E22D"], ["F0365", "E212"], ["F0366", "E22F"], ["F0367", "E230"],
                    ["F0368", "E231"], ["F0369", "E235"], ["F0370", "E22E"], ["F0372", "E232"],
                    ["F0380", "E233"], ["F0381", "E234"], ["F0382", "E246"], ["F0390", "E20E"],
                    ["F0412", "E213"], ["F0429", "E2A6"], ["F0xx1", "E240"], ["F0xx2", "E241"],

                    // analytic app icons
                    ["F0013", "E237"], ["F0016", "E238"], ["F0028", "E239"], ["F0029", "E283"],
                    ["F0030", "E284"], ["F0031", "E285"], ["F0032", "E286"], ["F0033", "E287"],
                    ["F0034", "E288"], ["F0036", "E289"], ["F0038", "E28A"], ["F0039", "E28B"],
                    ["F0041", "E28C"], ["F0044", "E28D"], ["F0293", "E28E"], ["F0294", "E28F"],
                    ["F0297", "E290"], ["F0298", "E291"], ["F0299", "E292"], ["F0300", "E293"],
                    ["F0301", "E294"], ["F0302", "E295"], ["F0303", "E296"], ["F0304", "E297"],
                    ["F0305", "E298"], ["F0306", "E299"], ["F0323", "E29A"], ["F0324", "E29B"],
                    ["F0326", "E29C"], ["F0327", "E29D"], ["F0328", "E29E"], ["F0329", "E29F"],
                    ["F0331", "E2A1"], ["F0332", "E2A2"], ["F0343", "E2A3"], ["F0344", "E2A4"],
                    ["F0345", "E2A5"], ["F0388", "E2A7"], ["F0391", "E2A0"]
                ]
            },
            sStylePath = jQuery.sap.getModulePath("sap.ushell") + "/themes/base/IconFonts.css";

        // check whether stylesheet is already loaded in <head> with the right ID
        if (jQuery("#icon-fonts-Fiori2")) {
            this.registerFonts(oFiori1Icons, oAppIcons, oLaunchpadIcons);
        } else {
            // load via callback - note that this can have side effects, as the fonts may not yet be loaded but already be requested
            jQuery.sap.includeStyleSheet(sStylePath, "icon-fonts-Fiori2",
                jQuery.proxy(this.registerFonts, this, oFiori1Icons, oAppIcons, oLaunchpadIcons),
                function () {
                    // error
                    jQuery.sap.log.error("Problems finding css for loading Fiori2 icon font in " + sStylePath);
                });
        }
    };

    /*
     * loads icon font characters
     *
     * call like <code>sap.ushell.iconfonts.registerFonts(oFontIcons1, oFontIcons2, ...);</code>
     *
     * @param {object} an object with icon font definition (see below). Note that the icon font has
     *          to be registered in CSS before (via @font-face).
     *          <code>
     *          var oIcon = {
     *              fontFamily: "FontFamilyName",   // from @font-face definition in CSS
     *              collectionName: "collection",   // IconPool collection name, e.g. 'Fiori2'
     *              icons : [["icon-name", "E001], [...], ...]  // list of tuples containing ("icon name", "unicode code point") tuples
     *          }
     *          </code>
     *
     * @private
     */
    sap.ushell.iconfonts.registerFonts = function () {
        var oIcon,
            i,
            j;
        for (i = 0; i < arguments.length; i = i + 1) {
            oIcon = arguments[i];
            for (j = 0; j < oIcon.icons.length; j = j + 1) {
                sap.ui.core.IconPool.addIcon(oIcon.icons[j][0], oIcon.collectionName, oIcon.fontFamily, oIcon.icons[j][1]);
            }
        }
    };

}());
}; // end of sap/ushell/iconfonts.js
if ( !jQuery.sap.isDeclared('sap.ushell.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.ushell (1.16.3)
 */
jQuery.sap.declare("sap.ushell.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAP library: sap.ushell
 *
 * @namespace
 * @name sap.ushell
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.layout.library'); // unlisted dependency retained

jQuery.sap.require('sap.m.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.ushell",
  dependencies : ["sap.ui.core","sap.ui.layout","sap.m"],
  types: [
    "sap.ushell.ui.launchpad.DeleteAreaType",
    "sap.ushell.ui.tile.State",
    "sap.ushell.ui.tile.StateArrow"
  ],
  interfaces: [],
  controls: [
    "sap.ushell.ui.footerbar.AboutButton",
    "sap.ushell.ui.footerbar.AddBookmarkButton",
    "sap.ushell.ui.footerbar.JamDiscussButton",
    "sap.ushell.ui.footerbar.JamShareButton",
    "sap.ushell.ui.footerbar.LoginDetailsButton",
    "sap.ushell.ui.footerbar.LogoutButton",
    "sap.ushell.ui.footerbar.SettingsButton",
    "sap.ushell.ui.launchpad.CatalogListItem",
    "sap.ushell.ui.launchpad.DashboardGroupsContainer",
    "sap.ushell.ui.launchpad.DeleteArea",
    "sap.ushell.ui.launchpad.GroupListItem",
    "sap.ushell.ui.launchpad.HeaderTile",
    "sap.ushell.ui.launchpad.LoadingDialog",
    "sap.ushell.ui.launchpad.Panel",
    "sap.ushell.ui.launchpad.PlusTile",
    "sap.ushell.ui.launchpad.SearchResultAppItem",
    "sap.ushell.ui.launchpad.SearchResultApps",
    "sap.ushell.ui.launchpad.SearchSuggestionList",
    "sap.ushell.ui.launchpad.SearchSuggestionListItem",
    "sap.ushell.ui.launchpad.Tile",
    "sap.ushell.ui.launchpad.TileContainer",
    "sap.ushell.ui.tile.DynamicTile",
    "sap.ushell.ui.tile.ImageTile",
    "sap.ushell.ui.tile.StaticTile",
    "sap.ushell.ui.tile.TileBase"
  ],
  elements: [],
  version: "1.16.3"});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ushell.ui.launchpad.DeleteAreaType.
jQuery.sap.declare("sap.ushell.ui.launchpad.DeleteAreaType");


/**
 * @class ...
 * @private
 *
 * @version 1.16.3
 * @static
 * @public
 */
sap.ushell.ui.launchpad.DeleteAreaType = {
  
    /**
     * ... 
     * @public
     */
    Dashboard : "Dashboard",

    /**
     * ... 
     * @public
     */
    GroupList : "GroupList"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ushell.ui.tile.State.
jQuery.sap.declare("sap.ushell.ui.tile.State");


/**
 * @class Denotes states for control parts and translates into standard SAP color codes
 *
 * @version 1.16.3
 * @static
 * @public
 */
sap.ushell.ui.tile.State = {
  
    /**
     * Alias for "None" 
     * @public
     */
    Neutral : "Neutral",

    /**
     * Indicates a state that is neutral, e.g. for standard display (Grey color) 
     * @public
     */
    None : "None",

    /**
     * Alias for "Error" 
     * @public
     */
    Negative : "Negative",

    /**
     * Indicates a state that is negative, e.g. marking an element that has to get attention urgently or indicates negative values (Red color) 
     * @public
     */
    Error : "Error",

    /**
     * Alias for "Success" 
     * @public
     */
    Positive : "Positive",

    /**
     * Indicates a state that is positive, e.g. marking a task successfully executed or a state where all is good (Green color) 
     * @public
     */
    Success : "Success",

    /**
     * Alias for "Warning" 
     * @public
     */
    Critical : "Critical",

    /**
     * Indicates a state that is critical, e.g. marking an element that needs attention (Orange color) 
     * @public
     */
    Warning : "Warning"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ushell.ui.tile.StateArrow.
jQuery.sap.declare("sap.ushell.ui.tile.StateArrow");


/**
 * @class The state of an arrow as trend direction indicator, pointing either up or down
 * @private
 *
 * @version 1.16.3
 * @static
 * @public
 */
sap.ushell.ui.tile.StateArrow = {
  
    /**
     * The trend direction indicator is invisible 
     * @public
     */
    None : "None",

    /**
     * The trend direction indicator points up 
     * @public
     */
    Up : "Up",

    /**
     * The trend direction indicator points down 
     * @public
     */
    Down : "Down"

  };

// -----------------------------------------------------------------------------
// Begin of Library Initialization coding, copied from shared.js
// -----------------------------------------------------------------------------

// shared.js is automatically appended to library.js
//
// hiding (generated) types that are marked as @public by default
/**
 * @name sap.ushell.ui.tile.StateArrow
 * @private
 */
/**
 * @name sap.ushell.ui.tile.State
 * @private
 */
/**
 * @name sap.ushell.ui.launchpad.DeleteAreaType
 * @private
 */
}; // end of sap/ushell/library.js
if ( !jQuery.sap.isDeclared('sap.ushell.override') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview This file contains miscellaneous functions which may be used
 * to override/replace existing SAPUI5 methods.
 */

(function () {
    "use strict";
    /*global jQuery, sap, setTimeout */

    // ensure that sap.ushell exists
    jQuery.sap.declare("sap.ushell.override");

    sap.ushell.override = {};

    /**
     * Override sap.ui.base.ManagedObject.updateAggregation
     *
     * This is a generic drop-in replacement. It avoids the destroy items call.
     * Instead, the bindings of existing items are updated.
     *
     * Note: Listbindings with grouping and Treebindings are not supported. In
     * these cases, the default method is still invoked.
     */
    sap.ushell.override.updateAggregation = function (sName) {
        if (this.isTreeBinding(sName)) {
            // no idea how to handle -> delegate to parent 
            sap.ui.base.ManagedObject.prototype.updateAggregation.apply(this, arguments);
        } else {
            var oBindingInfo = this.mBindingInfos[sName],
                oBinding = oBindingInfo.binding,
                fnFactory = oBindingInfo.factory,
                oAggregationInfo = this.getMetadata().getJSONKeys()[sName],  // TODO fix handling of hidden aggregations
                oNewGroup = null,
                sGroupFunction = null,
                bGrouped = null,
                sGroup = null,
                iListIndex = 0,
                iLastIndex = 0,
                aItems = [],
                aToBeDestroyed = [],
                that = this;
//            this[oAggregationInfo._sDestructor]();

            sGroupFunction = oAggregationInfo._sMutator + "Group";
            bGrouped = oBinding.isGrouped() && this[sGroupFunction];
            if (bGrouped) {
               // do not handle grouped aggregations -> delegate to parent 
                sap.ui.base.ManagedObject.prototype.updateAggregation.apply(this, arguments);

            } else {
                aItems = this[oAggregationInfo._sGetter](); // get all items

                jQuery.each(oBinding.getContexts(), function (iIndex, oContext) {
                    /* Ignore groups part -> has been delegated 
                    if (bGrouped && oBinding.aSorters.length > 0) {
                        oNewGroup = oBinding.aSorters[0].fnGroup(oContext);
                        if (typeof oNewGroup == "string") {
                            oNewGroup = {
                                key: oNewGroup
                            };
                        } 
                        if (oNewGroup.key !== sGroup) {
                            var oGroupHeader;
                            //If factory is defined use it
                            if (oBindingInfo.groupHeaderFactory) {
                                oGroupHeader = oBindingInfo.groupHeaderFactory(oNewGroup);
                            }
                            that[sGroupFunction](oNewGroup, oGroupHeader);
                            sGroup = oNewGroup.key;
                        }
                    }
                    */

                    if (iListIndex < aItems.length) {
                        // case A: there is an existing item to reuse
                        aItems[iListIndex].setBindingContext(oContext, oBindingInfo.model);
                    } else {
                        // case B: list is too short, create new item
                        var sId = that.getId() + "-" + iIndex,
                            oClone = fnFactory(sId, oContext).setBindingContext(oContext, oBindingInfo.model);
                        that[oAggregationInfo._sMutator](oClone);
                    }
                    iLastIndex = iListIndex = iListIndex + 1;
                });

                // case C: list is too long, remove & destroy items
                for (iListIndex = aItems.length - 1; iListIndex >= iLastIndex; iListIndex = iListIndex - 1) {
                    aToBeDestroyed.push(that[oAggregationInfo._sRemoveMutator](aItems[iListIndex]));
                }

                //TODO: Check alternative to destruction: Pool in some internal cache
                if (aToBeDestroyed.length > 0) {
                    // window.setTimeout(function () { //Delayed destruction ...
                    // Delaying causes errors if elements are removed/added in quick succession -> disable 
                    jQuery.each(aToBeDestroyed, function () {
                        this.destroy();
                    });
                    // }, 1);
                }
            }
        }
    };

    /**
     * Override sap.ui.base.ManagedObject.updateAggregation
     *
     * This is a generic drop-in replacement. It avoids the destroy items call.
     * Instead, the bindings of existing items are updated. Enables grouping!
     *
     * Note: Treebindings are not supported. In
     * these cases, the default method is still invoked.
     */
    sap.ushell.override.updateAggregationGrouped = function (sName) {
        var oBindingInfo = this.mBindingInfos[sName],
            oBinding = oBindingInfo.binding,
            fnFactory = oBindingInfo.factory,
            oAggregationInfo = this.getMetadata().getJSONKeys()[sName],  // TODO fix handling of hidden aggregations
            oClone,
            oNewGroup = null,
            bGrouped = null,
            sGroup = null,
            that = this,
            aItems = that.getItems(),
            iLastIndex = 0,
            iListIndex = 0,
            i,
            sId,
            aToBeDestroyed = [];

        bGrouped = oBinding.isGrouped() && this.addItemGroup;
        jQuery.each(oBinding.getContexts(), function (iIndex, oContext) {
            if (bGrouped && oBinding.aSorters.length > 0) {
                oNewGroup = oBinding.aSorters[0].fnGroup(oContext);
                if (typeof oNewGroup === "string") {
                    oNewGroup = {
                        key: oNewGroup
                    };
                }
                if (oNewGroup.key !== sGroup) {
                    var oGroupHeader,
                        oHeader;
                    //If factory is defined use it
                    if (oBindingInfo.groupHeaderFactory) {
                        oGroupHeader = oBindingInfo.groupHeaderFactory(oNewGroup);
                    }
                    oHeader = oGroupHeader || new sap.m.GroupHeaderListItem({
                        title: oNewGroup.text || oNewGroup.key
                    }).addStyleClass("sapMListHdr");

                    that.insertAggregation("items", oHeader, iListIndex, true);
                    iListIndex = iListIndex + 1;
                    sGroup = oNewGroup.key;
                }
            }
            aItems = that.getItems();
            for (i = iListIndex; i < aItems.length; i = i + 1) {
                if (aItems[i].constructor === sap.m.GroupHeaderListItem) {
                    aToBeDestroyed.push(that.removeItem(aItems[i]));
                    aItems = that.getItems();
                }
            }
            if (iListIndex < aItems.length) {
                aItems[iListIndex].setBindingContext(oContext, oBindingInfo.model);
                if (aItems[iListIndex].aDelegates) {
                    jQuery.each(aItems[iListIndex].aDelegates, function (i, v) {
                        v.vThis = oContext;
                    });
                }
            } else {
                sId = that.getId() + "-" + iListIndex;
                oClone = fnFactory(sId, oContext);
                oClone.setBindingContext(oContext, oBindingInfo.model);
                that.addItem(oClone);
            }
            iListIndex = iListIndex + 1;
            iLastIndex = iListIndex;
        });

        for (i = aItems.length - 1; i >= iLastIndex; i = i - 1) {
            aToBeDestroyed.push(that.removeItem(aItems[i]));
        }

        setTimeout(function () {
            jQuery.each(aToBeDestroyed, function (i, v) {
                v.destroy();
            });
        }, 1);
    };

    /**
     * Create a very simple update function that will reuse the elements in the container instead
     * of creating new ones. The function does not support sorting or filtering.
     *
     * @param {string} sName
     *     the name of the aggregation
     */
    sap.ushell.override.updateAggregatesFactory = function (sName) {
        return function () {
            var sGetter = "get" + sName.substr(0, 1).toUpperCase() + sName.substr(1),
                oBindingInfo = this.mBindingInfos[sName],
                aBindingContexts = oBindingInfo.binding.getContexts(),
                fnFactory = oBindingInfo.factory,
                oAggregationInfo = this.getMetadata().getJSONKeys()[sName],
                aItems = this[sGetter](),
                that = this,
                i = 0,
                addNewItem = function (iIndex, oContext) {
                    var sId = that.getId() + "-" + iIndex,
                        oClone = fnFactory(sId, oContext);
                    oClone.setBindingContext(oContext, oBindingInfo.model);
                    that[oAggregationInfo._sMutator](oClone);
                };

            // Bind as many context as possible to existing elements. Create new ones if necessary.
            for (i = 0; i < aBindingContexts.length; ++i) {
                if (i < aItems.length) {
                    aItems[i].setBindingContext(aBindingContexts[i], oBindingInfo.model);
                } else {
                    addNewItem(i, aBindingContexts[i]);
                }
            }

            // Delete unused elements.
            for (; i < aItems.length; ++i) {
                aItems[i].destroy();
            }

            // Update the array length.
            aItems.length = aBindingContexts.length;
        };
    };
}());

}; // end of sap/ushell/override.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.History') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true */
    jQuery.sap.declare("sap.ushell.renderers.fiori2.History");

    sap.ushell.renderers.fiori2.History = function () {
        this._history = [];
        this.backwards = false;
        this._historyPosition = -1;
        this._virtual = {};
    };

    sap.ushell.renderers.fiori2.History.prototype.hashChange = function (newHash, oldHash) {
        var historyIndex = this._history.indexOf(newHash);

        //new history entry
        if (historyIndex === -1) {
            //new item and there where x back navigations before - remove all the forward items from the history
            if (this._historyPosition + 1 < this._history.length) {
                this._history = this._history.slice(0, this._historyPosition + 1);
            }

            this._history.push(newHash);

            this._historyPosition += 1;
            this.backwards = false;
            this.forwards = false;
        } else {
            //internalNavigation
            this.backwards = this._historyPosition > historyIndex;
            this.forwards = this._historyPosition < historyIndex;

            this._historyPosition = historyIndex;
        }
    };

    sap.ushell.renderers.fiori2.History.prototype.isVirtualHashchange = function (newHash, oldHash) {
        //the old hash was flagged as virtual
        return this._virtual.hasOwnProperty(oldHash) &&
            //the new Hash is the current One
            this.getCurrentHash() === newHash &&
            //the history has forward entries
            this._history.length - 1 > this._historyPosition &&
            //the old hash was the hash in the forward history direction
            this._history[this._historyPosition + 1] === oldHash;
    };

    sap.ushell.renderers.fiori2.History.prototype.setVirtualNavigation = function (hash) {
        this._virtual[hash] = true;
    };

    sap.ushell.renderers.fiori2.History.prototype.getCurrentHash = function () {
        return this._history[this._historyPosition] || null;
    };

    sap.ushell.renderers.fiori2.History.prototype.getHashIndex = function (hash) {
        return this._history.indexOf(hash);
    };

    sap.ushell.renderers.fiori2.History.prototype.getHistoryLength = function () {
        return this._history.length;
    }
}());
}; // end of sap/ushell/renderers/fiori2/History.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.SearchResults.controller') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchResults.controller');
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";

    

    /*global jQuery, sap, console */

    /**
     * @name "sap.ushell.renderers.fiori2.SearchResults
     * @extends sap.ui.core.mvc.Controller
     * @public
     */
    sap.ui.controller("sap.ushell.renderers.fiori2.search.SearchResults", {

        /**
         * SAPUI5 lifecycle hook.
         * @public
         */
        onInit: function () {
            var self = this;
            // jQuery.sap.includeStyleSheet(jQuery.sap.getModulePath(
            //     "sap.ushell.themes.base.search",
            //     ".css"
            // ));

            this.requestID = 10;
            this.top = 10;

            try {
                //var oSearchModel = new sap.ui.model.json.JSONModel();
                var oSearchModel = new sap.ushell.renderers.fiori2.search.SearchModel();
//                oSearchModel.searchInit();
//                oSearchModel.searchFireQuery();

                this.getView().setModel(oSearchModel);
                // oSearchModel.setProperty("/count", "...");

                sap.ushell.Container.getService("Search").searchInit();
                sap.ushell.Container.getService("Search").searchFireQuery(this.getView().getModel());
                var binding = this.getView().getModel().bindList("/results");
                binding.attachChange(function(){
                    self.getView().onResultItemsChanged();
                });
            } catch(ex) {
                jQuery.sap.log.error(ex.name, ex.message, "sap.ushell.renderers.fiori2.search.SearchResults");
                jQuery.sap.log.warning("Unable to initialize SearchModel", "", "sap.ushell.renderers.fiori2.search.SearchResults");
            }
            sap.ui.getCore().getEventBus().subscribe("search", this.searchInvoked, this);
            sap.ui.getCore().getEventBus().subscribe("selectCategory", function(sChannelId, sEventId, oData){
                self.category = oData;
                self.getView().newSearchTriggered();
            }, this);

            sap.ui.getCore().getEventBus().subscribe("searchFinished", function(sChannelId, sEventId, result){
                self.getView().searchFinished(result);
            }, this);

        },

        getCategory: function () {
            return this.category;
        },

        onExit: function () {
            sap.ui.getCore().getEventBus().unsubscribe("search", this.searchInvoked, this);
            sap.ui.getCore().getEventBus().unsubscribe("selectCategory", this);
            sap.ui.getCore().getEventBus().unsubscribe("searchFinished", this);
        },

        getResultsForDataSource: function (dataSource, results) {
            var resultsForDS = [];
            for (var i = 0; i < results.length; i++) {
                var result = results[i];
                var resultDS = result.$$DataSourceMetaData$$;
                if (dataSource.objectName.value === resultDS.objectName.value) {
                    resultsForDS.push(result);
                }
            }
            return resultsForDS;
        },

        gimmeSomeMore: function () {
//          this.getView().getModel().searchAppendNextPage();
        	sap.ushell.Container.getService("Search").searchAppendNextPage(this.getView().getModel());
        },

        gimmeSearchTerm: function () {
            return this.searchTerm;
        },

        loadResultset: function (searchTerm, dataSource, skip) {
            var self = this;
        	sap.ushell.Container.getService("Search").searchWithCategories(searchTerm, dataSource, this.getView().getModel(), function(resultset){
                // self.getView().newSearchFinished(resultset);
            });
        },

        searchInvoked: function (sChannelId, sEventId, oData) {
            var searchQuery,
                self = this,
                oSearchModel = self.getView().getModel();


            self.category = oData.dataSource;
            self.searchTerm = oData.searchTerm;

            //New search reset to show apps
            this.getView().newSearchTriggered();

            if (window.f2p) {
                window.f2p.add(window.f2p.m.startSearch, {
                    st: oData.searchTerm
                });
            }

            //Search Service
            this.loadResultset(oData.searchTerm, oData.dataSource, 0);

            //App Service
            self.getView().getModel().setProperty("/tiles", []);
            sap.ushell.Container.getService("Search").queryApplications(oData.searchTerm, function (oResult) {
                var aModelTiles = [];
                var aTiles = oResult.getElements();
                self.getView().getModel().setProperty("/tiles", aTiles);

                self.getView().appSearchFinished(oResult);
            }, 4);
        },

        itemPressed: function (item) {
            var oModel = this.getView().getModel();
            oModel.setProperty("/detail", item);
        }
    });
}());

}; // end of sap/ushell/renderers/fiori2/search/SearchResults.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.resources') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview This file handles the resource bundles.
 */

(function () {
    "use strict";
    /*global jQuery, sap */

    // ensure that sap.ushell exists
    jQuery.sap.declare("sap.ushell.resources");

    jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained


    sap.ushell.resources = {};

    sap.ushell.resources.getTranslationModel = function () {
     // create translation resource model
        var oTranslationModel = new sap.ui.model.resource.ResourceModel({
            bundleUrl : jQuery.sap.getModulePath(
                "sap.ushell.renderers.fiori2.resources.resources",
                ".properties"
            ),
            bundleLocale : sap.ui.getCore().getConfiguration().getLanguage()
        });
        return oTranslationModel;
    }

    sap.ushell.resources.i18nModel = sap.ushell.resources.getTranslationModel();
    sap.ushell.resources.i18n = sap.ushell.resources.i18nModel.getResourceBundle();
}());
}; // end of sap/ushell/resources.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.Bookmark') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The Unified Shell's bookmark service, which allows you to create shortcuts on the
 * user's home page.
 *
 * @version 1.16.3
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.Bookmark");

    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("Bookmark")</code>.
     * Constructs a new instance of the bookmark service.
     *
     * @class The unified shell's bookmark service, which allows you to create shortcuts on the
     * user's home page.
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     * @public
     */
    sap.ushell.services.Bookmark = function () {
        /**
         * Adds a bookmark to the user's home page.
         *
         * @param {object} oParameters
         *   bookmark parameters. In addition to title and URL, a bookmark might allow additional
         *   settings, such as an icon or a subtitle. Which settings are supported depends
         *   on the environment in which the application is running. Unsupported parameters will be
         *   ignored.
         * @param {string} oParameters.title
         *   The title of the bookmark.
         * @param {string} oParameters.url
         *   The URL of the bookmark. If the target application shall run in the Shell the URL has
         *   to be in the format <code>"#SO-Action~Context?P1=a&P2=x&/route?RPV=1"</code>
         * @param {string} [oParameters.icon]
         *   The optional icon URL of the bookmark (e.g. <code>"sap-icon://home"</code>).
         * @param {string} [oParameters.info]
         *   The optional information text of the bookmark.
         * @param {string} [oParameters.subtitle]
         *   The optional subtitle of the bookmark.
         * @param {string} [oParameters.serviceUrl]
         *   The URL to a REST or OData service that provides some dynamic information for the
         *   bookmark.
         * @param {string} [oParameters.serviceRefreshInterval]
         *   The refresh interval for the <code>serviceUrl</code> in seconds.
         * @param {string} [oParameters.numberUnit]
         *   The unit for the number retrieved from <code>serviceUrl</code>.
         * @returns {object}
         *   a jQuery promise.
         *
         * @see sap.ushell.services.URLParsing#getShellHash
         * @since 1.15.0
         * @public
         */
        this.addBookmark = function (oParameters) {
            return sap.ushell.Container.getService("LaunchPage").addBookmark(oParameters);
        };
    };
    sap.ushell.services.Bookmark.hasNoAdapter = true;
}());

}; // end of sap/ushell/services/Bookmark.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.CrossApplicationNavigation') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview Cross Application Navigation
 *
 *   This file exposes an API to perform (Invoke) Cross Application Navigation
 *   for applications for cross app navigation
 *
 *   it exposes interfaces to perform a hash change and/or trigger an external navigation
 *
 * @version 1.16.3
 */


/*global jQuery, sap */
jQuery.sap.declare("sap.ushell.services.CrossApplicationNavigation");

(function () {
    "use strict";
    /*global jQuery, sap, location, hasher */
    jQuery.sap.declare("sap.ushell.services.CrossApplicationNavigation");

    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("CrossApplicationNavigation")</code>.
     * Constructs a new instance of the CrossApplicationNavigation service.
     *
     * @class The Unified Shell's CrossApplicationNavigation service, which allows to
     *        navigate to external targets or create links to external targets
     *
     * CrossApplicationNavigation currently provides platform independent functionality.
     *
     * This interface is for usage by applications or shell renderers/containers.
     *
     * Usage:
     *
     * example: see demoapps/appNavSample/MainXML.controller.js
     *
     * {code}
     *   jquery.sap.require("sap.ushell.services.CrossApplicationNavigation");
     *   var fgetService =  sap.ushell && sap.ushell.Container && sap.ushell.container.getService;
     *   var xnavservice = fgetService && fgetService("CrossApplicationNavigation");
     *   var href = ( xnavservice && xnavservice.hrefForExternal({
     *          target : { semanticObject : "Product", action : "display" },
     *          params : { "ProductID" : [ "102343333" ] }
     *          })) || "";
     * {code}
     *
     * Note: further app specific integration via the reference app reuse code
     *  (setting of app specific handler)
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     * @public
     */
    sap.ushell.services.CrossApplicationNavigation = function () {


        /**
        * Returns a string which can be put into the DOM (e.g. in a link tag)
        *
        * @param {oArgs}
        *     object encoding a semantic object and action
        *  e.g. { target : { semanticObject : "AnObject", action: "Action" },
        *         params : { A : "B" } }
        *  or
        *
        *      { target : { shellHash : "SO-36&jumper=postman" },
        *      }
        * @returns {Object}
        *     the href for the specified parameters; always starting with a hash character; all parameters are URL-encoded
        *
        * @methodOf sap.ushell.services.ShellNavigation#
        * @name hrefForExternal
        * @since 1.15.0
        * @public
         */
        this.hrefForExternal = function (oArgs) {
            if (sap.ushell && sap.ushell.services && sap.ushell.services.ShellNavigation) {
                return sap.ushell.services.ShellNavigation.hrefForExternal(oArgs);
            }
            jQuery.sap.log.debug("Shell not available, no Cross App Navigation");
            return "";
        };

        /**
        *
        * Navigate to an external target
        *
        * @param {Object}  configuration object describing the target
        *
        *  e.g. { target : { semanticObject : "AnObject", action: "Action" },
        *         params : { A : "B", C : [ "e", "j"] } }
        *
        * constructs sth. like   #AnObject-Action?A=B&C=e&C=j ....
        * and navigate to it via changing the local hash
        * @public
        */
        this.toExternal = function (oArgs) {
            if (sap.ushell && sap.ushell.services && sap.ushell.services.ShellNavigation) {
                sap.ushell.services.ShellNavigation.toExternal(oArgs);
                return;
            }
            jQuery.sap.log.debug("Shell not avialable, no Cross App Navigation");
            return;
        };


        /**
         * Returns a string which can be put into the DOM (e.g. in a link tag)
         * given an application specific hash suffix
         *
         * @param {string}
         *            sAppHash
         * @returns {string} a string which can be put into the link tag,
         *          containing the current shell navigation target and the
         *          specified application specific hash suffix
         *
         * Example: hrefForAppSpecificHash("View1/details/0/") returns
         * "#SemanticObject-Action&/View1/details/0/" if the current application
         * runs in the shell and was started using "SemanticObject-Action" as
         * shell navigation hash
         *
         * @methodOf sap.ushell.services.ShellNavigation#
         * @name hrefForAppSpecificHash
         * @since 1.15.0
         * @public
         */
        this.hrefForAppSpecificHash = function (sAppHash) {
            if (sap.ushell && sap.ushell.services && sap.ushell.services.ShellNavigation) {
                return sap.ushell.services.ShellNavigation.hrefForAppSpecificHash(sAppHash);
            }
            jQuery.sap.log.debug("Shell not avialable, no Cross App Navigation; fallback to app-specific part only");
            // TODO: check encoding
            return "#" + sAppHash;

        };

    }; // CrossApplicationNavigation
    sap.ushell.services.CrossApplicationNavigation.hasNoAdapter = true;
}());

}; // end of sap/ushell/services/CrossApplicationNavigation.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.LaunchPage') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The Unified Shell's page builder service.
 *
 * @version 1.16.3
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.LaunchPage");

    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("LaunchPage")</code>.
     * Constructs a new instance of the page builder service.
     *
     * @param {object} oAdapter
     *     the page builder adapter for the logon system
     * @param {object} oContainerInterface
     *     the interface provided by the container
     *
     * @class The Unified Shell's page builder service.
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     * @private
     */
    sap.ushell.services.LaunchPage = function (oAdapter, oContainerInterface) {

        /**
         * A function which returns the groups of the user.
         * In case of success the <code>done</code> function should return an array of 'anonymous' groups.
         * For example [{...},{...},{...},...].
         * The order of the array is the order of groups that will be displayed to the user.
         * In case of failure the <code>fail</code> function of the promise will be called.
         *
         * @returns {object}
         *  jQuery.promise object.
         */
        this.getGroups = function () {
            return oAdapter.getGroups();
        };

        /**
         * A function which returns the default group.
         * In case of success the <code>done</code> function should return an 'anonymous' object
         * representing the default group.
         * In case of failure the <code>fail</code> function of the promise will be called.
         *
         * @returns {object}
         *  jQuery.promise object.
         */
        this.getDefaultGroup = function () {
            return oAdapter.getDefaultGroup();
        };

        /**
         * A function which returns group title
         *
         * @param {object} oGroup
         *     the group
         * @returns {string}
         *  group title
         */
        this.getGroupTitle = function (oGroup) {
            return oAdapter.getGroupTitle(oGroup);
        };

        /**
         * A function which returns group unique identifier
         *
         * @param {object} oGroup
         *     the group
         * @returns {string}
         *  group id
         */
        this.getGroupId = function (oGroup) {
            return oAdapter.getGroupId(oGroup);
        };

        /**
         * A function which returns an array of 'anonymous' tiles of a group.
         * For example [{...},{...},{...},...].
         * The order of the array is the order of tiles that will be displayed to the user.
         *
         * @param {object} oGroup
         *     the group
         * @returns {Array}
         *  the group tiles array
         */
        this.getGroupTiles = function (oGroup) {
            return oAdapter.getGroupTiles(oGroup);
        };

        /**
         * A function that adds a new group.
         * In case of success the <code>done</code> function should return the new added group.
         * Intention: the page builder adds this group to the end of the home screen.
         * In case of failure the <code>fail</code> function should return the consistent backend state of all groups.
         * The groups should be in form of the @see sap.ushell.services.LaunchPage.getGroups
         *
         * @param {string} sTitle
         *     the title of the new group
         * @returns {object}
         *  jQuery.promise object
         */
        this.addGroup = function (sTitle) {
            return oAdapter.addGroup(sTitle);
        };

        /**
         * A function that removes a group.
         * In case of success the <code>done</code> function should be called without any value.
         * Intention: the page builder already removed the page (or hide it from the user) and if successful nothing needs to be done
         * In case of failure the <code>fail</code> function should return the consistent backend state of all groups.
         * The groups should be in form of the @see sap.ushell.services.LaunchPage.getGroups
         *
         * @param {object} oGroup
         *     the group to be removed
         * @param {integer} iIndex
         *     the index for the group to be removed
         * @returns {object}
         *  jQuery.promise object
         */
        this.removeGroup = function (oGroup, iIndex) {
            return oAdapter.removeGroup(oGroup, iIndex);
        };

        /**
         * Resets the oGroup if it has been assigned to the user by an administrator.
         * Reset means that the group is set back to the state as the administrator has defined it;
         * changes from end user personalization are removed.
         * If oGroup is user-created the <code>fail</code> handler is called.
         * In case of success the <code>done</code> function should return the reseted group object.
         * A group can be reset multiple times
         * In case of failure the <code>fail</code> function should return the consistent backend
         * state of all groups.
         * The groups should be in form of the @see sap.ushell.services.LaunchPage.getGroups
         *
         * @param {object} oGroup
         *     the group to be reset
         * @param {integer} iIndex
         *     the index for the group to be reset
         * @returns {object}
         *  jQuery.promise object
         */
        this.resetGroup = function (oGroup, iIndex) {
            return oAdapter.resetGroup(oGroup, iIndex);
        };

        /**
         * Checks if a group can be removed. Returns true if the group can be removed and false if
         * group can only be reset.
         * oGroup should be in form of the @see sap.ushell.services.LaunchPage.getGroups
         *
         * @param {object} oGroup
         *     the group to be checked
         * @returns {boolean}
         *  true if removable; false if resettable
         */
        this.isGroupRemovable = function (oGroup) {
            return oAdapter.isGroupRemovable(oGroup);
        };

        /**
         * A function that moves a group to a new index.
         * In case of success the <code>done</code> function should be called without any value.
         * Intention: the page builder already moved the page (visible to the user) and if
         * successful nothing needs to be done In case of failure the <code>fail</code> function
         * should return the consistent backend state of all groups.
         * The groups should be in form of the @see sap.ushell.services.LaunchPage.getGroups
         *
         * @param {object} oGroup
         *     the group to be moved
         * @param {integer} iNewIndex
         *     the new index for the group
         * @returns {object}
         *  jQuery.promise object
         */
        this.moveGroup = function (oGroup, iNewIndex) {
            return oAdapter.moveGroup(oGroup, iNewIndex);
        };

        /**
         * A function that set a new title to an existing group.
         * In case of success the <code>done</code> function should return nothing
         * Intention: the page builder knows the new title, and if successful nothing needs to be done,
         *  as the title is already visible to the user
         * In case of failure the <code>fail</code> function should return the consistent backend state
         *  of the group title, in most cases the old title.
         *
         * @param {string} sTitle
         *     the new title of the group
         * @param {object} oGroup
         *     the group we need to set the title
         * @returns {object}
         *  jQuery.promise object
         */
        this.setGroupTitle = function (oGroup, sTitle) {
            return oAdapter.setGroupTitle(oGroup, sTitle);
        };

        /**
         * A function that adds a tile to the group.
         * If no group is defined, the tile is added to the default group.
         * In case of success the <code>done</code> function should return the new tile.
         * Intention: the page builder by default puts this tile at the end of the default group.
         * In case of failure the <code>fail</code> function should return the consistent backend state of the default group.
         * The tiles should be in form of the @see sap.ushell.services.LaunchPage.getGroupTiles
         *
         * @param {object} oCatalogTile
         *     an 'anonymous' tile from the catalog browser
         * @param {object} [oGroup]
         *     the target group is optional
         * @returns {object}
         *  jQuery.promise object
         */
        this.addTile = function (oCatalogTile, oGroup) {
            return oAdapter.addTile(oCatalogTile, oGroup);
        };

        /**
         * A function that adds a tile to the default group.
         * In case of success the <code>done</code> function should return the new tile.
         * Intention: the page builder already 'hid' (or removed) the tile.
         * In case of failure the <code>fail</code> function should return the consistent backend state of the group.
         * The tiles should be in form of the @see sap.ushell.services.LaunchPage.getGroupTiles
         *
         * @param {object} oTile
         *     a tile instance from a page
         * @param {object} oGroup
         *     the page we need to remove the tile from
         * @param {integer} iIndex
         *     the tile index
         * @returns {object}
         *  jQuery.promise object
         */
        this.removeTile = function (oGroup, oTile, iIndex) {
            return oAdapter.removeTile(oGroup, oTile, iIndex);
        };

        /**
         * A function that moves a tile in the same group or between different groups.
         * In case of success the <code>done</code> function should return nothing.
         * Intention: the page builder already moved the tile.
         * In case of failure the <code>fail</code> function should return the consistent backend state of the source group and the target group.
         * The result should be in a form {source:[{},{}], target:[{},{}]}.
         * The source and the target group tiles should be in form of the @see sap.ushell.services.LaunchPage.getGroupTiles
         *
         * @param {object} oTile
         *     a tile instance to be moved
         * @param {integer} iSourceIndex
         *     the index in the source group
         * @param {integer} iTargetIndex
         * the target group index, in case this parameter is not supplied we assume the move tile is within the source group using iSourceIndex
         * @param {object} oSourceGroup
         *     the source group the tile came from
         * @param {object} oTargetGroup
         *    (optional)the target group the tile will be placed in, in case this
         *     parameter is not supplied we assume the move tile is within the source group
         * @returns {object}
         *  jQuery.promise object
         */
        this.moveTile = function (oTile, iSourceIndex, iTargetIndex, oSourceGroup, oTargetGroup) {
            return oAdapter.moveTile(oTile, iSourceIndex, iTargetIndex, oSourceGroup, oTargetGroup);
        };

        /**
         * A function which returns the tile's unique identifier
         *
         * @param {object} oTile
         *     the tile
         * @returns {string}
         *  tile id
         */
        this.getTileId = function (oTile) {
            return oAdapter.getTileId(oTile);
        };

        /**
         * A function which returns UI5 view / control  of the tile
         *
         * @param {object} oTile
         *     the tile
         * @returns {object}
         *  view or control
         */
        this.getTileView = function (oTile) {
            return oAdapter.getTileView(oTile);
        };

        /**
         * A function which returns the tile size in the format of 1x1 or 1x2 string
         *
         * @param {object} oTile
         *     the tile
         * @returns {string}
         *  tile size in units in 1x1 format
         */
        this.getTileSize = function (oTile) {
            return oAdapter.getTileSize(oTile);
        };

        /**
         * A function which returns the tile's navigation target.
         * Assigning this to <code>location.hash</code> will open the app.
         *
         * @param {object} oTile
         *     the tile
         * @returns {string}
         *  the tile target
         */
        this.getTileTarget = function (oTile) {
            return oAdapter.getTileTarget(oTile);
        };

        /**
         * Refresh a tile with its latest data.
         * Only dynamic data should be updated, not the tile configuration itself.
         *
         * @param {object} oTile
         *      the tile
         */
        this.refreshTile = function (oTile) {
            oAdapter.refreshTile(oTile);
        };

        /**
         * A function which returns the catalogs of the user.
         * In case of success the <code>done</code> function should return an array of 'anonymous' catalog metadata objects.
         * For example [{...},{...},{...},...].
         * The catalogs will be displayed to the user according to their order in the array.
         * In case of failure the <code>fail</code> function of the promise will be called.
         *
         * @returns {object}
         *  jQuery.promise object.
         */
        this.getCatalogs = function () {
            return oAdapter.getCatalogs();
        };

        /**
         * A function which returns catalog unique identifier
         *
         * @param {object} oCatalog
         *     the catalog
         * @returns {string}
         *  catalog id
         */
        this.getCatalogId = function (oCatalog) {
            return oAdapter.getCatalogId(oCatalog);
        };

        /**
         * A function which returns catalog title
         *
         * @param {object} oCatalog
         *     the catalog
         * @returns {string}
         *  catalog title
         */
        this.getCatalogTitle = function (oCatalog) {
            return oAdapter.getCatalogTitle(oCatalog);
        };

        /**
         * A function which returns the tiles of a catalog.
         * In case of success the <code>done</code> function should return an array of 'anonymous' tiles of the catalog.
         * For example [{...},{...},{...},...].
         * In case of failure the <code>fail</code> function of the promise will be called.
         *
         * @param {object} oCatalog
         *     the catalog
         * @returns {object}
         *  jQuery.promise object.
         */
        this.getCatalogTiles = function (oCatalog) {
            return oAdapter.getCatalogTiles(oCatalog);
        };

        /**
         * A function which returns the unique identifier of a catalog tile
         *
         * @param {object} oCatalogTile
         *     the catalog tile
         * @returns {string}
         *  tile id
         */
        this.getCatalogTileId = function (oCatalogTile) {
            return oAdapter.getCatalogTileId(oCatalogTile);
        };

        /**
         * A function which returns the title of a catalog tile
         *
         * @param {object} oCatalogTile
         *     the catalog tile
         * @returns {string}
         *  tile title
         */
        this.getCatalogTileTitle = function (oCatalogTile) {
            return oAdapter.getCatalogTileTitle(oCatalogTile);
        };

        /**
         * A function which returns the size of a catalog tile in the format of 1x1 or 1x2 string
         *
         * @param {object} oCatalogTile
         *     the catalog tile
         * @returns {string}
         *  tile size in units in 1x1 or 1x2 format
         */
        this.getCatalogTileSize = function (oCatalogTile) {
            return oAdapter.getCatalogTileSize(oCatalogTile);
        };

        /**
         * A function which returns UI5 view / control  of the catalog tile
         *
         * @param {object} oCatalogTile
         *     the catalog tile
         * @returns {object}
         *  view or control
         */
        this.getCatalogTileView = function (oCatalogTile) {
            return oAdapter.getCatalogTileView(oCatalogTile);
        };

        /**
         * Get navigation target URL for a catalog tile.
         * This implicitly instantiates the catalog tile view if not existing
         * via {@link #getCatalogTileView(oCatalogTile)}.
         *
         * @param {object} oCatalogTile
         *     the catalog tile
         * @returns {string}
         *     the target URL for the catalog tile's underlying application as provided via the
         *     "preview" contract
         */
        this.getCatalogTileTargetURL = function (oCatalogTile) {
            return oAdapter.getCatalogTileTargetURL(oCatalogTile);
        };

        /**
         * Returns the keywords associated with a catalog tile which can be used to find the
         * catalog tile in a search.
         *
         * @param {object} oCatalogTile
         *      the catalog tile
         * @returns string[]
         *      the keywords associated with this catalog tile
         */
        this.getCatalogTileKeywords = function (oCatalogTile) {
            return oAdapter.getCatalogTileKeywords(oCatalogTile);
        };

        /**
         * Get preview title for a catalog tile.
         *
         * @param {object} oCatalogTile
         *     the catalog tile
         * @returns {string}
         *     the preview title for the catalog tile's underlying application as provided via the
         *     "preview" contract
         * @since 1.16.3
         */
        this.getCatalogTilePreviewTitle = function (oCatalogTile) {
            return oAdapter.getCatalogTilePreviewTitle(oCatalogTile);
        };

        /**
         * Get preview icon for a catalog tile.
         *
         * @param {object} oCatalogTile
         *     the catalog tile
         * @returns {string}
         *     the preview icon as URL/URI for the catalog tile's underlying application as provided via the
         *     "preview" contract
         * @since 1.16.3
         */
        this.getCatalogTilePreviewIcon = function (oCatalogTile) {
            return oAdapter.getCatalogTilePreviewIcon(oCatalogTile);
        };

        /**
         * Adds a bookmark to the user's home page.
         *
         * @param {object} oParameters
         *   bookmark parameters. In addition to title and URL, a bookmark might allow additional
         *   settings, such as an icon or a subtitle. Which settings are supported depends
         *   on the environment in which the application is running. Unsupported parameters will be
         *   ignored.
         * @param {string} oParameters.title
         *   The title of the bookmark.
         * @param {string} oParameters.url
         *   The URL of the bookmark. If the target application shall run in the Shell the URL has
         *   to be in the format <code>"#SO-Action~Context?P1=a&P2=x&/route?RPV=1"</code>
         * @param {string} [oParameters.icon]
         *   The optional icon URL of the bookmark (e.g. <code>"sap-icon://home"</code>).
         * @param {string} [oParameters.info]
         *   The optional information text of the bookmark.
         * @param {string} [oParameters.subtitle]
         *   The optional subtitle of the bookmark.
         * @param {string} [oParameters.serviceUrl]
         *   The URL to a REST or OData service that provides some dynamic information for the
         *   bookmark.
         * @param {string} [oParameters.serviceRefreshInterval]
         *   The refresh interval for the <code>serviceUrl</code> in seconds.
         * @param {string} [oParameters.numberUnit]
         *   The unit for the number retrieved from <code>serviceUrl</code>.
         * @returns {object}
         *   a jQuery promise.
         *
         * @see sap.ushell.services.URLParsing#getShellHash
         * @since 1.15.0
         */
        this.addBookmark = function (oParameters) {
            if (!oParameters.title) {
                throw new Error("Title missing in bookmark configuration");
            }
            if (!oParameters.url) {
                throw new Error("URL missing in bookmark configuration");
            }
            return oAdapter.addBookmark(oParameters);
        };
    };
}());

}; // end of sap/ushell/services/LaunchPage.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.Message') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.Message");

    /**
     * Message service.
     *
     * @name sap.ushell.services.Message
     * @since 1.16.0
     * @public
     */
    sap.ushell.services.Message = function () {

        var fnShellCallBackFunction = null;

        /**
         * Initialisation:
         * This method is to be invoked by the Shell to register the message callback function.
         * The signature of the callback is defined via the show function.
         *
         * @param {function} fnShellCallback
         *      callback for the shell to execute showing the message
         *
         * @methodOf sap.ushell.services.Message#
         * @name init
         * @private
         */
        this.init = function (fnShellCallback) {
            fnShellCallBackFunction = fnShellCallback;

            return this;
        };

        /**
         * Shows a message on the screen.
         *
         * @param {sap.ushell.services.Message.Type} iType
         *      message type
         * @param {string} sMessage
         *      the localized message as plain text
         *
         * @methodOf sap.ushell.services.Message#
         * @name show
         * @private
         */
        this.show = function (iType, sMessage, oParameters) {
            if (!sMessage) {
                jQuery.sap.log.error("Message must not be empty.");
            } else {
                if (fnShellCallBackFunction) {
                    fnShellCallBackFunction(iType, sMessage, oParameters || {});
                } else {
                    jQuery.sap.log.error("MessageService not initialized. [Message: '" + sMessage + "']");
                }
            }
        };

        /**
         * Shows an info message on the screen.
         *
         * @param {string} sMessage
         *      the localized message as plain text
         * @param {int} [iDuration=3000]
         *      display duration in ms (optional)
         *
         * @methodOf sap.ushell.services.Message#
         * @name info
         * @public
         */
        this.info = function (sMessage, iDuration) {
            this.show(sap.ushell.services.Message.Type.INFO, sMessage, { duration : iDuration || 3000 });
        };

        /**
         * Shows an error message on the screen.
         *
         * @param {string} sMessage
         *      the localized message as plain text
         * @param {string} [sTitle]
         *      the localized title as plain text (optional)
         *
         * @methodOf sap.ushell.services.Message#
         * @name error
         * @public
         */
        this.error = function (sMessage, sTitle) {
            this.show(sap.ushell.services.Message.Type.ERROR, sMessage, { title : sTitle });
        };

        /**
         * Shows an confirmation dialog on the screen.
         *
         * The callback is called with the following signature: <code>function(oAction)</code>
         * where oAction is the button that the user has tapped. For example, when the user has pressed the close button, a sap.m.MessageBox.Action.Close is returned.
         *
         * If no actions are provided, OK and Cancel will be shown. In this case oAction is set by one of the following three values:
         * 1. sap.m.MessageBox.Action.OK: OK (confirmed) button is tapped.
         * 2. sap.m.MessageBox.Action.Cancel: Cancel (unconfirmed) button is tapped.
         * 3. null: Confirm dialog is closed by Calling sap.m.InstanceManager.closeAllDialogs()
         *
         * @param {string} sMessage
         *      the localized message as plain text
         * @param {function} fnCallback
         *      callback function
         * @param {string} [sTitle]
         *      the localized title as plain text (optional)
         * @param {sap.m.MessageBox.Action|sap.m.MessageBox.Action[]|string|string[]} [vActions]
         *       Either a single action, or an array of two actions. If no action(s) are given, the single action MessageBox.Action.OK is taken as a default for the parameter. If more than two actions are given, only the first two actions are taken. Custom action string(s) can be provided, and then the translation of custom action string(s) needs to be done by the application.
         *
         * @methodOf sap.ushell.services.Message#
         * @name confirm
         * @public
         */
        this.confirm = function (sMessage, fnCallback, sTitle, vActions) {
            this.show(sap.ushell.services.Message.Type.CONFIRM, sMessage, { title : sTitle, callback : fnCallback, actions : vActions });
        };
    };
    sap.ushell.services.Message.hasNoAdapter = true;

    /**
    * The Unified Shell message service as a singleton object.
    *
    * @class The unified shell's message service, which provides a unified way to raise messages.
    *
    * @name sap.ushell.services.Message
    * @since 1.16.0
    * @public
    */
    sap.ushell.services.Message = sap.ushell.Container.getService("Message");

    /**
    * @name sap.ushell.services.Message.Type
    * @since 1.16.0
    * @private
    */
    sap.ushell.services.Message.Type = {
        INFO : 0,
        ERROR : 1,
        CONFIRM : 2
    };

}());
}; // end of sap/ushell/services/Message.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.NavTargetResolution') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The NavTargetResolution service.
 */
(function () {
    "use strict";
    /*global jQuery, sap, localStorage, window */
    jQuery.sap.declare("sap.ushell.services.NavTargetResolution");

    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("NavTargetResolution")</code>.
     * Constructs a new instance of the navigation target resolution service.
     *
     * @class The Unified Shell's internal navigation target resolution service
     *        
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     * @private
     */
    sap.ushell.services.NavTargetResolution = function (oAdapter, oContainerInterface) {


        this.mCustomResolvers = [];
        /**
         * Resolves the URL hash fragment.
         * The hash fragment is resolved with the /sap/opu/odata/UI2/INTEROP/ResolveLink oData
         * function import. This is an asynchronous operation.
         * @param {string} sHashFragment
         *     The URL hash fragment as given in <code>location.hash</code>
         * @returns {object}
         *     A jQuery.Promise. Its <code>done()</code> function gets an object that you can use
         *     to create a {@link sap.ushell.renderers.minimal.embed.ApplicationContainer}
         *     or <code>undefined</code> in case the hash fragment was empty.
         * @private
         */
        this.resolveHashFragment = function (sHashFragment) {
            var i, oResolver;
            for (i = 0; i < this.mCustomResolvers.length; i = i + 1) {
                oResolver = this.mCustomResolvers[i];
                if (oResolver.isApplicable(sHashFragment)) {
                    jQuery.sap.log.info("NavTargetResolution: custom resolver " + oResolver.name + " resolves " + sHashFragment);
                    return oResolver.resolveHashFragment(sHashFragment);
                }
            }
            return oAdapter.resolveHashFragment(sHashFragment);
        };

        this.baseResolveHashFragment = function (sHashFragment) {
            return oAdapter.resolveHashFragment(sHashFragment);
        };

        /** is chaining platform dependent?
         *  => no,
         *
         */
        this.registerCustomResolver = function (oObject) {
            // verify oObject
            if (typeof oObject.name !== "string") {
                jQuery.sap.log.info("NavTargetResolution: Custom Resolver must have name {string} member");
            }
            if (typeof oObject.isApplicable !== "function") {
                jQuery.sap.log.info("NavTargetResolution: Custom Resolver must have isApplicable member");
            }
            if (typeof oObject.resolveHashFragment !== "function") {
                jQuery.sap.log.info("NavTargetResolution: Custom Resolver must have \"resolveHashFragment\" member");
            }
            this.mCustomResolvers.push(oObject);
        };

        // register one fixed resolver

        // this resolver
        // a) demonstrates a sample resolver
        // b) implements resolution of the following targets:
        //       #Test-test =>  url:  /test/test      Component.js
        //       #Test-test2 => url:  /test2/test2   Component.js
        //       #Test-local1 => local storage key  "sap.ushell#Test-local1"
        //       #Test-local2 => local storage key  "sap.ushell#Test-local1"
        //       #Test-url1 => sap-ushell-test-local1 , sap-ushell-test-url1-additionalInformation



        this.registerCustomResolver({ name : "MyFixedResolver",
            cleanHash : function (sHashFragment) {
                if (sHashFragment === "") {
                    return undefined;
                }
                var res = sap.ushell.Container.getService("URLParsing").parseShellHash(sHashFragment.substring(1));
                if (!res) {
                    return undefined;
                }
                sHashFragment = "#" + res.semanticObject + "-" + res.action;
                return sHashFragment;
            },
            isApplicable: function (sHashFragment) {
                sHashFragment = this.cleanHash(sHashFragment);
                if (!sHashFragment) {
                    return false;
                }
                return sHashFragment === "#Test-test"
                    || sHashFragment === "#Test-test2"
                    || sHashFragment === "#Test-local1"
                    || sHashFragment === "#Test-local2"
                    || sHashFragment === "#Test-config"
                    || sHashFragment === "#Test-clear";
            },
            resolveHashFragment : function (sHashFragment) {
                var oDeferred = new jQuery.Deferred(),
                    hardCoded = null,
                    res,
                    oLocalx,
                    additionalInformation,
                    sPrefix,
                    url;
                sHashFragment = this.cleanHash(sHashFragment);
                if (!sHashFragment) {
                    return false;
                }
                hardCoded = {
                    "#Test-config" : {
                        applicationType: "URL",
                        url: "/sap/bc/ui5_ui5/ui2/ushell/test-resources/sap/ushell/demoapps/FioriSandboxConfigApp",
                        additionalInformation : //"SAPUI5.Component=AppNavSample"
                            "SAPUI5.Component=sap.ushell.demoapps.FioriSandboxConfigApp"
                    },
                    "#Test-test" : {
                        applicationType: "URL",
                        url : "/sap/bc/ui5_ui5/ui2/ushell/test-resources/sap/ushell/demoapps/AppNavSample?AA=BBB",
                        additionalInformation :  "SAPUI5.Component=AppNavSample"
                    },
                    "#Test-test2 " : {
                        applicationType: "URL",
                        url: "/sap/bc/ui5_ui5/ui2/ushell/test-resources/sap/ushell/demoapps/FioriSandboxDefaultApp",
                        additionalInformation : "SAPUI5.Component=sap.ushell.demoapps.FioriSandboxDefaultApp"
                    }
                };

                function getFromLocalStorage(sKey) {
                    if (localStorage) {
                        return localStorage[sKey];
                    }
                    return undefined;
                }


                function getURLParameter(sKey) {
                    return jQuery.sap.getUriParameters().get(sKey);
                }

                function addToLocalStorage(sKey, sValue) {
                    if (localStorage) {
                        localStorage[sKey] = sValue;
                    }
                }

                if (hardCoded[sHashFragment]) {
                    res = hardCoded[sHashFragment];
                } else if (sHashFragment === "#Test-clean") {
                    addToLocalStorage("sap.ushell.#Test-local1", undefined);
                    addToLocalStorage("sap.ushell.#Test-local2", undefined);
                    jQuery.sap.log.info("NavTargetResolution: Local storage keys for #Test have been cleared");
                    res = hardCoded["#Test-config"];
                } else if (sHashFragment === "#Test-local1" || sHashFragment === "#Test-local2") {
                    res = getFromLocalStorage("sap.ushell." + sHashFragment);
                    if (!res) {
                        oLocalx = { applicationType : "URL" };
                    } else {
                        oLocalx = JSON.parse(res);
                    }
                    // Configuring an app via url parameters is restricted to localhost for security reasons
                    if (window.location.hostname === "localhost") {
                        sPrefix = "sap-ushell-test-" + sHashFragment.substring(6);
                        additionalInformation = getURLParameter(sPrefix + "-additionalInformation");
                        if (additionalInformation) {
                            oLocalx.additionalInformation = additionalInformation;
                        }
                        url = getURLParameter(sPrefix + "-url");
                        if (url) {
                            oLocalx.url = url;
                        }
                    }
                    if (!oLocalx.url) {
                        jQuery.sap.log.info("NavTargetResolution: No configured app for " + sHashFragment + " found ( local storage or url params sap-ushell-test-local1-url  sap-ushell-test-local1-additionalInfo  not supplied? ");
                        jQuery.sap.log.info("NavTargetResolution: Defaulting to config app ...\n");
                        oDeferred.resolve(hardCoded["#Test-config"]);
                    }
                    res = oLocalx;
                }
                jQuery.sap.log.info("NavTargetResolution: As URL:  http://localhost:8080/sap/bc/ui5_ui5/ui2/ushell/shells/abap/FioriLaunchpad.html?sap-ushell-test-local1-url=" + encodeURIComponent(res.url) + "&sap-ushell-test-local1-additionalInformation=" + encodeURIComponent(res.additionalInfo) + "#Test-local1");
                jQuery.sap.log.info("NavTargetResolution: Resolving " + sHashFragment + " to "  + JSON.stringify(res));
                oDeferred.resolve(res);
                return oDeferred.promise();
            }
             });
    };
}());

}; // end of sap/ushell/services/NavTargetResolution.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.PageBuilding') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The Unified Shell's page building service.
 *
 * @version 1.16.3
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.PageBuilding");

    jQuery.sap.require('sap.ui2.srvc.factory'); // unlisted dependency retained

    jQuery.sap.require('sap.ui2.srvc.page'); // unlisted dependency retained


    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("PageBuilding")</code>.
     * Constructs a new instance of the page building service.
     *
     * @param {object} oAdapter
     *     the page building adapter for the logon system
     *
     * @class The Unified Shell's page building service.
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     * @private
     */
    sap.ushell.services.PageBuilding = function (oAdapter, oContainerInterface) {
        var oFactory = new sap.ui2.srvc.Factory(oAdapter.getPageBuildingService());

        /**
         * Read the catalog from the correct system. Create an adapter if necessary. The service
         * adds this function to the factory. The catalog will use this function when it exists.
         * @param {object} oRawData
         *     the catalog raw data as known so far (must at least contain <code>id</code>)
         * @param {function (object)} fnSuccess
         *     success handler, passing the resulting raw data
         * @param {function (string)} fnFailure
         *     error handler, taking an error message
         * @private
         */
        oFactory.readCatalogData = function (oRawData, fnSuccess, fnFailure) {

            // This function is used when a response from the remote system has arrived. Only the
            // chips are taken, the catalog itself remains the one from the logon system. The
            // chips' remoteCatalogId and url are adjusted.
            function onLoadRemote(oRemoteData) {
                var aChips = oRemoteData.Chips.results || oRemoteData.Chips, // fallback for HANA
                    i;
                oRawData.Chips = oRemoteData.Chips;
                for (i = 0; i < aChips.length; i += 1) {
                    aChips[i].remoteCatalogId = oRawData.id;
                }
                sap.ui2.srvc.call(fnSuccess.bind(null, oRawData), fnFailure);
            }

            // request the referenced catalog from the HANA system
            function requestFromHana() {
                // request an adapter for the system (returns a promise)
                // TODO adapter cache (either here or even in Container)
                oContainerInterface.createAdapter(new sap.ushell.System({
                    alias: oRawData.systemId,
                    platform: 'hana',
                    baseUrl: oRawData.baseUrl
                })).fail(fnFailure).done(function (oRemoteAdapter) {
                    oRemoteAdapter.getPageBuildingService().readCatalog(oRawData.remoteId,
                        onLoadRemote, fnFailure);
                });
            }

            // This function is used when a response from the logon system has arrived. It checks
            // whether the received catalog is a remote one and requests it.
            function onLoadLocal(oLocalData) {
                if (oLocalData.type === 'H') {
                    oRawData = oLocalData;  // remember the data to re-use it in onLoadRemote
                    requestFromHana();
                } else {
                    sap.ui2.srvc.call(fnSuccess.bind(null, oLocalData), fnFailure);
                }
            }

            if (typeof oRawData !== "object" || typeof oRawData.id !== "string") {
                // no further spec because this is not really an API function
                throw new sap.ushell.utils.Error("Invalid input for readCatalogData: " + oRawData,
                    "sap.ushell.services.PageBuilding");
            }
            if (oRawData.type === 'H') {
                requestFromHana();
            } else {
                // request the catalog from the logon system
                oAdapter.getPageBuildingService().readCatalog(oRawData.id, onLoadLocal,
                    fnFailure);
            }
        };

        /**
         * Returns the UI2 page building factory.
         * @returns {sap.ui2.srvc.Factory}
         *     the page building factory
         */
        this.getFactory = function () {
            return oFactory;
        };

        /**
         * Returns a stub for the page with the given ID.
         *
         * @param {string} sPageId
         *     the page ID
         *
         * @returns {sap.ui2.srvc.Page}
         *     the page, as a stub
         * @since 1.15.0
         */
        this.getPage = function (sPageId) {
            return oFactory.createPage(sPageId);
        };

        /**
         * Returns a page set.
         *
         * @param {string} sId
         *   the page set ID
         * @returns {object}
         *   a jQuery promise. Its success handler gets a sap.ui2.srvc.PageSet.
         * @since 1.15.0
         */
        this.getPageSet = function (sId) {
            var oDeferred = new jQuery.Deferred();
            oFactory.createPageSet(sId, oDeferred.resolve, oDeferred.reject.bind(oDeferred));
            return oDeferred.promise();
        };
    };
}());

}; // end of sap/ushell/services/PageBuilding.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.Personalization') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The Unified Shell's personalization service, which provides
 *               generic read and write access to the currently logged on user's
 *               personalization settings for the app currently executed in the
 *               shell.
 * 
 * @version 1.16.3
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.Personalization");

    /**
     * This method MUST be called by the Unified Shell's container only, others
     * MUST call <code>sap.ushell.Container.getService("Personalization")</code>.
     * Constructs a new instance of the personalization service.
     * 
     * @param {object}
     *            oAdapter the service adapter for the personalization service,
     *            as already provided by the container
     * 
     * @class The Unified Shell's personalization service, which provides a
     *        personalizer object that handles all personalization operations.
     * 
     * @public
     * @constructor
     * @see sap.ushell.services.Container#getService
     * 
     * @since 1.15.0
     */
    sap.ushell.services.Personalization = function (oAdapter) {

        /**
         * Returns a personalizer object which handles personalization
         * operations.
         * 
         * @param {object}
         *            oPersId JSON object consisting of the following parts:
         *            container - Identifies the set of personalization data
         *            that is loaded/saved as one bundle from the backend
         *            system. item - The name of the object the personalization
         *            is applied to.
         * @param {boolean}
         *            bUseVariant Flag to switch on variant processing.
         * 
         * @returns {object} personalizer object which provides generic read and
         *          write access to the currently logged on user's
         *          personalization settings.
         * @since 1.15.0
         */
        this.getPersonalizer = function (oPersId, bUseVariant) {
            return new sap.ushell.services.Personalizer(oAdapter, oPersId,
                    bUseVariant);
        };
    };

    /**
     * To be called by the personalization service get.Personalizer method.
     * 
     * @param {object}
     *            oAdapter the service adapter for the personalization service,
     *            as already provided by the container
     * @param {object}
     *            oPersId JSON object consisting of the following parts:
     *            container - Identifies the set of personalization data that is
     *            loaded/saved as one bundle from the backend system. item - The
     *            name of the object the personalization is applied to.
     * @param {boolean}
     *            bUseVariant Flag to switch on variant processing.
     * 
     * @class The Unified Shell generic personalizer providing set get delete
     *        methods to access the persisted personalization data.
     * 
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     */
    sap.ushell.services.Personalizer = function (oAdapter, oPersId, bUseVariant) {
        var CONTAINER_PREFIX = "sap.ushell.personalization#",
            sPersContainer,
            sPersItem,
            sPersVariant;

        if (!oPersId || !oPersId.container || !oPersId.item) {
            throw new sap.ushell.utils.Error(
                "Invalid input for oPersId: sap.ushell.services.Personalization"
            );
        }
        if (bUseVariant) {
            throw new sap.ushell.utils.Error(
                "Variants are not implemented: sap.ushell.services.Personalization"
            );
        }

        sPersContainer = CONTAINER_PREFIX + oPersId.container;
        sPersItem = oPersId.item;
        sPersVariant = null;

        /**
         * Gets a personalization data value.
         * 
         * @returns {object} Promise object which provides the personalization
         *          value. Promise object done function: param {object} oValue
         *          JSON object containing the personalization value. If there
         *          is no personalization data for the item, null is returned.
         *          Promise object fail function: param {string} sMessage Error
         *          message
         * @since 1.15.0
         */
        this.getPersData = function () {
            return oAdapter.readPersData({
                container : sPersContainer,
                item : sPersItem,
                variant : sPersVariant
            });
        };

        /**
         * Sets a personalization data value.
         * 
         * @param {object}
         *            oValue JSON object containing the personalization value.
         * @returns {object} Promise object which returns if the saving was
         *          successful or erroneous. Promise object done function: no
         *          params. Promise object fail function: param {string}
         *          sMessage Error message
         * @since 1.15.0
         */
        this.setPersData = function (oValue) {
            return oAdapter.writePersData({
                container : sPersContainer,
                item : sPersItem,
                variant : sPersVariant
            }, oValue);

        };

        /**
         * Deletes a personalization data value.
         * 
         * @returns {object} Promise object which returns if the deletion was
         *          successful or erroneous. Promise object done function: no
         *          params. Promise object fail function: param {string}
         *          sMessage Error message
         * @since 1.15.0
         */
        this.delPersData = function () {
            return oAdapter.delPersData({
                container : sPersContainer,
                item : sPersItem,
                variant : sPersVariant
            });
        };
    };
}());

}; // end of sap/ushell/services/Personalization.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.Search') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The Unified Shell's search service which provides Enterprise Search via SINA.
 *
 * @version 1.16.3
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.Search");

    sap.ushell.services.Search = function (oAdapter, oContainerInterface) {
        var aCatalogTileDescriptions,
            oLpdService = sap.ushell.Container.getService("LaunchPage");

        this.init = function () {
            // do nothing, just ensure for abap adapter to init SINA (async GetServerInfo)
        };

        this.isSearchAvailable = function () {
            return oAdapter.isSearchAvailable();
        };

        /**
         * A helper function returning all tiles contained in all available catalogs.
         * Further, once the tiles have been successfully fetched, they are cached locally in order to speed up
         * future calls. This is based on the assumption that catalog tiles will change very infrequently.
         * In case of success the promise's <code>done</code> function should be called with the results.
         *
         * @returns {object}
         *  jQuery.promise object
         * @private
         */
        var _getCatalogTiles = function () {
            var oDeferred = jQuery.Deferred();
            if (aCatalogTileDescriptions) {
                // return cached catalog tiles
                oDeferred.resolve(aCatalogTileDescriptions);
            } else {
                // initialize catalog tiles
                aCatalogTileDescriptions = [];
                oLpdService.getCatalogs().done(function (catalogs) {
                    var oDeferreds = [];
                    // get promises for all catalogs' tiles
                    for (var i = 0; i < catalogs.length; i++) {
                        oDeferreds.push(oLpdService.getCatalogTiles(catalogs[i]));
                    }
                    // when all promises have been resolved, merge their results together
                    jQuery.when.apply(jQuery, oDeferreds).done(function() {
                        var aTilesCollection = arguments;
                        for (var i = 0; i < aTilesCollection.length; i++) {
                            var aTiles = aTilesCollection[i];
                            for (var j = 0; j < aTiles.length; j++) {
                                var oTile = aTiles[j],
                                    //need to instanciate a view to make use of the contracts
                                    oTileView = oLpdService.getCatalogTileView(oTile),
                                    aKeywords = oLpdService.getCatalogTileKeywords(oTile),
                                    sTargetURL = oLpdService.getCatalogTileTargetURL(oTile),
                                    sTitle = oLpdService.getCatalogTilePreviewTitle(oTile) || oLpdService.getCatalogTileTitle(oTile),
                                    sSize = oLpdService.getCatalogTileSize(oTile),
                                    sIcon = oLpdService.getCatalogTilePreviewIcon(oTile) || "sap-icon://business-objects-experience";

                                aCatalogTileDescriptions.push({
                                    tile : oTile,
                                    keywords : aKeywords,
                                    url : sTargetURL,
                                    title : sTitle,
                                    icon : sIcon,
                                    size : sSize
                                });
                                //destroy the view - not needed
                                oTileView.destroy();
                            }
                        }
                        // resolve the promise
                        oDeferred.resolve(aCatalogTileDescriptions);
                    });
                });
            }
            return oDeferred.promise();
        };

        /**
         * Search all catalog tiles by their Semantic Object - Action pair
         * The given callback is called on success. This does not touch the respective search adapters.
         *
         * @param {array} aSemObjects
         *     an array of semantic object + action objects
         * @param {function} resultCallback
         *     the callback that will be called
         * @public
         */
        this.queryApplicationsByTarget = function(aSemObjects, resultCallback) {
            _getCatalogTiles().done(function (aCatalogTileDescriptions) {
                var aResults = [];
                // loop through Semantic Objects, thus result is in same order as input SOs
                for (var j = 0, jL = aSemObjects && aSemObjects.length || 0; j < jL; j++) {
                    var oSemO = aSemObjects[j],
                        oURLParsingSrvc = sap.ushell.Container.getService("URLParsing");
                    for (var i = 0; i < aCatalogTileDescriptions.length; i++) {
                        var oTarget = oURLParsingSrvc.parseShellHash(aCatalogTileDescriptions[i].url);
                        if (oTarget && (oTarget.semanticObject === oSemO.semanticObject) && (oTarget.action === oSemO.action)) {
                            aResults.push(aCatalogTileDescriptions[i]);
                            // only take first match
                            break;
                        }
                    }
                }
                resultCallback(aResults);
            });
        };


        this.queryApplications = function(searchTerm, resultCallback, top) {
            var origSearchTerm = searchTerm,
                makeResultSet = function(foundTiles, totalResults){
                return {
                    totalResults: totalResults,
                    searchTerm : origSearchTerm,
                    getElements : function(){
                            return foundTiles;
                        }
                };
            };

            searchTerm = new RegExp(searchTerm.replace("*", ".*"), "gi");
            top = top||1;

            var readTiles = function(aCatalogTileDescriptions) {
                var foundTiles = [],
                    oTileDescription,
                    oTile,
                    sTitle,
                    sIcon,
                    aKeywords,
                    sKeyword,
                    sLabel,
                    bFound;
                var totalResults = 0;
                for (var j = 0; j < aCatalogTileDescriptions.length; j++) {
                    oTileDescription = aCatalogTileDescriptions[j];
                    sTitle = oTileDescription.title;
                    sIcon = oTileDescription.icon;
                    aKeywords = oTileDescription.keywords;
                    //ensure a tile is only returned once even if more than on keyword matches 
                    bFound = false;
                    for (var i = 0; !bFound && i < aKeywords.length; i++) {
                        sKeyword = aKeywords[i];
                        if(searchTerm.test(sKeyword)) {
                            totalResults = totalResults + 1;
                            if(foundTiles.length<top) {
                                sLabel = sKeyword.replace(searchTerm, "<b>$&</b>");
                                oTile = {
                                        tile : oTileDescription.tile,
                                        label : sLabel,
                                        title : sTitle,
                                        icon : sIcon,
                                        targetURL : oTileDescription.url,
                                        size : oTileDescription.size
                                        };
                                foundTiles.push(oTile);
                                //don't search any further for matching keywords for this tile
                                bFound = true;
                            }
                        }
                    }
                }
                resultCallback(makeResultSet(foundTiles, totalResults));
            };
            _getCatalogTiles().done(function (aCatalogTiles) {
                readTiles(aCatalogTiles);
            });
         };

        this.querySuggestions = function(searchTerm, resultCallback) {
            return oAdapter.querySuggestions(searchTerm, function (result) {
                result.searchTerm = searchTerm;
                resultCallback(result);
            });
        };

        this.search = function(searchTerm, resultCallback) {
            return oAdapter.search(searchTerm, resultCallback);
        };

//        this.searchWithCategories = function(searchTerm, resultCallback, top, skip) {
//            return oAdapter.searchWithCategories(searchTerm, resultCallback, top, skip);
//        };
        
        this.searchWithCategories = function(searchTerm, dataSource, oModel, resultCallback, top, skip) {
            return oAdapter.searchWithCategories(searchTerm, dataSource, oModel, resultCallback, top, skip);
        };
        
        this.searchInit = function() {
        	return oAdapter.searchInit();
        };
        
        this.setQueryForAll = function(oModel, fromRoot){
            return oAdapter.setQueryForAll(oModel, fromRoot);
        };
        
        this.setSearchTermWithoutQuery = function(searchTerm){
            return oAdapter.setSearchTermWithoutQuery(searchTerm);
        };
        
        this.searchFireQuery = function(oModel) {
        	return oAdapter.searchFireQuery(oModel);
        };
        
        this.searchAppendNextPage = function(oModel) {
        	return oAdapter.searchAppendNextPage(oModel);
        };
        
        this.setDataSource= function (dataSource, oModel) {
        	return oAdapter.setDataSource (dataSource, oModel);
        };
        
        this.setSearchCategoryTree = function(categoryTree) {
            return oAdapter.setSearchCategoryTree(categoryTree); 
         };
         
        this.getSina = function(){
          return oAdapter.getSina();  
        };
        
        this.getDataSource= function () {
            return oAdapter.getDataSource();
        };
    };
}());

}; // end of sap/ushell/services/Search.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.ShellNavigation') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview Shell Navigation Services,
 */

/*global jQuery, sap, location, hasher, jQuery */

jQuery.sap.require('sap.ui.thirdparty.signals'); // unlisted dependency retained

jQuery.sap.require('sap.ui.thirdparty.hasher'); // unlisted dependency retained


jQuery.sap.require('sap.ui.core.routing.HashChanger'); // unlisted dependency retained


jQuery.sap.declare("sap.ushell.services.ShellNavigation");

(function () {
    "use strict";
    /*global jQuery, sap, location, hasher */
    jQuery.sap.declare("sap.ushell.services.ShellNavigation");

    sap.ui.core.routing.HashChanger.extend("sap.ushell.services.ShellNavigationHashChanger", {

        constructor : function () {

            sap.ui.core.routing.HashChanger.apply(this);
            this.priv_initializedByShellNav = false;    // initialization flag for the shellNavigationService

            this.privfnShellCallback = null;
            this.privappHashPrefix = "&/";
            this.privhashPrefix = "#";

            /**
             * obtain the current shell hash (with #) urlDecoded
             * @private
             */
            this.privgetCurrentShellHash = function () {
                var res = this.privsplitHash(hasher.getHash());
                if (!res) {
                    return hasher.getHash();
                }
                return this.privhashPrefix + res.shellPart;
            };

            this.privgetCurrentShellHashNoHash = function () {
                var res = this.privsplitHash(hasher.getHash());
                if (!res) {
                    return hasher.getHash();
                }
                return res.shellPart;
            };

            /**
             * internal, construct the next hash, with #
             * @private
             */
            this.privconstructHash = function (sAppSpecific) {
                return this.privgetCurrentShellHash() + sAppSpecific;
            };

            /**
             * internal, without #
             * @private
             */
            this.privconstructShellHash = function (oShellHash) {
                return sap.ushell.Container.getService("URLParsing").constructShellHash(oShellHash);
            };

            // split a shell hash into app and shell specific part
            // this may be made part of URLParser
            this.privsplitHash = function (sHash) {
                if (sHash === undefined || sHash === null || sHash === "") {
                    return {};
                }
                // break down hash into parts
                // "#SO-ABC~CONTXT?ABC=3A&DEF=4B&/detail/1?A=B");
                var oShellHash =  sap.ushell.Container.getService("URLParsing").parseShellHash(sHash);
                return {  shellPart : (oShellHash && this.privstripLeadingHash(this.privconstructShellHash(oShellHash))) || null,
                          appSpecificRoute : (oShellHash && oShellHash.appSpecificRoute) || null }; // ,"&/detail/1?A=B");
            };

            /**
             * internal, central navigation hook trigger hash change
             * @private
             */
            this.privsetHash = function (sHash, writeHistory) {
                hasher.prependHash = "";
                sHash = this.privstripLeadingHash(sHash);
                if (writeHistory === undefined) {
                    writeHistory = true;
                }
                if (writeHistory) {
                    sap.ui.core.routing.HashChanger.prototype.setHash.apply(this, [sHash]);
                } else {
                    sap.ui.core.routing.HashChanger.prototype.replaceHash.apply(this, [sHash]);
                }
            };

            this.privstripLeadingHash = function (sHash) {
                if (sHash[0] === '#') {
                    return sHash.substring(1);
                }
                return sHash;
            };

            /// protected api, only used by shell services
            /**
             * returns a string which can be put into the DOM (e.g. in a link tag)
             *
             * @param {oArgs}
             *     object encoding a semantic object and action
             *  e.g. { target : { semanticObject : "AnObject", action: "Action" },
             *         params : { A : "B" } }
             *         or          
             *      { target : { shellHash : "SO-36&jumper=postman" },
             *      }
             * @returns {Object}
             *     the href for the specified parameters; always starting with a hash character; all parameters are URL-encoded
             *
             * @methodOf sap.ushell.services.ShellNavigation#
             * @name hrefForExternal
             * @since 1.15.0
             * @private
             */
            this.hrefForExternal = function (oArgs) {
                return "#" + encodeURI(this.privstripLeadingHash(this.privhrefForExternalNoEnc(oArgs)));
            };

            this.privhrefForExternalNoEnc = function (oArgs) {
                var r;
                if (oArgs === undefined) {
                    return "#" + this.privgetCurrentShellHashNoHash();
                }
                // construct url
                if (oArgs && oArgs.target && (typeof oArgs.target.semanticObject === "string" || typeof oArgs.target.shellHash === "string")) {
                    r = "#" + this.privconstructShellHash(oArgs);
                    return r;
                }
                return "#" + this.privgetCurrentShellHashNoHash();
            };

            /**
             * returns a string which can be put into the DOM (e.g. in a link tag)
             * given an app specific hash suffix
             * @param {string} sAppHash
             * @returns {string}
             *     a string which can be put into the link tag, containin ga shell suffix the parsed result
             *
              * example:
              *   hrefForAppSpecificHash("View1/details/0/")
              *   returns  "#MyApp-Display&/View1/details/0/"
              * @methodOf sap.ushell.services.ShellNavigation#
              * @name parseShellHash
              * @since 1.15.0
              * @private
              */
            this.hrefForAppSpecificHash = function (sAppHash) {
                return "#" + encodeURI(this.privconstructHash(this.privappHashPrefix + sAppHash));
            };

            /**
             *
             * Navigate to an external target
             *
             * @param {Object}  configuration object describing the target
             *
             *  e.g. { target : { semanticObject : "AnObject", action: "Action" },
             *         params : { A : "B" } }
             *
             * constructs sth like    http://....ushell#AnObject-Action?A=B ....
             * and navigates to it.
             * @private
             */
            this.toExternal = function (oArgs) {
                var sHash = this.privhrefForExternalNoEnc(oArgs);
                this.privsetHash(sHash);
            };

            /**
             * constructs the full shell hash and
             * sets it, thus triggering a navigation to it
             * @param {string} sAppHash specific hash
             * @param writeHistory if true it adds a history entry in the browser if not it replaces the hash
             * @private
             */
            this.toAppHash = function (sAppHash, writeHistory) {
                var sHash = this.privconstructHash(this.privappHashPrefix + sAppHash);
                this.privsetHash(sHash, writeHistory);
            };
        }
    });


    /**
     * Initialization for the shell navigation.
     * 
     * This will start listening to hash changes and also fire a hashchanged event with the initial hash.
     * @protected
     * @return false if it was initialized before, true if it was initialized the first time
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.initShellNavigation = function () {

        if (this.priv_initializedByShellNav) {
            jQuery.sap.log.info("initShellNavigation already called on this ShellNavigationHashChanger instance.");
            return false;
        }

        hasher.changed.add(this.treatHashChanged, this); //parse hash changes

        if (!hasher.isActive()) {
            hasher.initialized.addOnce(this.treatHashChanged, this); //parse initial hash
            hasher.init(); //start listening for history change
        } else {
            this.treatHashChanged(hasher.getHash());
        }
        this.priv_initializedByShellNav = true;
        return true;
    };

    /**
     * Initialization for the application
     * 
     * The init method of the base class is overridden, because the hasher initialization (registration for hash changes) is already done
     * in <code>initShellNavigation</code> method. The application-specific initialization ensures that the application receives a hash change event for the
     * application-specific part if set in the  initial hash.
     * @protected
     * @return false if it was initialized before, true if it was initialized the first time
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.init = function () {
        if (this.priv_initialized) {
            jQuery.sap.log.info("init already called on this ShellNavigationHashChanger instance.");
            return false;
        }
        // fire initial hash change event for the app-specific part
        var oNewHash = this.privsplitHash(hasher.getHash()),
            sAppSpecificRoute = (oNewHash.appSpecificRoute || "  ").substring(2);  // strip &/
        this.fireEvent("hashChanged", { newHash : sAppSpecificRoute });
        this.priv_initialized = true;
        return true;
    };

    /**
     * Fires the hashchanged event, may be extended to modify the hash before firing the event
     * @param newHash the new hash of the browser
     * @param oldHash - the previous hash
     * @protected
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.treatHashChanged = function (newHash, oldHash) {
        var sAppSpecificRoute,
            sOldAppSpecificRoute,
            oNewHash,
            oOldHash;
        oNewHash = this.privsplitHash(newHash);
        oOldHash = this.privsplitHash(oldHash);

        if (oNewHash.shellPart === oOldHash.shellPart && (oldHash !== undefined)) { // second condition holds true for initial load where we always want to trigger the shell navigation
            // app specific change only !
            sAppSpecificRoute = (oNewHash.appSpecificRoute || "  ").substring(2);  // strip &/
            sOldAppSpecificRoute = (oOldHash.appSpecificRoute || "  ").substring(2);  // strip &/
            // an empty string has to be propagated!
            this.fireEvent("hashChanged", { newHash : sAppSpecificRoute, oldHash : sOldAppSpecificRoute });
            return;
        }

        // all Shell specific callback -> load other app !
        this.fireEvent("shellHashChanged", { newShellHash : oNewHash.shellPart, newAppSpecificRoute : oNewHash.appSpecificRoute, oldShellHash :  oOldHash.shellPart});
        this.privfnShellCallback(oNewHash.shellPart, oNewHash.appSpecificRoute, oOldHash.shellPart);
    };

    /**
     * Sets the hash to a certain value, this hash is prefixed by the 
     * @param sHash the hash
     * @param writeHistory if true it adds a history entry in the browser if not it replaces the hash
     * @protected
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.setHash = function (sHash) {
        this.toAppHash(sHash, /*writeHistory*/true);
    };

    /**
     * Replaces the hash to a certain value. When using the replace function no browser history is written. 
     * If you want to have an entry in the browser history, please use set setHash function.
     * @param sHash the hash
     * @protected
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.replaceHash = function (sHash) {
        this.toAppHash(sHash, /* writeHistory */false);
    };

    /**
     * Gets the current hash
     * 
     * Override the implementation of the base class and just return the application-specific hash part
     * 
     * @protected
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.getHash = function () {
        return this.getAppHash();
    };

    /**
     * Gets the current application-specific hash part
     * 
     * 
     * @private
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.getAppHash = function () {
        var oNewHash = this.privsplitHash(hasher.getHash()),
            sAppSpecificRoute = (oNewHash.appSpecificRoute || "  ").substring(2);  // strip &/
        return sAppSpecificRoute;
    };

    /**
     * Cleans the event registration
     * @see sap.ui.base.Object.prototype.destroy
     * @protected
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.destroy = function () {
        hasher.changed.remove(this.fireHashChanged);
        sap.ui.core.routing.HashChanger.prototype.destroy.apply(this, arguments);
    };


    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("ShellNavigation")</code>.
     * Constructs a new instance of the shell navigation service.
     *
     * @class The Unified Shell's internal navigation service (platform independent)
     *
     * This interface is for consumption by shell renderers/containers only
     *
     * It is not for direct usage by applications, see
     * 
     * inner app navigation : 
     * cross app navigation : @see CrossApplicationNavigation
     * 
     *
     * Usage:
     *
     * example: see renders/fiorisandbox/Shell.controller.js
     *
     * {code}
     *   jquery.sap.require("sap.ushell.services.ShellNavigator");
     *   Shell.onHashChange(shellHash,appHash) {  / *resolve url, load app and exchange root view* / }
     *   Shell.init() {
     *     this.privShellNavigator =  sap.ushell.services.ShellNavigator();
     *     this.privShellNavigator.init(jQuery.proxy(this.doHashChange,this));
     *   }
     * {code}
     *
     * Note: further app specific integration via the reference app reuse code
     *  (setting of app specific handler)
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     * @private
     */
    function ShellNavigation() {
        // instantiate and exchange the HashChanger from UI5
        this.hashChanger = new sap.ushell.services.ShellNavigationHashChanger();
        /////////////////////////////// api for external usage

        /**
        * returns a string which can be put into the DOM (e.g. in a link tag)
        *
        * @param {oArgs}
        *     object encoding a semantic object and action
        *  e.g. { target : { semanticObject : "AnObject", action: "Action" },
        *         params : { A : "B" } }
        *         or          
        *      { target : { shellHash : "SO-36&jumper=postman" },
        *      }
        * @returns {Object}
        *     the href for the specified parameters; always starting with a hash character; all parameters are URL-encoded
        *
        * @methodOf sap.ushell.services.ShellNavigation#
        * @name hrefForExternal
        * @since 1.15.0
        * @private
         */
        this.hrefForExternal = function (oArgs) {
            return this.hashChanger.hrefForExternal(oArgs);
        };

        /**
         * returns a string which can be put into the DOM (e.g. in a link tag)
         * given an app specific hash suffix
         * @param {string} sAppHash
         * @returns {string}
         *     a string which can be put into the link tag, containin ga shell suffix the parsed result
         *
         * example:
         *   hrefForAppSpecificHash("View1/details/0/")
         *   returns  "#MyApp-Display&/View1/details/0/"
         * @methodOf sap.ushell.services.ShellNavigation#
         * @name parseShellHash
         * @since 1.15.0
         * @private
          */
        this.hrefForAppSpecificHash = function (sAppHash) {
            return this.hashChanger.hrefForAppSpecificHash(sAppHash);
        };

        /**
        *
        * Navigate to an external target
        *
        * @param {Object}  configuration object describing the target
        *
        *  e.g. { target : { semanticObject : "AnObject", action: "Action" },
        *         params : { A : "B" } }
        *
        * constructs sth like    http://....ushell#AnObject-Action?A=B ....
        * and navigates to it.
        * @private
        */
        this.toExternal = function (oArgs) {
            this.hashChanger.toExternal(oArgs);
        };

        /**
         * constructs the full shell hash and
         * sets it, thus triggering a navigation to it
         * @param {string} sAppHash specific hash
         * @param writeHistory if true it adds a history entry in the browser if not it replaces the hash
         * @private
         */
        this.toAppHash = function (sAppHash, writeHistory) {
            this.hashChanger.toAppHash(sAppHash, writeHistory);
        };

        // Lifecycle methods

        /**
         * Initialisation:
         * This method is to be invoked by the Shell to
         * -register the event listener
         * -register it's container callback for the (currently single) ShellHash changes.
         * signature of the callback   fn(
         *         sShellHashPart,  // to be resolved and used for application loading
         *         sAppSpecificPart // typically ignored
         *         sOldShellHashPart, // for bookkeeping only (unreliable)
         *
         * @private
         */
        this.init = function (fnShellCallback) {
            hasher.prependHash = "";
            sap.ui.core.routing.HashChanger.replaceHashChanger(this.hashChanger);
            this.hashChanger.privfnShellCallback = fnShellCallback;
            this.hashChanger.initShellNavigation();
            return this;
        };

    } // ShellNavigation

    sap.ushell.bootstrap = sap.ushell.bootstrap || function (sPlatform) { };


    sap.ushell.services.ShellNavigation = new ShellNavigation();

}());

}; // end of sap/ushell/services/ShellNavigation.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.URLParsing') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview URL Parsing shell services
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.URLParsing");

    // usage : sap.ushell.Container.getService("URLParsing").parseShellHash etc.

    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("URLParsing")</code>.
     * Constructs a new instance of the URL parsing service.
     *
     * @class The Unified Shell's internal URL parsing service (platform independent)
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     * @private
     */
    sap.ushell.services.URLParsing = function () {

        /**
         * Extract the Shell hash# part from an URL
         * The application specific route part is removed
         * @see getHash for a function which retains the app specific route
        *
        * Shell services shall shall use this service to extract relevant
        * parts of an URL from an actual URL string (which should be treated as opaque)
        * <p>
        * The URL has to comply with the Fiori-Wave 2 agreed upon format
        *
        * <p>
        * This service shall be used to extract a hash part from an url.
        * The result can be further broken up by parseShellHash
        *
        * examples <p>
        *
        * http://a.b.c?defhij#SemanticObject-Action~Context?PV1=A&PV2=B&/appspecific
        * <br/>
        * returns : "#SemanticObject-Action~Context?PV1=A&PV2=B&/appspecific"
        *
        * Note: the results when passing an illegal url are undefined and subject to change
        * w.o. notice. Notably futher checks may added
        *
        * @param {string} sShellHashString
        *     a valid (Shell) url, e.g. . "http://xx.b.c#Object-name~AFE2==?PV1=PV2&PV4=V5&/display/detail/7?UU=HH
        * @returns {Object}
        *     the parsed result
        *
        *
        * @methodOf sap.ushell.services.URLParser#
        * @name parseShellHash
        * @since 1.15.0
         * @private
        */
        this.getShellHash = function (sURL) {
            /*jslint regexp : true*/
            var re = /[^#]*#(([^&]|&[^\/])*)(&\/.*)?/,
                match = re.exec(sURL);
            if (match) {
                return match[1];
            }
            return undefined;
        };

        /**
         * Extract a hash part from an URL, including an app-specific part
         * @param {String} sURL
         *   any value
         * @returns {String}
         *   <code>extracted string</code> if and only if a hash is present, undefined otherwise
         * @since 1.15.0
         * @private
         */
        this.getHash = function (sURL) {
            /*jslint regexp : true*/
            var re = /[^#]#(.*)/,
                match = re.exec(sURL);
            if (match) {
                return match[1];
            }
            return undefined;
        };

        /**
         * Decompose a shell Hash into the respective parts
         * @param {String} sHash
         *  Hash part of a shell conformant URL
         *  {code}#SO-Action~Context?P1=a&P2=x&/route?RPV=1{code}
         *  the hash part of an URL, e.g. {code}"#Object-name~AFE2==?PV1=PV2&PV4=V5&/display/detail/7?UU=HH{code}
         *
         *  Note that params always has an Array for each parameter value!
         *
         * @returns {object}
         *   <code>undefined </code> if not a parseable hash
         *   <code> { semanticObject : string,
         *            action : string,
         *            contextRaw : string
         *            params :  MapObject<String,Array[String]>,
         *            appSpecificRoute : string
         *          }
         *
         * @methodOf sap.ushell.services.URLParsing#
         * @name parseShellHash
         * @since 1.15.0
         * @private
         */
        this.parseShellHash = function (sHash) {
            /*jslint regexp : true*/
            var re = /([A-Za-z0-9_\/]+)-([A-Za-z0-9_\/\-]+)(~([A-Z0-9a-z=+\/]+))?(([^&]|(&[^\/]))*)(&\/.*)?/,
                sSemanticObject,
                sAction,
                sContext,
                sParams,
                sAppTail,
                match,
                pm,
                pmx,
                a;
            if (!sHash) {
                return undefined;
            }
            match = re.exec(sHash);
            if (match) {
                sSemanticObject = match[1];
                sAction = match[2];
                sContext = match[4];
                sParams = match[5];
                sAppTail = match[8];
                pm = sParams ? jQuery.sap.getUriParameters(sParams).mParams : {};
                return { semanticObject : sSemanticObject,
                    action : sAction,
                    contextRaw : sContext,
                    params : pm,
                    appSpecificRoute : sAppTail };
            }
            return undefined;
        };



        this.privstripLeadingHash = function (sHash) {
            if (sHash[0] === '#') {
                return sHash.substring(1);
            }
            return sHash;
        };

        /**
         * split a Unified Shell compliant hash into a part with compose a shell Hash from it's respective parts
         * @param {String} sHash
         *  Hash part of a shell conformant URL
         *  {code}#SO-Action~Context?P1=a&P2=x&/route?RPV=1{code}
         *  the hash part of an URL, e.g. {code}"#Object-name~AFE2==?PV1=PV2&PV4=V5&/display/detail/7?UU=HH{code}
         *
         *  Note that params always has an Array for each parameter value!
         *
         * @param {object}
         *   <code>undefined </code> if not a parseable hash
         *   <code> { shellHash : "Object-name~AFE2==?PV1=PV2&PV4=V5",
         *            appSpecificRoute : "display/detail/7?UU=HH"
         *          }
         *    </code>
         * @methodOf sap.ushell.services.URLParsing#
         * @name splitHash
         * @since 1.15.0
         * @private
         */
        this.splitHash = function (sHash) {
            var oShellHash,
                shellPart;
            if (sHash === undefined || sHash === null || sHash === "") {
                return {};
            }
            // break down hash into parts
            // "#SO-ABC~CONTXT?ABC=3A&DEF=4B&/detail/1?A=B");
            oShellHash = this.parseShellHash(sHash);
            if (!oShellHash) {
                return { };
            }
            // reconstruct shell part
            shellPart = this.privstripLeadingHash(this.constructShellHash(oShellHash));
            return {  shellPart : shellPart,
                      appSpecificRoute : (oShellHash && oShellHash.appSpecificRoute) || undefined }; // ,"&/detail/1?A=B");
        };


        /**
         * compose a shell Hash from it's respective parts
         * @returns {string}
         *  the hash part of an URL, e.g. {code}"Object-name~AFE2==?PV1=PV2&PV4=V5&/display/detail/7?UU=HH{code}
         *  returns "" for an undefined object
         *
         * @param {object}
         *   <code>undefined </code> if not a parseable hash
         *   <code> { target : { semanticObject : string,
         *                       action : string,
         *                       contextRaw : string
         *            }
         *            params :  MapObject<String,Array[String]>,
         *            appSpecificRoute : string
         *          }
         *    </code>
         *
         *    xor
         *
         *   <code> { target : { shellHash }
         *          }
         *    </code>
         *
         * @methodOf sap.ushell.services.URLParsing#
         * @name parseShellHash
         * @since 1.15.0
         * @private
         */
        this.constructShellHash = function (oShellHash) {
            var shellPart,
                i = null,
                k,
                lst = [],
                first = "?",
                a = null;
            if (!oShellHash) {
                return "";
            }
            if (!oShellHash.target) {
                oShellHash.target = {};
                oShellHash.target.semanticObject = oShellHash.semanticObject;
                oShellHash.target.action = oShellHash.action;
                oShellHash.target.contextRaw = oShellHash.contextRaw;
            }
            if (oShellHash.target.shellHash) {
                return this.privstripLeadingHash(oShellHash.target.shellHash);
            }
            // reconstruct shell part
            shellPart = oShellHash.target.semanticObject + "-"
                    + oShellHash.target.action;
            if (oShellHash.target.contextRaw) {
                shellPart += "~" + oShellHash.target.contextRaw;
            }
            first = "?";
            a = null;
            lst = [];
            for (a in oShellHash.params) {
                if (oShellHash.params.hasOwnProperty(a)) {
                    lst.push(a);
                }
            }
            lst.sort();
            for (k = 0; k < lst.length; k = k + 1) {
                a = lst[k];
                if (jQuery.isArray(oShellHash.params[a])) {
                    for (i = 0; i < oShellHash.params[a].length; i = i + 1) {
                        shellPart += first + a + "=" + encodeURIComponent(oShellHash.params[a][i]); // TODO urlencode
                        first = "&";
                    }
                } else {
                    shellPart += first + a + "=" + encodeURIComponent(oShellHash.params[a]); // TODO urlencode
                    first = "&";
                }
                // URLENCODE!
            }
            return shellPart;
        };
    };
    sap.ushell.services.URLParsing.hasNoAdapter = true;
}());

}; // end of sap/ushell/services/URLParsing.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.UserInfo') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The Unified Shell's user information service, which allows you to retrieve
 *     information about the user.
 *
 * @version 1.16.3
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.UserInfo");

    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("UserInfo")</code>.
     * Constructs a new instance of the user information service.
     *
     * @class The Unified Shell's user information service, which allows you to retrieve
     *     information about the logged-in user.
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.16.3
     * @public
     */
    sap.ushell.services.UserInfo = function () {
        /**
         * Returns the id of the user.
         *
         * @returns {string}
         *   the user id.
         *
         * @since 1.16.3
         * @public
         */
        this.getId = function () {
            return sap.ushell.Container.getUser().getId();
        };
    };
    sap.ushell.services.UserInfo.hasNoAdapter = true;
}());

}; // end of sap/ushell/services/UserInfo.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.UserRecents') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The Unified Shell's user activity service.
 *
 * @version 1.16.3
 */
(function () {
    "use strict";
    /*global jQuery, sap, console */
    jQuery.sap.declare("sap.ushell.services.UserRecents");
    

    /**
     * This method is just for internal use within this service.
     * Constructs a new instance of a recent list, used for recent searches and recent apps.
     *
     * @param {integer} iMaxLength
     *     maximum number of entries in the list
     * @param {function} fnEquals
     *     used to decide whether an entry should be updated instead of inserting a new one
     * @param {function} fnCompare
     *     uesed to sort the list
     * @param {function} fnLoad
     *     called to load recent list from backend
     * @param {function} fnSave
     *     called to save current list into backend
     *
     * @constructor
     */
    function RecentList(iMaxLength, fnEquals, fnCompare, fnLoad, fnSave) {
        var aRecents = [],

        // private functions
            fnUpdateIfAlreadyIn = function (oItem, iTimestampNow) {
                return aRecents.some(function (oRecentEntry) {
                    var bFound;
                    if (fnEquals(oRecentEntry.oItem, oItem)) {
                        oRecentEntry.oItem = oItem;
                        oRecentEntry.iTimestamp = iTimestampNow;
                        oRecentEntry.iCount = oRecentEntry.iCount + 1;
                        bFound = true;
                    } else {
                        bFound = false;
                    }
                    return bFound;
                });
            },

            fnInsertNew = function (oItem, iTimestampNow) {
                var oNewEntry = {oItem: oItem,
                        iTimestamp: iTimestampNow,
                        iCount: 1};
                if (aRecents.length === iMaxLength) {
                    aRecents.sort(fnCompare);
                    aRecents.pop();
                }
                aRecents.push(oNewEntry);
            };

        // public interface
        this.newItem = function (oItem) {
            var iTimestampNow = +new Date(),  // timestamp: thanks to http://stackoverflow.com/a/221297
                bAlreadyIn;
            fnLoad().done(function (aLoadedRecents) {
                aRecents = aLoadedRecents || [];

                bAlreadyIn = fnUpdateIfAlreadyIn(oItem, iTimestampNow);
                if (!bAlreadyIn) {
                    fnInsertNew(oItem, iTimestampNow);
                }
                fnSave(aRecents);
            });
        };

        this.getRecentItems = function () {
            var oDeferred = new jQuery.Deferred();

            fnLoad().done(function (aLoadedRecents) {
                aRecents = aLoadedRecents || [];
                oDeferred.resolve(jQuery.map(aRecents.sort(fnCompare), function (oRecentEntry) {
                    return oRecentEntry.oItem;
                }));
            });

            return oDeferred.promise();
        };
    }

    /**
     * @class The Unified Shell's page user recents service. It used for managing recent searches and recently viewed apps.
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     */
    function UserRecents() {
        var oRecentSearches,
            oRecentApps,
            oPersonalizationService,
            oAppPersonalizer,
            oSearchesPersonalizer,
            fnLoad,
            fnSave,
            sRecentAppsKey = "RecentApps",
            sRecentSearchesKey = "RecentSearches",
            sPersContainer = "sap.ushell.services.UserRecents";

        // BEWARE: constructor code below!

        /**
         * Notification that the given search item has just been used. Adds the search to the LRU
         * list of searches.
         *
         * @param {object} oSearchItem
         *     the searchItem identified by the string parameter <code>sTerm</code>
         * @returns {object[]}
         *     the updated LRU list
         * @since 1.15.0
         * @public
         */
        this.noticeSearch = function (oSearchItem) {
            oRecentSearches.newItem(oSearchItem);
            return oRecentSearches.getRecentItems();
        };

        /**
         * Returns the LRU list of searches.
         *
         * @returns {object[]}
         *     the LRU list
         * @since 1.15.0
         * @public
         */
        this.getRecentSearches = function () {
            return oRecentSearches.getRecentItems();
        };

        /**
         * Notification that the given app has just been used. Adds the app to the LRU list of apps.
         *
         * @param {object} oAppItem
         *     the searchItem identified by the string parameter <code>id</code>
         * @returns {object[]}
         *     the updated LRU list
         * @since 1.15.0
         * @public
         */
        this.noticeApp = function (oAppItem) {
            oRecentApps.newItem(oAppItem);
            return oRecentApps.getRecentItems();
        };

        /**
         * Returns the LRU list of apps.
         *
         * @returns {object[]}
         *     the LRU list
         * @since 1.15.0
         * @public
         */
        this.getRecentApps = function () {
            return oRecentApps.getRecentItems();
        };


        // constructor code -------------------------------------------------------

        oPersonalizationService = sap.ushell.Container.getService("Personalization");
        try {
            oAppPersonalizer = oPersonalizationService.getPersonalizer({container: sPersContainer, item: sRecentAppsKey});
            oSearchesPersonalizer = oPersonalizationService.getPersonalizer({container: sPersContainer, item: sRecentSearchesKey});
        } catch (err) {
            jQuery.sap.log.error("Personalization service does not work:");
            jQuery.sap.log.error(err.name + ": " + err.message);
        }

        fnLoad = function (oPersonalizer) {
            var oPromise,
                oDeferred;
            try {
                oPromise = oPersonalizer.getPersData();
            } catch (err) {
                jQuery.sap.log.error("Personalization service does not work:");
                jQuery.sap.log.error(err.name + ": " + err.message);
                oDeferred = new jQuery.Deferred();
                oDeferred.reject(err);
                oPromise = oDeferred.promise();
            }
            return oPromise;
        };

        fnSave = function (oPersonalizer, aList) {
            try {
                oPersonalizer.setPersData(aList);
            } catch (err) {
                jQuery.sap.log.error("Personalization service does not work:");
                jQuery.sap.log.error(err.name + ": " + err.message);
            }
        };

        oRecentSearches = new RecentList(10, function (x, y) {
            var compare = false;
            if (x.oDataSource && y.oDataSource) {
                if (x.oDataSource.objectName && y.oDataSource.objectName) {
                    compare = ((x.sTerm === y.sTerm) && (x.oDataSource.objectName.value === y.oDataSource.objectName.value));
                }
                if (!x.oDataSource.objectName && !y.oDataSource.objectName) {
                    compare = (x.sTerm === y.sTerm);
                }
            }
            if (!x.oDataSource && !y.oDataSource) {
                compare = (x.sTerm === y.sTerm);
            }
            return compare;
        }, function (x, y) {
            return y.iTimestamp - x.iTimestamp; // youngest first
        },
            fnLoad.bind(this, oSearchesPersonalizer),
            fnSave.bind(this, oSearchesPersonalizer));

        oRecentApps = new RecentList(4, function (x, y) {
            return x.semanticObject === y.semanticObject && x.action === y.action;
        }, function (x, y) {
            return y.iTimestamp - x.iTimestamp;
        }, fnLoad.bind(this, oAppPersonalizer), fnSave.bind(this, oAppPersonalizer));
    }

    sap.ushell.services.UserRecents = new UserRecents();
}());

}; // end of sap/ushell/services/UserRecents.js
if ( !jQuery.sap.isDeclared('sap.ushell.touchSupport') ) {
/*!
 * Modified version of
 * jquery.ui.touch-punch.js - jQuery UI Touch Punch
 *
 * Version: 0.2.2
 *
 * Author: Dave Furfero
 * Web: http://touchpunch.furf.com/
 *
 * Licensed under
 *   Dual licensed under the MIT or GPL Version 2 licenses.
 *
 */
(function ($) {
    "use strict";
    /*global jQuery, sap, clearTimeout, console, window */

    // ensure that sap.ushell exists
    jQuery.sap.declare("sap.ushell.touchSupport");

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-core'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-widget'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-mouse'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-draggable'); // unlisted dependency retained


    $.support.touch = 'ontouchend' in document;

    if (!$.support.touch) {
      return;
    }

    var mouseProto = $.ui.mouse.prototype,
        _mouseInit = mouseProto._mouseInit,
        touchStartTimer,
        touchHandled,
        lastTap = 0;

    function simulateMouseEvent (event, simulatedType) {

      if (event.originalEvent.touches.length > 1) {
        return;
      }

      var touch = event.originalEvent.changedTouches[0],
          simulatedEvent = document.createEvent('MouseEvents');

      if ($(touch.target).is("input") || $(touch.target).is("textarea")) {
          event.stopPropagation();
      } else {
          event.preventDefault();
      }

      simulatedEvent.initMouseEvent(
        simulatedType,    // type
        true,             // bubbles
        true,             // cancelable
        window,           // view
        1,                // detail
        touch.screenX,    // screenX
        touch.screenY,    // screenY
        touch.clientX,    // clientX
        touch.clientY,    // clientY
        false,            // ctrlKey
        false,            // altKey
        false,            // shiftKey
        false,            // metaKey
        0,                // button
        null              // relatedTarget
      );

      event.target.dispatchEvent(simulatedEvent);
    }

    mouseProto._touchStart = function (event) {
      var self = this;

      touchStartTimer = new Date().getTime();

      touchHandled = true;

      self._touchMoved = false;
      simulateMouseEvent(event, 'mouseover');
      simulateMouseEvent(event, 'mousemove');
      simulateMouseEvent(event, 'mousedown');
    };

    mouseProto._touchMove = function (event) {
      if (!touchHandled) {
        return;
      }

      this._touchMoved = true;
      simulateMouseEvent(event, 'mousemove');
    };

    mouseProto._touchEnd = function (event) {
      if (!touchHandled) {
        return;
      }
      var now = new Date().getTime();

      simulateMouseEvent(event, 'mouseout');
      simulateMouseEvent(event, 'mouseup');

      if((now - touchStartTimer) > 500) {
          touchHandled = false;
          event.preventDefault();
          return;
      }

      if (!this._touchMoved) {
            if ((now - lastTap) < 500 && lastTap > 0) {
                lastTap = 0;
                simulateMouseEvent(event, 'dblclick');
            } else {
                  lastTap = now;
                  simulateMouseEvent(event, 'click');
            }
      }

      touchHandled = false;
    };

    mouseProto._mouseInit = function () {
        //Overrides touchevents of objects depends on jquery.mouse like jquery.sortable or jquery.droppable 
      var self = this;

      self.element
        .bind('touchstart', $.proxy(self, '_touchStart'))
        .bind('touchmove', $.proxy(self, '_touchMove'))
        .bind('touchcancel', $.proxy(self, '_touchEnd'))
        .bind('touchend', $.proxy(self, '_touchEnd'));

      _mouseInit.call(self);
    };
})(jQuery);
}; // end of sap/ushell/touchSupport.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.AboutButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.AboutButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.AboutButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/AboutButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/footerbar/AboutButton
 * @extends sap.m.Button
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.footerbar.AboutButton
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.AboutButton", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell"
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.AboutButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.AboutButton.extend
 * @function
 */


// Start of sap/ushell/ui/footerbar/AboutButton.js
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, navigator*/

    jQuery.sap.require('sap.ui.layout.form.SimpleForm'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ObjectHeader'); // unlisted dependency retained

    jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Button'); // unlisted dependency retained

    

    jQuery.sap.declare("sap.ushell.ui.footerbar.AboutButton");

    /**
     * AboutButton
     *
     * @name sap.ushell.ui.footerbar.AboutButton
     * @private
     * @since 1.16.0
     */
    sap.ushell.ui.footerbar.AboutButton.prototype.init = function () {
        this.setIcon('sap-icon://hint');
        this.setWidth('100%');
        this.setText(sap.ushell.resources.i18n.getText("about"));
        this.attachPress(this.showAboutDialog);
    };

    sap.ushell.ui.footerbar.AboutButton.prototype.showAboutDialog = function () {

        jQuery.sap.require("sap.ushell.services.AppConfiguration");

        var translationBundle = sap.ushell.resources.i18n,
            metaData = sap.ushell.services.AppConfiguration.getMetadata(),
            oSimpleForm = new sap.ui.layout.form.SimpleForm({
                editable: false,
                content : [
                    new sap.m.Label({text : translationBundle.getText("technicalName")}),
                    new sap.m.Text({text : metaData.libraryName || ''}),
                    new sap.m.Label({text : translationBundle.getText("fioriVersionFld")}),
                    new sap.m.Text({text : metaData.version || ''}),
//                    new sap.m.Label({text : translationBundle.getText("fioriBuildFld")}),
//                    new sap.m.Text({text : sap.ui.buildinfo.buildtime || ''}),
                    new sap.m.Label({text : translationBundle.getText("sapui5Fld")}),
                    new sap.m.Text({text : (sap.ui.version || "") + (' (' + (sap.ui.buildinfo.buildtime || "") + ')') || ''}),
                    new sap.m.Label({text : translationBundle.getText("userAgentFld")}),
                    new sap.m.Text({text : navigator.userAgent || ''}),
                    new sap.m.Label({text : ''}),
                    //TODO hardcoded!! Where to get this from?
                    new sap.m.Link("sapUshellUiFooterbarAboutButtonCopyright", {
                        //TODO still hardcoded!
                        text : "© 2013 SAP AG. All rights reserved.",
                        href : "http://www.sap.com/corporate-en/legal/copyright/index.epx",
                        target: '_blank'
                    })
                ]
            }),
            oHeader = new sap.m.ObjectHeader({
                title : metaData.title,
                icon : metaData.icon
            }).addStyleClass('sapUshellAboutDialogHeader'),
            oVBox = new sap.m.VBox({
                items: [oHeader, oSimpleForm]
            }),
            oDialog,
            okButton = new sap.m.Button({
                text : translationBundle.getText("okBtn"),
                press : function () {
                    oDialog.close();
                }
            });

        oDialog = new sap.m.Dialog({
            title: translationBundle.getText("about"),
            contentWidth : "250px",
            leftButton: okButton,
            afterClose : function () {
                oDialog.destroy();
            }
        });

        oDialog.addContent(oVBox);
        oDialog.open();
    };
}());
}; // end of sap/ushell/ui/footerbar/AboutButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.AboutButtonRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.AboutButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.AboutButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.AboutButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.AboutButtonRenderer.render = ;

}());
}; // end of sap/ushell/ui/footerbar/AboutButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.AddBookmarkButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.AddBookmarkButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.AddBookmarkButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/AddBookmarkButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBeforePressHandler beforePressHandler} : any</li>
 * <li>{@link #getAfterPressHandler afterPressHandler} : any</li>
 * <li>{@link #getAppData appData} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/footerbar/AddBookmarkButton
 * @extends sap.m.Button
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.AddBookmarkButton", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell",
	properties : {
		"beforePressHandler" : {type : "any", group : "Misc", defaultValue : null},
		"afterPressHandler" : {type : "any", group : "Misc", defaultValue : null},
		"appData" : {type : "object", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.AddBookmarkButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.AddBookmarkButton.extend
 * @function
 */


/**
 * Getter for property <code>beforePressHandler</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>beforePressHandler</code>
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#getBeforePressHandler
 * @function
 */

/**
 * Setter for property <code>beforePressHandler</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oBeforePressHandler  new value for property <code>beforePressHandler</code>
 * @return {sap.ushell.ui.footerbar.AddBookmarkButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#setBeforePressHandler
 * @function
 */


/**
 * Getter for property <code>afterPressHandler</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>afterPressHandler</code>
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#getAfterPressHandler
 * @function
 */

/**
 * Setter for property <code>afterPressHandler</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oAfterPressHandler  new value for property <code>afterPressHandler</code>
 * @return {sap.ushell.ui.footerbar.AddBookmarkButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#setAfterPressHandler
 * @function
 */


/**
 * Getter for property <code>appData</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>appData</code>
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#getAppData
 * @function
 */

/**
 * Setter for property <code>appData</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oAppData  new value for property <code>appData</code>
 * @return {sap.ushell.ui.footerbar.AddBookmarkButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#setAppData
 * @function
 */


// Start of sap/ushell/ui/footerbar/AddBookmarkButton.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    /*global sap, window, location */

    /**
     * AddBookmarkButton
     * 
     * @name sap.ushell.ui.footerbar.AddBookmarkButton
     * @private
     * @since 1.15.0
     */
    jQuery.sap.require('sap.ui.layout.form.SimpleForm'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Label'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Input'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Button'); // unlisted dependency retained

    

    jQuery.sap.declare("sap.ushell.ui.footerbar.AddBookmarkButton");

    sap.ushell.ui.footerbar.AddBookmarkButton.prototype.init = function () {

        this.setIcon('sap-icon://add-favorite');
        this.setWidth('100%');
        this.setText(sap.ushell.resources.i18n.getText("addToHomePageBtn"));

        var self = this;

        this.attachPress(function () {
            if (self.getBeforePressHandler()) {
                self.getBeforePressHandler()();
            }

            this.showAddBookmarkDialog(function () {
                if (self.getAfterPressHandler()) {
                    self.getAfterPressHandler()();
                }
            });
        });
    };

    sap.ushell.ui.footerbar.AddBookmarkButton.prototype.showAddBookmarkDialog = function (cb) {

        var oResourceBundle = sap.ushell.resources.i18n,
            oBookmarkService = sap.ushell.Container.getService("Bookmark"),
            appData = this.getAppData() || {},
            oDialog = new sap.m.Dialog({ title: oResourceBundle.getText('addToHomePageBtn'), contentWidth: '300px', afterClose : function () { oDialog.destroy(); } }),
            oTitle = new sap.m.Label({text: oResourceBundle.getText('titleFld')}),
            oTitleInput = new sap.m.Input({value: appData.title || ''}),
            oSubTitle = new sap.m.Label({text: oResourceBundle.getText('subtitleFld')}),
            oSubTitleInput = new sap.m.Input({value: appData.subtitle || ''}),
            oIconImage = new sap.ui.core.Icon({src: appData.icon || 'sap-icon://home', size: '32px'}),
            oInfo = new sap.m.Label({text: oResourceBundle.getText('infoMsg')}),
            oInfoInput = new sap.m.Input({value: appData.info || ''}),
            oSimpleForm = new sap.ui.layout.form.SimpleForm({
                content: [
                    oIconImage,
                    oTitle,
                    oTitleInput,
                    oSubTitle,
                    oSubTitleInput,
                    oInfo,
                    oInfoInput
                ]
            }),
            okButton = new sap.m.Button({
                text: oResourceBundle.getText('okBtn'),
                press: function () {
                    oBookmarkService.addBookmark({
                        title: oTitleInput.getValue(),
                        subtitle: oSubTitleInput.getValue(),
                        url: location.hash || window.location.href,
                        icon: appData.icon,
                        info: oInfoInput.getValue(),
                        numberUnit: appData.numberUnit,
                        serviceUrl: appData.serviceUrl,
                        serviceRefreshInterval: appData.serviceRefreshInterval
                    });
                    oDialog.close();
                    cb();
                }
            }),
            cancelButton = new sap.m.Button({
                text: oResourceBundle.getText('cancelBtn'),
                press: function () {
                    oDialog.close();
                    cb();
                }
            });

        oDialog.setLeftButton(okButton);
        oDialog.setRightButton(cancelButton);

        oDialog.addContent(oSimpleForm);
        oDialog.open();
    };
}());
}; // end of sap/ushell/ui/footerbar/AddBookmarkButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.AddBookmarkButtonRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.AddBookmarkButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.AddBookmarkButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.AddBookmarkButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.AddBookmarkButtonRenderer.render = ;
}());
}; // end of sap/ushell/ui/footerbar/AddBookmarkButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.JamDiscussButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.JamDiscussButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.JamDiscussButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/JamDiscussButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBeforePressHandler beforePressHandler} : any</li>
 * <li>{@link #getAfterPressHandler afterPressHandler} : any</li>
 * <li>{@link #getJamData jamData} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/footerbar/JamDiscussButton
 * @extends sap.m.Button
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.footerbar.JamDiscussButton
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.JamDiscussButton", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell",
	properties : {
		"beforePressHandler" : {type : "any", group : "Misc", defaultValue : null},
		"afterPressHandler" : {type : "any", group : "Misc", defaultValue : null},
		"jamData" : {type : "object", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.JamDiscussButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.JamDiscussButton.extend
 * @function
 */


/**
 * Getter for property <code>beforePressHandler</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>beforePressHandler</code>
 * @public
 * @name sap.ushell.ui.footerbar.JamDiscussButton#getBeforePressHandler
 * @function
 */

/**
 * Setter for property <code>beforePressHandler</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oBeforePressHandler  new value for property <code>beforePressHandler</code>
 * @return {sap.ushell.ui.footerbar.JamDiscussButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.JamDiscussButton#setBeforePressHandler
 * @function
 */


/**
 * Getter for property <code>afterPressHandler</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>afterPressHandler</code>
 * @public
 * @name sap.ushell.ui.footerbar.JamDiscussButton#getAfterPressHandler
 * @function
 */

/**
 * Setter for property <code>afterPressHandler</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oAfterPressHandler  new value for property <code>afterPressHandler</code>
 * @return {sap.ushell.ui.footerbar.JamDiscussButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.JamDiscussButton#setAfterPressHandler
 * @function
 */


/**
 * Getter for property <code>jamData</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>jamData</code>
 * @public
 * @name sap.ushell.ui.footerbar.JamDiscussButton#getJamData
 * @function
 */

/**
 * Setter for property <code>jamData</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oJamData  new value for property <code>jamData</code>
 * @return {sap.ushell.ui.footerbar.JamDiscussButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.JamDiscussButton#setJamData
 * @function
 */


// Start of sap/ushell/ui/footerbar/JamDiscussButton.js
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    

    jQuery.sap.declare("sap.ushell.ui.footerbar.JamDiscussButton");

    /**
     * JamDiscussButton
     * 
     * @name sap.ushell.ui.footerbar.JamDiscussButton
     * @private
     * @since 1.15.0
     */
    sap.ushell.ui.footerbar.JamDiscussButton.prototype.init = function () {        
        jQuery.sap.require("sap.ushell.services.Container");

        var user = sap.ushell.Container && sap.ushell.Container.getUser(),
            self = this;

        this.setEnabled(user && user.isJamActive());        
        this.setIcon('sap-icon://discussion-2');
        this.setText(sap.ushell.resources.i18n.getText("discussBtn"));

        this.attachPress(function () {
            if (self.getBeforePressHandler()) {
                self.getBeforePressHandler()();
            }
            this.showDiscussDialog(function () {
                if (self.getAfterPressHandler()) {
                    self.getAfterPressHandler()();
                }
            });
        });
    };

    sap.ushell.ui.footerbar.JamDiscussButton.prototype.showDiscussDialog = function (cb) {
        jQuery.sap.require('sap.collaboration.components.fiori.feed.dialog.Component');
        if (!this.discussComponent) {
            this.discussComponent = sap.ui.getCore().createComponent({
                name: "sap.collaboration.components.fiori.feed.dialog"
            });
        }
        this.discussComponent.setSettings(this.getJamData());
        this.discussComponent.open();
        //TODO: call callback after dialog vanishes
        cb();
    };
}());
}; // end of sap/ushell/ui/footerbar/JamDiscussButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.JamDiscussButtonRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.JamDiscussButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.JamDiscussButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.JamDiscussButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.JamDiscussButtonRenderer.render = ;
}());
}; // end of sap/ushell/ui/footerbar/JamDiscussButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.JamShareButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.JamShareButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.JamShareButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/JamShareButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBeforePressHandler beforePressHandler} : any</li>
 * <li>{@link #getAfterPressHandler afterPressHandler} : any</li>
 * <li>{@link #getJamData jamData} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/footerbar/JamShareButton
 * @extends sap.m.Button
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.footerbar.JamShareButton
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.JamShareButton", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell",
	properties : {
		"beforePressHandler" : {type : "any", group : "Misc", defaultValue : null},
		"afterPressHandler" : {type : "any", group : "Misc", defaultValue : null},
		"jamData" : {type : "object", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.JamShareButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.JamShareButton.extend
 * @function
 */


/**
 * Getter for property <code>beforePressHandler</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>beforePressHandler</code>
 * @public
 * @name sap.ushell.ui.footerbar.JamShareButton#getBeforePressHandler
 * @function
 */

/**
 * Setter for property <code>beforePressHandler</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oBeforePressHandler  new value for property <code>beforePressHandler</code>
 * @return {sap.ushell.ui.footerbar.JamShareButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.JamShareButton#setBeforePressHandler
 * @function
 */


/**
 * Getter for property <code>afterPressHandler</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>afterPressHandler</code>
 * @public
 * @name sap.ushell.ui.footerbar.JamShareButton#getAfterPressHandler
 * @function
 */

/**
 * Setter for property <code>afterPressHandler</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oAfterPressHandler  new value for property <code>afterPressHandler</code>
 * @return {sap.ushell.ui.footerbar.JamShareButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.JamShareButton#setAfterPressHandler
 * @function
 */


/**
 * Getter for property <code>jamData</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>jamData</code>
 * @public
 * @name sap.ushell.ui.footerbar.JamShareButton#getJamData
 * @function
 */

/**
 * Setter for property <code>jamData</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oJamData  new value for property <code>jamData</code>
 * @return {sap.ushell.ui.footerbar.JamShareButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.JamShareButton#setJamData
 * @function
 */


// Start of sap/ushell/ui/footerbar/JamShareButton.js
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.JamShareButton");

    

    /**
     * JamShareButton
     *
     * @name sap.ushell.ui.footerbar.JamShareButton
     * @private
     * @since 1.15.0
     */
    sap.ushell.ui.footerbar.JamShareButton.prototype.init = function () {
        jQuery.sap.require("sap.ushell.services.Container");

        var user = sap.ushell.Container && sap.ushell.Container.getUser(),
            self = this;

        this.setEnabled(user && user.isJamActive());
        this.setIcon('sap-icon://share-2');
        this.setText(sap.ushell.resources.i18n.getText("shareBtn"));

        this.attachPress(function () {
            if (self.getBeforePressHandler()) {
                self.getBeforePressHandler()();
            }
            this.showShareDialog(function () {
                if (self.getAfterPressHandler()) {
                    self.getAfterPressHandler()();
                }
            });
        });
    };

    sap.ushell.ui.footerbar.JamShareButton.prototype.showShareDialog = function () {
        jQuery.sap.require('sap.collaboration.components.fiori.sharing.dialog.Component');
        if (!this.shareComponent) {
            this.shareComponent = sap.ui.getCore().createComponent({
                name: "sap.collaboration.components.fiori.sharing.dialog"
            });
        }
        this.shareComponent.setSettings(this.getJamData());
        this.shareComponent.open();

        //TODO: call callback after dialog vanishes
        cb();
    };

    sap.ushell.ui.footerbar.JamShareButton.prototype.exit = function () {
        if (this.shareComponent) {
            this.shareComponent.destroy();
        }
    };
}());
}; // end of sap/ushell/ui/footerbar/JamShareButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.JamShareButtonRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.JamShareButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.JamShareButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.JamShareButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.JamShareButtonRenderer.render = ;
}());
}; // end of sap/ushell/ui/footerbar/JamShareButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.LoginDetailsButtonRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.LoginDetailsButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.LoginDetailsButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.LoginDetailsButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.LoginDetailsButtonRenderer.render = ;
}());
}; // end of sap/ushell/ui/footerbar/LoginDetailsButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.LogoutButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.LogoutButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.LogoutButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/LogoutButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A logout button for the UShell footerbar.
 * @extends sap.m.Button
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.footerbar.LogoutButton
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.LogoutButton", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell"
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.LogoutButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.LogoutButton.extend
 * @function
 */


// Start of sap/ushell/ui/footerbar/LogoutButton.js
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.LogoutButton");

    

    /**
     * LogoutButton
     *
     * @name sap.ushell.ui.footerbar.LogoutButton
     * @private
     * @since 1.16.0
     */
    sap.ushell.ui.footerbar.LogoutButton.prototype.init = function () {
        this.setIcon('sap-icon://log');
        this.setTooltip(sap.ushell.resources.i18n.getText("logoutBtn_tooltip"));
        this.setWidth('100%');
        //TODO use LogoutBtn_title after we had a new localization roundtrip
        this.setText(sap.ushell.resources.i18n.getText("logoutBtn_tooltip"));
        this.attachPress(this.logout);
        this.setEnabled(!!sap.ushell.Container);
    };

    sap.ushell.ui.footerbar.LogoutButton.prototype.logout = function () {
        sap.ushell.Container.logout();
    };
}());
}; // end of sap/ushell/ui/footerbar/LogoutButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.LogoutButtonRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.LogoutButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.LogoutButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.LogoutButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     *
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.LogoutButtonRenderer.render = ;

}());
}; // end of sap/ushell/ui/footerbar/LogoutButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.SettingsButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.SettingsButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.SettingsButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/SettingsButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/footerbar/SettingsButton
 * @extends sap.m.Button
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.footerbar.SettingsButton
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.SettingsButton", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell"
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.SettingsButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.SettingsButton.extend
 * @function
 */


// Start of sap/ushell/ui/footerbar/SettingsButton.js
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.SettingsButton");

    

    /**
     * SettingsButton
     * 
     * @name sap.ushell.ui.footerbar.SettingsButton
     * @private
     * @since 1.16.0
     */
    sap.ushell.ui.footerbar.SettingsButton.prototype.init = function () {
        jQuery.sap.require("sap.ushell.ui.footerbar.AboutButton");
        jQuery.sap.require("sap.ushell.ui.footerbar.LoginDetailsButton");
        jQuery.sap.require("sap.ushell.ui.footerbar.LogoutButton");

        this.setIcon('sap-icon://action-settings');
        this.setTooltip(sap.ushell.resources.i18n.getText("helpBtn_tooltip"));

        this.attachPress(this.showSettingsMenu);

        var oAboutButton = new sap.ushell.ui.footerbar.AboutButton(),
            oLoginDetailsButton = new sap.ushell.ui.footerbar.LoginDetailsButton(),
            oLogoutButton = new sap.ushell.ui.footerbar.LogoutButton();

        this.defaultMenuItems = [oAboutButton, oLoginDetailsButton, oLogoutButton];
    };

    sap.ushell.ui.footerbar.SettingsButton.prototype.setMenuItems = function (buttons) {
        this.menuItems = buttons;
    };

    sap.ushell.ui.footerbar.SettingsButton.prototype.showSettingsMenu = function () {
        var oActionSheet = new sap.m.ActionSheet({
            showHeader : false,
            buttons : (this.menuItems || []).concat(this.defaultMenuItems)
        });

        oActionSheet.setPlacement(sap.m.PlacementType.Vertical);
        oActionSheet.openBy(this);

        oActionSheet.attachAfterClose(function () {
            oActionSheet.removeAllButtons();
            oActionSheet.destroy();
        });
    };
}());
}; // end of sap/ushell/ui/footerbar/SettingsButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.SettingsButtonRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.SettingsButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.LoginDetailsButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.SettingsButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.SettingsButtonRenderer.render = ;

}());
}; // end of sap/ushell/ui/footerbar/SettingsButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.CatalogListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.CatalogListItem.
jQuery.sap.declare("sap.ushell.ui.launchpad.CatalogListItem");

jQuery.sap.require('sap.m.ListItemBase'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/CatalogListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getInfo info} : string</li>
 * <li>{@link #getGroupId groupId} : string</li>
 * <li>{@link #getInfoState infoState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getIconInset iconInset} : boolean (default: true)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getHeaderLevel headerLevel} : sap.m.HeaderLevel (default: sap.m.HeaderLevel.H6)</li>
 * <li>{@link #getEditMode editMode} : boolean (default: false)</li>
 * <li>{@link #getAllowEditMode allowEditMode} : boolean (default: true)</li>
 * <li>{@link #getMarkChange markChange} : int (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.CatalogListItem#event:drop drop} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.CatalogListItem#event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.CatalogListItem#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.CatalogListItem#event:dblPress dblPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.CatalogListItem#event:sapEnter sapEnter} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.CatalogListItem#event:sapEscape sapEscape} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.CatalogListItem#event:focusOut focusOut} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The CatalogListItem is a list item providing image, titel and description.
 * @extends sap.m.ListItemBase
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem
 */
sap.m.ListItemBase.extend("sap.ushell.ui.launchpad.CatalogListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"description" : {type : "string", group : "Misc", defaultValue : null},
		"info" : {type : "string", group : "Misc", defaultValue : null},
		"groupId" : {type : "string", group : "Misc", defaultValue : null},
		"infoState" : {type : "sap.ui.core.ValueState", group : "Misc", defaultValue : sap.ui.core.ValueState.None},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"activeIcon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"iconInset" : {type : "boolean", group : "Misc", defaultValue : true},
		"iconDensityAware" : {type : "boolean", group : "Misc", defaultValue : true},
		"headerLevel" : {type : "sap.m.HeaderLevel", group : "Misc", defaultValue : sap.m.HeaderLevel.H6},
		"editMode" : {type : "boolean", group : "Misc", defaultValue : false},
		"allowEditMode" : {type : "boolean", group : "Misc", defaultValue : true},
		"markChange" : {type : "int", group : "Misc", defaultValue : 0}
	},
	events : {
		"drop" : {}, 
		"afterRendering" : {}, 
		"press" : {}, 
		"dblPress" : {}, 
		"sapEnter" : {}, 
		"sapEscape" : {}, 
		"focusOut" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.CatalogListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.CatalogListItem.extend
 * @function
 */

sap.ushell.ui.launchpad.CatalogListItem.M_EVENTS = {'drop':'drop','afterRendering':'afterRendering','press':'press','dblPress':'dblPress','sapEnter':'sapEnter','sapEscape':'sapEscape','focusOut':'focusOut'};


/**
 * Getter for property <code>title</code>.
 * ListItem title.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setTitle
 * @function
 */


/**
 * Getter for property <code>description</code>.
 * Description.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>description</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getDescription
 * @function
 */

/**
 * Setter for property <code>description</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDescription  new value for property <code>description</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setDescription
 * @function
 */


/**
 * Getter for property <code>info</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>info</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getInfo
 * @function
 */

/**
 * Setter for property <code>info</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sInfo  new value for property <code>info</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setInfo
 * @function
 */


/**
 * Getter for property <code>groupId</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>groupId</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getGroupId
 * @function
 */

/**
 * Setter for property <code>groupId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sGroupId  new value for property <code>groupId</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setGroupId
 * @function
 */


/**
 * Getter for property <code>infoState</code>.
 * 
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>infoState</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getInfoState
 * @function
 */

/**
 * Setter for property <code>infoState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oInfoState  new value for property <code>infoState</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setInfoState
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setIcon
 * @function
 */


/**
 * Getter for property <code>activeIcon</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getActiveIcon
 * @function
 */

/**
 * Setter for property <code>activeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sActiveIcon  new value for property <code>activeIcon</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setActiveIcon
 * @function
 */


/**
 * Getter for property <code>iconInset</code>.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconInset</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getIconInset
 * @function
 */

/**
 * Setter for property <code>iconInset</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconInset  new value for property <code>iconInset</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setIconInset
 * @function
 */


/**
 * Getter for property <code>iconDensityAware</code>.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getIconDensityAware
 * @function
 */

/**
 * Setter for property <code>iconDensityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setIconDensityAware
 * @function
 */


/**
 * Getter for property <code>headerLevel</code>.
 * 
 *
 * Default value is <code>H6</code>
 *
 * @return {sap.m.HeaderLevel} the value of property <code>headerLevel</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getHeaderLevel
 * @function
 */

/**
 * Setter for property <code>headerLevel</code>.
 *
 * Default value is <code>H6</code> 
 *
 * @param {sap.m.HeaderLevel} oHeaderLevel  new value for property <code>headerLevel</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setHeaderLevel
 * @function
 */


/**
 * Getter for property <code>editMode</code>.
 * 
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>editMode</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getEditMode
 * @function
 */

/**
 * Setter for property <code>editMode</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEditMode  new value for property <code>editMode</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setEditMode
 * @function
 */


/**
 * Getter for property <code>allowEditMode</code>.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>allowEditMode</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getAllowEditMode
 * @function
 */

/**
 * Setter for property <code>allowEditMode</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bAllowEditMode  new value for property <code>allowEditMode</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setAllowEditMode
 * @function
 */


/**
 * Getter for property <code>markChange</code>.
 * Time in ms the item is marked when changed. Disabled if set to 0.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>markChange</code>
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#getMarkChange
 * @function
 */

/**
 * Setter for property <code>markChange</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iMarkChange  new value for property <code>markChange</code>
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#setMarkChange
 * @function
 */


/**
 * Event triggered if another sap.ui.core/Control is dropped on this element 
 *
 * @name sap.ushell.ui.launchpad.CatalogListItem#drop
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'drop' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself. 
 *  
 * Event triggered if another sap.ui.core/Control is dropped on this element 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#attachDrop
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'drop' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#detachDrop
 * @function
 */

/**
 * Fire event drop to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.CatalogListItem#fireDrop
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.CatalogListItem#afterRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#attachAfterRendering
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#detachAfterRendering
 * @function
 */

/**
 * Fire event afterRendering to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.CatalogListItem#fireAfterRendering
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.CatalogListItem#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.CatalogListItem#firePress
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.CatalogListItem#dblPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'dblPress' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#attachDblPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'dblPress' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#detachDblPress
 * @function
 */

/**
 * Fire event dblPress to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.CatalogListItem#fireDblPress
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.CatalogListItem#sapEnter
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'sapEnter' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#attachSapEnter
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'sapEnter' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#detachSapEnter
 * @function
 */

/**
 * Fire event sapEnter to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.CatalogListItem#fireSapEnter
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.CatalogListItem#sapEscape
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'sapEscape' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#attachSapEscape
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'sapEscape' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#detachSapEscape
 * @function
 */

/**
 * Fire event sapEscape to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.CatalogListItem#fireSapEscape
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.CatalogListItem#focusOut
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'focusOut' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#attachFocusOut
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'focusOut' event of this <code>sap.ushell.ui.launchpad.CatalogListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.CatalogListItem#detachFocusOut
 * @function
 */

/**
 * Fire event focusOut to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.CatalogListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.CatalogListItem#fireFocusOut
 * @function
 */


// Start of sap/ushell/ui/launchpad/CatalogListItem.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * This file defines behavior for the control, sap.ushell.ui.launchpad.CatalogListItem
 */
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-core'); // unlisted dependency retained

jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-widget'); // unlisted dependency retained

jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-mouse'); // unlisted dependency retained

jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-droppable'); // unlisted dependency retained


/**
 * @name sap.ushell.ui.launchpad.CatalogListItem
 * 
 * @private
 */
sap.ushell.ui.launchpad.CatalogListItem.prototype.init = function() {
    this.oEditInputField = new sap.m.Input();
    this.oEditInputField.setPlaceholder(sap.ushell.resources.i18n.getText("new_group_name"));
};

sap.ushell.ui.launchpad.CatalogListItem.prototype.getEditInputField = function() {
    return this.oEditInputField;
};

sap.ushell.ui.launchpad.CatalogListItem.prototype.onAfterRendering  = function() {
    this.$().droppable({
        hoverClass : "sapUshellCatalogLIHover",
        tolerance : "pointer",
    }).bind("drop", jQuery.proxy(this._handleDrop, this));
    this.fireAfterRendering();
};

sap.ushell.ui.launchpad.CatalogListItem.prototype.onBeforeRendering = function() {
    this.$().unbind("drop", this._handleDrop).droppable("destroy");
    this.oEditInputField.setValue( this.getTitle() );
};

sap.ushell.ui.launchpad.CatalogListItem.prototype.exit = function() {
    this.$().unbind("drop", this._handleDrop).droppable("destroy");

    if (this._image) {
        this._image.destroy();
    }

    sap.m.ListItemBase.prototype.exit.apply(this, arguments);
};

/**
 * @private
 */
sap.ushell.ui.launchpad.CatalogListItem.prototype._handleDrop = function(event, ui) {
    this.fireDrop({
        control : ui && ui.draggable && (ui.draggable.length > 0)
            && sap.ui.getCore().byId(ui.draggable[0].id) || undefined
    });
};

/**
 * @private
 */
sap.ushell.ui.launchpad.CatalogListItem.prototype._getImage = function(sImgId, sImgStyle, sSrc, bIconDensityAware) {
    var oImage = this._image;
    if(oImage)
    {
        oImage.setSrc(sSrc);
        if(oImage instanceof sap.m.Image)
            oImage.setDensityAware(bIconDensityAware);
    }
    else
    {
        oImage = sap.ui.core.IconPool.createControlByURI({
            id: sImgId,
      src : sSrc,
      densityAware : bIconDensityAware
    }, sap.m.Image).setParent(this, null, true);
    }

    if(oImage instanceof sap.m.Image){
        oImage.addStyleClass(sImgStyle, true);
    }
    else{
        oImage.addStyleClass(sImgStyle + "Icon", true);
    }

    return this._image = oImage;
};

// overwrite base method to hook into the active handling
sap.ushell.ui.launchpad.CatalogListItem.prototype._activeHandlingInheritor = function() {
    var img = sap.ui.getCore().byId(this.getId() + "-img");
    if(img instanceof sap.ui.core.Icon){
        img.$().toggleClass('sapMSLIIconActive', this._active);
        return;
    }

    if (img && this.getActiveIcon()) {
            img.setSrc(this.getActiveIcon());
    }
};

// overwrite base method to hook into the inactive handling
sap.ushell.ui.launchpad.CatalogListItem.prototype._inactiveHandlingInheritor = function() {
    var img = sap.ui.getCore().byId(this.getId() + "-img");
        if(img instanceof sap.ui.core.Icon){
        img.$().toggleClass('sapMSLIIconActive', this._active);
        return;
    }

    if (img) {
            img.setSrc(this.getIcon());
    }
};

sap.ushell.ui.launchpad.CatalogListItem.prototype.onclick = function(oBrowserEvent) {
    this.firePress({
        id : this.getId()
    });
};

sap.ushell.ui.launchpad.CatalogListItem.prototype.ondblclick = function(oBrowserEvent) {
    this.fireDblPress({
        id : this.getId()
    });
};

sap.ushell.ui.launchpad.CatalogListItem.prototype.onsapenter = function(oBrowserEvent) {
    this.fireSapEnter({
        id : this.getId()
    });
};

sap.ushell.ui.launchpad.CatalogListItem.prototype.onsapescape = function(oBrowserEvent) {
    this.fireSapEscape({
        id : this.getId()
    });
};

sap.ushell.ui.launchpad.CatalogListItem.prototype.onfocusout = function() {
    this.fireFocusOut();
};

// override setters
sap.ushell.ui.launchpad.CatalogListItem.prototype.setDescription = function(sDescription) {
    var jDesc = this.$().find('.sapUshellCatalogLIDescription');
    this.setProperty("description", sDescription, true);
    if (this.getMarkChange() && jDesc.text()) {
        this.addStyleClass("sapUshellCatalogLIRecentChange"); // add style class marking change 
        window.clearTimeout(this.markChangeTimer);            // clear existing timeout
        this.markChangeTimer = window.setTimeout(
                $.proxy(this.removeStyleClass, this, "sapUshellCatalogLIRecentChange"),
                this.getMarkChange());                        // remove style class after timeout 
    }
    jDesc.text(sDescription);
    return this;
};

}; // end of sap/ushell/ui/launchpad/CatalogListItem.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.CatalogListItemRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
jQuery.sap.declare("sap.ushell.ui.launchpad.CatalogListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.m.ListItemBaseRenderer'); // unlisted dependency retained


/**
 * @class CatalogListItem renderer.
 * @static
 * 
 * @private
 */
sap.ushell.ui.launchpad.CatalogListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

sap.ushell.ui.launchpad.CatalogListItemRenderer.renderLIAttributes = function(rm, oLI) {
    rm.addClass("sapUshellCatalogLI");
    if(oLI._showSeparators  == sap.m.ListSeparators.None && !oLI.getIconInset()){
        rm.addClass("sapUshellCatalogLIShowSeparatorNone");
    }
    if(oLI.getIcon())
        rm.addClass("sapUshellCatalogLIIcon");
    if(!oLI.getIconInset())
        rm.addClass("sapUshellCatalogLIIconThumb");
    if(oLI.getDescription() && oLI.getIcon() &&  oLI.getIconInset())
        rm.addClass("sapUshellCatalogLIDescIcon");
    if(oLI.getDescription() && !oLI.getIcon())
        rm.addClass("sapUshellCatalogLIDescNoIcon");
    if(!oLI.getDescription() && oLI.getIcon())
        rm.addClass("sapUshellCatalogLINoDescIcon");
    if(oLI.getType() == sap.m.ListType.Detail || oLI.getType() == sap.m.ListType.DetailAndActive)
        rm.addClass("sapUshellCatalogLIDetail");

};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oLI an object representation of the control that should be
 *          rendered
 */
sap.ushell.ui.launchpad.CatalogListItemRenderer.renderLIContent = function(rm, oLI) {

    var isDescription = oLI.getTitle() && oLI.getDescription() || (oLI._showSeparators  == sap.m.ListSeparators.None && !oLI.getIconInset());
    var isInfo = oLI.getInfo();

    if (isDescription) {
        rm.write("<div");
        rm.addClass("sapUshellCatalogLIDiv");
        rm.writeClasses();
        rm.write(">");
    }

    rm.write("<div");
    if (!isDescription){
        rm.addClass("sapUshellCatalogLIDiv");
    }
    rm.addClass("sapUshellCatalogLITitleDiv");
    rm.writeClasses();
    rm.write(">");

    //noFlex: make an additional div for the contents table
    if(!isDescription && oLI._bNoFlex){
        rm.write('<div class="sapMLIBNoFlex">');
    }
    // List item text (also written when no title for keeping the space)
    rm.write("<");
    rm.write(oLI.getHeaderLevel().toLowerCase());
    if (isDescription) {
        rm.addClass("sapUshellCatalogLITitle");
    } else {
        rm.addClass("sapUshellCatalogLITitleOnly");
    }
    rm.writeClasses();
    rm.write(">");

    if (oLI.getEditMode()) {
        rm.renderControl(oLI.getEditInputField());
    } else {
        rm.writeEscaped(oLI.getTitle());
    }

    rm.write("</");
    rm.write(oLI.getHeaderLevel().toLowerCase());
    rm.write(">");

    //info div top when @sapUiInfoTop: true;
    if(isInfo && (sap.ui.core.theming.Parameters.get("sapUiInfoTop") == "true" || !isDescription)){
        rm.write("<div");
        rm.writeAttribute("id", oLI.getId() + "-info");
        rm.addClass("sapUshellCatalogLIInfo");
        rm.addClass("sapUshellCatalogLIInfo" + oLI.getInfoState());
        rm.writeClasses();
        rm.write(">");
        rm.writeEscaped(isInfo);
        rm.write("</div>");
    }

    //noFlex: make an additional div for the contents table
    if(!isDescription && oLI._bNoFlex){
        rm.write('</div>');
    }
    rm.write("</div>");

    rm.write("<div");
    rm.addClass("sapUshellCatalogLIDescriptionDiv");
    rm.writeClasses();
    rm.write(">");

    // List item text
    if (isDescription) {
        rm.write("<div");
        rm.addClass("sapUshellCatalogLIDescription");
        rm.writeClasses();
        rm.write(">");
        rm.writeEscaped(oLI.getDescription());
        rm.write("</div>");
    }

        if(isInfo && sap.ui.core.theming.Parameters.get("sapUiInfoTop") == "false" && isDescription){
        rm.write("<div");
        rm.writeAttribute("id", oLI.getId() + "-info");
        rm.addClass("sapUshellCatalogLIInfo");
        if(oLI._showSeparators == sap.m.ListSeparators.None && oLI.getInfoState() == sap.ui.core.ValueState.None)
            rm.addClass("sapUshellCatalogLIInfo" + oLI.getInfoState() + "ShowSeparatorNone");
        else
            rm.addClass("sapUshellCatalogLIInfo" + oLI.getInfoState());
        rm.writeClasses();
        rm.write(">");
        rm.writeEscaped(isInfo);
        rm.write("</div>");
    }
    rm.write("</div>");

    if (isDescription) {
        rm.write("</div>");
    }

    // image
    if (oLI.getIcon()) {
        if (oLI.getIconInset()) {
            var oList = sap.ui.getCore().byId(oLI._listId);
            if(oList && oList.getMode() == sap.m.ListMode.None && !oList.getShowUnread()){
                rm.renderControl(oLI._getImage((oLI.getId() + "-img"), "sapUshellCatalogLIImgFirst", oLI.getIcon(), oLI.getIconDensityAware()));
            }
            else{
                rm.renderControl(oLI._getImage((oLI.getId() + "-img"), "sapUshellCatalogLIImg", oLI.getIcon(), oLI.getIconDensityAware()));
            }
        } else {
            rm.renderControl(oLI._getImage((oLI.getId() + "-img"), "sapUshellCatalogLIImgThumb", oLI.getIcon(), oLI.getIconDensityAware()));
        }
    }

};

}; // end of sap/ushell/ui/launchpad/CatalogListItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.DashboardGroupsContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.DashboardGroupsContainer.
jQuery.sap.declare("sap.ushell.ui.launchpad.DashboardGroupsContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/DashboardGroupsContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGroups groups} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/launchpad/DashboardGroupsContainer
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer
 */
sap.ui.core.Control.extend("sap.ushell.ui.launchpad.DashboardGroupsContainer", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell",
	aggregations : {
    	"groups" : {type : "sap.ui.core.Control", multiple : true, singularName : "group"}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.DashboardGroupsContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer.extend
 * @function
 */


/**
 * Getter for aggregation <code>groups</code>.<br/>
 * 
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#getGroups
 * @function
 */


/**
 * Inserts a group into the aggregation named <code>groups</code>.
 *
 * @param {sap.ui.core.Control}
 *          oGroup the group to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the group should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the group is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the group is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.DashboardGroupsContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#insertGroup
 * @function
 */

/**
 * Adds some group <code>oGroup</code> 
 * to the aggregation named <code>groups</code>.
 *
 * @param {sap.ui.core.Control}
 *            oGroup the group to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.DashboardGroupsContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#addGroup
 * @function
 */

/**
 * Removes an group from the aggregation named <code>groups</code>.
 *
 * @param {int | string | sap.ui.core.Control} vGroup the group to remove or its index or id
 * @return {sap.ui.core.Control} the removed group or null
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#removeGroup
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>groups</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#removeAllGroups
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>groups</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oGroup the group whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#indexOfGroup
 * @function
 */
	

/**
 * Destroys all the groups in the aggregation 
 * named <code>groups</code>.
 * @return {sap.ushell.ui.launchpad.DashboardGroupsContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#destroyGroups
 * @function
 */


// Start of sap/ushell/ui/launchpad/DashboardGroupsContainer.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer
 *
 * @private
 */
/*global jQuery, sap*/

(function () {
    "use strict";

    // Overwrite update function (version without filter/sort support)
    sap.ushell.ui.launchpad.DashboardGroupsContainer.prototype.updateGroups = sap.ushell.override.updateAggregatesFactory("groups");
    // Alternative (supports all bindings, uses default as fallback)
    //sap.ushell.ui.launchpad.TileContainer.prototype.updateAggregation = sap.ushell.override.updateAggregation;
}());

}; // end of sap/ushell/ui/launchpad/DashboardGroupsContainer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.DashboardGroupsContainerRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/
/**
 * @class DashboardGroupsContainer renderer.
 * @static
 * 
 * @private
 */

(function () {
    "use strict";
    jQuery.sap.declare("sap.ushell.ui.launchpad.DashboardGroupsContainerRenderer");

    sap.ushell.ui.launchpad.DashboardGroupsContainerRenderer = {};

    /**
     * Renders the HTML for the given control, using the provided
     * {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render
     *            output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be
     *            rendered
     */
    sap.ushell.ui.launchpad.DashboardGroupsContainerRenderer.render = function (oRm, oControl) {
        oRm.write("<div");
        oRm.writeControlData(oControl);
        oRm.addClass("sapUshellDashboardGroupsContainer");
        oRm.writeClasses();
        oRm.write(">");

        var aGroups = oControl.getGroups();

        jQuery.each(aGroups, function () {
            oRm.write("<div");
            oRm.addClass("sapUshellDashboardGroupsContainerItem");
            oRm.writeClasses();
            oRm.write(">");

            oRm.renderControl(this);

            oRm.write("</div>");
        });

        oRm.write("</div>");
    };
}());

}; // end of sap/ushell/ui/launchpad/DashboardGroupsContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.DeleteArea') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.DeleteArea.
jQuery.sap.declare("sap.ushell.ui.launchpad.DeleteArea");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/DeleteArea.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : sap.ushell.ui.launchpad.DeleteAreaType (default: sap.ushell.ui.launchpad.DeleteAreaType.Dashboard)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.DeleteArea#event:drop drop} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.DeleteArea#event:tileOver tileOver} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.DeleteArea#event:tileOut tileOut} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the new ui/launchpad/DeleteArea
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea
 */
sap.ui.core.Control.extend("sap.ushell.ui.launchpad.DeleteArea", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell",
	properties : {
		"type" : {type : "sap.ushell.ui.launchpad.DeleteAreaType", group : "Misc", defaultValue : sap.ushell.ui.launchpad.DeleteAreaType.Dashboard}
	},
	events : {
		"drop" : {}, 
		"tileOver" : {}, 
		"tileOut" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.DeleteArea with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.DeleteArea.extend
 * @function
 */

sap.ushell.ui.launchpad.DeleteArea.M_EVENTS = {'drop':'drop','tileOver':'tileOver','tileOut':'tileOut'};


/**
 * Getter for property <code>type</code>.
 * 
 *
 * Default value is <code>Dashboard</code>
 *
 * @return {sap.ushell.ui.launchpad.DeleteAreaType} the value of property <code>type</code>
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Dashboard</code> 
 *
 * @param {sap.ushell.ui.launchpad.DeleteAreaType} oType  new value for property <code>type</code>
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea#setType
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.DeleteArea#drop
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'drop' event of this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea#attachDrop
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'drop' event of this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea#detachDrop
 * @function
 */

/**
 * Fire event drop to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.DeleteArea#fireDrop
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.DeleteArea#tileOver
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tileOver' event of this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea#attachTileOver
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'tileOver' event of this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea#detachTileOver
 * @function
 */

/**
 * Fire event tileOver to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.DeleteArea#fireTileOver
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.DeleteArea#tileOut
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tileOut' event of this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea#attachTileOut
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'tileOut' event of this <code>sap.ushell.ui.launchpad.DeleteArea</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DeleteArea#detachTileOut
 * @function
 */

/**
 * Fire event tileOut to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.DeleteArea} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.DeleteArea#fireTileOut
 * @function
 */


// Start of sap/ushell/ui/launchpad/DeleteArea.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @name sap.ushell.ui.launchpad.DeleteArea
 * 
 * @private
 */
/*global jQuery, sap, $, window*/


(function () {
    "use strict";
    sap.ushell.ui.launchpad.DeleteArea.prototype.init = function () {
        // do something for initialization...
    };
    sap.ushell.ui.launchpad.DeleteArea.prototype.onAfterRendering = function () {
        if (this.getType() === sap.ushell.ui.launchpad.DeleteAreaType.Dashboard) {
            this.jqDeleteArea_visual = jQuery(".sapUshellDeleteArea_dashboard_visual");
            this.jqDeleteArea_functional = jQuery(".sapUshellDeleteArea_dashboard_functional");
            this.tileOver(false);
        } else {
            this.jqDeleteArea_visual = jQuery(".sapUshellDeleteArea_grouplist_visual");
            this.jqDeleteArea_functional = jQuery(".sapUshellDeleteArea_grouplist_functional");
            this.groupOver(false);
        }
        this._addDroppable();
    };
    sap.ushell.ui.launchpad.DeleteArea.prototype._addDroppable = function () {
        if(this.jqDeleteArea_functional.is(".ui-droppable")) {
            return;
        }

        this.jqDeleteArea_functional.droppable({
            greedy: 'true',
            tolerance: 'touch',
            accept: jQuery.proxy(this._handleAccept, this),
            drop: jQuery.proxy(this._handleDrop, this),
            over: jQuery.proxy(this._handleOver, this),
            out: jQuery.proxy(this._handleOut, this)
        });
    };
    sap.ushell.ui.launchpad.DeleteArea.prototype.tileOver = function (bool) {
        this.jqDeleteArea_functional.data("tileOver", bool);
    };
    sap.ushell.ui.launchpad.DeleteArea.prototype.groupOver = function (bool) {
        this.jqDeleteArea_functional.data("groupOver", bool);
    };
    sap.ushell.ui.launchpad.DeleteArea.prototype.getFunctionalArea = function () {
        return this.jqDeleteArea_functional;
    };
    sap.ushell.ui.launchpad.DeleteArea.prototype.getVisualArea = function () {
        return this.jqDeleteArea_visual;
    };
    sap.ushell.ui.launchpad.DeleteArea.prototype.show = function () {
        this.jqDeleteArea_functional.removeClass("sapUshellDeleteArea_functional_hidden").addClass("sapUshellDeleteArea_functional_show");
        if (this.getType() === sap.ushell.ui.launchpad.DeleteAreaType.Dashboard){
            this.jqDeleteArea_visual.switchClass("sapUshellDeleteArea_visual_hidden", "sapUshellDeleteArea_visual_show sapUshellDeleteArea_dashboard_visual_show", 250, "swing");
        } else {
            this.jqDeleteArea_visual.switchClass("sapUshellDeleteArea_visual_hidden", "sapUshellDeleteArea_visual_show sapUshellDeleteArea_grouplist_visual_show", 250, "swing");
        }
    };
    sap.ushell.ui.launchpad.DeleteArea.prototype.hide = function () {
        this.jqDeleteArea_visual.removeClass("sapUshellDeleteArea_visual_hover");
        if (this.getType() === sap.ushell.ui.launchpad.DeleteAreaType.Dashboard){
            this.jqDeleteArea_visual.switchClass("sapUshellDeleteArea_visual_show sapUshellDeleteArea_dashboard_visual_show", "sapUshellDeleteArea_visual_hidden", 250, "swing");
            this.jqDeleteArea_visual.removeClass("sapUshellDeleteArea_dashboard_visual_hover");
        } else {
            this.jqDeleteArea_visual.switchClass("sapUshellDeleteArea_visual_show sapUshellDeleteArea_grouplist_visual_show", "sapUshellDeleteArea_visual_hidden", 250, "swing");
            this.jqDeleteArea_visual.removeClass("sapUshellDeleteArea_grouplist_visual_hover");
        }
        this.jqDeleteArea_functional.removeClass("sapUshellDeleteArea_functional_show").addClass("sapUshellDeleteArea_functional_hidden");
    };
    sap.ushell.ui.launchpad.DeleteArea.prototype._handleAccept = function (d) {
        if (this.getType() === sap.ushell.ui.launchpad.DeleteAreaType.GroupList) {
            return d.hasClass("sapUshellGroupListItem");
        } else {
            return true;
        }
    };
    sap.ushell.ui.launchpad.DeleteArea.prototype._handleDrop = function (event, ui) {
        this.fireEvent("drop", {
            functionalArea : this.jqDeleteArea_functional,
            ui : ui
        });
    };
    sap.ushell.ui.launchpad.DeleteArea.prototype._handleOver = function () {
        var that = this,
            isDashboardDeleteArea = (this.getType() === sap.ushell.ui.launchpad.DeleteAreaType.Dashboard);

        if (this.getType() === sap.ushell.ui.launchpad.DeleteAreaType.Dashboard) {
            this.tileOver(true);
        } else {
            this.groupOver(true);
        }

        //Hide placholder and animate clones to new positions
        this.fireTileOver();

        if (this.getType() === sap.ushell.ui.launchpad.DeleteAreaType.Dashboard){
            this.jqDeleteArea_visual.switchClass("", "sapUshellDeleteArea_visual_hover sapUshellDeleteArea_dashboard_visual_hover", 100, "swing");
        } else {
            this.jqDeleteArea_visual.switchClass("", "sapUshellDeleteArea_visual_hover sapUshellDeleteArea_grouplist_visual_hover", 100, "swing");
        }
    };
    sap.ushell.ui.launchpad.DeleteArea.prototype._handleOut = function () {
        var that = this,
            isDashboardDeleteArea = (this.getType() === sap.ushell.ui.launchpad.DeleteAreaType.Dashboard);

        if (this.getType() === sap.ushell.ui.launchpad.DeleteAreaType.Dashboard) {
            this.tileOver(false);
        } else {
            this.groupOver(false);
        }

        //Hide placholder and animate clones to new positions
        this.fireTileOut();

        if (this.getType() === sap.ushell.ui.launchpad.DeleteAreaType.Dashboard){
            this.jqDeleteArea_visual.switchClass("sapUshellDeleteArea_visual_hover sapUshellDeleteArea_dashboard_visual_hover", "", 100, "swing");
        } else {
            this.jqDeleteArea_visual.switchClass("sapUshellDeleteArea_visual_hover sapUshellDeleteArea_grouplist_visual_hover", "", 100, "swing");
        }
    };
}());

}; // end of sap/ushell/ui/launchpad/DeleteArea.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.DeleteAreaRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap, $, window*/

(function () {
    "use strict";
    jQuery.sap.declare("sap.ushell.ui.launchpad.DeleteAreaRenderer");

    /**
     * @class DeleteArea renderer.
     * @static
     *
     * @private
     */
    sap.ushell.ui.launchpad.DeleteAreaRenderer = {};

    /**
     * Renders the HTML for the given control, using the provided
     * {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render
     *            output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be
     *            rendered
     */
    sap.ushell.ui.launchpad.DeleteAreaRenderer.render = function (oRm, oControl) {
        oRm.write("<div");
        oRm.writeControlData(oControl);
        oRm.write(">");

        oRm.write("<div");
        oRm.addClass("sapUshellDeleteArea_visual");
        oRm.addClass("sapUshellDeleteArea_visual_hidden");
        if (oControl.getType() === sap.ushell.ui.launchpad.DeleteAreaType.Dashboard) {
            oRm.addClass("sapUshellDeleteArea_dashboard");
            oRm.addClass("sapUshellDeleteArea_dashboard_visual");
        } else {
            oRm.addClass("sapUshellDeleteArea_grouplist");
            oRm.addClass("sapUshellDeleteArea_grouplist_visual");
        }
        oRm.writeStyles();
        oRm.writeClasses();
        oRm.write(">");
        oRm.write("</div>");

        oRm.write("<div");
        oRm.addClass("sapUshellDeleteArea_functional");
        oRm.addClass("sapUshellDeleteArea_functional_hidden");
        if (oControl.getType() === sap.ushell.ui.launchpad.DeleteAreaType.Dashboard) {
            oRm.addClass("sapUshellDeleteArea_dashboard_functional");
        } else {
            oRm.addClass("sapUshellDeleteArea_grouplist_functional");
        }
        oRm.writeStyles();
        oRm.writeClasses();
        oRm.write(">");
        oRm.write("</div>");
        oRm.write("</div>");
    };
}());

}; // end of sap/ushell/ui/launchpad/DeleteAreaRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.GroupListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.GroupListItem.
jQuery.sap.declare("sap.ushell.ui.launchpad.GroupListItem");

jQuery.sap.require('sap.m.ListItemBase'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/GroupListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getDefaultGroup defaultGroup} : boolean (default: false)</li>
 * <li>{@link #getShow show} : boolean (default: true)</li>
 * <li>{@link #getEditMode editMode} : boolean (default: false)</li>
 * <li>{@link #getGroupId groupId} : string</li>
 * <li>{@link #getIndex index} : int</li>
 * <li>{@link #getAllowEditMode allowEditMode} : boolean (default: true)</li>
 * <li>{@link #getRemovable removable} : boolean</li>
 * <li>{@link #getNumberOfTiles numberOfTiles} : int (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.GroupListItem#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.GroupListItem#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.GroupListItem#event:drop drop} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.GroupListItem#event:over over} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.GroupListItem#event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.GroupListItem#event:out out} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/launchpad/GroupListItem
 * @extends sap.m.ListItemBase
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem
 */
sap.m.ListItemBase.extend("sap.ushell.ui.launchpad.GroupListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"defaultGroup" : {type : "boolean", group : "Misc", defaultValue : false},
		"show" : {type : "boolean", group : "Misc", defaultValue : true},
		"editMode" : {type : "boolean", group : "Misc", defaultValue : false},
		"groupId" : {type : "string", group : "Misc", defaultValue : null},
		"index" : {type : "int", group : "Misc", defaultValue : null},
		"allowEditMode" : {type : "boolean", group : "Misc", defaultValue : true},
		"removable" : {type : "boolean", group : "Misc", defaultValue : null},
		"numberOfTiles" : {type : "int", group : "Misc", defaultValue : 0}
	},
	events : {
		"press" : {}, 
		"change" : {}, 
		"drop" : {}, 
		"over" : {}, 
		"afterRendering" : {}, 
		"out" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.GroupListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.GroupListItem.extend
 * @function
 */

sap.ushell.ui.launchpad.GroupListItem.M_EVENTS = {'press':'press','change':'change','drop':'drop','over':'over','afterRendering':'afterRendering','out':'out'};


/**
 * Getter for property <code>title</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setTitle
 * @function
 */


/**
 * Getter for property <code>defaultGroup</code>.
 * 
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>defaultGroup</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getDefaultGroup
 * @function
 */

/**
 * Setter for property <code>defaultGroup</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDefaultGroup  new value for property <code>defaultGroup</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setDefaultGroup
 * @function
 */


/**
 * Getter for property <code>show</code>.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>show</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getShow
 * @function
 */

/**
 * Setter for property <code>show</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShow  new value for property <code>show</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setShow
 * @function
 */


/**
 * Getter for property <code>editMode</code>.
 * 
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>editMode</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getEditMode
 * @function
 */

/**
 * Setter for property <code>editMode</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEditMode  new value for property <code>editMode</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setEditMode
 * @function
 */


/**
 * Getter for property <code>groupId</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>groupId</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getGroupId
 * @function
 */

/**
 * Setter for property <code>groupId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sGroupId  new value for property <code>groupId</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setGroupId
 * @function
 */


/**
 * Getter for property <code>index</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>index</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getIndex
 * @function
 */

/**
 * Setter for property <code>index</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iIndex  new value for property <code>index</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setIndex
 * @function
 */


/**
 * Getter for property <code>allowEditMode</code>.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>allowEditMode</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getAllowEditMode
 * @function
 */

/**
 * Setter for property <code>allowEditMode</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bAllowEditMode  new value for property <code>allowEditMode</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setAllowEditMode
 * @function
 */


/**
 * Getter for property <code>removable</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>removable</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getRemovable
 * @function
 */

/**
 * Setter for property <code>removable</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bRemovable  new value for property <code>removable</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setRemovable
 * @function
 */


/**
 * Getter for property <code>numberOfTiles</code>.
 * 
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>numberOfTiles</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getNumberOfTiles
 * @function
 */

/**
 * Setter for property <code>numberOfTiles</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iNumberOfTiles  new value for property <code>numberOfTiles</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setNumberOfTiles
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.GroupListItem#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.GroupListItem#firePress
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.GroupListItem#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.GroupListItem#fireChange
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.GroupListItem#drop
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'drop' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#attachDrop
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'drop' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#detachDrop
 * @function
 */

/**
 * Fire event drop to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.GroupListItem#fireDrop
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.GroupListItem#over
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'over' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#attachOver
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'over' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#detachOver
 * @function
 */

/**
 * Fire event over to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.GroupListItem#fireOver
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.GroupListItem#afterRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#attachAfterRendering
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#detachAfterRendering
 * @function
 */

/**
 * Fire event afterRendering to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.GroupListItem#fireAfterRendering
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.GroupListItem#out
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'out' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#attachOut
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'out' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#detachOut
 * @function
 */

/**
 * Fire event out to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.GroupListItem#fireOut
 * @function
 */


// Start of sap/ushell/ui/launchpad/GroupListItem.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/
/**
 * @name sap.ushell.ui.launchpad.GroupListItem
 *
 * @private
 */
(function () {
    "use strict";

    jQuery.sap.require('sap.m.Input'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-core'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-widget'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-mouse'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-droppable'); // unlisted dependency retained


    sap.ushell.ui.launchpad.GroupListItem.prototype.init = function () {
        this._sDefaultValue = sap.ushell.resources.i18n.getText("new_group_name");
        this._sOldTitle = "";

        this.oEditInputField = new sap.m.Input({
            //placeholder : "{i18n>new_group_name}", // Does not work? i18n is not in the model...
            placeholder : this._sDefaultValue,
            value : this.getTitle()
        });

        this.oEditInputField.onfocusout = jQuery.proxy(this._stopEdit, this);
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.exit = function () {
        this.$().unbind("drop", this._handleDrop)
            .unbind("dropover", this._handleDropOver)
            .droppable("destroy");
        this.oEditInputField.destroy();
        sap.m.ListItemBase.prototype.exit.apply(this, arguments);
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.onBeforeRendering = function() {
        this.$().unbind("drop", this._handleDrop)
            .unbind("dropover", this._handleDropOver)
            .droppable("destroy");
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.onAfterRendering = function () {
        var jqThis = jQuery.sap.byId(this.sId),
            bHideItem = !this.getShow() || (this.getDefaultGroup() && this.getNumberOfTiles() === 0);

        if (this.getEditMode()) {
            this.focus();
            //fix for android devices which not accept the focus correctly
            jQuery.sap.byId(this.oEditInputField.sId).click();
        }

        //Make this groupListItem droppable
        this.$().droppable({
            greedy: true,
            tolerance: "pointer",
            accept: ".sapUshellTile",
            over: jQuery.proxy(this._handleOver, this),
            out: jQuery.proxy(this._handleOut, this),
            drop: jQuery.proxy(this._handleDrop, this)
        });

        if (!bHideItem) {
            jqThis.css("display", "flex");
        } else {
            jqThis.css("display", "none");
        }

        this.fireAfterRendering();
    };

    // focus handling
    sap.ushell.ui.launchpad.GroupListItem.prototype.getFocusDomRef = function () {
        // delegate to input field if in edit mode, otherwise revert to default
        return (this.getEditMode() && this.oEditInputField && this.oEditInputField.getFocusDomRef()) || this.getDomRef();
    };

    // SAPUI5 events
    sap.ushell.ui.launchpad.GroupListItem.prototype._startEdit = function () {
        if (this.getAllowEditMode()) {
            this._sOldTitle = this.oEditInputField.getValue();
            this.setEditMode(true);
            this.focus(); // grab focus -> will be delegated to input field
        }
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype._stopEdit = function () {
        // This event may be called twice, first by sapenter/sapescape, then by the triggered focusout.
        // Make sure we send changes only once.
        if(!this.getEditMode()) {
            return;
        }

        // Check if we need to update the title.
        // Note: sapescape is send to the input first, which has already reset
        //  its content when this is called. Therefore:
        //  this._sOldTitle == sCurrentTitle and no change is necessary.
        var sCurrentTitle = this.oEditInputField.getValue().trim(),
            sNewTitle = sCurrentTitle || this._sDefaultValue,
            bHasChanged = sNewTitle !== this._sOldTitle;

        if(bHasChanged) {
            this.setTitle(sNewTitle).fireChange({
                newTitle: sNewTitle
            });
        }
        this.setEditMode(false);

        // Workaround for IE9 (blurring <body> or <span> switches the application (e.g. from ie9 to notepad or outlook))
        // See http://tjvantoll.com/2013/08/30/bugs-with-document-activeelement-in-internet-explorer/
        var activeElement = document.activeElement;
        if ( activeElement.nodeName.toLowerCase() !== "body" && activeElement.nodeName.toLowerCase() !== "span") {
            // "Blur" triggers the _stopEdit event to be fired again. Workaround: Make sure
            // to call this only after the EditMode has been set to false to allow a quick
            // exit in the beginning.
            activeElement.blur();
        }

        //Call the resize handler
        var jqOuterGroupList = jQuery("#groupList");
        jqOuterGroupList.trigger("resize", [jqOuterGroupList.width(), jqOuterGroupList.height()]);
    };

    // jQuery events
    sap.ushell.ui.launchpad.GroupListItem.prototype._handleOver = function (event, ui) {
        //Sometimes, the jQuery hoverClass does not work properly for some reason
        //Better take care of that explicitly:
        jQuery("#" + this.sId).addClass("drop");
        this.fireOver({
            control : (ui && ui.draggable && (ui.draggable.length > 0)
                && sap.ui.getCore().byId(ui.draggable[0].id)) || undefined
        });
    };
    sap.ushell.ui.launchpad.GroupListItem.prototype._handleOut = function (event, ui) {
        //Sometimes, the jQuery hoverClass does not work properly for some reason
        //Better take care of that explicitly:
        jQuery("#" + this.sId).removeClass("drop");
        this.fireOut({
            control : (ui && ui.draggable && (ui.draggable.length > 0)
                && sap.ui.getCore().byId(ui.draggable[0].id)) || undefined
        });
    };
    sap.ushell.ui.launchpad.GroupListItem.prototype._handleDrop = function (event, ui) {
        this.fireDrop({
            control : (ui && ui.draggable && (ui.draggable.length > 0)
                && sap.ui.getCore().byId(ui.draggable[0].id)) || undefined
        });
    };

    // browser events
    // use onmousedown instead of onclick because a click will not end the edit mode if the user starts immediately dragging another tile
    sap.ushell.ui.launchpad.GroupListItem.prototype.onclick = function (oEvent) {
        this.firePress({
            id : this.getId()
        });
        //Close the grouplist after selection if on phone
        if(jQuery.device.is.phone) {
            sap.ui.getCore().byId("shell").setShowPane(false);
        }
    };
    sap.ushell.ui.launchpad.GroupListItem.prototype.onmousedown = function () {
        this.focus(); // grab focus

    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.ondblclick = function () {
        if(!jQuery.device.is.phone) {
            this._startEdit();
        }
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.onsapenter = function () {
        if(!jQuery.device.is.phone) {
            this._stopEdit();
        }
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.onsapescape = function () {
        if(!jQuery.device.is.phone) {
            this._stopEdit();
        }
    };

    // override setters
    sap.ushell.ui.launchpad.GroupListItem.prototype.setEditMode = function (bMode) {
        this.setProperty("editMode", bMode, true); // suppress rerendering

        //Close the grouplist after selection if on phone
        if(jQuery.device.is.phone && (bMode === false)) {
            sap.ui.getCore().byId("shell").setShowPane(false);
        }

        //Call the resize handler (some delay so IE9 can catch up)
        setTimeout(function () {
            var jqOuterGroupList = jQuery("#groupList");
            jqOuterGroupList.trigger("resize", [jqOuterGroupList.width(), jqOuterGroupList.height()]);
        }, 5);

        return this.toggleStyleClass("editing", bMode);
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.setAllowEditMode = function (bAllowEditMode) {
        this.setProperty("allowEditMode", bAllowEditMode, true); // suppress rerendering
        return this;
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.setRemovable = function (bRemovable) {
        this.setProperty("removable", bRemovable, true); // suppress rerendering
        return this;
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.setGroupId = function (sGroupId) {
        this.setProperty("groupId", sGroupId, true); // suppress rerendering
        return this;
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.setTitle = function (sTitle) {
        this.setProperty("title", sTitle, true); // suppress rerendering
        this.oEditInputField.setValue(sTitle);
        this.$().find(".sapMSLITitleOnly").text(sTitle);
        return this;
    };
}());

}; // end of sap/ushell/ui/launchpad/GroupListItem.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.GroupListItemRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/
/**
 * @class GroupListItem renderer.
 * @static
 * 
 * @private
 */

(function () {
    "use strict";

    jQuery.sap.declare("sap.ushell.ui.launchpad.GroupListItemRenderer");
    jQuery.sap.require('sap.m.ListItemBaseRenderer'); // unlisted dependency retained


    /**
     * @class GroupListItem renderer.
     * @static
     */
    sap.ushell.ui.launchpad.GroupListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

    sap.ushell.ui.launchpad.GroupListItemRenderer.renderLIAttributes = function(rm, oLI) {
        rm.addClass("sapUshellGroupLI");
        if (oLI.getEditMode()) {
            rm.addClass("editing");
        }
    };

    /**
     * Renders the HTML for the list content part of the given control, using the provided
     * {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render
     *            output buffer
     * @param {sap.ui.core.Control}
     *            oLI an object representation of the list item control that should be
     *            rendered
     */
    sap.ushell.ui.launchpad.GroupListItemRenderer.renderLIContent = function (rm, oLI) {
        rm.write("<div");
        rm.addClass("sapMSLIDiv");
        rm.addClass("sapMSLITitleDiv");
        rm.writeClasses();

        if (!oLI.getVisible()) {
            rm.addStyle("display", "none");
            rm.writeStyles();
        }

        rm.write(">");

        // List item text (also written when no title for keeping the space)
        rm.renderControl(oLI.oEditInputField);
        rm.write("<div");
        rm.addClass("sapMSLITitleOnly");
        rm.writeClasses();
        rm.write(">");
        rm.writeEscaped(oLI.getTitle());
        rm.write("</div>");

        rm.write("</div>");
    };
}());

}; // end of sap/ushell/ui/launchpad/GroupListItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.HeaderTileRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

/**
 * @class HeaderTile renderer.
 * @static
 * 
 * @private
 */
jQuery.sap.declare("sap.ushell.ui.launchpad.HeaderTileRenderer");
sap.ushell.ui.launchpad.HeaderTileRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ushell.ui.launchpad.HeaderTileRenderer.render = function(oRm, oControl) {
    oRm.write("<");
    oRm.write(oControl.getHeaderLevel().toLowerCase());
    oRm.writeControlData(oControl);
    oRm.addClass("sapUshellHeaderTile");
    if (!oControl.getVisible()) {
        oRm.addClass("sapUshellHidden");
    }
    oRm.writeClasses();
    oRm.write(">");
    oRm.writeEscaped(oControl.getHeaderText());
    oRm.write("</");
    oRm.write(oControl.getHeaderLevel().toLowerCase());
    oRm.write(">");
};

}; // end of sap/ushell/ui/launchpad/HeaderTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.LoadingDialog') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.LoadingDialog.
jQuery.sap.declare("sap.ushell.ui.launchpad.LoadingDialog");

jQuery.sap.require('sap.m.BusyDialog'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/LoadingDialog.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIconUri iconUri} : sap.ui.core.URI</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.BusyDialog#constructor sap.m.BusyDialog}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Displays a loading dialog with an indicator that an app is loading
 * @extends sap.m.BusyDialog
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.launchpad.LoadingDialog
 */
sap.m.BusyDialog.extend("sap.ushell.ui.launchpad.LoadingDialog", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell",
	properties : {
		"iconUri" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.LoadingDialog with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.LoadingDialog.extend
 * @function
 */


/**
 * Getter for property <code>iconUri</code>.
 * the sap-icon://-style URI of an icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconUri</code>
 * @public
 * @name sap.ushell.ui.launchpad.LoadingDialog#getIconUri
 * @function
 */

/**
 * Setter for property <code>iconUri</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconUri  new value for property <code>iconUri</code>
 * @return {sap.ushell.ui.launchpad.LoadingDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LoadingDialog#setIconUri
 * @function
 */


// Start of sap/ushell/ui/launchpad/LoadingDialog.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true*/
    jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained


    sap.ushell.ui.launchpad.LoadingDialog.prototype.init = function () {
        // call parent
        sap.m.BusyDialog.prototype.init.call(this, arguments);
        this.oIcon = new sap.ui.core.Icon();
    };

    sap.ushell.ui.launchpad.LoadingDialog.prototype.exit = function () {
        // call parent
        sap.m.BusyDialog.prototype.exit.call(this, arguments);
        if (this.oIcon) {
            this.oIcon.destroy();
            this.oIcon = null;
        }
    };

    sap.ushell.ui.launchpad.LoadingDialog.prototype.isOpen = function () {
        var oPopup = this._oPopup;
        return oPopup.isOpen();
    };

    sap.ushell.ui.launchpad.LoadingDialog.prototype.setPopupVisible = function (visible) {
        this.toggleStyleClass("sapUshellLoadingDialogInvisible", !visible);
    };

    sap.ushell.ui.launchpad.LoadingDialog.prototype.openLoadingScreen = function () {
        if (!this._oPopup.isOpen()) {
            this.setPopupVisible(true);
            this.open();
        }
    };

    sap.ushell.ui.launchpad.LoadingDialog.prototype.showAppInfo = function (sAppTitle, sIconUri) {
        var that = this,
            fTimeoutHelper = function (that) {
                that.toggleStyleClass("sapUshellLoadingDialogAppDataInvisible", false);
            };
        this.setText(sAppTitle);
        this.setIconUri(sIconUri);
        this.oIcon.setSrc(sIconUri);
        window.setTimeout(function () {
            fTimeoutHelper(that);
        }, 50);
    };

    sap.ushell.ui.launchpad.LoadingDialog.prototype.closeLoadingScreen = function () {
        var that = this,
            fTimeoutHelper = function (that) {
                if (that._oPopup.isOpen()) {
                    that.setText(null);
                    that.setIconUri(null);
                    that.toggleStyleClass("sapUshellLoadingDialogAppDataInvisible", true);
                    that.close();
                }
            };
        if (this._oPopup.isOpen()) {
            this.setPopupVisible(false);
            window.setTimeout(function () {
                fTimeoutHelper(that);
            }, 300);
        }
    };
}());
}; // end of sap/ushell/ui/launchpad/LoadingDialog.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.LoadingDialogRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    /*jslint nomen: true*/
    jQuery.sap.declare("sap.ushell.ui.launchpad.LoadingDialogRenderer");

    /**
     * @class sap.ushell.ui.launchpad.LoadingDialogRenderer
     * @static
     * @private
     */
    sap.ushell.ui.launchpad.LoadingDialogRenderer = {};


    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     *
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     * @private
     */
    sap.ushell.ui.launchpad.LoadingDialogRenderer.render = function (oRm, oControl) {
        var sTooltip = oControl.getTooltip_AsString();
        // add custom class to label
        oControl._oLabel.addStyleClass("sapUshellLoadingDialogLabel");
        oRm.write("<div");
        oRm.writeControlData(oControl);
        oRm.addClass("sapUshellLoadingDialog sapMBusyDialog sapMCommonDialog");
        if (jQuery.device.is.iphone) {
            oRm.addClass("sapMDialogHidden");
        }
        if (!oControl._isPlatformDependent) {
            if (!oControl.getText() && !oControl.getTitle() && !oControl.getShowCancelButton()) {
                oRm.addClass("sapMBusyDialogSimple");
            }
        }
        oRm.writeClasses();
        if (sTooltip) {
            oRm.writeAttributeEscaped("title", sTooltip);
        }
        oRm.write(">");
        if (oControl.getTitle()) {
            oRm.write("<header class=\"sapMDialogTitle\">");
            oRm.writeEscaped(oControl.getTitle());
            oRm.write("</header>");
        }

        if (jQuery.os.ios || !oControl._isPlatformDependent) {
            this.renderAppInfo(oRm, oControl);
            this.renderFioriFlower(oRm, oControl);
        } else {
            this.renderFioriFlower(oRm, oControl);
            this.renderAppInfo(oRm, oControl);
        }

        if (oControl.getShowCancelButton()) {
            oRm.write("<footer class='sapMBusyDialogFooter sapMFooter-CTX'>");
            oRm.renderControl(oControl._oButton);
            oRm.write("</footer>");
        }
        oRm.write("</div>");
    };

    sap.ushell.ui.launchpad.LoadingDialogRenderer.renderAppInfo = function (oRm, oControl) {
        oRm.write("<div").addClass("sapUshellLoadingDialogAppData").writeClasses().write(">");
        if (oControl.getIconUri()) {
            oRm.renderControl(oControl.oIcon);
        }
        oRm.renderControl(oControl._oLabel);
        oRm.write("</div>");
    };

    sap.ushell.ui.launchpad.LoadingDialogRenderer.renderFioriFlower = function (oRm, oControl) {
        var i;
        // create either flowery code or busy indicator
        if (jQuery.support.cssAnimations) {
            oRm.write("<div id='fiori2-loader'>");

            oRm.write("<div class='fiori2-blossom'>");

            for (i = 1; i < 6; i = i + 1) {
                oRm.write("<div class='fiori2-leafContainer fiori2-leafContainer" + i + "'>");
                oRm.write("<div class='fiori2-leaf fiori2-leaf" + i + "'></div>");
                // end leafContainer
                oRm.write("</div>");
            }
            // end blossom
            oRm.write("</div>");

            // end fiori2-loader
            oRm.write("</div>");
        } else {
            oRm.renderControl(oControl._busyIndicator);
        }
    };

}());

}; // end of sap/ushell/ui/launchpad/LoadingDialogRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.Panel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.Panel.
jQuery.sap.declare("sap.ushell.ui.launchpad.Panel");

jQuery.sap.require('sap.m.Panel'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/Panel.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTranslucent translucent} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getHeaderContent headerContent} : sap.ui.core.Control[]</li>
 * <li>{@link #getHeaderBar headerBar} : sap.m.Bar</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Panel#constructor sap.m.Panel}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Panel control is a container for controls with header text, header controls, or a header bar.
 * @extends sap.m.Panel
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.launchpad.Panel
 */
sap.m.Panel.extend("sap.ushell.ui.launchpad.Panel", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell",
	properties : {
		"translucent" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	aggregations : {
    	"headerContent" : {type : "sap.ui.core.Control", multiple : true, singularName : "headerContent"}, 
    	"headerBar" : {type : "sap.m.Bar", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.Panel with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.Panel.extend
 * @function
 */


/**
 * Getter for property <code>translucent</code>.
 * 
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>translucent</code>
 * @public
 * @name sap.ushell.ui.launchpad.Panel#getTranslucent
 * @function
 */

/**
 * Setter for property <code>translucent</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bTranslucent  new value for property <code>translucent</code>
 * @return {sap.ushell.ui.launchpad.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Panel#setTranslucent
 * @function
 */


/**
 * Getter for aggregation <code>headerContent</code>.<br/>
 * 
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.Panel#getHeaderContent
 * @function
 */


/**
 * Inserts a headerContent into the aggregation named <code>headerContent</code>.
 *
 * @param {sap.ui.core.Control}
 *          oHeaderContent the headerContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the headerContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the headerContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the headerContent is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Panel#insertHeaderContent
 * @function
 */

/**
 * Adds some headerContent <code>oHeaderContent</code> 
 * to the aggregation named <code>headerContent</code>.
 *
 * @param {sap.ui.core.Control}
 *            oHeaderContent the headerContent to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Panel#addHeaderContent
 * @function
 */

/**
 * Removes an headerContent from the aggregation named <code>headerContent</code>.
 *
 * @param {int | string | sap.ui.core.Control} vHeaderContent the headerContent to remove or its index or id
 * @return {sap.ui.core.Control} the removed headerContent or null
 * @public
 * @name sap.ushell.ui.launchpad.Panel#removeHeaderContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>headerContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.Panel#removeAllHeaderContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>headerContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oHeaderContent the headerContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.Panel#indexOfHeaderContent
 * @function
 */
	

/**
 * Destroys all the headerContent in the aggregation 
 * named <code>headerContent</code>.
 * @return {sap.ushell.ui.launchpad.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Panel#destroyHeaderContent
 * @function
 */


/**
 * Getter for aggregation <code>headerBar</code>.<br/>
 * 
 * 
 * @return {sap.m.Bar}
 * @public
 * @name sap.ushell.ui.launchpad.Panel#getHeaderBar
 * @function
 */


/**
 * Setter for the aggregated <code>headerBar</code>.
 * @param oHeaderBar {sap.m.Bar}
 * @return {sap.ushell.ui.launchpad.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Panel#setHeaderBar
 * @function
 */
	

/**
 * Destroys the headerBar in the aggregation 
 * named <code>headerBar</code>.
 * @return {sap.ushell.ui.launchpad.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Panel#destroyHeaderBar
 * @function
 */


// Start of sap/ushell/ui/launchpad/Panel.js
// Copyright (c) 2013 SAP AG, All Rights Reserved

/**
 * @name sap.ushell.ui.launchpad.Panel
 * 
 * @private
 */


sap.ushell.ui.launchpad.Panel.prototype.updateAggregation = sap.ushell.override.updateAggregation;

}; // end of sap/ushell/ui/launchpad/Panel.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.PanelRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
jQuery.sap.declare("sap.ushell.ui.launchpad.PanelRenderer");

/**
 * @class Panel renderer. 
 * @static
 * 
 * @private
 */
sap.ushell.ui.launchpad.PanelRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ushell.ui.launchpad.PanelRenderer.render =  function(oRm, oControl) {
    // Return immediately if control is invisible
    if (!oControl.getVisible()) {
        return;
    }

    oRm.write("<section");
    oRm.writeControlData(oControl);
    oRm.addClass("sapMPanel");
    oRm.addClass("sapUshellPanel");
    if (!oControl.getTranslucent()) {
        oRm.addClass("sapMPanelBG");
    }
    oRm.addStyle("width", oControl.getWidth());
    oRm.addStyle("height", oControl.getHeight());
    oRm.writeClasses();
    oRm.writeStyles();
    oRm.write(">");
    var aHeaderChildren = oControl.getHeaderContent();
    var jLength = aHeaderChildren.length;
    if(oControl.getHeaderText() || jLength > 0 || oControl.getHeaderBar()) {
        oRm.write("<header");
        oRm.addClass("sapMPanelHdr");
        oRm.writeClasses();
        oRm.write(">");
        if(oControl.getHeaderText() || jLength > 0) {
            oRm.write("<");
            oRm.write(oControl.getHeaderLevel().toLowerCase());
            oRm.write(">");
            if (oControl.getHeaderText()) {
                oRm.writeEscaped(oControl.getHeaderText());
            }
            for (var j = 0; j < jLength; j++) {
                oRm.renderControl(aHeaderChildren[j]);
            }
            oRm.write("</");
            oRm.write(oControl.getHeaderLevel().toLowerCase());
            oRm.write(">");
        }
        if (oControl.getHeaderBar()) {
/*            oRm.addClass("sapUshellPanelHdrBar");*/
            oRm.renderControl(oControl.getHeaderBar());
        }
        oRm.write("</header>");
    }
    oRm.write("<div");
    oRm.addClass("sapMPanelContent");
    oRm.writeClasses();
    oRm.write(">");
    var aChildren = oControl.getContent();
    var iLength = aChildren.length;
    for (var i = 0; i < iLength; i++) {
        oRm.renderControl(aChildren[i]);
    }
    oRm.write("</div>");
    oRm.write("</section>");
};

}; // end of sap/ushell/ui/launchpad/PanelRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.PlusTileRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/
/**
 * @class PlusTile renderer.
 * @static
 * 
 * @private
 */
(function () {
    "use strict";

    jQuery.sap.declare("sap.ushell.ui.launchpad.PlusTileRenderer");

    /**
     * @class PlusTile renderer.
     * @static
     */
    sap.ushell.ui.launchpad.PlusTileRenderer = {};

    /**
     * Renders the HTML for the given control, using the provided
     * {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render
     *            output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be
     *            rendered
     */
    sap.ushell.ui.launchpad.PlusTileRenderer.render = function (oRm, oControl) {
        oRm.write("<div");
        oRm.writeControlData(oControl);
        oRm.addClass("sapUshellTile");
        oRm.addClass("sapUshellPlusTile");

        oRm.writeClasses();
        oRm.write(">");
        oRm.renderControl(new sap.ui.core.Icon({
            src : 'sys-cancel',
            tooltip : sap.ushell.resources.i18n.getText("open_catalog")
        }));

        oRm.write("</div>");
    };
}());

}; // end of sap/ushell/ui/launchpad/PlusTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.SearchResultAppItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.SearchResultAppItem.
jQuery.sap.declare("sap.ushell.ui.launchpad.SearchResultAppItem");

jQuery.sap.require('sap.m.StandardListItem'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/SearchResultAppItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSearchTerm searchTerm} : string</li>
 * <li>{@link #getTargetUrl targetUrl} : sap.ui.core.URI</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.StandardListItem#constructor sap.m.StandardListItem}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/launchpad/SearchResultAppItem
 * @extends sap.m.StandardListItem
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultAppItem
 */
sap.m.StandardListItem.extend("sap.ushell.ui.launchpad.SearchResultAppItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell",
	properties : {
		"searchTerm" : {type : "string", group : "Appearance", defaultValue : null},
		"targetUrl" : {type : "sap.ui.core.URI", group : "Behavior", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.SearchResultAppItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.SearchResultAppItem.extend
 * @function
 */


/**
 * Getter for property <code>searchTerm</code>.
 * the search term used for searching apps. Occurrences of this search term in the app title are highlighted
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>searchTerm</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultAppItem#getSearchTerm
 * @function
 */

/**
 * Setter for property <code>searchTerm</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSearchTerm  new value for property <code>searchTerm</code>
 * @return {sap.ushell.ui.launchpad.SearchResultAppItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultAppItem#setSearchTerm
 * @function
 */


/**
 * Getter for property <code>targetUrl</code>.
 * The app's target URL for navigating to the app
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>targetUrl</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultAppItem#getTargetUrl
 * @function
 */

/**
 * Setter for property <code>targetUrl</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sTargetUrl  new value for property <code>targetUrl</code>
 * @return {sap.ushell.ui.launchpad.SearchResultAppItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultAppItem#setTargetUrl
 * @function
 */


// Start of sap/ushell/ui/launchpad/SearchResultAppItem.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true */

    sap.ushell.ui.launchpad.SearchResultAppItem.prototype.init = function () {
        sap.m.StandardListItem.prototype.init();
        this.setType(sap.m.ListType.Active);
        this.attachPress(this._onPress, this);
    };

    sap.ushell.ui.launchpad.SearchResultAppItem.prototype.exit = function () {
        sap.m.StandardListItem.prototype.exit();
        this.detachPress(this._onPress, this);
    };

    sap.ushell.ui.launchpad.SearchResultAppItem.prototype.setActive = function (oEvent) {
        return this;
    };

    sap.ushell.ui.launchpad.SearchResultAppItem.prototype._onPress = function () {
        if (this.getTargetUrl()) {
            window.location = this.getTargetUrl();
        }
    };
}());
}; // end of sap/ushell/ui/launchpad/SearchResultAppItem.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.SearchResultAppItemRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    /*global jQuery, sap, window */
    jQuery.sap.declare("sap.ushell.ui.launchpad.SearchResultAppItemRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.StandardListItemRenderer'); // unlisted dependency retained


    sap.ushell.ui.launchpad.SearchResultAppItemRenderer = sap.ui.core.Renderer.extend(sap.m.StandardListItemRenderer);

    sap.ushell.ui.launchpad.SearchResultAppItemRenderer.renderLIAttributes = function (rm, oLI) {
        sap.m.StandardListItemRenderer.renderLIAttributes(rm, oLI);
        rm.addClass("sapUshellSearchResultAppItem");
    };

    /**
     * Searches for occurrences of a given search term and substitutes substrings wrapped in HTML bold tag
     *
     * @param {string} sHighlightTerm an array of strings that will be detected and replaced
     * @param {string} sText contains the text to be highlighted
     * @returns {string} the text with all occurrences wrapped
     * 
     * @private
     */
    sap.ushell.ui.launchpad.SearchResultAppItemRenderer.highlight = function (sHighlightTerm, sText) {
        var regExpHighlight;
        if (sHighlightTerm) {
            // build regular expression with escaped highlight term (case insensitive + greedy)
            regExpHighlight = new RegExp("(" + sHighlightTerm.replace(/([.*+?\^=!:${}()|\[\]\/\\])/g, "\\$1") + ")", "gi");
            // regexp replace occurrence with wrapped self
            sText = sText.replace(regExpHighlight, "<b>$1</b>");
        }
        return sText;
    };
}());
}; // end of sap/ushell/ui/launchpad/SearchResultAppItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.SearchResultApps') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.SearchResultApps.
jQuery.sap.declare("sap.ushell.ui.launchpad.SearchResultApps");

jQuery.sap.require('sap.m.Table'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/SearchResultApps.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getResults results} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Table#constructor sap.m.Table}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A list containing all app search results
 * @extends sap.m.Table
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultApps
 */
sap.m.Table.extend("sap.ushell.ui.launchpad.SearchResultApps", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell",
	aggregations : {
    	"results" : {type : "sap.ui.core.Control", multiple : true, singularName : "result"}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.SearchResultApps with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.SearchResultApps.extend
 * @function
 */


/**
 * Getter for aggregation <code>results</code>.<br/>
 * all found Applications
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultApps#getResults
 * @function
 */


/**
 * Inserts a result into the aggregation named <code>results</code>.
 *
 * @param {sap.ui.core.Control}
 *          oResult the result to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the result should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the result is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the result is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.SearchResultApps} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultApps#insertResult
 * @function
 */

/**
 * Adds some result <code>oResult</code> 
 * to the aggregation named <code>results</code>.
 *
 * @param {sap.ui.core.Control}
 *            oResult the result to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.SearchResultApps} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultApps#addResult
 * @function
 */

/**
 * Removes an result from the aggregation named <code>results</code>.
 *
 * @param {int | string | sap.ui.core.Control} vResult the result to remove or its index or id
 * @return {sap.ui.core.Control} the removed result or null
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultApps#removeResult
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>results</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultApps#removeAllResults
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>results</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oResult the result whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultApps#indexOfResult
 * @function
 */
	

/**
 * Destroys all the results in the aggregation 
 * named <code>results</code>.
 * @return {sap.ushell.ui.launchpad.SearchResultApps} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchResultApps#destroyResults
 * @function
 */


// Start of sap/ushell/ui/launchpad/SearchResultApps.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true */

    sap.ushell.ui.launchpad.SearchResultApps.RANGESET = "SearchResultApps";
    sap.ushell.ui.launchpad.SearchResultApps._columns = {
        Phone : 1,
        Tablet : 2,
        Desktop : 3
    };

    sap.ushell.ui.launchpad.SearchResultApps.prototype.init = function () {
        this._internalModel = new sap.ui.model.json.JSONModel({items: []});
        this.setModel(this._internalModel, "internalModel");

        var oColumnList = new sap.m.ColumnListItem({
                cells: {
                    path: "internalModel>cells",
                    factory : function (sId, oContext) {
                        return new sap.ushell.ui.launchpad.SearchResultAppItem({
                            icon: oContext.getProperty("icon"),
                            title: oContext.getProperty("title"),
                            targetUrl: oContext.getProperty("targetUrl")
                        });
                    }
                }
            });
        this.bindItems({path : "internalModel>/items", template : oColumnList});

        sap.ui.Device.media.initRangeSet(
            sap.ushell.ui.launchpad.SearchResultApps.RANGESET,
            [500, 1024],
            "px",
            ["Phone", "Tablet", "Desktop"]
        );
        sap.ui.Device.media.attachHandler(this._handleMediaChange, this, sap.ushell.ui.launchpad.SearchResultApps.RANGESET);
    };

    sap.ushell.ui.launchpad.SearchResultApps.prototype.exit = function () {
        sap.ui.Device.media.detachHandler(this._handleMediaChange, this, sap.ushell.ui.launchpad.SearchResultApps.RANGESET);
    };

    sap.ushell.ui.launchpad.SearchResultApps.prototype.setGrowing = function (bGrowing) {
        sap.m.Table.prototype.setGrowing.apply(this, [bGrowing]);
        if (bGrowing && this._oGrowingDelegate) {
            this._oGrowingDelegate._getTrigger = this._getTrigger;
        }
        return this;
    };

    sap.ushell.ui.launchpad.SearchResultApps.prototype._handleMediaChange = function (event) {
        this.rerender();
    };

    sap.ushell.ui.launchpad.SearchResultApps.prototype._getTrigger = function (sId) {
        if (!this._oTrigger) {
            this._oTrigger = new sap.m.CustomListItem({
                id : sId,
                content : new sap.m.Button({
                    type: sap.m.ButtonType.Transparent,
                    text: this._oControl.getGrowingTriggerText(),
                    press: [this.requestNewPage, this]
                }).addStyleClass("sapUshellSearchResultAppsGrowingTriggerBtn")
            });
            this._oTrigger
                .setParent(this._oControl, null, true)
                .addStyleClass("sapUshellSearchResultAppsGrowingTrigger");
        }
        return this._oTrigger;
    };

    sap.ushell.ui.launchpad.SearchResultApps.prototype.onBeforeRendering = function () {
        var sDevice = sap.ui.Device.media.getCurrentRange(sap.ushell.ui.launchpad.SearchResultApps.RANGESET),
            iColumns = sap.ushell.ui.launchpad.SearchResultApps._columns[sDevice.name],
            aItems = [],
            aResults = this.getResults(),
            oColumnList,
            oLineItem,
            i,
            j;

        // reset columns
        this.destroyAggregation("columns", true);
        for (i = 0; i < iColumns; i = i + 1) {
            this.addColumn(new sap.m.Column());
        }

        // build new columns from "results"
        for (i = 0; i < aResults.length; i = i + iColumns) {
            oLineItem = {cells: []};
            for (j = 0; j < iColumns; j = j + 1) {
                if (aResults[i + j]) {
                    oLineItem.cells.push({
                        icon: aResults[i + j].getIcon(),
                        title: aResults[i + j].getTitle(),
                        targetUrl: aResults[i + j].getTargetUrl()
                    });
                } else {
                    // fill empty columns
                    oLineItem.cells.push({});
                }
            }
            aItems.push(oLineItem);
        }

        this._internalModel.setProperty("/items", aItems);
    };
}());
}; // end of sap/ushell/ui/launchpad/SearchResultApps.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.SearchResultAppsRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true */

    jQuery.sap.declare("sap.ushell.ui.launchpad.SearchResultAppsRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.TableRenderer'); // unlisted dependency retained


    sap.ushell.ui.launchpad.SearchResultAppsRenderer = sap.ui.core.Renderer.extend(sap.m.TableRenderer);

    sap.ushell.ui.launchpad.SearchResultAppsRenderer.renderContainerAttributes = function (rm, oControl) {
        sap.m.TableRenderer.renderContainerAttributes(rm, oControl);
        rm.addClass("sapUshellSearchResultApps");
    };
}());
}; // end of sap/ushell/ui/launchpad/SearchResultAppsRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.SearchSuggestionList') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.SearchSuggestionList.
jQuery.sap.declare("sap.ushell.ui.launchpad.SearchSuggestionList");

jQuery.sap.require('sap.m.List'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/SearchSuggestionList.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDisableKeyboardNavigation disableKeyboardNavigation} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.SearchSuggestionList#event:pressEsc pressEsc} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.SearchSuggestionList#event:pressUpFirstItem pressUpFirstItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.List#constructor sap.m.List}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/launchpad/SearchSuggestionList
 * @extends sap.m.List
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionList
 */
sap.m.List.extend("sap.ushell.ui.launchpad.SearchSuggestionList", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell",
	properties : {
		"disableKeyboardNavigation" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	events : {
		"pressEsc" : {}, 
		"pressUpFirstItem" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.SearchSuggestionList with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.SearchSuggestionList.extend
 * @function
 */

sap.ushell.ui.launchpad.SearchSuggestionList.M_EVENTS = {'pressEsc':'pressEsc','pressUpFirstItem':'pressUpFirstItem'};


/**
 * Getter for property <code>disableKeyboardNavigation</code>.
 * 
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>disableKeyboardNavigation</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#getDisableKeyboardNavigation
 * @function
 */

/**
 * Setter for property <code>disableKeyboardNavigation</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDisableKeyboardNavigation  new value for property <code>disableKeyboardNavigation</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#setDisableKeyboardNavigation
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#pressEsc
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'pressEsc' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.SearchSuggestionList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#attachPressEsc
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'pressEsc' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#detachPressEsc
 * @function
 */

/**
 * Fire event pressEsc to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionList} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#firePressEsc
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#pressUpFirstItem
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'pressUpFirstItem' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.SearchSuggestionList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#attachPressUpFirstItem
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'pressUpFirstItem' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#detachPressUpFirstItem
 * @function
 */

/**
 * Fire event pressUpFirstItem to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionList} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#firePressUpFirstItem
 * @function
 */


// Start of sap/ushell/ui/launchpad/SearchSuggestionList.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true */

    
    jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained


    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.init = function (oEvent) {
        this.setShowNoData(false);
        this.setShowSeparators(sap.m.ListSeparators.Inner);

        this.oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
        this.oItemNavigation.attachEvent("AfterFocus", this._afterFocus);
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.exit = function (oEvent) {
        this.oItemNavigation.detachEvent("AfterFocus", this._afterFocus);
        this.oItemNavigation.destroy();
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.updateAggregation = sap.ushell.override.updateAggregationGrouped;

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.addItem = function (oItem) {
        if (oItem instanceof sap.ushell.ui.launchpad.SearchSuggestionListItem) {
            oItem.attachFocus(this._focusItem, this);
        }
        return sap.m.List.prototype.addItem.call(this, oItem);
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.removeItem = function (oItem) {
        if (oItem instanceof sap.ushell.ui.launchpad.SearchSuggestionListItem) {
            oItem.detachFocus(this._focusItem, this);
        }
        return sap.m.List.prototype.removeItem.call(this, oItem);
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.setDisableKeyboardNavigation = function (bDisabled) {
        if (bDisabled) {
            this.removeDelegate(this.oItemNavigation);
        } else {
            this.addDelegate(this.oItemNavigation);
        }

        this.setProperty("disableKeyboardNavigation", bDisabled);
        return this;
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.onsapright = function () {
        var self = this.oItemNavigation;
        self.setFocusedIndex(self.getItemDomRefs().lastIndexOf(self.getFocusedDomRef()));
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.onsapup = function (oEvent) {
        if (oEvent.srcControl === this.getItems()[1]) {
            this.removeDelegate(this.oItemNavigation);
            this.firePressUpFirstItem();
        }
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.onsapescape = function () {
        this.removeDelegate(this.oItemNavigation);
        this.firePressEsc();
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.onAfterRendering = function () {
        //Collect the dom references of the items
        var oFocusRef = this.getDomRef(),
            aDomRefs = oFocusRef.getElementsByTagName("li"),
            aItems = [],
            iMaxColumns = 0;

        // Get max number of columns in one row
        jQuery.each(aDomRefs, function (i, value) {
            var iClolumns = value.getElementsByClassName("sapUshellSearchSuggestionListItemNavItem").length;
            if (iClolumns > iMaxColumns) {
                iMaxColumns = iClolumns;
            }
        });

        // Build Grid
        jQuery.each(aDomRefs, function (i, value) {
            var oLinks = value.getElementsByClassName("sapUshellSearchSuggestionListItemNavItem"),
                j = 0;
            if (oLinks.length > 0) {
                for (j; j < iMaxColumns; j = j + 1) {
                    aItems.push(oLinks[j] || aItems[aItems.length - 1]);
                }
            }
        });

        // After each rendering the delegate needs to be initialized as well.
        this.oItemNavigation
            .setRootDomRef(oFocusRef)
            .setItemDomRefs(aItems)
            .setCycling(true)
            .setColumns(iMaxColumns)
            .setSelectedIndex(0);
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype._afterFocus = function (oEvent) {
        this.setFocusedIndex(this.getItemDomRefs().indexOf(this.getFocusedDomRef()));
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype._focusItem = function () {
        this.addDelegate(this.oItemNavigation);
    };
}());
}; // end of sap/ushell/ui/launchpad/SearchSuggestionList.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.SearchSuggestionListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.SearchSuggestionListItem.
jQuery.sap.declare("sap.ushell.ui.launchpad.SearchSuggestionListItem");

jQuery.sap.require('sap.m.ListItemBase'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/SearchSuggestionListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getIsGroupFooter isGroupFooter} : boolean (default: false)</li>
 * <li>{@link #getCategorySeperator categorySeperator} : string (default: '/')</li>
 * <li>{@link #getCategoryFirstSeperator categoryFirstSeperator} : string (default: '')</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getMaxCategories maxCategories} : int (default: 2)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCategories categories} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.SearchSuggestionListItem#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.SearchSuggestionListItem#event:focus focus} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/launchpad/SearchSuggestionListItem
 * @extends sap.m.ListItemBase
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem
 */
sap.m.ListItemBase.extend("sap.ushell.ui.launchpad.SearchSuggestionListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell",
	properties : {
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"isGroupFooter" : {type : "boolean", group : "Misc", defaultValue : false},
		"categorySeperator" : {type : "string", group : "Misc", defaultValue : '/'},
		"categoryFirstSeperator" : {type : "string", group : "Misc", defaultValue : ''},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"maxCategories" : {type : "int", group : "Misc", defaultValue : 2}
	},
	aggregations : {
    	"categories" : {type : "sap.ui.core.Control", multiple : true, singularName : "category"}
	},
	events : {
		"press" : {}, 
		"focus" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.SearchSuggestionListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem.extend
 * @function
 */

sap.ushell.ui.launchpad.SearchSuggestionListItem.M_EVENTS = {'press':'press','focus':'focus'};


/**
 * Getter for property <code>text</code>.
 * Suggestion text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#setText
 * @function
 */


/**
 * Getter for property <code>isGroupFooter</code>.
 * 
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isGroupFooter</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getIsGroupFooter
 * @function
 */

/**
 * Setter for property <code>isGroupFooter</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsGroupFooter  new value for property <code>isGroupFooter</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#setIsGroupFooter
 * @function
 */


/**
 * Getter for property <code>categorySeperator</code>.
 * 
 *
 * Default value is <code>/</code>
 *
 * @return {string} the value of property <code>categorySeperator</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getCategorySeperator
 * @function
 */

/**
 * Setter for property <code>categorySeperator</code>.
 *
 * Default value is <code>/</code> 
 *
 * @param {string} sCategorySeperator  new value for property <code>categorySeperator</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#setCategorySeperator
 * @function
 */


/**
 * Getter for property <code>categoryFirstSeperator</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>categoryFirstSeperator</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getCategoryFirstSeperator
 * @function
 */

/**
 * Setter for property <code>categoryFirstSeperator</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCategoryFirstSeperator  new value for property <code>categoryFirstSeperator</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#setCategoryFirstSeperator
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#setIcon
 * @function
 */


/**
 * Getter for property <code>maxCategories</code>.
 * 
 *
 * Default value is <code>2</code>
 *
 * @return {int} the value of property <code>maxCategories</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getMaxCategories
 * @function
 */

/**
 * Setter for property <code>maxCategories</code>.
 *
 * Default value is <code>2</code> 
 *
 * @param {int} iMaxCategories  new value for property <code>maxCategories</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#setMaxCategories
 * @function
 */


/**
 * Getter for aggregation <code>categories</code>.<br/>
 * Category Control
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getCategories
 * @function
 */


/**
 * Inserts a category into the aggregation named <code>categories</code>.
 *
 * @param {sap.ui.core.Control}
 *          oCategory the category to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the category should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the category is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the category is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#insertCategory
 * @function
 */

/**
 * Adds some category <code>oCategory</code> 
 * to the aggregation named <code>categories</code>.
 *
 * @param {sap.ui.core.Control}
 *            oCategory the category to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#addCategory
 * @function
 */

/**
 * Removes an category from the aggregation named <code>categories</code>.
 *
 * @param {int | string | sap.ui.core.Control} vCategory the category to remove or its index or id
 * @return {sap.ui.core.Control} the removed category or null
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#removeCategory
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>categories</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#removeAllCategories
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>categories</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oCategory the category whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#indexOfCategory
 * @function
 */
	

/**
 * Destroys all the categories in the aggregation 
 * named <code>categories</code>.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#destroyCategories
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#firePress
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#focus
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'focus' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#attachFocus
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'focus' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#detachFocus
 * @function
 */

/**
 * Fire event focus to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#fireFocus
 * @function
 */


// Start of sap/ushell/ui/launchpad/SearchSuggestionListItem.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true */

    

    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype.addCategory = function (oCategory) {
        this.addAggregation("categories", oCategory);

        oCategory.addEventDelegate({
            onmouseover: this._focusCategory
        }, this);
        oCategory.addEventDelegate({
            onsapenter: this.onsapenter
        }, oCategory);
        return this;
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype.setActive = function (oEvent) {
        return this;
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype.updateAggregation = sap.ushell.override.updateAggregation;


    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype.firePress = function (oEvent) {
        if (!this.getIsGroupFooter()) {
            sap.m.ListItemBase.prototype.firePress.call(this);
        }
    };


    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype.onmouseover = function (oEvent) {
        if (jQuery(oEvent.target).hasClass('sapUshellSearchSuggestionListItemNavItem')) {
            this.focus();
            this.fireFocus();
        }
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype.onsapenter = function () {
        this.firePress();
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype.getFocusDomRef = function () {
        return (this.getDomRef() && this.getDomRef().getElementsByClassName("sapUshellSearchSuggestionListItemNavItem")[0]) || null;
    };


    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype._focusCategory = function (oEvent) {
        oEvent.srcControl.focus();
        oEvent.preventDefault();
        oEvent.stopPropagation();
        this.fireFocus();
    };
}());
}; // end of sap/ushell/ui/launchpad/SearchSuggestionListItem.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    jQuery.sap.declare("sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ListItemBaseRenderer'); // unlisted dependency retained


    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLIAttributes = function (rm, oLI) {
        rm.addClass("sapUshellSearchSuggestionListItem");
        if (oLI.getIsGroupFooter()) {
            rm.addClass("sapUshellSearchSuggestionListItemGroupFooter");
        }
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLIContent = function (rm, oLI) {
        var aCategories = oLI.getCategories();

        if (oLI.getIsGroupFooter()) {
            this.renderLIGroupFooter(rm, oLI);
        } else if (oLI.getText()) {
            if (oLI.getIcon()) {
                this.renderLIIcon(rm, oLI);
            }
            this.renderLIText(rm, oLI);
        }

        if (aCategories.length > 0) {
            this.renderLICategories(rm, oLI, aCategories);
        }
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLIIcon = function (rm, oLI) {
        rm.write("<div");
        rm.addClass("sapUshellSearchSuggestionListItemIcon");
        rm.writeClasses();
        rm.write(">");
        rm.renderControl(new sap.ui.core.Icon({src: oLI.getIcon()}));
        rm.write('</div>');
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLIGroupFooter = function (rm, oLI) {
        rm.write("<span>");
        rm.writeEscaped(oLI.getText());
        rm.write('</span>');
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLIText = function (rm, oLI) {
        rm.write("<div");
        rm.addClass("sapUshellSearchSuggestionListItemText");
        rm.writeClasses();
        rm.write(">");

        rm.write("<a");
        rm.addClass("sapUshellSearchSuggestionListItemNavItem");
        rm.writeClasses();
        rm.write("style='display: inline-block;' tabindex='0'>");

        rm.write(oLI.getText());

        rm.write('</a>');
        rm.write('</div>');
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLICategories = function (rm, oLI, aCategories) {
        var iMaxCatToDisplay = oLI.getMaxCategories(),
            iCatToDisplay = aCategories.length < iMaxCatToDisplay ? aCategories.length : iMaxCatToDisplay,
            i;

        rm.write("<div");
        rm.addClass("sapUshellSearchSuggestionListItemCategory");
        rm.writeClasses();
        rm.write(">");

        this.renderLICategoryFirstSeperator(rm, oLI);
        for (i = 0; i < iCatToDisplay; i = i + 1) {
            rm.renderControl(aCategories[i].addStyleClass("sapUshellSearchSuggestionListItemNavItem"));
            if ((i + 1) < iCatToDisplay) {
                this.renderLICategorySeperator(rm, oLI);
            }
        }

        rm.write('</div>');
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLICategoryFirstSeperator = function (rm, oLI) {
        rm.write("<div");
        rm.addClass("sapUshellSearchSuggestionListItemCategoryFirstSeperator");
        rm.writeClasses();
        rm.write(">");
        rm.writeEscaped(oLI.getCategoryFirstSeperator());
        rm.write('</div>');
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLICategorySeperator = function (rm, oLI) {
        rm.write("<div");
        rm.addClass("sapUshellSearchSuggestionListItemCategorySeperator");
        rm.writeClasses();
        rm.write(">");
        rm.writeEscaped(oLI.getCategorySeperator());
        rm.write('</div>');
    };
}());
}; // end of sap/ushell/ui/launchpad/SearchSuggestionListItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.SearchSuggestionListRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true */

    jQuery.sap.declare("sap.ushell.ui.launchpad.SearchSuggestionListRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ListRenderer'); // unlisted dependency retained


    sap.ushell.ui.launchpad.SearchSuggestionListRenderer = sap.ui.core.Renderer.extend(sap.m.ListRenderer);

    sap.ushell.ui.launchpad.SearchSuggestionListRenderer.renderContainerAttributes = function (rm, oControl) {
        rm.addClass("sapUshellSearchSuggestionList");
    };
}());
}; // end of sap/ushell/ui/launchpad/SearchSuggestionListRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.Tile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.Tile.
jQuery.sap.declare("sap.ushell.ui.launchpad.Tile");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/Tile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLong long} : boolean (default: false)</li>
 * <li>{@link #getUuid uuid} : string</li>
 * <li>{@link #getTarget target} : string</li>
 * <li>{@link #getDraggable draggable} : boolean (default: false)</li>
 * <li>{@link #getDragContainer dragContainer} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTileViews tileViews} : sap.ui.core.Control[]</li>
 * <li>{@link #getFootItems footItems} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.Tile#event:dragStart dragStart} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.Tile#event:dragStop dragStop} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.Tile#event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A tile to be displayed in the tile container. This tile acts as container for specialized tile implementations.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.launchpad.Tile
 */
sap.ui.core.Control.extend("sap.ushell.ui.launchpad.Tile", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell",
	properties : {
		"long" : {type : "boolean", group : "Misc", defaultValue : false},
		"uuid" : {type : "string", group : "Misc", defaultValue : null},
		"target" : {type : "string", group : "Misc", defaultValue : null},
		"draggable" : {type : "boolean", group : "Misc", defaultValue : false},
		"dragContainer" : {type : "string", group : "Misc", defaultValue : null},
		"visible" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	aggregations : {
    	"tileViews" : {type : "sap.ui.core.Control", multiple : true, singularName : "tileView"}, 
    	"footItems" : {type : "sap.ui.core.Control", multiple : true, singularName : "footItem"}
	},
	events : {
		"dragStart" : {}, 
		"dragStop" : {}, 
		"afterRendering" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.Tile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.Tile.extend
 * @function
 */

sap.ushell.ui.launchpad.Tile.M_EVENTS = {'dragStart':'dragStart','dragStop':'dragStop','afterRendering':'afterRendering'};


/**
 * Getter for property <code>long</code>.
 * Whether tile spans more than one column
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>long</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getLong
 * @function
 */

/**
 * Setter for property <code>long</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bLong  new value for property <code>long</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setLong
 * @function
 */


/**
 * Getter for property <code>uuid</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>uuid</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getUuid
 * @function
 */

/**
 * Setter for property <code>uuid</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUuid  new value for property <code>uuid</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setUuid
 * @function
 */


/**
 * Getter for property <code>target</code>.
 * Hyperlink target
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>target</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getTarget
 * @function
 */

/**
 * Setter for property <code>target</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTarget  new value for property <code>target</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setTarget
 * @function
 */


/**
 * Getter for property <code>draggable</code>.
 * 
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>draggable</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getDraggable
 * @function
 */

/**
 * Setter for property <code>draggable</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDraggable  new value for property <code>draggable</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setDraggable
 * @function
 */


/**
 * Getter for property <code>dragContainer</code>.
 * jQuery selector specifying where drag helper is appended to.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>dragContainer</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getDragContainer
 * @function
 */

/**
 * Setter for property <code>dragContainer</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDragContainer  new value for property <code>dragContainer</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setDragContainer
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setVisible
 * @function
 */


/**
 * Getter for aggregation <code>tileViews</code>.<br/>
 * 
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getTileViews
 * @function
 */


/**
 * Inserts a tileView into the aggregation named <code>tileViews</code>.
 *
 * @param {sap.ui.core.Control}
 *          oTileView the tileView to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the tileView should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the tileView is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the tileView is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#insertTileView
 * @function
 */

/**
 * Adds some tileView <code>oTileView</code> 
 * to the aggregation named <code>tileViews</code>.
 *
 * @param {sap.ui.core.Control}
 *            oTileView the tileView to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#addTileView
 * @function
 */

/**
 * Removes an tileView from the aggregation named <code>tileViews</code>.
 *
 * @param {int | string | sap.ui.core.Control} vTileView the tileView to remove or its index or id
 * @return {sap.ui.core.Control} the removed tileView or null
 * @public
 * @name sap.ushell.ui.launchpad.Tile#removeTileView
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>tileViews</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.Tile#removeAllTileViews
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>tileViews</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oTileView the tileView whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.Tile#indexOfTileView
 * @function
 */
	

/**
 * Destroys all the tileViews in the aggregation 
 * named <code>tileViews</code>.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#destroyTileViews
 * @function
 */


/**
 * Getter for aggregation <code>footItems</code>.<br/>
 * 
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getFootItems
 * @function
 */


/**
 * Inserts a footItem into the aggregation named <code>footItems</code>.
 *
 * @param {sap.ui.core.Control}
 *          oFootItem the footItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the footItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the footItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the footItem is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#insertFootItem
 * @function
 */

/**
 * Adds some footItem <code>oFootItem</code> 
 * to the aggregation named <code>footItems</code>.
 *
 * @param {sap.ui.core.Control}
 *            oFootItem the footItem to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#addFootItem
 * @function
 */

/**
 * Removes an footItem from the aggregation named <code>footItems</code>.
 *
 * @param {int | string | sap.ui.core.Control} vFootItem the footItem to remove or its index or id
 * @return {sap.ui.core.Control} the removed footItem or null
 * @public
 * @name sap.ushell.ui.launchpad.Tile#removeFootItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>footItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.Tile#removeAllFootItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>footItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oFootItem the footItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.Tile#indexOfFootItem
 * @function
 */
	

/**
 * Destroys all the footItems in the aggregation 
 * named <code>footItems</code>.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#destroyFootItems
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.Tile#dragStart
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'dragStart' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#attachDragStart
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'dragStart' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#detachDragStart
 * @function
 */

/**
 * Fire event dragStart to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.Tile#fireDragStart
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.Tile#dragStop
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'dragStop' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#attachDragStop
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'dragStop' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#detachDragStop
 * @function
 */

/**
 * Fire event dragStop to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.Tile#fireDragStop
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.Tile#afterRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#attachAfterRendering
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#detachAfterRendering
 * @function
 */

/**
 * Fire event afterRendering to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.Tile#fireAfterRendering
 * @function
 */


// Start of sap/ushell/ui/launchpad/Tile.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/
/**
 * @name sap.ushell.ui.launchpad.Tile
 *
 * @private
 */
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true*/

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-core'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-widget'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-mouse'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-draggable'); // unlisted dependency retained

    

    sap.ushell.ui.launchpad.Tile.prototype.ontap = function (event, ui) {
        // NOTE: for now, the on press animation is not used, as it caused too much
        // confusion
        return;
        var oSrc = event.srcElement,
            bIsInFooter = true,
            i,
            fTimeoutHelper = function () {
                var fHelper2 = function () {
                    this.toggleStyleClass("sapUshellTileHide", false);
                };
                this.toggleStyleClass("sapUshellTileHide", true);
                this.toggleStyleClass("sapUshellTileTapped", false);
                window.setTimeout(jQuery.proxy(fHelper2, this), 800);
            };
        // we do not need to support animations for phones and if the browser does not support it
        if (jQuery.device.is.phone || !jQuery.support.cssAnimations) {
            return;
        }
        // workaround: check whether the clicked source element is within the main section of the tile (i.e. in sapUshellTileInner)
        // If a parent is outside, e.g. in the footer (Catalog view), we suppress the animation
        for (i = 0; i < 6; i = i + 1) {
            if (jQuery(oSrc) && (jQuery(oSrc).hasClass("sapUshellTileInner") || jQuery(oSrc).hasClass("sapUshellPlusTile"))) {
                bIsInFooter = false;
                break;
            }
            // go up one level
            oSrc = jQuery(oSrc).parent();
        }
        if (bIsInFooter) {
            // the tapped item is the footer button or something not within the tile - ignore
            return;
        }
        this.toggleStyleClass("sapUshellTileTapped", true);
        window.setTimeout(jQuery.proxy(fTimeoutHelper, this), 1000);
    };

    sap.ushell.ui.launchpad.Tile.prototype.destroy = function (bSuppressInvalidate) {
        this.removeAggregation("tileViews", 0, true);
        sap.ui.core.Control.prototype.destroy.call(this, bSuppressInvalidate);
    };

    sap.ushell.ui.launchpad.Tile.prototype.destroyTileViews = function () {
        // Don't delete the tileViews when destroying the aggregation. They are handled by the backend.
        if (this.mAggregations["tileViews"]) {
            this.mAggregations["tileViews"].length = 0;
        }
    };

    sap.ushell.ui.launchpad.Tile.prototype.exit = function () {
        if (this.getDraggable()) {
            this._setDraggable(false);
        }
    };

    sap.ushell.ui.launchpad.Tile.prototype.onBeforeRendering = function () {
        if (this.getDraggable()) {
            this._setDraggable(false);
        }
    };

    sap.ushell.ui.launchpad.Tile.prototype.onAfterRendering = function () {
        if (this.getDraggable()) {
            this._setDraggable(true);
        }
        this.fireAfterRendering();
    };

    //jQuery events
    sap.ushell.ui.launchpad.Tile.prototype._handleDragStart = function (event, ui) {
        this.fireDragStart();
    };

    sap.ushell.ui.launchpad.Tile.prototype._handleDragStop = function (event, ui) {
        this.fireDragStop();
    };

    // override setters
    sap.ushell.ui.launchpad.Tile.prototype.setDraggable = function (bDraggable) {
        this.setProperty("draggable", bDraggable, true); // suppress rerendering
        this._setDraggable(bDraggable);
        return this;
    };

    sap.ushell.ui.launchpad.Tile.prototype.setVisible = function (bVisible) {
        this.setProperty("visible", bVisible, true); // suppress rerendering
        return this.toggleStyleClass("sapUshellHidden", !bVisible);
    };

    sap.ushell.ui.launchpad.Tile.prototype.setLong = function (bLong) {
        this.setProperty("long", bLong, true); // suppress rerendering
        return this.toggleStyleClass("long", bLong);
    };

    sap.ushell.ui.launchpad.Tile.prototype.setUuid = function (sUuid) {
        this.setProperty("uuid", sUuid, true); // suppress rerendering
        return this;
    };

    /**
     *@private
     */
    sap.ushell.ui.launchpad.Tile.prototype._setDraggable = function (bDraggable) {
        if (this.getDomRef()) {
            if (bDraggable) {
                this.$().draggable({
                    containment : "document",
                    handle : ".sapUshellTileInner",
                    helper : "clone",
                    appendTo: this.getDragContainer() || "body",
                    opacity : 0.5,
                    delay: 200,
                    zIndex: 100,
                    scroll: false
                }).bind("dragstart", jQuery.proxy(this._handleDragStart, this))
                  .bind("dragstop", jQuery.proxy(this._handleDragStop, this));
            } else {
                this.$().unbind("dragstart", this._handleDragStart)
                    .unbind("dragstop", this._handleDragStop)
                    .draggable("destroy");
            }
        }
    };

}());
}; // end of sap/ushell/ui/launchpad/Tile.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.TileContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.TileContainer.
jQuery.sap.declare("sap.ushell.ui.launchpad.TileContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/TileContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getScrollType scrollType} : string (default: 'item')</li>
 * <li>{@link #getAnimationSpeed animationSpeed} : int (default: 500)</li>
 * <li>{@link #getGroupId groupId} : string</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getShowPlaceholder showPlaceholder} : boolean (default: true)</li>
 * <li>{@link #getDefaultGroup defaultGroup} : boolean (default: false)</li>
 * <li>{@link #getHeaderText headerText} : string</li>
 * <li>{@link #getHeaderLevel headerLevel} : sap.m.HeaderLevel (default: sap.m.HeaderLevel.H2)</li>
 * <li>{@link #getGroupHeaderLevel groupHeaderLevel} : sap.m.HeaderLevel (default: sap.m.HeaderLevel.H4)</li>
 * <li>{@link #getShowGroupHeader showGroupHeader} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getSortable sortable} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTiles tiles} : sap.ushell.ui.launchpad.Tile[]</li>
 * <li>{@link #getFooterContent footerContent} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.TileContainer#event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.TileContainer#event:add add} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A container that arranges Tile controls.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer
 */
sap.ui.core.Control.extend("sap.ushell.ui.launchpad.TileContainer", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell",
	properties : {
		"scrollType" : {type : "string", group : "Misc", defaultValue : 'item'},
		"animationSpeed" : {type : "int", group : "Misc", defaultValue : 500},
		"groupId" : {type : "string", group : "Misc", defaultValue : null},
		"showHeader" : {type : "boolean", group : "Misc", defaultValue : true},
		"showPlaceholder" : {type : "boolean", group : "Misc", defaultValue : true},
		"defaultGroup" : {type : "boolean", group : "Misc", defaultValue : false},
		"headerText" : {type : "string", group : "Misc", defaultValue : null},
		"headerLevel" : {type : "sap.m.HeaderLevel", group : "Misc", defaultValue : sap.m.HeaderLevel.H2},
		"groupHeaderLevel" : {type : "sap.m.HeaderLevel", group : "Misc", defaultValue : sap.m.HeaderLevel.H4},
		"showGroupHeader" : {type : "boolean", group : "Misc", defaultValue : true},
		"visible" : {type : "boolean", group : "Misc", defaultValue : true},
		"sortable" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	aggregations : {
    	"tiles" : {type : "sap.ushell.ui.launchpad.Tile", multiple : true, singularName : "tile"}, 
    	"footerContent" : {type : "sap.ui.core.Control", multiple : true, singularName : "footerContent"}
	},
	events : {
		"afterRendering" : {}, 
		"add" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.TileContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.TileContainer.extend
 * @function
 */

sap.ushell.ui.launchpad.TileContainer.M_EVENTS = {'afterRendering':'afterRendering','add':'add'};


/**
 * Getter for property <code>scrollType</code>.
 * 
 *
 * Default value is <code>item</code>
 *
 * @return {string} the value of property <code>scrollType</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getScrollType
 * @function
 */

/**
 * Setter for property <code>scrollType</code>.
 *
 * Default value is <code>item</code> 
 *
 * @param {string} sScrollType  new value for property <code>scrollType</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setScrollType
 * @function
 */


/**
 * Getter for property <code>animationSpeed</code>.
 * Animation Speed in milliseconds (ms)
 *
 * Default value is <code>500</code>
 *
 * @return {int} the value of property <code>animationSpeed</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getAnimationSpeed
 * @function
 */

/**
 * Setter for property <code>animationSpeed</code>.
 *
 * Default value is <code>500</code> 
 *
 * @param {int} iAnimationSpeed  new value for property <code>animationSpeed</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setAnimationSpeed
 * @function
 */


/**
 * Getter for property <code>groupId</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>groupId</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getGroupId
 * @function
 */

/**
 * Setter for property <code>groupId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sGroupId  new value for property <code>groupId</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setGroupId
 * @function
 */


/**
 * Getter for property <code>showHeader</code>.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getShowHeader
 * @function
 */

/**
 * Setter for property <code>showHeader</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setShowHeader
 * @function
 */


/**
 * Getter for property <code>showPlaceholder</code>.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showPlaceholder</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getShowPlaceholder
 * @function
 */

/**
 * Setter for property <code>showPlaceholder</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowPlaceholder  new value for property <code>showPlaceholder</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setShowPlaceholder
 * @function
 */


/**
 * Getter for property <code>defaultGroup</code>.
 * 
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>defaultGroup</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getDefaultGroup
 * @function
 */

/**
 * Setter for property <code>defaultGroup</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDefaultGroup  new value for property <code>defaultGroup</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setDefaultGroup
 * @function
 */


/**
 * Getter for property <code>headerText</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>headerText</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getHeaderText
 * @function
 */

/**
 * Setter for property <code>headerText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeaderText  new value for property <code>headerText</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setHeaderText
 * @function
 */


/**
 * Getter for property <code>headerLevel</code>.
 * 
 *
 * Default value is <code>H2</code>
 *
 * @return {sap.m.HeaderLevel} the value of property <code>headerLevel</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getHeaderLevel
 * @function
 */

/**
 * Setter for property <code>headerLevel</code>.
 *
 * Default value is <code>H2</code> 
 *
 * @param {sap.m.HeaderLevel} oHeaderLevel  new value for property <code>headerLevel</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setHeaderLevel
 * @function
 */


/**
 * Getter for property <code>groupHeaderLevel</code>.
 * Header level (H1-H6) used for headers of tile groups.
 *
 * Default value is <code>H4</code>
 *
 * @return {sap.m.HeaderLevel} the value of property <code>groupHeaderLevel</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getGroupHeaderLevel
 * @function
 */

/**
 * Setter for property <code>groupHeaderLevel</code>.
 *
 * Default value is <code>H4</code> 
 *
 * @param {sap.m.HeaderLevel} oGroupHeaderLevel  new value for property <code>groupHeaderLevel</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setGroupHeaderLevel
 * @function
 */


/**
 * Getter for property <code>showGroupHeader</code>.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showGroupHeader</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getShowGroupHeader
 * @function
 */

/**
 * Setter for property <code>showGroupHeader</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowGroupHeader  new value for property <code>showGroupHeader</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setShowGroupHeader
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setVisible
 * @function
 */


/**
 * Getter for property <code>sortable</code>.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>sortable</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getSortable
 * @function
 */

/**
 * Setter for property <code>sortable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bSortable  new value for property <code>sortable</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setSortable
 * @function
 */


/**
 * Getter for aggregation <code>tiles</code>.<br/>
 * 
 * 
 * @return {sap.ushell.ui.launchpad.Tile[]}
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getTiles
 * @function
 */


/**
 * Inserts a tile into the aggregation named <code>tiles</code>.
 *
 * @param {sap.ushell.ui.launchpad.Tile}
 *          oTile the tile to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the tile should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the tile is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the tile is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#insertTile
 * @function
 */

/**
 * Adds some tile <code>oTile</code> 
 * to the aggregation named <code>tiles</code>.
 *
 * @param {sap.ushell.ui.launchpad.Tile}
 *            oTile the tile to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#addTile
 * @function
 */

/**
 * Removes an tile from the aggregation named <code>tiles</code>.
 *
 * @param {int | string | sap.ushell.ui.launchpad.Tile} vTile the tile to remove or its index or id
 * @return {sap.ushell.ui.launchpad.Tile} the removed tile or null
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#removeTile
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>tiles</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ushell.ui.launchpad.Tile[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#removeAllTiles
 * @function
 */

/**
 * Checks for the provided <code>sap.ushell.ui.launchpad.Tile</code> in the aggregation named <code>tiles</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ushell.ui.launchpad.Tile}
 *            oTile the tile whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#indexOfTile
 * @function
 */
	

/**
 * Destroys all the tiles in the aggregation 
 * named <code>tiles</code>.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#destroyTiles
 * @function
 */


/**
 * Getter for aggregation <code>footerContent</code>.<br/>
 * 
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getFooterContent
 * @function
 */


/**
 * Inserts a footerContent into the aggregation named <code>footerContent</code>.
 *
 * @param {sap.ui.core.Control}
 *          oFooterContent the footerContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the footerContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the footerContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the footerContent is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#insertFooterContent
 * @function
 */

/**
 * Adds some footerContent <code>oFooterContent</code> 
 * to the aggregation named <code>footerContent</code>.
 *
 * @param {sap.ui.core.Control}
 *            oFooterContent the footerContent to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#addFooterContent
 * @function
 */

/**
 * Removes an footerContent from the aggregation named <code>footerContent</code>.
 *
 * @param {int | string | sap.ui.core.Control} vFooterContent the footerContent to remove or its index or id
 * @return {sap.ui.core.Control} the removed footerContent or null
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#removeFooterContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>footerContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#removeAllFooterContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>footerContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oFooterContent the footerContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#indexOfFooterContent
 * @function
 */
	

/**
 * Destroys all the footerContent in the aggregation 
 * named <code>footerContent</code>.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#destroyFooterContent
 * @function
 */


/**
 *  
 *
 * @name sap.ushell.ui.launchpad.TileContainer#afterRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#attachAfterRendering
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#detachAfterRendering
 * @function
 */

/**
 * Fire event afterRendering to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.TileContainer#fireAfterRendering
 * @function
 */


/**
 * Event fired when placeholder is clicked 
 *
 * @name sap.ushell.ui.launchpad.TileContainer#add
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'add' event of this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/> itself. 
 *  
 * Event fired when placeholder is clicked 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#attachAdd
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'add' event of this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#detachAdd
 * @function
 */

/**
 * Fire event add to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.TileContainer#fireAdd
 * @function
 */


// Start of sap/ushell/ui/launchpad/TileContainer.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/
/**
 * @name sap.ushell.ui.launchpad.TileContainer
 *
 * @private
 */

(function () {
    "use strict";
    

    sap.ushell.ui.launchpad.TileContainer.prototype.init = function () {
        jQuery.sap.require("sap.ushell.ui.launchpad.PlusTile");

        this.oPlusTile = new sap.ushell.ui.launchpad.PlusTile({
            groupId : this.getGroupId(),
            press : [ this.fireAdd, this ]
        });
        this.oPlusTile.setParent(this);
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.exit = function () {
        if (this.oPlusTile) {
            this.oPlusTile.destroy();
        }
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.onAfterRendering = function () {
        this.fireAfterRendering();
    };

    // Improve handling of aggregation updates
    sap.ushell.ui.launchpad.TileContainer.prototype.updateAggregation = sap.ushell.override.updateAggregation;
    sap.ushell.ui.launchpad.TileContainer.prototype.updateTiles = function (sReason) {
        var sName = "tiles";
        if (this.isTreeBinding(sName)) {
            // no idea how to handle -> delegate to parent 
            sap.ui.base.ManagedObject.prototype.updateAggregation.apply(this, arguments);
        } else {
            jQuery.sap.log.debug("Updating TileContainer. Reason: ", sReason);
            switch (sReason) {
            case "filter":
                try {
                    this.filterTiles(); // may fail if filter broadens after non-filter update
                } catch (ex) {
                    this.updateAggregation(sName);
                }
                break;
            default:
                this.updateAggregation(sName);
            }
        }
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.filterTiles = function () {
        var sName = "tiles",
            oBinding = this.mBindingInfos[sName].binding,
            oAggregationInfo = this.getMetadata().getJSONKeys()[sName],
            oNewGroup = null,
            bGrouped = oBinding.isGrouped(),
            bShowGroupHeader = this.getShowGroupHeader(),
            sGroup = null,
            iListIndex = -1,
            aItems = this[oAggregationInfo._sGetter](),
            nItems = aItems.length,
            oItem = null,
            that = this;

        // loop over all non-filtered objects
        jQuery.each(oBinding.getContexts(), function (iIndex, oContext) {
            var oNewGroup, sNewGroup;
            if (bGrouped && oBinding.aSorters.length > 0) {
                oNewGroup = oBinding.aSorters[0].fnGroup(oContext);
                sNewGroup = (typeof oNewGroup === "string") && oNewGroup || oNewGroup.key || "";
                // check if entering a new group
                if (sNewGroup !== sGroup) {
                    // hide all non-header tiles and non-matching header tiles up to matching header tile
                    for (oItem = aItems[++iListIndex];
                            oItem && (!oItem.getHeaderText || oItem.getHeaderText() !== sNewGroup) && iListIndex < nItems;
                            oItem = aItems[++iListIndex]) {
                        oItem.setVisible(false);
                    }
                    oItem.setVisible(bShowGroupHeader);
                }
                sGroup = sNewGroup;
            }

            // hide non-matching tiles up to matching tile
            for (oItem = aItems[++iListIndex];
                    oItem && oItem.getBindingContext().getPath() !== oContext.getPath() && iListIndex < nItems;
                    oItem = aItems[++iListIndex]) {
                oItem.setVisible(false);
            }
            oItem.setVisible(true);
        });

        // hide all remaining tiles
        for (oItem = aItems[++iListIndex]; oItem && iListIndex < nItems; oItem = aItems[++iListIndex]) {
            oItem.setVisible(false);
        }
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.addTileGroup = function (oGroup, oHeader) {
        this.addAggregation("tiles", oHeader || new sap.ushell.ui.launchpad.HeaderTile({
            headerText: oGroup.text || oGroup.key,
            headerLevel : oGroup.headerLevel || this.getGroupHeaderLevel(),
            visible : this.getShowGroupHeader()
        }).addStyleClass("sapUshellTileContainerHdr"));
    };

    // Override setters
    sap.ushell.ui.launchpad.TileContainer.prototype.setGroupId = function (v) {
        this.setProperty("groupId", v, true);        // set property, but suppress rerendering
        if (this.oPlusTile) {
            this.oPlusTile.setGroupId(v);
        }
        return this;
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.setHeaderText = function (sHeaderText) {
        this.setProperty("headerText", sHeaderText, true);        // set property, but suppress rerendering
        this.$().find(".sapUshellContainerTitle").text(sHeaderText);
        return this;
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.setSortable = function (bSortable) {
        if(bSortable) {
            this.$().find(".ui-sortable").sortable('enable');
        } else {
            this.$().find(".ui-sortable").sortable('disable');
        }
        return this;
    };
}());

}; // end of sap/ushell/ui/launchpad/TileContainer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.TileContainerRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    jQuery.sap.declare("sap.ushell.ui.launchpad.TileContainerRenderer");

    /**
     * @class TileContainer renderer.
     * @static
     * 
     * @private
     */
    sap.ushell.ui.launchpad.TileContainerRenderer = {};

    /**
     * Renders the HTML for the given control, using the provided
     * {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render
     *            output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be
     *            rendered
     */
    sap.ushell.ui.launchpad.TileContainerRenderer.render = function (oRm, oControl) {
        var aTiles = oControl.getTiles(),
            aFootItems = oControl.getFooterContent() || [],
            bHideTileContainer = (oControl.getDefaultGroup() && aTiles.length === 0) || !oControl.getVisible();
    
        oRm.write("<div");
        oRm.writeControlData(oControl);

        oRm.addClass("sapUshellTileContainer");
        oRm.writeClasses();

        if (bHideTileContainer) {
            oRm.addStyle("display", "none");
            oRm.writeStyles();
        }

        oRm.write(">");

        // PositionAnchor that if we scroll to this container, it will be under
        // UnifiedShell
        oRm.write("<a");
        oRm.addClass("sapUshellContainerPositionAnchor");
        oRm.writeClasses();
        oRm.writeAttribute("name", oControl.getId() + "-position");
        oRm.write("></a>");

        if (oControl.getShowHeader()) {
            // Title
            oRm.write("<");
            oRm.write(oControl.getHeaderLevel().toLowerCase());
            oRm.addClass('sapUshellContainerTitle');
            oRm.writeClasses();
            oRm.write(">");
            oRm.writeEscaped(oControl.getHeaderText());
            oRm.write("</");
            oRm.write(oControl.getHeaderLevel().toLowerCase());
            oRm.write(">");

            // Title END
        }

        oRm.write("<div");
        oRm.addClass('sapUshellTilesContainer-sortable');
        oRm.addClass('inner');
        oRm.writeClasses();
        oRm.write(">");

        jQuery.each(aTiles, function () {
            oRm.renderControl(this);
        });

        // If no tiles in group or default group
        if (oControl.getShowPlaceholder() && aTiles.length === 0 && !bHideTileContainer) {
            oRm.renderControl(oControl.oPlusTile);
        }

        oRm.write("</div>");
        // Tiles END

        // Footer
        if (aFootItems.length > 0) {
            oRm.write("<footer");
            oRm.addClass('sapUshellTilesContainerFtr');
            oRm.writeClasses();
            oRm.write(">");
            jQuery.each(aFootItems, function () {
                oRm.renderControl(this);
            });
            oRm.write("</footer>");
        }
        oRm.write("</div>");
    };
}());

}; // end of sap/ushell/ui/launchpad/TileContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.TileRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    jQuery.sap.declare("sap.ushell.ui.launchpad.TileRenderer");

    /**
     * @class Tile renderer.
     * @static
     *
     * @private
     */
    sap.ushell.ui.launchpad.TileRenderer = {};

    /**
     * Renders the HTML for the given control, using the provided
     * {@link sap.ui.core.RenderManager}.
     *
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render
     *            output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be
     *            rendered
     */
    sap.ushell.ui.launchpad.TileRenderer.render = function (oRm, oControl) {
        var oTileView = null;

        try {
            oTileView = oControl.getTileViews()[0];
        } catch (ex) {
            jQuery.sap.log.warning("Failed to load tile view: ", ex.message);
            oTileView = new sap.m.Text({ text: "Failed to load. "});
        }

        oRm.write("<div");
        oRm.writeControlData(oControl);
        oRm.addClass("sapUshellTile");
        if (oControl.getFootItems() && oControl.getFootItems().length > 0) {
            oRm.addClass("sapUshellTileFooter");
        }
        if (oControl.getLong()) {
            oRm.addClass("long");
        }
        if (!oControl.getVisible()) {
            oRm.addClass("sapUshellHidden");
        }
        oRm.writeClasses();
        oRm.write(">");

        // Tile Content
        oRm.addClass("sapUshellTileInner");
        if (this.renderTileView) {
            this.renderTileView(oRm, oTileView, oControl.getTarget());
        }

        // Tile Footer Items
        oRm.write("<footer");
        oRm.addClass("sapUshellTileFooterElement");
        oRm.writeClasses();
        oRm.write(">");
        jQuery.each(oControl.getFootItems(), function () {
            oRm.renderControl(this);
        });
        oRm.write("</footer>");

        oRm.write("</div>");
    };

    sap.ushell.ui.launchpad.TileRenderer.renderTileView = function (oRm, oTileView, sTarget) {
        if ((sTarget || "") !== "") {
            oRm.write("<a");
            oRm.writeClasses();
            oRm.writeAttributeEscaped("href", "#" + sTarget);
            oRm.write(">");
            oRm.renderControl(oTileView);
            oRm.write("</a>");
        } else {
            oRm.write("<div");
            oRm.writeClasses();
            oRm.write(">");
            oRm.renderControl(oTileView);
            oRm.write("</div>");
        }
    };

}());

}; // end of sap/ushell/ui/launchpad/TileRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.TileBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.tile.TileBase.
jQuery.sap.declare("sap.ushell.ui.tile.TileBase");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ui/tile/TileBase.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getSubtitle subtitle} : string</li>
 * <li>{@link #getIcon icon} : string</li>
 * <li>{@link #getInfo info} : string</li>
 * <li>{@link #getInfoState infoState} : sap.ushell.ui.tile.State (default: sap.ushell.ui.tile.State.Neutral)</li>
 * <li>{@link #getTargetURL targetURL} : string</li>
 * <li>{@link #getHighlightTerms highlightTerms} : any (default: [])</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.tile.TileBase#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Base class for tiles that already provides several visual elements like title, subtitle, icon and additional information
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.tile.TileBase
 */
sap.ui.core.Control.extend("sap.ushell.ui.tile.TileBase", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell",
	properties : {
		"title" : {type : "string", group : "Data", defaultValue : null},
		"subtitle" : {type : "string", group : "Data", defaultValue : null},
		"icon" : {type : "string", group : "Data", defaultValue : null},
		"info" : {type : "string", group : "Data", defaultValue : null},
		"infoState" : {type : "sap.ushell.ui.tile.State", group : "", defaultValue : sap.ushell.ui.tile.State.Neutral},
		"targetURL" : {type : "string", group : "Behavior", defaultValue : null},
		"highlightTerms" : {type : "any", group : "Appearance", defaultValue : []}
	},
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.tile.TileBase with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.tile.TileBase.extend
 * @function
 */

sap.ushell.ui.tile.TileBase.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>title</code>.
 * The title of this tile
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setTitle
 * @function
 */


/**
 * Getter for property <code>subtitle</code>.
 * A subtitle of this tile (optional)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>subtitle</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getSubtitle
 * @function
 */

/**
 * Setter for property <code>subtitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSubtitle  new value for property <code>subtitle</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setSubtitle
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * An icon for the tile
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setIcon
 * @function
 */


/**
 * Getter for property <code>info</code>.
 * Additional information displayed at the bottom of the tile
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>info</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getInfo
 * @function
 */

/**
 * Setter for property <code>info</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sInfo  new value for property <code>info</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setInfo
 * @function
 */


/**
 * Getter for property <code>infoState</code>.
 * The state of the info field
 *
 * Default value is <code>Neutral</code>
 *
 * @return {sap.ushell.ui.tile.State} the value of property <code>infoState</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getInfoState
 * @function
 */

/**
 * Setter for property <code>infoState</code>.
 *
 * Default value is <code>Neutral</code> 
 *
 * @param {sap.ushell.ui.tile.State} oInfoState  new value for property <code>infoState</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setInfoState
 * @function
 */


/**
 * Getter for property <code>targetURL</code>.
 * If given, the Control is wrapped into a link pointing to this URL. If empty or not set, the link is not rendered
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>targetURL</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getTargetURL
 * @function
 */

/**
 * Setter for property <code>targetURL</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTargetURL  new value for property <code>targetURL</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setTargetURL
 * @function
 */


/**
 * Getter for property <code>highlightTerms</code>.
 * contains an array of terms that should be highlighted; per default, the array is empty
 *
 * Default value is <code>[]</code>
 *
 * @return {any} the value of property <code>highlightTerms</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getHighlightTerms
 * @function
 */

/**
 * Setter for property <code>highlightTerms</code>.
 *
 * Default value is <code>[]</code> 
 *
 * @param {any} oHighlightTerms  new value for property <code>highlightTerms</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setHighlightTerms
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * 
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.tile.TileBase#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ushell.ui.tile.TileBase#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.tile.TileBase#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.tile.TileBase#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#destroyContent
 * @function
 */


/**
 * called when the tile is clicked / pressed 
 *
 * @name sap.ushell.ui.tile.TileBase#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ushell.ui.tile.TileBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.tile.TileBase</code>.<br/> itself. 
 *  
 * called when the tile is clicked / pressed 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.tile.TileBase</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ushell.ui.tile.TileBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.tile.TileBase#firePress
 * @function
 */


// Start of sap/ushell/ui/tile/TileBase.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

/**
 * Base class for applaunchers that provides basic properties like title,
 * subtitle, icon and additional information.
 * 
 * @name sap.ushell.ui.tile.TileBase
 * 
 * @since   1.15.0
 * @private
 */

(function () {
    "use strict";

    sap.ushell.ui.tile.TileBase.prototype.ontap = function () {
        this.firePress({});
    };
}());

}; // end of sap/ushell/ui/tile/TileBase.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.TileBaseRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    jQuery.sap.declare("sap.ushell.ui.tile.TileBaseRenderer");

    /**
     * @name sap.ushell.ui.tile.TileBaseRenderer
     * @static
     * @private
     */
    sap.ushell.ui.tile.TileBaseRenderer = {
    };

    /**
     * Searches for occurrences of given searchTerms and substitutes substrings with themselves wrapped in HTML bold tag
     *
     * @param {array} aHighlightTerms an array of strings that will be detected and replaced
     * @param {string} sText contains the text to be highlighted
     * @returns {string} the text with all occurrences wrapped
     * 
     * @private
     */
    sap.ushell.ui.tile.TileBaseRenderer.highlight = function (aHighlightTerms, sText) {
        if (aHighlightTerms && aHighlightTerms.length && aHighlightTerms.length > 0) {
            var i;
            for (i = 0; i < aHighlightTerms.length; i++) {
                // build regular expression with escaped highlight term (case insensitive + greedy)
                var hiliteTerm = new RegExp("(" + aHighlightTerms[i].replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1") + ")", "gi");
                // regexp replace occurrence with wrapped self
                sText = sText.replace(hiliteTerm, "<b>$1</b>");
            }
        }
        return sText;
    };

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    sap.ushell.ui.tile.TileBaseRenderer.render = function (oRm, oControl) {
        // is it necessary to wrap the control into a link?
        var bCreateLinkTag = (oControl.getTargetURL() || "") !== "",
            sInfoPrefix;
        if (bCreateLinkTag) {
            oRm.write("<a");
            oRm.addClass("sapUshellTileBaseWrapperLink");
            oRm.writeClasses();
            oRm.writeAttribute("href", oControl.getTargetURL());
            oRm.write(">");
        }

        oRm.write("<div");
        oRm.writeControlData(oControl);
        oRm.addClass("sapUshellTileBase");
        oRm.writeClasses();
        oRm.write(">");

        // plain title + subtitle wrapper
        oRm.write("<div");
        oRm.addClass("sapUshellTileBaseHeader");
        oRm.writeClasses();
        oRm.write(">");

        // title
        oRm.write("<h3");
        oRm.addClass("sapUshellTileBaseTitle");
        oRm.writeClasses();
        oRm.write(">");
        oRm.write(this.highlight(oControl.getHighlightTerms(), oControl.getTitle() || ""));
        oRm.write("</h3>");

        // subtitle
        if (oControl.getSubtitle()) {
            oRm.write("<h4");
            oRm.addClass("sapUshellTileBaseSubtitle");
            oRm.writeClasses();
            oRm.write(">");
            oRm.write(this.highlight(oControl.getHighlightTerms(), oControl.getSubtitle()));
            oRm.write("</h4>");
        }

        oRm.write("</div>");

        /* render inheriting controls  */
        if (typeof (this.renderPart) === 'function') {
            this.renderPart(oRm, oControl);
        }

        // icon
        if (oControl.getIcon()) {
            var icon = new sap.ui.core.Icon({src: oControl.getIcon()});
            icon.addStyleClass("sapUshellTileBaseIcon");
            oRm.renderControl(icon);
        }

        // begin sapUshellTileBaseInfo 
        oRm.write("<div");
        oRm.addClass("sapUshellTileBaseInfo");
        oRm.addClass(oControl.getInfoState() || sap.ushell.ui.tile.State.Neutral);
        oRm.writeClasses();
        oRm.write(">");

        // it is possible for subclasses to prefix the info with arbitrary information (e.g. unit ex DynamicTiles)
        if (typeof (this.getInfoPrefix) === 'function') {
            sInfoPrefix = this.getInfoPrefix(oControl);
            oRm.write(sInfoPrefix);
        }
        // info string
        if (oControl.getInfo()) {
            // number units are separated from info text with a comma
            if (sInfoPrefix) {
                oRm.write(", ");
            }
            oRm.write(this.highlight(oControl.getHighlightTerms(), oControl.getInfo()));
        }
        // end sapUshellTileBaseInfo
        oRm.write("</div>");

        // end control div element
        oRm.write("</div>");

        // all-enclosing link
        if (bCreateLinkTag) {
            oRm.write("</a>");
        }
    };
}());

}; // end of sap/ushell/ui/tile/TileBaseRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.utils') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview This file contains miscellaneous utility functions.
 */

(function () {
    "use strict";
    /*global jQuery, sap */

    // ensure that sap.ushell exists
    jQuery.sap.declare("sap.ushell.utils");

    sap.ushell.utils = {};

    /**
     * Creates an <code>Error</code> object and logs the error message immediately.
     *
     * @param {string} sMessage
     *   the error message
     * @param {string} [sComponent]
     *   the error component to log
     *
     * @class An error that is written to the log.
     * @constructor
     * @since 1.15.0
     */
    sap.ushell.utils.Error = function (sMessage, sComponent) {
        this.name = "sap.ushell.utils.Error";
        this.message = sMessage;
        jQuery.sap.log.error(sMessage, null, sComponent);
    };

    sap.ushell.utils.Error.prototype = new Error();


    /**
     * Creates an empty map.
     * @class A mapping from arbitrary string(!) keys (including "get" or "hasOwnProperty") to
     * values of any type.
     * @since 1.15.0
     */
    sap.ushell.utils.Map = function () {
        this.entries = {};
    };

    /**
     * Associates the specified value with the specified key in this map. If the map previously
     * contained a mapping for the key, the old value is replaced by the specified value. Returns
     * the old value. Note: It might be a good idea to assert that the old value is
     * <code>undefined</code> in case you expect your keys to be unique.
     *
     * @param {string} sKey
     *   key with which the specified value is to be associated
     * @param {any} vValue
     *   value to be associated with the specified key
     * @returns {any}
     *   the old value
     * @since 1.15.0
     */
    sap.ushell.utils.Map.prototype.put = function (sKey, vValue) {
        var vOldValue = this.get(sKey);
        this.entries[sKey] = vValue;
        return vOldValue;
    };

    /**
     * Returns <tt>true</tt> if this map contains a mapping for the specified key.
     *
     * @param {string} sKey
     *   key whose presence in this map is to be tested
     * @returns {boolean}
     *   <tt>true</tt> if this map contains a mapping for the specified key
     * @since 1.15.0
     */
    sap.ushell.utils.Map.prototype.containsKey = function (sKey) {
        if (typeof sKey !== "string") {
            throw new sap.ushell.utils.Error("Not a string key: " + sKey, "sap.ushell.utils.Map");
        }
        return Object.prototype.hasOwnProperty.call(this.entries, sKey);
    };

    /**
     * Returns the value to which the specified key is mapped, or <code>undefined</code> if this map
     * contains no mapping for the key.
     * @param {string} sKey
     *   the key whose associated value is to be returned
     * @returns {any}
     *   the value to which the specified key is mapped, or <code>undefined</code> if this map
     *   contains no mapping for the key
     * @since 1.15.0
     */
    sap.ushell.utils.Map.prototype.get = function (sKey) {
        if (this.containsKey(sKey)) {
            return this.entries[sKey];
        }
        //return undefined;
    };

    /**
     * Returns an array of this map's keys. This array is a snapshot of the map; concurrent
     * modifications of the map while iterating do not influence the sequence.
     * @returns {string[]}
     *   this map's keys
     * @since 1.15.0
     */
    sap.ushell.utils.Map.prototype.keys = function () {
        return Object.keys(this.entries);
    };

    /**
     * Returns this map's string representation.
     *
     * @returns {string}
     *   this map's string representation
     * @since 1.15.0
     */
    sap.ushell.utils.Map.prototype.toString = function () {
        var aResult = ['sap.ushell.utils.Map('];
        aResult.push(JSON.stringify(this.entries));
        aResult.push(')');
        return aResult.join('');
    };

    /**
     * Serves as a marker for functions that are to be exposed in QUnit tests. Calls to this
     * function are expected to be placed directly before the named function declaration (even
     * <b>after</b> the JSDoc). The function itself does nothing.
     *
     * @param {object} o
     *   the object to which this function will be attached in tests; must not be <code>this</code>
     *   (use <code>that</code> instead)
     * @since 1.15.0
     */
    sap.ushell.utils.testPublishAt = function (o) {
      // intentionally left blank
    };
}());

}; // end of sap/ushell/utils.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.container.ApplicationContainer') ) {
//Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The UI integration's SAPUI5 control which supports application embedding.
 * @version 1.16.3
 */
(function () {
    "use strict";
    /*global jQuery, sap */

    var sPREFIX = "sap.ushell.components.container.",
        sCOMPONENT = sPREFIX + "ApplicationContainer",
        oResourceBundle;

    // Do not use the variables so that UI5 optimizers recognize this declaration
    jQuery.sap.declare("sap.ushell.components.container.ApplicationContainer");

    
    
    jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained


    /**
     * @namespace The application types supported by the embedding container.
     *
     * @since 1.15.0
     * @private
     */
    sap.ushell.components.container.ApplicationType = {
//          UI5: "UI5", // SAP UI development toolkit for HTML5
        /**
         * This type represents web applications identified by any uniform resource locator. They
         * will be embedded into an <code>IFRAME</code>.
         *
         * @constant
         * @default "URL"
         * @name sap.ushell.components.container.ApplicationType.URL
         * @since 1.15.0
         * @type string
         */
        URL: "URL",
        /**
         * This type represents applications built with Web Dynpro for ABAP. The embedding
         * container knows how to embed such applications in a smart way.
         *
         * @constant
         * @default "WDA"
         * @name sap.ushell.components.container.ApplicationType.WDA
         * @since 1.15.0
         * @type string
         */
        WDA: "WDA"
    };

    /**
     * Returns a map of all search parameters present in the search string of the given URL.
     *
     * @param {string} sUrl
     *   the URL
     * @returns {object}
     *   a <code>map&lt;string, string[]></code> from key to array of values
     * @private
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function getParameterMap(sUrl) {
        // TODO use published API
        // discussed with Frank to request a function all() or get() without parameter
        return jQuery.sap.getUriParameters(sUrl).mParams;
    }

    /**
     * Returns a translated text from the resource bundle.
     *
     * @param {string} sKey
     *   the key in the resource bundle
     * @param {string[]} [aArgs]
     *   arguments to replace {0}..{9}
     * @returns {string}
     *   the translated text
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function getTranslatedText(sKey, aArgs) {
        if (!oResourceBundle) {
            oResourceBundle = jQuery.sap.resources({
                url: jQuery.sap.getModulePath(sPREFIX) + "/resources/resources.properties",
                language: sap.ui.getCore().getConfiguration().getLanguage()
            });
        }
        return oResourceBundle.getText(sKey, aArgs);
    }

    /**
     * Creates some SAPUI5 control telling the user that an error has occured.
     *
     * @returns {sap.ui.core.Control}
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function createErrorControl() {
        return new sap.ui.core.Icon({
            size: "2rem",
            src: "sap-icon://error",
            tooltip: getTranslatedText("an_error_has_occured")
        });
    }

    /**
     * Destroys the child aggregation. Takes care to deactivate the component's customizing in case
     * a component is embedded.
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function destroyChild(oContainer) {
        var oChild = oContainer.getAggregation("child"),
            sComponentName;

        if (oChild instanceof sap.ui.core.ComponentContainer) {
            // name contains .Component - must be trimmed
            sComponentName = oChild.getComponentInstance().getMetadata().getName()
                .replace(/\.Component$/, "");
            jQuery.sap.log.debug("unloading component " + sComponentName, null, sCOMPONENT);
        }
        oContainer.destroyAggregation("child");
        if (sComponentName) {
            sap.ui.core.Component.deactivateCustomizing(sComponentName);
        }
    }

    /**
     * Creates a new SAPUI5 view or component for the given container and makes it a child. A view
     * is created if the name ends with ".view.(viewType)".
     * @param {sap.ushell.components.container.ApplicationContainer} oContainer
     *   the container
     * @param {string} sUrl
     *   the base URL
     * @param {string} sAdditionalInformation
     *   the additional information in the form "SAPUI5=<view_or_component_name>"
     * @returns {sap.ui.core.mvc.View|sap.ui.core.Control}
     *   the view, or some "error" control
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function createUi5View(oContainer, sUrl, sAdditionalInformation) {
        /*jslint regexp: true */
        var oComponent,
            oControl,
            iIndex,
            iLast,
            aMatches,
            sNamespace,
            oViewData,
            sViewName,
            sViewType;

        iIndex = sUrl.indexOf("?");
        if (iIndex >= 0) {
            // pass GET parameters of URL via view data
            oViewData = getParameterMap(sUrl);
            sUrl = sUrl.slice(0, iIndex);
        }

        if (sUrl.slice(-1) !== '/') {
            sUrl += '/'; // ensure URL ends with a slash
        }

        if (/\.view\.(\w+)$/i.test(sAdditionalInformation)) {
            // ends with ".view.(viewType)": a view description
            // /SAPUI5=(namespace)/(viewName).view.(viewType)/
            aMatches = /^SAPUI5=(?:([^\/]+)\/)?([^\/]+)\.view\.(\w+)$/i.exec(sAdditionalInformation);
            if (!aMatches) {
                jQuery.sap.log.error("Invalid SAPUI5 URL", sAdditionalInformation, sCOMPONENT);
                return createErrorControl();
            }
            // determine namespace, view name, and view type
            sNamespace = aMatches[1];
            sViewName = aMatches[2];
            sViewType = aMatches[3].toUpperCase(); // @see sap.ui.core.mvc.ViewType

            if (sNamespace) {
                // prefix view name with namespace
                sViewName = sNamespace + "." + sViewName;
            } else {
                // derive namespace from view name's "package"
                iLast = sViewName.lastIndexOf(".");
                if (iLast < 1) {
                    jQuery.sap.log.error("Missing namespace", sAdditionalInformation, sCOMPONENT);
                    return createErrorControl();
                }
                sNamespace = sViewName.slice(0, iLast);
            }
        } else {
            // a component
            sNamespace = sAdditionalInformation.replace(/^SAPUI5=/, "");
        }

        jQuery.sap.registerModulePath(sNamespace, sUrl + sNamespace.replace(/\./g, '/'));

        // destroy the child control before creating a new control with the same ID
        destroyChild(oContainer);
        if (sViewName) {
            oControl = sap.ui.view({
                id: oContainer.getId() + "-content",
                type: sViewType,
                viewData: oViewData || {},
                viewName: sViewName
            });
        } else {
            jQuery.sap.log.debug("loading component " + sNamespace, null, sCOMPONENT);

            // activate the customizing for the new component before creation
            sap.ui.core.Component.activateCustomizing(sNamespace);

            oComponent = sap.ui.component({
                id: oContainer.getId() + "-component",
                componentData: oViewData ? {startupParameters: oViewData} : {},
                name: sNamespace
            });
            oControl = new sap.ui.core.ComponentContainer({
                id: oContainer.getId() + "-content",
                component: oComponent
            });
        }
        oControl.setWidth(oContainer.getWidth());
        oControl.setHeight(oContainer.getHeight());
        oControl.addStyleClass("sapUShellApplicationContainer");
        // Note: As a composite control, we need to aggregate our children (at least internally)!
        oContainer.setAggregation("child", oControl, true);
        return oControl;
    }

    /**
     * Creates a new SAPUI5 component for the given container and makes it a child.
     * @param {sap.ushell.components.container.ApplicationContainer} oContainer
     *   the container
     * @param {string} sUrl
     *   the base URL
     * @param {string} sAdditionalInformation
     *   the additional information in the form "SAPUI5.Component=&lt;component-name&gt;"
     * @returns {sap.ui.core.ComponentContainer|sap.ui.core.Control}
     *   a componentContainer for the component or or some "error" control
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function createUi5Component(oContainer, sUrl, sComponentName) {
        /*jslint regexp: true */
        var iIndex,
            aMatches,
            oComponent,
            oComponentContainer,
            oComponentData = {};

        iIndex = sUrl.indexOf("?");
        if (iIndex >= 0) {
            // pass GET parameters of URL via component data as member startupParameters (to allow
            // blending with other oComponentData usage, e.g. extensibility use case)
            oComponentData = { startupParameters : getParameterMap(sUrl) };
            sUrl = sUrl.slice(0, iIndex);
        }

        if (sUrl.slice(-1) !== '/') {
            sUrl += '/'; // ensure URL ends with a slash
        }
        // the root component's name is also the namespace for all component-internal modules; so
        // we register the URL (which must point to the component's folder) as module path;
        // TODO: clarify if there are requirements for additional path components
        jQuery.sap.registerModulePath(sComponentName, sUrl);

        // applications require these but should not load it, to degrade carefully
        // when running outside of the shell, so we must require this
        jQuery.sap.require("sap.ushell.services.CrossApplicationNavigation");

        // destroy the child control before creating a new control with the same ID
        destroyChild(oContainer);

        jQuery.sap.log.debug("loading component " + sComponentName, null, sCOMPONENT);

        // activate the customizing for the new component before creation
        sap.ui.core.Component.activateCustomizing(sComponentName);

        oComponent = sap.ui.component({
            id: oContainer.getId() + "-component",
            name: sComponentName,
            componentData: oComponentData
        });

        oComponentContainer = new sap.ui.core.ComponentContainer({
            id: oContainer.getId() + "-content",
            component: oComponent
        });
        oComponentContainer.setHeight(oContainer.getHeight());
        oComponentContainer.setWidth(oContainer.getWidth());
        oComponentContainer.addStyleClass("sapUShellApplicationContainer");

        // Note: As a composite control, we need to aggregate our children (at least internally)!
        oContainer.setAggregation("child", oComponentContainer, true);

        return oComponentContainer;
    }

    /**
     * Renders the given child control inside a DIV representing the given container.
     *
     * @param {sap.ui.core.RenderManager} oRenderManager
     * @param {sap.ushell.components.container.ApplicationContainer} oContainer
     *     the application container which is "replaced" by the error control
     * @param {sap.ui.core.Control} [oChild]
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function renderControlInDiv(oRenderManager, oContainer, oChild) {
        oRenderManager
            .write("<div")
            .writeControlData(oContainer)
            .writeAccessibilityState(oContainer)
            .addClass("sapUShellApplicationContainer")
            .writeClasses(oContainer)
            .addStyle("height", oContainer.getHeight())
            .addStyle("width", oContainer.getWidth())
            .writeStyles()
            .write(">")
            .renderControl(oChild);
        oRenderManager
            .write("</div>");
    }

    /**
     * Renders the given container control with the help of the given render manager using the given
     * attributes.
     *
     * @param {sap.ui.core.RenderManager} oRenderManager
     * @param {sap.ushell.components.container.ApplicationContainer} oContainer
     * @param {sap.ushell.components.container.ApplicationType} sApplicationType
     *   the application type
     * @param {string} sUrl
     *   the base URL
     * @param {string} sAdditionalInformation
     *   the additional information in the form "SAPUI5=&lt;view name&gt;"
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function render(oRenderManager, oContainer, sApplicationType, sUrl, sAdditionalInformation) {

        // render as SAPUI5 component if specified in additionalInformation
        if (sAdditionalInformation
                && sAdditionalInformation.indexOf("SAPUI5.Component=") === 0
                && sApplicationType === sap.ushell.components.container.ApplicationType.URL) {
            renderControlInDiv(oRenderManager, oContainer,
                createUi5Component(oContainer, sUrl,
                    sAdditionalInformation.replace(/^SAPUI5\.Component=/, "")));
            return;
        }

        // render as SAPUI5 view if specified in additionalInformation
        if (sAdditionalInformation
                && sAdditionalInformation.indexOf("SAPUI5=") === 0
                && sApplicationType === sap.ushell.components.container.ApplicationType.URL) {
            renderControlInDiv(oRenderManager, oContainer,
                createUi5View(oContainer, sUrl, sAdditionalInformation));
            return;
        }
        jQuery.sap.log.debug("Not resolved as \"SAPUI5.Component=\" or \"SAPUI5=\" , " +
            "will attempt to load into iframe " + sAdditionalInformation);

        try {
            sUrl = oContainer.getFrameSource(sApplicationType, sUrl, sAdditionalInformation);
        } catch (ex) {
            jQuery.sap.log.error(ex.message || ex, null, sCOMPONENT);
            oRenderManager.renderControl(createErrorControl());
            return;
        }

        // embed URL via <IFRAME>
        oRenderManager
            .write("<iframe")
            .writeControlData(oContainer)
            .writeAccessibilityState(oContainer)
            // Note: While this does not help against malicious scripts, it should protect against
            // accidental top-level navigation.
            .writeAttribute("sandbox", "allow-forms allow-same-origin allow-scripts")
            .writeAttributeEscaped("src", sUrl)
            .addClass("sapUShellApplicationContainer")
            .writeClasses(oContainer)
            .addStyle("height", oContainer.getHeight())
            .addStyle("width", oContainer.getWidth())
            .writeStyles()
            .write("></iframe>");
    }

    /**
     * Creates a new container control embedding the application with the given URL. The default
     * application type is "URL" and allows to embed web applications into an <code>IFRAME</code>.
     * By default, the container is visible and occupies the whole width and height of its parent.
     *
     * @class A container control capable of embedding a variety of application types.
     * <p>
     * <strong>Experimental API: This container is still under construction, so some
     * implementation details can be changed in future.</strong>
     * </p><p>
     * <b>Note:</b> The browser does not allow to move an <code>IFRAME</code> around in the DOM
     * while keeping its state. Thus every rerendering of this control necessarily resets the
     * embedded web application to its initial state!
     * </p><p>
     * <b>Note:</b> You <b>must</b> <code>exit</code> the control when you no longer need it.
     *
     * </p><p>
     * <b>Embedding SAPUI5 Components:</b>
     * </p><p>
     * The container is able to embed an SAPUI5 component. It is embedded directly into the page,
     * no <code>IFRAME</code> is used.
     * </p><p>
     * SAPUI5 components are described with <code>applicationType</code> "URL", a base URL and the
     * component name in <code>additionalInformation</code>. The format is
     * <code>SAPUI5=<i>componentNamespace</i></code>. The application container will register a
     * module path for the URL with the component's namespace.
     * </p><p>
     * The query parameters from the URL will be passed into the component. They can be retrieved
     * using the method <code>getComponentData()</code>. Query parameters are always passed as
     * arrays (see example 2 below).
     * </p><p>
     * <b>Example 1:</b> Let <code>url</code> be "http://anyhost:1234/path/to/app" and
     * <code>additionalInformation</code> be "SAPUI5=some.random.package". Then the
     * container registers the path "http://anyhost:1234/path/to/app/some/random/package" for the
     * namespace "some.random.package", loads and creates "some.random.package.Component".
     * </p><p>
     * <b>Example 2:</b> Let <code>url</code> be "http://anyhost:1234/?foo=bar&foo=baz&bar=baz".
     * Then the <code>componentData</code> object will be
     * <code>{foo: ["bar", "baz"], bar: ["baz"]}</code>.
     * </p><p>
     * <b>Warning:</b> The container control embeds a <i>component</i> only. This can only work if
     * this component is fully encapsulated and properly declares all dependencies in its metadata
     * object. If you want to support that your component can be embedded into a shell using this
     * container, you have to prepare it accordingly:
     * <ul>
     * <li>The container control can only embed components that originate on the same server as the
     * shell due to the browser's same origin policy. Consider using an SAP Web Dispatcher if this
     * is not the case.
     * <li>If your component relies on some additional Javascript, declare the dependencies to
     * libraries or other components in the component's metadata object.
     * <li>Do <i>not</i> use <code>jQuery.sap.registerModulePath()</code> with a relative URL. The
     * base for this relative URL is the web page. And this page is the shell when embedding the
     * component via the container, not the page you used when developing the component.
     * <li>If your component needs additional styles, declare them using the <code>includes</code>
     * property of the component metadata object.
     * <li> Consider calling <code>jQuery.sap.getModulePath(&lt;componentName&gt;)</code> to
     * determine the root path of your component.
     * <li>If any of these requirements is not met, it is still possible to embed this view with
     * its own page using <code>applicationType="URL"</code>, no <code>additionalInformation</code>
     * and the URL of the web page in <code>url</code>. Then of course it is embedded using an
     * <code>IFRAME</code>. This has many limitations, especially the resource-based navigation
     * using hash changes will not be supported.
     * </ul>
     *
     * </p><p>
     * <b>Embedding SAPUI5 Views</b>
     * <p>
     * Embedding views is <strong>deprecated</strong> and might not be supported in future versions.
     * </p>
     * <p>
     * It is also possible to embed a SAPUI5 view. It is embedded directly into the page, no
     * <code>IFRAME</code> is used.
     * </p><p>
     * SAPUI5 views are described with <code>applicationType</code> "URL", a base URL and the view
     * description in <code>additionalInformation</code>. The format is
     * <code>SAPUI5=<i>namespace</i>.<i>viewName</i>.view.<i>viewType</i></code>. From
     * this information the module path and the view URL is determined. Request parameters present
     * in the URL will be passed to the created view and can be accessed via
     * <code>sap.ui.core.mvc.View#getViewData()</code>. The object passed to the view data is the
     * same as describe for the component data above.
     * </p><p>
     * <b>Warning:</b> The container control embeds a <i>view</i> only. So similar restrictions
     * as for components apply. Since the view has no metadata object to describe dependencies you
     * will have to use <code>jQuery.sap.require()</code> to load needed modules and
     * <code>jQuery.sap.includeStyleSheet()</code> to load additional styles.
     *
     * @extends sap.ui.core.Control
     * @name sap.ushell.components.container.ApplicationContainer
     * @since 1.15.0
     *
     * @property {string} [additionalInformation=""]
     *   Additional information about the application. Currently this is used to describe a SAPUI5
     *   component or a view in a SAPUI5 application.
     * @property {object} [application]
     *   The application descriptor as received from the start-up service. If an application is
     *   given the properties <code>url</code>, <code>applicationType</code> and
     *   <code>additionalInformation</code> are taken from the application and <i>not</i> from the
     *   control properties.
     * @property {sap.ushell.components.container.ApplicationType} [applicationType="URL"]
     *   The type of the embedded application.
     * @property {sap.ui.core.CSSSize} [height="100%"]
     *   The container's height as a CSS size. This attribute is provided to the browser "as is"!
     *   <b>Note:</b> The HTML 4.01 specification allows pixels and percentages,
     *   but the HTML 5 specification allows pixels only!
     * @property {string} url
     *   The URL to the embedded application.
     * @property {boolean} [visible="true"]
     *   Whether the container control is visible at all. <b>Note:</b> An invisible container does
     *   not render any DOM content. Changing the visibility leads to rerendering!
     * @property {sap.ui.core.CSSSize} [width="100%"]
     *   The container's width as a CSS size. This attribute is provided to the browser "as is"!
     *   <b>Note:</b> The HTML 4.01 specification allows pixels and percentages,
     *   but the HTML 5 specification allows pixels only!
     */
    sap.ui.core.Control.extend(sCOMPONENT, {
        metadata: {
            properties: {
                additionalInformation: {defaultValue: "", type: "string"},
                application: {type: "object"},
                applicationType: {defaultValue: "URL", type: sPREFIX + "ApplicationType"},
                height: {defaultValue: "100%", type: "sap.ui.core.CSSSize"},
                url: {defaultValue: "", type: "string"},
                visible: {defaultValue: true, type: "boolean"},
                width: {defaultValue: "100%", type: "sap.ui.core.CSSSize"}
            },
            aggregations: {
                child: {multiple: false, type: "sap.ui.core.Control", visibility: "hidden"}
            },
            library: "sap.ushell"
        },

        exit: function () {
            destroyChild(this);
            // just to be sure in case it will be added some time
            if (sap.ui.core.Control.exit) {
                sap.ui.core.Control.exit.apply(this);
            }
        },

        /**
         * Renders the given container control with the help of the given render manager.
         *
         * @param {sap.ui.core.RenderManager} oRenderManager
         * @param {sap.ushell.components.container.ApplicationContainer} oContainer
         *
         * @private
         */
        renderer: function (oRenderManager, oContainer) {
            // Note: "this" refers to the renderer instance, which does not matter here!
            var oApplication = oContainer.getApplication(),
                oLaunchpadData = oContainer.launchpadData,
                oLoadingIndicator;

            if (!oContainer.getVisible()) {
                // Note: even invisible controls need to render their ID for later re-rendering
                renderControlInDiv(oRenderManager, oContainer);
                return;
            }

            if (oContainer.error) {
                delete oContainer.error;
                renderControlInDiv(oRenderManager, oContainer, createErrorControl());
            } else if (!oApplication) {
                // the standard properties
                render(oRenderManager, oContainer, oContainer.getApplicationType(),
                    oContainer.getUrl(), oContainer.getAdditionalInformation());
            } else if (!oApplication.isResolvable()) {
                // the standard application data
                render(oRenderManager, oContainer, oApplication.getType(),
                    oApplication.getUrl(), "");
            } else if (oLaunchpadData) {
                // the application, already resolved
                // Note that ResolveLink appends a "?" to the URL if additionalData (aka
                // additionalInformation) is supplied.
                render(oRenderManager, oContainer, oLaunchpadData.applicationType,
                    oLaunchpadData.Absolute.url.replace(/\?$/, ""),
                    oLaunchpadData.applicationData);
            } else {
                jQuery.sap.log.debug("Resolving " + oApplication.getUrl(), null,
                    sCOMPONENT);

                oApplication.resolve(function (oResolved) {
                    jQuery.sap.log.debug("Resolved " + oApplication.getUrl(),
                        JSON.stringify(oResolved),
                        sCOMPONENT);
                    // TODO where to keep the internal property launchpadData? At the Application!
                    oContainer.launchpadData = oResolved;
                    destroyChild(oContainer);
                }, function (sError) {
                    var fnApplicationErrorHandler = oApplication.getMenu().getDefaultErrorHandler();
                    if (fnApplicationErrorHandler) {
                        fnApplicationErrorHandler(sError);
                    }
                    destroyChild(oContainer);
                    oContainer.error = sError;
                });
                oLoadingIndicator = new sap.m.Text({
                    text: getTranslatedText("loading", [oApplication.getText()])
                });
                destroyChild(oContainer);
                oContainer.setAggregation("child", oLoadingIndicator);
                renderControlInDiv(oRenderManager, oContainer, oLoadingIndicator);
            }
        }
    });

    /**
     * Returns the resulting source URL for the (internal) frame used to embed the given application.
     * This hook method may be overridden; we recommend to replace it per object, not at the
     * prototype.
     * <p>
     * The default implementation returns the URL "as is", but checks that the given application
     * type is one of <code>sap.ushell.components.container.ApplicationType</code> and throws
     * an error in case it is not. It ignores the additional information.
     * <p>
     * You may want to end your implementation with
     * <code>return
     * sap.ushell.components.container.ApplicationContainer.prototype.getFrameSource.call(this,
     * sApplicationType, sUrl, sAdditionalInformation);</code> in order to reuse the default
     * behavior. To override the error checks, simply replace any additional application types you
     * wish to support with <code>sap.ushell.components.container.ApplicationType.URL</code>.
     *
     * @param {sap.ushell.components.container.ApplicationType} sApplicationType
     *   the application type
     * @param {string} sUrl
     *   the base URL
     * @param {string} sAdditionalInformation
     *   the additional information
     * @returns {string}
     * @since 1.15.0
     */
    sap.ushell.components.container.ApplicationContainer.prototype.getFrameSource
        = function (sApplicationType, sUrl, sAdditionalInformation) {
            if (!Object.prototype.hasOwnProperty.call(
                    sap.ushell.components.container.ApplicationType,
                    sApplicationType
                )) {
                // Note: do not use sap.ushell.utils.Error here as the exception is already caught
                // and logged in render()
                throw new Error("Illegal application type: " + sApplicationType);
            }
            return sUrl;
        };
}());

}; // end of sap/ushell/components/container/ApplicationContainer.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.Renderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The SAPUI5 component of SAP's Fiori Wave 2 renderer for the Unified Shell.
 *
 * @version 1.16.3
 */
/**
 * @namespace Namespace for SAP's fiori2 renderer for the Unified Shell. The renderer consists
 * of an SAPUI5 component called <code>sap.ushell.renderers.fiori2.Renderer</code>.
 *
 * @name sap.ushell.renderers.fiori2
 * @see sap.ushell.renderers.fiori2.Renderer
 * @since 1.9.0
 * @private
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.renderers.fiori2.Renderer");

    jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

    

    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.createRenderer("fiori2")</code>.
     *
     * @class The SAPUI5 component of SAP's Fiori Wave 2 renderer for the Unified Shell.
     *
     * @extends sap.ui.core.UIComponent
     * @name sap.ushell.renderers.fiori2.Renderer
     * @see sap.ushell.services.Container#createRenderer
     * @since 1.15.0
     * @public
     */
    sap.ui.core.UIComponent.extend("sap.ushell.renderers.fiori2.Renderer", {
        metadata : {
            version : "1.16.3",
            dependencies : {
                version : "1.16.3",
                libs : [ "sap.ui.core", "sap.ui.unified", "sap.m" ],
                components: []
            }
        }
    });

    /**
     * *TODO*
     *
     * @returns *TODO*
     *
     * @methodOf sap.ushell.renderers.fiori2.Renderer#
     * @name createContent
     * @since 1.15.0
     *
     * @private
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.createContent = function () {
        return sap.ui.view({
            type: sap.ui.core.mvc.ViewType.JS,
            viewName: "sap.ushell.renderers.fiori2.Shell"
        });
    };
}());

}; // end of sap/ushell/renderers/fiori2/Renderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.launchpad.DashboardManager') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, console, document, $, setTimeout, window */
    /*jslint plusplus: true, nomen: true, bitwise: true */

    jQuery.sap.declare("sap.ushell.renderers.fiori2.launchpad.DashboardManager");
    
    
    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-core'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-widget'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-mouse'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-sortable'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-draggable'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-droppable'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-effects-core'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-effects-shake'); // unlisted dependency retained


    /**
     * Return translated text. Private function in this module.
     * @param sMsgId
     *      Id of the text that is to be translated.
     */
    var getLocalizedText = function (sMsgId) {
        return sap.ushell.resources.i18n.getText(sMsgId);
    };

    sap.ui.base.EventProvider.extend("sap.ushell.renderers.fiori2.launchpad.DashboardManager", {
        metadata : {
            publicMethods : ["getModel", "getDashboardView", "getGroupListView", "loadPersonalizedGroups", "attachEvent", "detachEvent", "attachEventOnce"]
        },

        constructor : function (sId, mSettings) {
            //make this class only available once
            if (sap.ushell.renderers.fiori2.launchpad.getDashboardManager && sap.ushell.renderers.fiori2.launchpad.getDashboardManager()) {
                return sap.ushell.renderers.fiori2.launchpad.getDashboardManager();
            }
            sap.ushell.renderers.fiori2.launchpad.getDashboardManager = jQuery.sap.getter(this.getInterface());
            this.oPageBuilderService = sap.ushell.Container.getService("LaunchPage");
            this.oBookmarkService = sap.ushell.Container.getService("Bookmark");
            this.oModel = mSettings.model;
            this.oDashboardView = sap.ui.jsview("dashboard", "sap.ushell.renderers.fiori2.launchpad.dashboard.DashboardContent");
            this.oGroupListView = sap.ui.jsview("groupList", "sap.ushell.renderers.fiori2.launchpad.group_list.GroupList");
            this.oSortableDeferred = $.Deferred();
            this.oSortableDeferred.resolve();
            this.aRequestQueue = [];
            this.bRequestRunning = false;
            this.registerEvents();
        },

        registerEvents : function () {
            var oEventBus = sap.ui.getCore().getEventBus();

            oEventBus.subscribe("launchpad", "addBookmarkTile", this._createBookmark, this);
            oEventBus.subscribe("launchpad", "createGroup", this._createGroup, this);
            oEventBus.subscribe("launchpad", "deleteGroup", this._deleteGroup, this);
            oEventBus.subscribe("launchpad", "resetGroup", this._resetGroup, this);
            oEventBus.subscribe("launchpad", "changeGroupTitle", this._changeGroupTitle, this);
            oEventBus.subscribe("launchpad", "moveGroup", this._moveGroup, this);
            oEventBus.subscribe("launchpad", "addTile", this._createTile, this);
            oEventBus.subscribe("launchpad", "deleteTile", this._deleteTile, this);
            oEventBus.subscribe("launchpad", "moveTile", this._moveTile, this);
            oEventBus.subscribe("launchpad", "sortableStart", this._sortableStart, this);
            oEventBus.subscribe("launchpad", "sortableStop", this._sortableStop, this);
            oEventBus.subscribe("openCatalog", this.loadAllCatalogs, this);

            this.oDashboardView.addEventDelegate({
                onBeforeShow: jQuery.proxy(function (evt) {
                    this.loadPersonalizedGroups();
                }, this),
                onAfterHide: jQuery.proxy(function (evt) {
                    this._destroyAllGroupModels("/groups");
                }, this)
            });
        },

        _refreshTiles : function () {
            var that = this,
                aGroups = this.oModel.getProperty("/groups");

            jQuery.each(aGroups, function (nIndex, oGroup) {
                jQuery.each(oGroup.tiles, function (nIndex, oTile) {
                    that.oPageBuilderService.refreshTile(oTile.object);
                });
            });
        },

        _sortableStart : function () {
            this.oSortableDeferred = $.Deferred();
        },

        _sortableStop : function () {
            this.oSortableDeferred.resolve();
        },

        _handleAfterSortable : function(fFunc) {
            return $.proxy(function(){
                var outerArgs = Array.prototype.slice.call(arguments);
                this.oSortableDeferred.done(function(){
                    fFunc.apply(null, outerArgs);
                });
            }, this);
        },

        _addRequest : function(fRequest) {
            this.aRequestQueue.push(fRequest);
            if(!this.bRequestRunning) {
                this.bRequestRunning = true;
                this.aRequestQueue.shift()();
            }
        },

        _checkRequestQueue : function() {
            if(this.aRequestQueue.length === 0) {
                this.bRequestRunning = false;
            } else {
                this.aRequestQueue.shift()();
            }
        },

        _requestFailed : function() {
            this.aRequestQueue = [];
            this.bRequestRunning = false;
        },

        /*
         * oData should have the following parameters:
         * title
         */
        _createGroup : function (sChannelId, sEventId, oData) {
            var that = this,
                oGroup = this._getGroupModel(null),
                aGroups = this.oModel.getProperty("/groups"),
                oBus = sap.ui.getCore().getEventBus();
            this.oModel.setProperty("/groups/" + aGroups.length, oGroup);

            window.setTimeout($.proxy(oBus.publish, oBus, "launchpad", "scrollToGroup", { groupId : oGroup.groupId }), 1);

            // We don't call the backend here as the user hasn't had the opportunity to give the group a name yet.
            // The group will be persisted after it got a name, in the changeGroupTitle handler.
            // TODO: This depends on the behaviour of the GroupList, which enters edit-mode immediately after creating a group.
            //       It would be better if this event would be fired after the group has a name.
        },

        _getIndexOfGroup : function (sGroupId) {
            var nGroupIndex = null,
                aGroups = this.oModel.getProperty("/groups");
            jQuery.each(aGroups, function (nIndex, oGroup) {
                if (oGroup.groupId === sGroupId) {
                    nGroupIndex = nIndex;
                    return false;
                }
            });
            return nGroupIndex;
        },

        _getPathOfGroup : function (sGroupId) {
            return "/groups/" + this._getIndexOfGroup(sGroupId);
        },

        _getPathOfTile : function (sTileId) {
            var aGroups = this.oModel.getProperty("/groups"),
                nResGroupIndex = null,
                nResTileIndex = null;

            jQuery.each(aGroups, function (nGroupIndex, oGroup) {
                jQuery.each(oGroup.tiles, function (nTileIndex, oTile) {
                    if (oTile.uuid === sTileId) {
                        nResGroupIndex = nGroupIndex;
                        nResTileIndex = nTileIndex;
                        return false;
                    }
                });

                if(nResGroupIndex !== null) {
                    return false;
                }
            });

            return nResGroupIndex !== null ? "/groups/" + nResGroupIndex + "/tiles/" + nResTileIndex : null;
        },

        // see http://stackoverflow.com/questions/5306680/move-an-array-element-from-one-array-position-to-another
        _moveInArray : function (aArray, nFromIndex, nToIndex) {
            if (nToIndex >= aArray.length) {
                var k = nToIndex - aArray.length;
                while ((k--) + 1) {
                    aArray.push(undefined);
                }
            }
            aArray.splice(nToIndex, 0, aArray.splice(nFromIndex, 1)[0]);
        },

        /*
         * oData should have the following parameters
         * groupId
         */
        _deleteGroup : function (sChannelId, sEventId, oData) {
            var that = this,
                sGroupId = oData.groupId,
                aGroups = this.oModel.getProperty("/groups"),
                nGroupIndex = this._getIndexOfGroup(sGroupId),
                oGroup = null,
                oResultPromise;

            this._destroyGroupModel("/groups" + nGroupIndex);
            oGroup = aGroups.splice(nGroupIndex, 1)[0].object;
            this.oModel.setProperty("/groups", aGroups);

            this._addRequest($.proxy(function() {
                try {
                    oResultPromise = this.oPageBuilderService.removeGroup(oGroup);
                } catch (err) {
                    this._resetGroupsOnFailure("fail_to_delete_group_msg");
                    return;
                }

                oResultPromise.done($.proxy(function () {
                    this._showLocalizedMessage("group_deleted_msg");
                    this._checkRequestQueue();
                }, this));
                oResultPromise.fail(this._handleAfterSortable(that._resetGroupsOnFailureHelper("fail_to_delete_group_msg")));
            }, this));
        },

        /*
         * oData should have the following parameters
         * groupId
         */
        _resetGroup : function (sChannelId, sEventId, oData) {
            var that = this,
                sGroupId = oData.groupId,
                nGroupIndex = this._getIndexOfGroup(sGroupId),
                oGroup = this.oModel.getProperty("/groups/" + nGroupIndex),
                oResultPromise;

            this.oModel.setProperty("/groups/" + nGroupIndex + "/sortable", false);

            this._addRequest($.proxy(function() {
                try {
                    oResultPromise = this.oPageBuilderService.resetGroup(oGroup.object);
                } catch (err) {
                    this._resetGroupsOnFailure("fail_to_reset_group_msg");
                    return;
                }

                oResultPromise.done(this._handleAfterSortable($.proxy(function (sGroupId, oGroup, oResetedGroup) {
                    var nGroupIndex = that._getIndexOfGroup(sGroupId);

                this._loadGroup(nGroupIndex, oResetedGroup || oGroup.object);
                    this._showLocalizedMessage("group_reset_msg");
                    this.oModel.setProperty("/groups/" + nGroupIndex + "/sortable", true);
                    this._checkRequestQueue();
                }, this, sGroupId, oGroup)));

                oResultPromise.fail(this._handleAfterSortable(that._resetGroupsOnFailureHelper("fail_to_reset_group_msg")));
            }, this));
        },

        /*
         * oData should have the following parameters
         * fromIndex
         * toIndex
         */
        _moveGroup : function (sChannelId, sEventId, oData) {
            var iFromIndex = oData.fromIndex,
                iToIndex = oData.toIndex,
                aGroups = this.oModel.getProperty("/groups"),
                oGroup = aGroups[iFromIndex],
                sGroupId = oGroup.groupId,
                oResultPromise;

            this._moveInArray(aGroups, iFromIndex, iToIndex);
            this.oModel.setProperty("/groups", aGroups);

            if (oGroup.isDefaultGroup) {
                that.toggleDefaultGroupVisibility(false);
            }

            this._addRequest($.proxy(function() {
                var oGroup = this.oModel.getProperty(this._getPathOfGroup(sGroupId));
                try {
                    oResultPromise = this.oPageBuilderService.moveGroup(oGroup.object, iToIndex);
                } catch (err) {
                    this._resetGroupsOnFailure("fail_to_move_group_msg");
                    return;
                }

                oResultPromise.done($.proxy(this._checkRequestQueue, this));

                oResultPromise.fail(this._handleAfterSortable(this._resetGroupsOnFailureHelper("fail_to_move_group_msg")));
            }, this));
        },

        /*
         * oData should have the following parameters
         * groupId
         * newTitle
         */
        _changeGroupTitle : function (sChannelId, sEventId, oData) {
            var sNewTitle = oData.newTitle,
                sGroupId = oData.groupId,
                nGroupIndex = this._getIndexOfGroup(sGroupId),
                oGroup = this.oModel.getProperty("/groups/" + nGroupIndex),
                oResultPromise;

            this.oModel.setProperty("/groups/" + nGroupIndex + "/title", sNewTitle);

            // Check, if the group has already been persisted.
            if (!oGroup.object) {
                // Add the group in the backend.
                this._addRequest($.proxy(function() {
                    try {
                        oResultPromise = this.oPageBuilderService.addGroup(sNewTitle);
                    } catch (err) {
                        this._resetGroupsOnFailure("fail_to_create_group_msg");
                        return;
                    }

                    oResultPromise.done(this._handleAfterSortable($.proxy(function (sGroupId, oNewGroup) {
                        var nGroupIndex = this._getIndexOfGroup(sGroupId);
                        this._loadGroup(nGroupIndex, oNewGroup);
                        this._checkRequestQueue();
                    }, this, sGroupId)));

                    oResultPromise.fail(this._handleAfterSortable(this._resetGroupsOnFailureHelper("fail_to_create_group_msg")));
                }, this));
            } else {
                // Rename the group in the backend.
                // model is already changed - it only has to be made persistent in the backend
                this._addRequest($.proxy(function() {
                    try {
                        oResultPromise = this.oPageBuilderService.setGroupTitle(oGroup.object, sNewTitle);
                    } catch (err) {
                        this._resetGroupsOnFailure("fail_to_rename_group_msg");
                        return;
                    }

                    oResultPromise.done($.proxy(this._checkRequestQueue, this));

                    // Revert to the old title.
                    oResultPromise.fail(this._handleAfterSortable($.proxy(function (sGroupId, sOldTitle) {
                        var sGroupPath = this._getPathOfGroup(sGroupId);
                        this._showLocalizedError("fail_to_rename_group_msg");
                        this.oModel.setProperty(sGroupPath + "/title", sOldTitle);
                        this._requestFailed();
                    }, this, sGroupId)));
                }, this));
            }
        },

        _createTile : function (sChannelId, sEventId, oData) {
            var oCatalogTileContext = oData.catalogTileContext,
                oContext = oData.groupContext,
                sGroupId = this.oModel.getProperty(oContext.getPath()).groupId,
                oResultPromise;

            if (oContext.getObject().isDefaultGroup) {
                this.toggleDefaultGroupVisibility(true);
            }

            jQuery.sap.log.debug("Add catalog tile to dashboard", oData, this);

            if (!oCatalogTileContext) {
                jQuery.sap.log.warning("DashboardManager: Did not receive catalog tile object. Abort.", this);
                return;
            }

            this._addRequest($.proxy(function() {
                try {
                    oResultPromise = this.oPageBuilderService.addTile(oCatalogTileContext.getProperty("src"), oContext.getProperty("object"));
                } catch (err) {
                    this._resetGroupsOnFailure("fail_to_add_tile_msg");
                    return;
                }

                oResultPromise
                    .done(this._handleAfterSortable($.proxy(function(sGroupId, oTile) {
                        var sGroupPath = this._getPathOfGroup(sGroupId);
                        this._addTileToGroup(sGroupPath, oTile);
                        this._checkRequestQueue();
                    }, this, sGroupId)))
                    .done($.proxy(oCatalogTileContext.getModel().setProperty, oCatalogTileContext.getModel(), "active", true, oCatalogTileContext))
                    .fail(this._handleAfterSortable(this._resetGroupsOnFailureHelper("fail_to_add_tile_msg")));
            }, this));
        },

        _createBookmark : function (sChannelId, sEventId, oData) {
            this._addRequest($.proxy(function() {
                var oResultPromise = this.oBookmarkService.addBookmark(oData);

                oResultPromise.done($.proxy(this._checkRequestQueue, this));

                oResultPromise.fail(this._resetGroupsOnFailureHelper("fail_to_add_tile_msg"));
            }, this));
        },

        /*
         * oData should have the following parameters
         * tileId
         * groupId
         */
        _deleteTile : function (sChannelId, sEventId, oData) {
            var that = this,
                sTileId = oData.tileId,
                aGroups = this.oModel.getProperty("/groups");

            jQuery.each(aGroups, function (nGroupIndex, oGroup) {
                var bFoundFlag = false;
                jQuery.each(oGroup.tiles, function (nTileIndex, oTmpTile) {
                    if (oTmpTile.uuid === sTileId) {
                        // Remove tile from group.
                        that._destroyTileModel("/groups/" + nGroupIndex + "/tiles/" + nTileIndex);
                        var oTile = oGroup.tiles.splice(nTileIndex, 1)[0],
                            oResultPromise;

                        that.oModel.setProperty("/groups/" + nGroupIndex + "/tiles", oGroup.tiles);

                        if (oGroup.isDefaultGroup && oGroup.tiles.length == 0) {
                            that.toggleDefaultGroupVisibility(false);
                        }

                        that._addRequest(function() {
                            try {
                                oResultPromise = that.oPageBuilderService.removeTile(oGroup.object, oTile.object);
                            } catch (err) {
                                this._resetGroupsOnFailure("fail_to_remove_tile_msg");
                                return;
                            }

                            oResultPromise.done(that._handleAfterSortable(function () {
                                that._showLocalizedMessage("tile_deleted_msg");
                                that._checkRequestQueue();
                            }));
                            oResultPromise.fail(that._handleAfterSortable(that._resetGroupsOnFailureHelper("fail_to_remove_tile_msg")));
                        });

                        bFoundFlag = true;
                        return false;
                    }
                });
                if (bFoundFlag) {
                    return false;
                }
            });
        },

        /*
         * oData should have the following parameters:
         * fromGroupId
         * toGroupId
         * fromIndex
         * toIndex can be null => append as last tile in group
         */
        _moveTile : function (sChannelId, sEventId, oData) {
            var that = this,
                nNewIndex = oData.toIndex,
                sNewGroupId = oData.toGroupId,
                sTileId = oData.sTileId,

                oTile,
                nTileIndex,

                oOldGroup,
                nOldGroupIndex,

                oNewGroup,
                nNewGroupIndex,

                aGroups = this.oModel.getProperty("/groups");

            jQuery.each(aGroups, function (nTmpGroupIndex, oTmpGroup) {
                var bFoundFlag = false;
                jQuery.each(oTmpGroup.tiles, function (nTmpTileIndex, oTmpTile) {
                    if (oTmpTile.uuid === sTileId) {
                        oTile = oTmpTile;
                        nTileIndex = nTmpTileIndex;
                        oOldGroup = oTmpGroup;
                        nOldGroupIndex = nTmpGroupIndex;
                        bFoundFlag = true;
                        return false;
                    }
                });
                if (bFoundFlag) {
                    return false;
                }
            });
            jQuery.each(aGroups, function (nTmpGroupIndex, oTmpGroup) {
                if (oTmpGroup.groupId === sNewGroupId) {
                    oNewGroup = oTmpGroup;
                    nNewGroupIndex = nTmpGroupIndex;
                    
                    if (oOldGroup.isDefaultGroup && nOldGroupIndex != nNewGroupIndex && oOldGroup.tiles.length <= 1) {
                        that.toggleDefaultGroupVisibility(false);
                    }
                }
            });

            // When a tile is dragged into an empty group, the Plus-Tiles in the empty list cause
            // the new index to be off by one, i.e. 1 instead of 0, which causes an error.
            // This is a generic check which sanitizes the values if necessary.
            if (nNewIndex && nNewIndex > oNewGroup.tiles.length) {
                nNewIndex = oNewGroup.tiles.length;
            }

            if (oOldGroup.groupId === sNewGroupId) {
                if (nNewIndex === null || nNewIndex === undefined) {
                    // moved over group list to same group
                    oOldGroup.tiles.splice(nTileIndex, 1);
                    // Tile is appended. Set index accordingly.
                    nNewIndex = oOldGroup.tiles.length;
                    // append as last item
                    oOldGroup.tiles.push(oTile);
                } else {
                    this._moveInArray(oOldGroup.tiles, nTileIndex, nNewIndex);
                }
                this.oModel.setProperty("/groups/" + nOldGroupIndex + "/tiles", oOldGroup.tiles);
            } else {
                // remove from old group
                oOldGroup.tiles.splice(nTileIndex, 1);
                this.oModel.setProperty("/groups/" + nOldGroupIndex + "/tiles", oOldGroup.tiles);

                // add to new group
                if (nNewIndex === null || nNewIndex === undefined) {
                    // Tile is appended. Set index accordingly.
                    nNewIndex = oNewGroup.tiles.length;
                    // append as last item
                    oNewGroup.tiles.push(oTile);
                } else {
                    oNewGroup.tiles.splice(nNewIndex, 0, oTile);
                }
                this.oModel.setProperty("/groups/" + nNewGroupIndex + "/tiles", oNewGroup.tiles);
            }

            // change in backend
            var oSourceGroup = this.oModel.getProperty("/groups/" + nOldGroupIndex).object,
                oTargetGroup = this.oModel.getProperty("/groups/" + nNewGroupIndex).object,
                oResultPromise;

            this._addRequest($.proxy(function() {
                try {
                    oResultPromise = this.oPageBuilderService.moveTile(oTile.object, nTileIndex, nNewIndex, oSourceGroup, oTargetGroup);
                } catch (err) {
                    this._resetGroupsOnFailure("fail_to_move_tile_msg");
                    return;
                }

                oResultPromise.done(this._handleAfterSortable($.proxy(function (sTileId, oTargetTile) {
                    var sTilePath = this._getPathOfTile(sTileId),
                        srvc = this.oPageBuilderService;

                    // If we cannot find the tile, it might have been deleted -> Check!
                    if(sTilePath) {
                        // Update the model with the new tile.
                        this._destroyTileModel(sTilePath);
                        this.oModel.setProperty(sTilePath + "/content", [srvc.getTileView(oTargetTile)]);
                        this.oModel.setProperty(sTilePath + "/target", srvc.getTileTarget(oTargetTile) || "");
                    }

                    this._checkRequestQueue();
                }, this, sTileId)));

                oResultPromise.fail(this._handleAfterSortable(this._resetGroupsOnFailureHelper("fail_to_move_tile_msg")));
            }, this));
        },

        toggleDefaultGroupVisibility : function (bVisible) {
            var oDashboardItem = this.oDashboardView.oDashboardGroupsBox.getGroups()[0],
                oGroupListItem = this.oGroupListView.oGroupList.getItems()[0];

            oDashboardItem.setVisible(bVisible);
            oGroupListItem.setShow(bVisible);
        },

        // temporary - should not be exposed
        getModel : function () {
            return this.oModel;
        },

        getDashboardView : function () {
            return this.oDashboardView;
        },

        getGroupListView : function () {
            return this.oGroupListView;
        },

        // CATALOG LOADING

        loadAllCatalogs : function (sChannelId, sEventId, oData) {
            if (!this.oModel.getProperty("/catalogs")) {
                var that = this;

                this._destroyAllGroupModels("/catalogs");
                this._destroyAllTileModels("/catalogTiles");
                // Clear existing Catalog items
                this.oModel.setProperty("/catalogs", []);
                this.oModel.setProperty("/catalogTiles", []);

                // Trigger loading of catalogs
                sap.ushell.Container.getService("LaunchPage").getCatalogs().done(
                    $.proxy(
                        this.setCatalogs,
                        this,
                        "/catalogs",
                        [{
                            title : getLocalizedText("all"),
                            "static" : true,
                            tiles : []
                        }]
                    )
                ).fail(that._showLocalizedErrorHelper("fail_to_load_catalog_msg"));
            }
        },

        setCatalogs : function (sPath, aStaticCatalogs, aCatalogs) {
            var that = this,
                srvc = sap.ushell.Container.getService("LaunchPage"),
                offset = (aStaticCatalogs && aStaticCatalogs.length) || 0;

            // Fill catalog info
            this.oModel.setProperty(sPath, $.merge(aStaticCatalogs || [], $.map(
                aCatalogs,
                function (oCatalog) {
                    return {
                        title : srvc.getCatalogTitle(oCatalog),
                        id : srvc.getCatalogId(oCatalog),
                        "static" : false,
                        tiles : []
                    };
                }
            )));

            // Trigger loading of catalog tiles
            $.each(aCatalogs, $.proxy(function (i, oCatalog) {
                srvc.getCatalogTiles(oCatalog).done(
                    $.proxy(this.setCatalogTiles, this, "/catalogTiles", true, {//sPath + "/" + (i + offset) + "/tiles", false, {
                        catalog : srvc.getCatalogTitle(oCatalog),
                        id : srvc.getCatalogId(oCatalog),
                        index : i
                    })
                ).fail(that._showLocalizedErrorHelper("fail_to_load_catalog_tiles_msg"));
            }, this));
        },

        setCatalogTiles : function (sPath, bAppend, oData, aCatalogTiles) {
            var srvc = sap.ushell.Container.getService("LaunchPage");

            // Fill tile info for current catalog
            this.oModel.setProperty(sPath, $.merge((bAppend && this.oModel.getProperty(sPath)) || [], $.map(
                aCatalogTiles,
                function (oCatalogTile, iTile) {
                    return {
                        src : oCatalogTile,
                        catalog : oData.catalog,
                        catalogIndex : oData.index * 100000 + iTile,
                        catalogId : oData.id,
                        title : srvc.getCatalogTileTitle(oCatalogTile),
                        keywords : (srvc.getCatalogTileKeywords(oCatalogTile) || []).join(','),
                        id : srvc.getCatalogTileId(oCatalogTile),
                        size : srvc.getCatalogTileSize(oCatalogTile),
                        content : [srvc.getCatalogTileView(oCatalogTile)]
                    };
                }
            )));
        },

        /**
         * Shows a localized message in the Message-Toast.
         * @param {string} sMsgId
         *      The localization id of the message
         * @param {object} oParams
         *      Additional parameters for the Message Toast showing the message. Can be undefined.
         * @param {sap.ushell.services.Message.Type} [iType=sap.ushell.services.Message.Type.INFO]
         *      The message type (optional)
         */
        _showLocalizedMessage : function (sMsgId, oParams, iType) {
            sap.ushell.services.Message.show(iType || sap.ushell.services.Message.Type.INFO, getLocalizedText(sMsgId), oParams);
        },
        /**
         * Shows a localized error message in the Message-Toast.
         * @param {string} sMsgId
         *      The localization id of the message
         * @param {object} oParams
         *      Additional parameters for the Message Toast showing the message. Can be undefined.
         *
         */
        _showLocalizedError : function (sMsgId, oParams) {
            this._showLocalizedMessage(sMsgId, oParams, sap.ushell.services.Message.Type.ERROR);
        },

        /**
         * A wrapper for _showLocalizedError to reduce boilerplate code in error handling.
         * @param {string} sMsgId
         *      The localization id of the message
         * @param {object} oParams
         *      Additional parameters for the Message Toast showing the message. Can be undefined.
         * @returns {Function}
         *      A function that will call _showLocalizedError with the given parameters.
         */
        _showLocalizedErrorHelper : function (sMsgId, oParams) {
            var that = this;
            return function () {
                that._showLocalizedError(sMsgId, oParams);
            };
        },

        /**
         * Helper function to bind an error message to a reset-function, which reloads all groups
         * from a group array when called.
         * @param {string} sMsgId
         *      The id of the localized string.
         * @returns {Function}
         *      The reset function, which returns the dashboard into an consistent state.
         */
        _resetGroupsOnFailureHelper : function (sMsgId) {
            var that = this;
            return function (aGroups) {
                that._showLocalizedError(sMsgId);
                that._requestFailed();

                // Give the Toast a chance to be shown before the reload freezes the screen.
                setTimeout(function () {
                    that.loadGroupsFromArray(aGroups);
                });
            };
        },

        /**
         * Helper function to reset groups after a backend failure.
         * @param {string} sMsgId
         *      The id of the localized string.
         */
        _resetGroupsOnFailure : function (sMsgId) {
            this._requestFailed();
            this._showLocalizedError(sMsgId);
            this.loadPersonalizedGroups();
            this.oModel.updateBindings(true);
        },

        /**
         * Load all groups in the given array. The default group will be loaded first.
         * @param aGroups
         *      The array containing all groups (including the default group).
         */
        loadGroupsFromArray : function (aGroups) {
            var that = this;

            this.oPageBuilderService.getDefaultGroup().done(function (oDefaultGroup) {
                var i,
                    k = 1;

                that._loadGroup(0, oDefaultGroup);
                for (i = 0; i < aGroups.length; ++i) {
                    if (aGroups[i] !== oDefaultGroup) {
                        that._loadGroup(k, aGroups[i]);
                        k++;
                    }
                }
                for (i = aGroups.length; i < that.oModel.getProperty("/groups/length"); ++i) {
                    that._destroyGroupModel("/groups/" + i);
                }
                //set new length in case there are less new groups
                that.oModel.setProperty("/groups/length", aGroups.length);
            }).fail(that._resetGroupsOnFailureHelper("fail_to_get_default_group_msg"));
        },

        /**
         * Load all tiles in a group and add the group to the internal model.
         * @param nIndex
         *      The index at which the group should be added. 0 is reserved for the default group.
         * @param oGroup
         *      The group as it is returned by the UI2 services.
         */
        _loadGroup : function (nIndex, oGroup) {
            var that = this,
                sGroupPath = "/groups/" + nIndex;
            this._destroyGroupModel(sGroupPath);
            // Set group on model
            var sOldGroupId = this.oModel.getProperty(sGroupPath + "/groupId"),
                oNewGroupModel = this._getGroupModel(oGroup, nIndex === 0);

            // If the group already exists, keep the id. The backend-handlers relay on the id staying the same.
            if(sOldGroupId) {
                oNewGroupModel.groupId = sOldGroupId;
            }

            this.oModel.setProperty(sGroupPath, oNewGroupModel);
        },

        _getGroupModel : function (oGroup, bDefault) {
            var srvc = this.oPageBuilderService,
                aGroupTiles = (oGroup && srvc.getGroupTiles(oGroup)) || [],
                aModelTiles = [],
                i;

            for (i = 0; i < aGroupTiles.length; ++i) {
                aModelTiles.push(this._getTileModel(aGroupTiles[i]));
            }

            return {
                title           : (bDefault && getLocalizedText("my_group")) ||
                                  (oGroup && srvc.getGroupTitle(oGroup)) ||
                                  "",
                object          : oGroup,
                groupId         : jQuery.sap.uid(),
                tiles           : aModelTiles,
                isDefaultGroup  : bDefault || false,
                editMode        : !oGroup,
                removable       : !oGroup || srvc.isGroupRemovable(oGroup),
                sortable        : true
            };
        },

        _addTileToGroup : function (sGroupPath, oTile) {
            var srvc = this.oPageBuilderService,
                sTilePath = sGroupPath + "/tiles",
                sLong = srvc.getTileSize(oTile),
                iNumTiles = this.oModel.getProperty(sTilePath).length;

            this.oModel.setProperty(sTilePath + "/" + iNumTiles, this._getTileModel(oTile));
        },

        _getTileModel : function (oTile) {
            var srvc = this.oPageBuilderService,
                sLong = srvc.getTileSize(oTile);
            return {
                "object"  : oTile,
                "uuid"    : jQuery.sap.uid(),
                "content" : [srvc.getTileView(oTile)],
                "long"    : ((sLong !== null) && (sLong === "1x2" || sLong === "2x2")) || false,
                "target"  : srvc.getTileTarget(oTile) || ""
            };
        },

        _destroyAllGroupModels : function (oTarget) {
            var aGroups = (typeof oTarget === "string") ? this.oModel.getProperty(oTarget) : oTarget,
                i;
            if (aGroups) {
                for (i = 0; i < aGroups.length; i = i + 1) {
                    this._destroyGroupModel(aGroups[i]);
                }
            }
        },

        _destroyGroupModel : function (oTarget) {
            var oGroupModel = (typeof oTarget === "string") ? this.oModel.getProperty(oTarget) : oTarget,
                i;
            if (oGroupModel) {
                this._destroyAllTileModels(oGroupModel.tiles);
            }
        },

        _destroyAllTileModels : function (oTarget) {
            var aTiles = (typeof oTarget === "string") ? this.oModel.getProperty(oTarget) : oTarget,
                i;
            if (aTiles) {
                for (i = 0; i < aTiles.length; i = i + 1) {
                    this._destroyTileModel(aTiles[i]);
                }
            }
        },

        _destroyTileModel : function (oTarget) {
            var oTileModel = (typeof oTarget === "string") ? this.oModel.getProperty(oTarget) : oTarget,
                i;
            if (oTileModel && oTileModel.content) {
                for (i = 0; i < oTileModel.content.length; i = i + 1) {
                    oTileModel.content[i].destroy();
                }
            }
        },

        /**
         * Load all user groups from the backend. (Triggered on initial page load.)
         */
        loadPersonalizedGroups : function () {
            var that = this,
                oGroupsPromise = this.oPageBuilderService.getGroups();

            oGroupsPromise.done(function (aGroups) {
                that.loadGroupsFromArray(aGroups);
            });

            oGroupsPromise.fail(that._showLocalizedErrorHelper("fail_to_load_groups_msg"));
        }
    });
}());

}; // end of sap/ushell/renderers/fiori2/launchpad/DashboardManager.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.launchpad.catalog.Catalog.view') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.launchpad.catalog.Catalog.view');
//Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */

    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    
    
    
    

    sap.ui.jsview("sap.ushell.renderers.fiori2.launchpad.catalog.Catalog", {

        createContent: function (oController) {
            var translationBundle = sap.ushell.resources.i18n;
            function ifnot(v) {
                return !v;
            }
            function iflong(sLong) {
            	return ((sLong !== null) && (sLong === "1x2" || sLong === "2x2")) || false;
            }
            function falseIfPhone(v) {
                if(jQuery.device.is.phone) {
                    return false;
                } else {
                    return ifnot(v);
                }
            }
            function to_int(v) {
                return parseInt(v, 10) || 0;
            }
            function get_icon(bState) {
                return (bState && sap.ui.core.IconPool.getIconURI("accept")) || sap.ui.core.IconPool.getIconURI("add");
            }
            function formatTiles(v) {
                return (v && v > 0) ?
                        v + ((v > 1 && (" " + translationBundle.getText("tiles"))) || (" " + translationBundle.getText("tile"))) :
                        translationBundle.getText("no_tiles");
            }

            var oButton = new sap.m.Button({
                icon : {
                    path : "active",
                    formatter : get_icon
                },
                enabled : {
                    path : "active",
                    formatter : ifnot
                },
                tooltip : "{i18n>addTileToGroup}",
                press : [ oController.onAddTileToDefault, oController ]
            }), oTileTemplate = new sap.ushell.ui.launchpad.Tile({
                draggable : {
                    path : "active",
                    formatter : falseIfPhone
                },
                dragContainer : "body", //".sapUshellCatalogList", TODO: visibility issues
                dragStart : [ oController.onTileDragStart, oController ],
                dragStop : [ oController.onTileDragStop, oController ],
                tileViews : {
                    path : "content",
                    factory : function(sId, oContext){return oContext.getObject();}
                },
                footItems : [oButton],
                "long" : {
                	path : "size",
                	formatter : iflong
                },
                index: {
                    path : "id",
                    formatter : to_int
                }
            });

            /* Override build-in setters */
            oButton.constructor.prototype.setEnabled = function (v) {
                this.setProperty("enabled", v, true);        // set property, but suppress rerendering
                this.$().toggleClass("sapMBtnDisabled", !v); // switch appearance directly
                return this;
            };

            oButton.constructor.prototype.setIcon = function (v) {
                this.setProperty("icon", v, true);          // set property, but suppress rerendering
                if (v && this._image && this._image.setSrc) {
                    this._image.setSrc(v);                  // set property of internal control
                }
                return this;
            };

            return [ new sap.m.SplitContainer("catalogSplitContainer", {
                detailPages : [ new sap.m.Page("catalogTilesPage", {
                    showHeader : false,
                    showFooter : false,
                    content : [ new sap.ushell.ui.launchpad.Panel({
                        translucent : true,
                        headerText : "",
                        headerLevel : sap.m.HeaderLevel.H2,
                        headerBar : new sap.m.Bar("catalogHeader", {
                            translucent : true,
                            contentLeft : [ new sap.m.Select("catalogSelect", {
                                name : "Browse",
                                title : "{i18n>tile_catalog}",
                                items : {
                                    path : "/catalogs",
                                    template : new sap.ui.core.ListItem({
                                        text : "{title}"
                                    })
                                },
                                change : [ oController.onCategoryFilter, oController ]
                            })],
                            contentRight : [ new sap.m.SearchField("catalogSearch", {
                                placeholder: "{i18n>search_catalog}",
                                liveChange : [ oController.onLiveFilter, oController ]
                            })]
                        }),
                        content : [ new sap.ushell.ui.launchpad.TileContainer("catalogTiles", {
                            showHeader : false,
                            showPlaceholder : false,
                            showGroupHeader : "{/showCatalogHeaders}",
                            groupHeaderLevel : sap.m.HeaderLevel.H6,
                            tiles : {
                                path : "/catalogTiles",
                                template : oTileTemplate,
                                sorter : new sap.ui.model.Sorter("catalogIndex", false, function (oContext) {
                                    return (oContext && oContext.getProperty("catalog")) || "";
                                })
                            }
                        })]
                    })]
                }).addStyleClass("sapUshellCatalogMain")],

                masterPages : [ new sap.m.Page({
                    showHeader : false,
                    showFooter : false,
                    content : [ new sap.m.List({
                        mode : sap.m.ListMode.None,
                        items : {
                            path : "/groups",
                            template : new sap.ushell.ui.launchpad.CatalogListItem({
                                title : "{title}",
                                markChange : 200,
                                icon : sap.ui.core.IconPool.getIconURI("target-group"),
                                type : sap.m.ListType.Inactive,
                                description : {
                                    path : "tiles/length",
                                    formatter : formatTiles
                                },
                                drop : [ oController.onAddTile, oController ]
                            }),
                            sorter : new sap.ui.model.Sorter("isDefaultGroup", true, function (oContext) {
                                return (!oContext.getProperty("isDefaultGroup") && translationBundle.getText("drag_groups")) || "";
                            })
                        }
                    }).addStyleClass("sapUshellCatalogList")]
                }).addStyleClass("sapUshellCatalogSide")]
            }).addStyleClass("sapUshellCatalog")];
        },

        getControllerName: function () {
            return "sap.ushell.renderers.fiori2.launchpad.catalog.Catalog";
        }
    });
}());

}; // end of sap/ushell/renderers/fiori2/launchpad/catalog/Catalog.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.launchpad.dashboard.DashboardContent.controller') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.launchpad.dashboard.DashboardContent.controller');
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, console, setTimeout, clearTimeout */
    /*jslint plusplus: true, nomen: true */
    

    sap.ui.controller("sap.ushell.renderers.fiori2.launchpad.dashboard.DashboardContent", {

        onInit : function () {
            this.sViewId = "#" + this.oView.getId();
        },

        onAfterRendering : function () {
            var oEventBus = sap.ui.getCore().getEventBus();

            //Bind launchpad event handlers
            oEventBus.unsubscribe("launchpad", "scrollToGroup", this._scrollToGroup, this);
            oEventBus.subscribe("launchpad", "scrollToGroup", this._scrollToGroup, this);

            //Bind grouplist event handlers
            oEventBus.unsubscribe("grouplist", "GroupListOver", this._handleGroupListOver, this);
            oEventBus.unsubscribe("grouplist", "GroupListOut", this._handleGroupListOut, this);
            oEventBus.unsubscribe("grouplist", "GroupListItemOver", this._handleGroupListItemOver, this);
            oEventBus.unsubscribe("grouplist", "GroupListItemOut", this._handleGroupListItemOut, this);
            oEventBus.unsubscribe("grouplist", "GroupListItemDrop", this._handleGroupListItemDrop, this);
            oEventBus.subscribe("grouplist", "GroupListOver", this._handleGroupListOver, this);
            oEventBus.subscribe("grouplist", "GroupListOut", this._handleGroupListOut, this);
            oEventBus.subscribe("grouplist", "GroupListItemOver", this._handleGroupListItemOver, this);
            oEventBus.subscribe("grouplist", "GroupListItemOut", this._handleGroupListItemOut, this);
            oEventBus.subscribe("grouplist", "GroupListItemDrop", this._handleGroupListItemDrop, this);

            // The delete area is moved out of the scrollable area
            jQuery("#__area0").appendTo("#shell-cntnt");
        },

        _scrollToGroup : function (sChannelId, sEventId, oData) {
            var sGroupId = oData.groupId,
                that = this;

            jQuery.each(this.oView.oDashboardGroupsBox.getGroups(), function (nIndex, oGroup) {
                if (oGroup.getGroupId() === sGroupId) {
                    if (nIndex === 0) {
                        sap.ui.getCore().byId("dashboardPage").scrollTo(0, 500);
                    } else {
                        var iY;

                        if (jQuery.device.is.desktop) {
                            var jqDashboardPageCont = jQuery("#dashboardPage-cont");

                            iY = jQuery.sap.byId(oGroup.sId).offset().top + jqDashboardPageCont.scrollTop() - 76;
                            sap.ui.getCore().byId("dashboardPage").scrollTo(iY, 500);
                        } else {
                            var oDashboardPage = sap.ui.getCore().byId("dashboardPage"),
                                oScroller = oDashboardPage.getScrollDelegate();

                            oScroller._scroller.scrollToElement("#" + oGroup.sId + " .sapUshellContainerPositionAnchor", 500);
                        }

                        
                    }

                    jQuery('#groupList .sapUshellDefaultGroupItem, #groupList .sapUshellGroupListItem')
                        .removeClass('over')
                        .eq(nIndex).addClass('over');

                    return false;
                }
            });
        },

        makeGroupSortable : function (oTileContainer, jqTileContainer) {
            var jqGroup = jqTileContainer.find('.inner');

            if (jqGroup.hasClass("ui-sortable")) {
                return;
            }

            this._sortable(oTileContainer, jqGroup);
        },

        _getTileTopOffset : function (oTile) {
            var iTileTopOffset = 0;
            iTileTopOffset += oTile.parents("#dashboardPage-cont").scrollTop();
            iTileTopOffset += oTile.parents(".sapUshellDashboardGroupsContainerItem").position().top;
            iTileTopOffset += oTile.position().top;
            return iTileTopOffset;
        },

        _sortable : function (oTileContainer, jqGroup) {
            var that = this,
                jqDashboardGroup = jQuery.sap.byId(this.oView.oDashboardGroupsBox.getId()),
                jqCloneArea = jqDashboardGroup.find(".cloneArea");

            that.bActive = false;

            //Check if there already is a clone area
            if (jqCloneArea.length <= 0) {
                jqCloneArea = jQuery("<div id='cloneArea' class='cloneArea sapUshellDashboardGroupsContainerItem'></div>");
                jqDashboardGroup.append(jqCloneArea);
            }

            jqGroup.sortable({ //create sortable tiles
                containment: "document", // this.jqParentParent.parent().parent(),
                items: '>:not(.sapUshellPlusTile)',
                connectWith: ".inner.sapUshellTilesContainer-sortable",
                placeholder: "sapUshellTile-placeholder",
                tolerance: "pointer",
                helper: function (event, element) {
                    var clone = element.clone();
                    clone.attr("id", clone.attr("id") + '-helperclone');
                    clone.addClass("sortableHelperClone");
                    clone.css("font-size", element.css("font-size"));
                    clone.hide();
                    setTimeout(function () {
                        clone.appendTo('body');
                        clone.show();
                    }, 1);
                    return clone;
                },
                revert: jQuery.proxy(this._handleSortableRevert, this),
                start: jQuery.proxy(this._handleSortableStart, this),
                stop: jQuery.proxy(this._handleSortableStop, this),
                change: function (event, ui) {
                    that._handleSortableChange(event, ui, true);
                }
            }).disableSelection(); //disable text selection browser-behaviour

            if (jQuery.device.is.phone) {
                jqGroup.sortable('disable');
            }
        },

        _bindTileEvents : function (oEvent) {
            var oTile = oEvent.getSource();

            if (!jQuery.device.is.tablet) {
                return;
            }

            var that = this;

            jQuery.sap.byId(oTile.sId).bind("mousedown", function (event) {
                if (that.bActive === false) {
                    jQuery(".inner.sapUshellTilesContainer-sortable").sortable('disable');

                    var _this = jQuery(this),
                        _event = event;

                    clearTimeout(that.fdownTimer);
                    that.fdownTimer = setTimeout(function () {
                        that.bActive = true;

                        jQuery(_this).effect("shake", {
                            times: 1,
                            distance: 5,
                            complete: function () {
                                if( !that.bActive ) {
                                    return;
                                }

                                jQuery(".inner.sapUshellTilesContainer-sortable").sortable('enable');

                                //deactivate scrolling during drag and drop on mobile devices
                                var oDashboardPage = sap.ui.getCore().byId("dashboardPage"),
                                    oScroller = oDashboardPage.getScrollDelegate();

                                oScroller._scroller.disable();

                                jQuery(this).trigger(_event);
                            }
                        }, 50);
                    }, 150);
                }
            });


            jQuery.sap.byId(oTile.sId)
                .bind('mouseup', $.proxy(that, '_resetDraggingTimeout'))
                .bind('mousemove', $.proxy(that, '_resetDraggingTimeout'))
                .bind('scrollstart', $.proxy(that, '_resetDraggingTimeout'))
                .bind('touchmove', $.proxy(that, '_resetDraggingTimeout'))
                .bind('touchcancel', $.proxy(that, '_resetDraggingTimeout'));
        },
        _resetDraggingTimeout : function () {
            clearTimeout(this.fdownTimer);
            this.bActive = false;

            if (!jQuery.device.is.desktop) {
                //activate scrolling after drag and drop on mobile devices
                var oDashboardPage = sap.ui.getCore().byId("dashboardPage"),
                    oScroller = oDashboardPage.getScrollDelegate();

                oScroller._scroller.enable();
            }
        },

        _handleSortableRevert : function (event, ui) {
            //Return desired return duration
            return 250;
        },

        _handleSortableStart : function (event, ui) {
            sap.ui.getCore().getEventBus().publish("launchpad", "sortableStart");

            var oTile = sap.ui.getCore().byId(ui.item[0].id),
                jqDashboardGroup = jQuery.sap.byId(this.oView.oDashboardGroupsBox.getId()),
                that = this,
                // Get the clone area
                jqCloneArea = jqDashboardGroup.find("#cloneArea"),
                //Refresh the current margin (window scaling and opening the sidebar change the margin)
                containerOffsetLeft = parseFloat(jQuery("#shell-container-canvas").css("left")),
                dashboardOffsetLeft = jqDashboardGroup.offset().left;//css("width")

            if (oTile.getLong()) {
                jQuery(".sapUshellTile-placeholder").addClass("long");
            }

            jqCloneArea.css("left", dashboardOffsetLeft - containerOffsetLeft);

            //Flag the original tile that is currently being dragged
            ui.item.addClass("exclude-me");

            // Make the dragged item "unclickable" to prevent opening apps while/immediately after
            // drag'n'drop, because doing this produces ui errors.
            ui.item.click(function(oEvent) {
                oEvent.preventDefault();
                oEvent.stopPropagation();
            });

            if (jQuery.device.is.desktop) {
                //Clone all existing tiles
                //Iterate through all groups
                jqDashboardGroup.find(".sapUshellDashboardGroupsContainerItem").not(".cloneArea").each(function () {
                    var jqGroup = jQuery(this);

                    //Iterate through all tiles
                    jQuery(this).find(".sapUshellTile").not(".sortableHelperClone").each(function () {
                        //Clone the current tile (including style)
                        var oTile = jQuery(this),
                            oClonedTile = oTile.clone();
                        oClonedTile.attr("id", oClonedTile.attr("id") + '-clone');
                        oClonedTile.css("font-size", oTile.css("font-size"));
                        oClonedTile.addClass("clonedTile");
                        // Make the clones "unclickable" to prevent opening apps while/immediately after
                        // drag'n'drop, because doing this produces ui errors.
                        oClonedTile.click(function(oEvent) {
                            oEvent.preventDefault();
                            oEvent.stopPropagation();
                        });

                        //Save the clone and the current group (sapUshellDashboardGroupsContainerItem)
                        oTile.data("clone", oClonedTile);
                        oTile.data("group", jqGroup);

                        //Position the clone inside the cloneArea
                        var sTileLeftOffset = parseInt(oTile.position().left) + parseInt(jQuery(".sapUshellDashboardGroupsContainer .sapUshellTileContainer").css("margin-left")) + "px",
                            iTileTopOffset = that._getTileTopOffset(oTile);

                        //Set the new position
                        oClonedTile.css("left", sTileLeftOffset);
                        oClonedTile.css("top", iTileTopOffset + "px");

                        //Append the clone...
                        jqCloneArea.append(oClonedTile);
                    });
                });

                //Hide all other original tiles
                jqDashboardGroup.find(".sapUshellTile").not(".sortableHelperClone").not(".exclude-me").not(".clonedTile").css("visibility", "hidden");
                //Get the clone that is under the current original tile and hide it...
                ui.item.data("clone").hide();
            }

            //jqDashboardGroup.find(".sortableHelperClone").effect("shake", {times: 3},75,false);
            //show delete-area
            this.oView.oDashboardDeleteArea.show();
        },

        _handleSortableStop : function (event, ui) {
            // Make sure that helper is disposed
            jQuery(".sortableHelperClone").remove();

            // move tile in model if user actually moved a tile
            // Only process if the event is not thrown by an helper and tile not deleted
            var sTileId = ui.item[0].id,
                oTile = sap.ui.getCore().byId(sTileId),
                oEventBus = sap.ui.getCore().getEventBus();

            if (oTile && !oTile.bDeletionFlag) {
                if (oTile.getLong()) {
                    jQuery(".sapUshellTile-placeholder").removeClass("long");
                }

                if (ui.item.parents("#dashboardGroups").length > 0) {
                    var sNewGroupId = sap.ui.getCore().byId(ui.item.parent().parent().attr("id")).getGroupId(),
                        nNewIndex = ui.item.index();

                    oEventBus.publish("launchpad", "moveTile", {
                        sTileId    : oTile.getUuid(),
                        toGroupId  : sNewGroupId,
                        toIndex    : nNewIndex
                    });
                }
            } else if (oTile && oTile.bDeletionFlag) {
                oTile.bDeletionFlag = false;

                oEventBus.publish("launchpad", "deleteTile", {
                    tileId  : oTile.getUuid()
                });
            }

            //hide delete-area
            this.oView.oDashboardDeleteArea.hide();

            if (jQuery.device.is.desktop) {
                //Show all original tiles and reset everything
                var jqShellTile = jQuery(".sapUshellTile").not(".clonedTile");
                jqShellTile.removeData("clone");
                jqShellTile.removeClass("exclude-me");
                jqShellTile.css("visibility", "visible");

                //Delete all clones
                var jqDashboardGroup = jQuery.sap.byId(this.oView.oDashboardGroupsBox.getId()),
                    jqCloneArea = jqDashboardGroup.find("#cloneArea");
                jqCloneArea.empty();
            }

            if (jQuery.device.is.phone) {
                that.bActive = false;
                jQuery(".inner.sapUshellTilesContainer-sortable").sortable('disable');
            }

            // Don't let the sortables modify the DOM. This is handled by the model and
            //  creates problems with sapui5 otherwise. Also, make sure to call cancel
            //  only on the element from which sorting started. Otherwise, weird things
            //  happen (duplicated tiles, ...).
            // However, if this is a drop on the group list, we must NOT abort the sorting.
            // (Reason: 1. It works without. 2. The renderer is triggered by the droppable
            //   in the grouplist (recreating all tile elements) and interfers with the
            //   reset (re-adding the dragged element) done by the sortables.)
            if(event.target && (!oTile || !oTile.bDroppedFlag)) {
                jQuery(event.target).sortable('cancel');
            }

            if(oTile && oTile.bDroppedFlag) {
                oTile.bDroppedFlag = false;
            }

            oEventBus.publish("launchpad", "sortableStop");
        },

        _handleSortableChange : function (event, ui, bAnimate) {
            var that = this,
                jqDashboardGroup = jQuery.sap.byId(this.oView.oDashboardGroupsBox.getId());

            //Get all invisible, original tiles that are not placeholders
            var oOriginalTiles = jqDashboardGroup.find(".sapUshellTile");
            oOriginalTiles = oOriginalTiles.not(".exclude-me");
            oOriginalTiles = oOriginalTiles.not(".sapUshellTile-placeholder");
            oOriginalTiles = oOriginalTiles.not(".sapUshellTile-placeholder.long");
            oOriginalTiles = oOriginalTiles.not(".clonedTile");

            // when moving from one group to another this should only be called for the target group
            if (ui && ui.sender) {
                var jqPlaceholder = ui.placeholder;
                if (jqPlaceholder.length > 0) {
                    // jqTarget is the target group
                    var jqTarget = jqPlaceholder.first().parent();
                    if (jqTarget) {
                        var jqPlusTiles = jqTarget.find(".sapUshellPlusTile");
                        if (jqPlusTiles.length > 0) {
                            jqPlusTiles.detach();
                            jqTarget.append(jqPlusTiles);
                        }
                    }
                }
            }
            oOriginalTiles.each(function () {
                //Get the original tile and its clone
                var oTile = jQuery(this),
                    oClonedTile = oTile.data("clone");

                if (!oClonedTile) {
                    return false;
                }

                //Get the invisible tile that has snapped to the new
                //location, get its position, and animate the visible
                //clone to it

                //Position the clone inside the cloneArea
                var sTileLeftOffset = parseInt(oTile.position().left) + parseInt(jQuery(".sapUshellDashboardGroupsContainer .sapUshellTileContainer").css("margin-left")) + "px",
                    iTileTopOffset = that._getTileTopOffset(oTile);

                //Animate / move everything to their new locations
                if(bAnimate) {
                    //Stop currently running animations
                    //Without this, animations would queue up
                    oClonedTile.stop(true, false);

                    oClonedTile.animate({
                        left: sTileLeftOffset,
                        top: iTileTopOffset + "px"
                    }, {
                        duration: 250
                    }, {
                        easing: "swing"
                    });
                } else {
                    oClonedTile.css("left", sTileLeftOffset);
                    oClonedTile.css("top", iTileTopOffset + "px");
                }
            });
        },

        _handleGroupListOver : function (sChannel, sEventId, oEvent) {
            //Toggle transparency of the hovering tile
            jQuery(".sortableHelperClone").toggleClass("sapUshellOverGroupList");

            //Hide the old placeholder
            jQuery(".sapUshellTile-placeholder").hide();
        },
        _handleGroupListOut : function (sChannel, sEventId, oEvent) {
            //Toggle transparency of the hovering tile
            jQuery(".sortableHelperClone").toggleClass("sapUshellOverGroupList");

            //Show the old placeholder
            jQuery(".sapUshellTile-placeholder").show();

            //Reset the target drop group
            jQuery(".sapUshellGroupList").data("dropGroup", null);

            //Make the cloned tiles animate themselves to their new positions
            this._handleSortableChange(undefined, undefined, false);
        },
        _handleGroupListItemOver : function (sChannel, sEventId, oEvent) {
            //Memorize the group over which the tile is hovering
            jQuery(".sapUshellGroupList").data("dropGroup", oEvent.getSource());

            //Clone the old placeholder
            var jqPlaceholderClone = jQuery(".sapUshellTile-placeholder").not(".placeholder-clone").clone();
            jqPlaceholderClone.addClass("placeholder-clone");
            jqPlaceholderClone.attr("id", "placeholder-clone_" + oEvent.getSource().sId);

            //Identify the jQuery object of target group
            var jqTargetGroup;
            jQuery.each(this.oView.oDashboardGroupsBox.getGroups(), function (nIndex, oGroup) {
                if (oGroup.getGroupId() === oEvent.getSource().getGroupId()) {
                    jqTargetGroup = jQuery("#" + oGroup.sId).find(".sapUshellTilesContainer-sortable");
                    return false;
                }
            });

            //Attach cloned placeholder to last position of target group
            //Check if target group contains a plus tile (if so, insert before that)
            if(jqTargetGroup.find(".sapUshellPlusTile").length > 0) {
                //Append before plus tile
                jqTargetGroup.find(".sapUshellPlusTile").before(jqPlaceholderClone);
                jqPlaceholderClone.show();
            } else {
                //Append as last element
                jqTargetGroup.append(jqPlaceholderClone);
                jqPlaceholderClone.show();
            }

            //Make the original tile and the original placeholder invisible (if not already)
            jQuery(".exclude-me.sortableHelperClone").hide();
            jQuery(".sapUshellTile-placeholder").not(".placeholder-clone").hide();

            //Make the cloned tiles animate themselves to their new positions
            this._handleSortableChange(undefined, undefined, false);
        },
        _handleGroupListItemOut : function (sChannel, sEventId, oEvent) {
            //Remove my placeholder clones
            jQuery("#placeholder-clone_" + oEvent.getSource().sId).remove();

            //Make the cloned tiles animate themselves to their new positions
            //In theory, this should only be necessary in "over", but due to the wrong order of events,
            //a placeholder could be removed AFTER the over event, thus leading to strange behavior
            this._handleSortableChange(undefined, undefined, false);
        },
        _handleGroupListItemDrop : function (sChannel, sEventId, oEvent) {
            //Move the tile
            var oTile = oEvent.getParameter("control");
            oTile.bDroppedFlag = true;
            this._publishAsync("launchpad", "moveTile", {
                sTileId    : oTile.getUuid(),
                toGroupId  : oEvent.getSource().getGroupId(),
                toIndex    : null
            });

            //Clean up the missing events
            this._handleGroupListOut(sChannel, sEventId, oEvent);
            this._handleGroupListItemOut(sChannel, sEventId, oEvent);
        },
        _publishAsync : function (sChannelId, sEventId, oData) {
            var oBus = sap.ui.getCore().getEventBus();
            window.setTimeout($.proxy(oBus.publish, oBus, sChannelId, sEventId, oData), 1);
        },
    });
}());

}; // end of sap/ushell/renderers/fiori2/launchpad/dashboard/DashboardContent.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.launchpad.dashboard.DashboardContent.view') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.launchpad.dashboard.DashboardContent.view');
//Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, $, document, self */
    /*jslint plusplus: true, nomen: true, vars: true */

    
    
    

    var _mouseStop = $.ui.sortable.prototype._mouseStop;

    $.ui.sortable.prototype._mouseStop = function (event, noPropagation) {
        if (!event) {
            return;
        }

        if (this.options.revert) {
            var that = this,
                args = arguments,
                cur = that.placeholder.offset(),
                // the dur[ation] will not determine how long the revert animation is
                dur = $.isFunction(this.options.revert) ? this.options.revert.apply(this.element[0], [event, that._uiHash(this)]) : this.options.revert,
                jqHelper = jQuery(this.helper);

            self.reverting = true;

            if (jQuery(".sapUshellDeleteArea_dashboard_functional").data("tileOver") === true) {
                //Animation to dashboard delete area

                //On IE and Safari use jQuery's animate(), otherwise use css transition (hardware accelerated)
                //See http://stackoverflow.com/questions/5899783/detect-safari-using-jquery
                var bIsIE       = $.browser.msie,
                    bIsIE10     = (bIsIE && (parseInt($.browser.version, 10) === 10)) ? true : false,
                    bIsSafari   = (!(navigator.userAgent.indexOf('Chrome') > -1)) && (navigator.userAgent.indexOf("Safari") > -1);

                if (!bIsIE10 && (bIsIE || bIsSafari)) {
                    $(this.helper).animate({
                        top: (jQuery(document).height() - this.helper.height() - 10) + "px",
                        left: (jQuery(document).width() - this.helper.width() - 10) + "px",
                        opacity: 0
                    }, !isNaN(dur) ? dur : 250, function () {
                        var sTileId = jQuery(that.currentItem).attr('id'),
                        oTile = sap.ui.getCore().byId(sTileId);
                        oTile.bDeletionFlag = true;
                        //Save that nothing is "over" the delete area anymore
                        jQuery(".sapUshellDeleteArea_dashboard_functional").data("tileOver", false);
                        _mouseStop.apply(that, args);
                    });
                } else {
                    jQuery(this.helper).css({
                        top                 : (jQuery(document).height() - this.helper.height() - 10),
                        left                : (jQuery(document).width() - this.helper.width() - 10),
                        opacity             : 0,
                        WebkitTransition    : 'top ' + dur + 'ms ease-in-out, left ' + dur + 'ms ease-in-out, opacity ' + dur + 'ms ease-in-out, ',
                        MozTransition       : 'top ' + dur + 'ms ease-in-out, left ' + dur + 'ms ease-in-out, opacity ' + dur + 'ms ease-in-out, ',
                        MsTransition        : 'top ' + dur + 'ms ease-in-out, left ' + dur + 'ms ease-in-out, opacity ' + dur + 'ms ease-in-out, ',
                        OTransition         : 'top ' + dur + 'ms ease-in-out, left ' + dur + 'ms ease-in-out, opacity ' + dur + 'ms ease-in-out, ',
                        transition          : 'top ' + dur + 'ms ease-in-out, left ' + dur + 'ms ease-in-out, opacity ' + dur + 'ms ease-in-out'
                    });

                    setTimeout(function () {
                        var sTileId = jQuery(that.currentItem).attr('id'),
                        oTile = sap.ui.getCore().byId(sTileId);
                        oTile.bDeletionFlag = true;
                        //Save that nothing is "over" the delete area anymore
                        jQuery(".sapUshellDeleteArea_dashboard_functional").data("tileOver", false);
                        _mouseStop.apply(that, args);
                    }, dur);
                }
            } else {
                _mouseStop.apply(that, args);
            }
        } else {
            this._clear(event, noPropagation);
        }

        return false;
    };

    sap.ui.jsview("sap.ushell.renderers.fiori2.launchpad.dashboard.DashboardContent", {

        createContent: function (oController) {
            var that = this,
                oEventBus = sap.ui.getCore().getEventBus();

            this.oDashboardGroupsBox = this._getDashboardGroupsBox(oController);
            this.oDashboardDeleteArea =  this._getDashboardDeleteArea(oController);

            this.oDashboardDeleteArea.attachEvent("tileOver", function () {
                jQuery(".sapUshellTile-placeholder").hide();
                jQuery(".exclude-me.sortableHelperClone").hide();
                that.oController._handleSortableChange();
            });

            this.oDashboardDeleteArea.attachEvent("tileOut", function () {
                jQuery(".sapUshellTile-placeholder").show();
                jQuery(".exclude-me.sortableHelperClone").show();
                that.oController._handleSortableChange();
            });

            return [this.oDashboardGroupsBox, this.oDashboardDeleteArea ];
        },

        _getDashboardDeleteArea : function (oController) {
            var oDashboardDeleteArea =  new sap.ushell.ui.launchpad.DeleteArea({
                type: sap.ushell.ui.launchpad.DeleteAreaType.Dashboard
            });

            return oDashboardDeleteArea;
        },

        _getDashboardGroupsBox : function (oController) {
            var oTilesContainerTemplate = this._getTileContainerTemplate(oController);

            var oGroupsContainer = new sap.ushell.ui.launchpad.DashboardGroupsContainer("dashboardGroups", {
                groups : {
                    path: "/groups",
                    template : oTilesContainerTemplate
                }
            });
            return oGroupsContainer;
        },

        _getTileContainerTemplate : function (oController) {
            var fIfNot = function ifnot(v) {
                return !v;
            };

            //Bind the custom resize handler
            var fResizeHandler = function (event, iAvailableWidth, iAvailableHeight) {

                var jqTilePrototype = jQuery("<div>").css("display", "none").addClass("sapUshellTile");
                jQuery("body").append(jqTilePrototype);

                try {
                    var jqDashboardGroups       = jQuery("#dashboardGroups"),
                        oGroupListController    = sap.ui.getCore().byId("groupList").getController(),
                        iTileWidth              = parseInt(jqTilePrototype.css("width")),
                        iTileMargin             = parseInt(jqTilePrototype.css("margin-right")),
                        iTileBorderWidth        = parseInt(jqTilePrototype.css("border-top-width")),
                        iTileTotalWidth         = iTileWidth + iTileMargin + (2 * iTileBorderWidth),
                        //5 Tiles and one extra spacing on the left side to be symmetrical
                        iDesiredWidth           = iTileMargin + (5 * iTileTotalWidth),
                        iMinWidth               = iTileMargin + (2 * iTileTotalWidth);

                    oGroupListController._updateGroupSelection();

                    // We can fit 5 tiles
                    if (iAvailableWidth >= iDesiredWidth) {
                        //Enough space for 5 Tiles in a row
                        jqDashboardGroups.css("width", iDesiredWidth);
                    //We can fit less than 5 tiles but more than 2
                    } else if (iAvailableWidth >= iMinWidth) {
                        //Not enough space for 5 Tiles in a row
                        //How many tiles can we fit?
                        var iPossibleNumberOfTiles = Math.floor((iAvailableWidth - iTileMargin) / iTileTotalWidth);
                        //Fit the maximum number of tiles
                        jqDashboardGroups.css("width", iTileMargin + (iPossibleNumberOfTiles * iTileTotalWidth));
                    //We actually can't even fit 2 Tiles, so we have to force it
                    } else {
                        //Fit the maximum number of tiles
                        jqDashboardGroups.css("width", iMinWidth);
                    }
                } finally {
                    jqTilePrototype.remove();
                }
            };

            var fAfterRenderingHandler = function () {
                var jqTileContainer = jQuery('#' + this.getId());

                oController.makeGroupSortable(this, jqTileContainer);

                //Get the dashboard and the first tile container (default group)
                var jqDashboard = jQuery("#dashboard"),
                    jqFirstContainer = jQuery(".sapUshellDashboardGroupsContainerItem").first();

                //Bind to dashboard and to the first tile container
                jqDashboard.unbind("resize", fResizeHandler);
                jqDashboard.bind("resize", fResizeHandler);

                jqFirstContainer.unbind("resize", fResizeHandler);
                jqFirstContainer.bind("resize", fResizeHandler);

                //Trigger the event manually for the first time to generate a good initial layout
                jqDashboard.trigger("resize", [jqDashboard.width(), jqDashboard.height()]);
                jqFirstContainer.trigger("resize", [jqFirstContainer.width(), jqFirstContainer.height()]);
            };

            var oTilesContainerTemplate = new sap.ushell.ui.launchpad.TileContainer({
                headerText : "{title}",
                groupId: "{groupId}",
                defaultGroup: "{isDefaultGroup}",
                showHeader: true,
                showPlaceholder : true,
                tiles: {
                    path : "tiles",
                    template : new sap.ushell.ui.launchpad.Tile({
                        draggable : false,
                        "long" : "{long}",
                        uuid : "{uuid}",
                        target : "{target}",
                        tileViews : {
                            path : "content",
                            factory : function(sId, oContext){return oContext.getObject();}
                        },
                        afterRendering : [ oController._bindTileEvents, oController ]
                    })
                },
                afterRendering : fAfterRenderingHandler,
                add : function (oEvent) {
                    sap.ui.getCore().getEventBus().publish("openCatalog", {
                        groupContext : oEvent.getSource().getBindingContext()
                    });
                },
                removable: "{removable}",
                sortable: "{sortable}"
            });

            return oTilesContainerTemplate;
        },

        getControllerName: function () {
            return "sap.ushell.renderers.fiori2.launchpad.dashboard.DashboardContent";
        }
    });
}());

}; // end of sap/ushell/renderers/fiori2/launchpad/dashboard/DashboardContent.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.launchpad.group_list.GroupList.view') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.launchpad.group_list.GroupList.view');
//Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, $, document */
    /*jslint plusplus: true, nomen: true */

    
    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


    var _mouseStop = $.ui.sortable.prototype._mouseStop;

    $.ui.sortable.prototype._mouseStop = function (event, noPropagation) {
        if (!event) {
            return;
        }

        if (this.options.revert) {
            var that = this,
                args = arguments,
                cur = that.placeholder.offset(),
                // the dur[ation] will not determine how long the revert animation is
                dur = $.isFunction(this.options.revert) ? this.options.revert.apply(this.element[0], [event, that._uiHash(this)]) : this.options.revert,
                jqHelper = jQuery(this.helper);

            self.reverting = true;

            if (jQuery(".sapUshellDeleteArea_grouplist_functional").data("groupOver") === true) {
                var oGroup = sap.ui.getCore().byId(jQuery(that.currentItem).attr('id')),
                    bRemovable = oGroup.getRemovable(),
                    oResourceBundle = sap.ushell.resources.i18n,
                    sDeleteGroupMsg = oResourceBundle.getText(bRemovable ? "delete_group_msg" : "reset_group_msg", [jqHelper.find(".sapMSLITitleOnly").text()]),
                    sDeleteGroupTitleMsg = oResourceBundle.getText(bRemovable ? "delete_group" : "reset_group"),
                    sAcceptButtonTxt = oResourceBundle.getText("okBtn"),
                    sRejectButtonTxt = oResourceBundle.getText("cancelBtn"),
                    fOnConfirm = function (sAction) {
                        if (sAction === sAcceptButtonTxt) {
                            //User wants to delete
                            //Flag for deletion
                            jqHelper.data("deleteMe", true);
                            //Animation to grouplist delete area
                            jqHelper.animate({
                                top: (jQuery(document).height() - jqHelper.height() - 10) + "px",
                                left: "0px",
                                opacity: 0
                            }, !isNaN(dur) ? dur : 250, function () {
                                that._clear(event);
                            });
                            //Delete the group!
                            var oEventBus = sap.ui.getCore().getEventBus();
                            oEventBus.publish("launchpad", bRemovable ? "deleteGroup" : "resetGroup", {
                                groupId : oGroup.getGroupId()
                            });
                        } else if (sAction === sRejectButtonTxt) {
                            //User does not want to delete
                            //Flag for not deleting the group
                            jqHelper.data("deleteMe", false);
                            //Animation to the original position
                            jqHelper.animate({
                                left: cur.left - that.offset.parent.left - that.margins.left + (that.offsetParent[0] === document.body ? 0 : that.offsetParent[0].scrollLeft),
                                top: cur.top - that.offset.parent.top - that.margins.top + (that.offsetParent[0] === document.body ? 0 : that.offsetParent[0].scrollTop)
                            }, !isNaN(dur) ? dur : 250, function () {
                                that._clear(event);
                            });
                        }

                        //Save that nothing is "over" the delete area anymore
                        jQuery(".sapUshellDeleteArea_grouplist_functional").data("groupOver", false);
                    };

                oGroup.bDeletionFlag = true;

                sap.ushell.services.Message.confirm(sDeleteGroupMsg, fOnConfirm, sDeleteGroupTitleMsg, [sAcceptButtonTxt, sRejectButtonTxt]);

            } else if (jQuery(".sapUshellGroupList").data("dropGroup")) {
                var jqGroupListItem = jQuery.sap.byId(jQuery(".sapUshellGroupList").data("dropGroup").sId);

                //Animate tile right into the group list item
                jqHelper.animate({
                    top: jqGroupListItem.offset().top + 16,
                    left: jqGroupListItem.offset().left + 48,
                    height: "0px",
                    width: "0px",
                    opacity: 0
                }, !isNaN(dur) ? dur : 250, function () {
                    jQuery(".sapUshellGroupList").data("dropGroup", null);
                    _mouseStop.apply(that, args);
                });

            } else {
                _mouseStop.apply(that, args);
            }
        } else {
            this._clear(event, noPropagation);
        }

        return false;
    };

    sap.ui.jsview("sap.ushell.renderers.fiori2.launchpad.group_list.GroupList", {
        createContent: function (oController) {
            var that = this,
                oOpenCatalogItem =  this._getOpenCatalogItem(oController),
                oAddGroupItem = this._getAddGroupItem(oController),
                oGroupListItemTemplate = this._getGroupListItemTemplate(oController),
                nAddedListItemId = undefined;

            this.oGrouplistDeleteArea = new sap.ushell.ui.launchpad.DeleteArea({
                type: sap.ushell.ui.launchpad.DeleteAreaType.GroupList
            });

            this.oGroupList = new sap.m.List({
                items : {
                    path     : "/groups",
                    template : oGroupListItemTemplate
                }
            }).addStyleClass("sapUshellGroupItemList");

            var fChangeHandler = function(oEvent) {
                var oList = oEvent.getSource().oList;

                jQuery.each(oList, function(nIndex, oItem) {
                    if(oItem.editMode) {
                        var aListItems = that.oGroupList.getItems();

                        nAddedListItemId = aListItems[nIndex].getId();
                    }
                });
            };

            this.oGroupList.onAfterRendering = function() {
                oController._updateGroupSelection();

                jQuery.proxy(oController.makeSortable, oController)();

                if(nAddedListItemId) {
                    var jqAddedListItem = jQuery.sap.byId(nAddedListItemId);

                    jqAddedListItem
                        .css('opacity', 0)
                        .slideDown(300)
                        .animate(
                          { opacity: 1 },
                          { queue: false, duration: 300 }
                        );

                    nAddedListItemId = undefined;
                }

                this.getBinding("items").detachChange(fChangeHandler);
                this.getBinding("items").attachChange(fChangeHandler);
            };

            this.oGroupList.updateItems = sap.ushell.override.updateAggregatesFactory("items");

            this.oOpenCatalogList = new sap.m.List({
                mode : sap.m.ListMode.SingleSelectMaster,
                items : [ oOpenCatalogItem ]
            });

            this.addStyleClass("sapUshellGroupList");

            if(!jQuery.device.is.phone) {
                this.oAddGroupList = new sap.m.List({
                    items : [ oAddGroupItem ]
                }).addStyleClass("sapUshellAddGroupButton");

                return [this.oOpenCatalogList, this.oGroupList, this.oAddGroupList, this.oGrouplistDeleteArea];
            } else {
                return [this.oOpenCatalogList, this.oGroupList, this.oGrouplistDeleteArea];
            }
        },

        _getOpenCatalogItem : function () {
            var oOpenCatalogItem = new sap.m.InputListItem({
                content:  new sap.ui.core.Icon({
                    src : 'grid'
                }),
                label: "{i18n>open_catalog}"
            }).addStyleClass('sapUshellBrowseCatalogButton');

            /* WORKAROUNDS for broken "press" events */
            oOpenCatalogItem.attachBrowserEvent('click', function () {
                    sap.ui.getCore().getEventBus().publish("openCatalog", {
                        groupContext : null
                });
            });

            return oOpenCatalogItem;
        },

        _getGroupListItemTemplate : function (oController) {
            var fOnAfterRenderingHandler = function (oEvent) {
                jQuery.proxy(oController._updateGroupSelection, oController)();

                if (this.getParent().getItems()[0] === this) {
                    this.setAllowEditMode(false);
                    this.addStyleClass("over");

                    if( this.getDefaultGroup() ) {
                        this.addStyleClass("sapUshellDefaultGroupItem");
                    }
                } else {
                    this.addStyleClass("sapUshellGroupListItem");
                }

                oController._bindGroupListItemEvents(oEvent);
            };

            return new sap.ushell.ui.launchpad.GroupListItem({
                title : "{title}",
                defaultGroup : "{isDefaultGroup}",
                groupId : "{groupId}",
                editMode : "{editMode}",
                // TODO: This information does not belong into the ui element, but there is no other way to make it accessible to drop-event-handler (_mouseStop).
                removable : "{removable}",
                numberOfTiles : "{tiles/length}",
                afterRendering : fOnAfterRenderingHandler,
                press : [ function (oEvent) {
                    this._handleGroupListItemPress(oEvent.getSource());
                }, oController ],
                change : [ oController.onGroupTitleChange, oController],
                over : [ oController._handleGroupListItemOver, oController ],
                out : [ oController._handleGroupListItemOut, oController ],
                drop : [ oController._handleGroupListItemDrop, oController ]
            });
        },

        _getAddGroupItem : function (oController) {
            return new sap.m.CustomListItem({
                content : new sap.ui.core.Icon({
                    src : 'sys-cancel'
                }),
                type :  sap.m.ListType.Active,
                tooltip : "{i18n>addgroupBtn_tooltip}",
                press : [ oController._handleGroupCreate, oController ]
            }).addStyleClass("sapUshellAddTilesContainer");
        },

        getControllerName: function () {
            return "sap.ushell.renderers.fiori2.launchpad.group_list.GroupList";
        }
    });
}());

}; // end of sap/ushell/renderers/fiori2/launchpad/group_list/GroupList.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.HistoryScreen.controller') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.HistoryScreen.controller');
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, console */

    
    
    
    
    

    /**
     * @name "sap.ushell.renderers.fiori2.search.HistoryScreen
     * @extends sap.ui.core.mvc.Controller
     * @public
     */
    sap.ui.controller("sap.ushell.renderers.fiori2.search.HistoryScreen", {

        /**
         * SAPUI5 lifecycle hook.
         * @public
         */
        onInit: function () {
            this.oLaunchPageService = sap.ushell.Container.getService("LaunchPage");
            this.oUserRecentsService = sap.ushell.services.UserRecents;
            this.oSearchService = sap.ushell.Container.getService("Search");
            this.oCurrentSearch = null;

            var that = this,
                oEventBus = sap.ui.getCore().getEventBus(),
                oRecentModel = new sap.ui.model.json.JSONModel();

            oRecentModel.setProperty("/apps", []);
            oRecentModel.setProperty("/searches", []);
            this.getView().setModel(oRecentModel);

            oEventBus.subscribe("search", this.newSearchInvoked, this);
            oEventBus.subscribe("searchDataSourceChange", this.newSearchCategory, this);
            oEventBus.subscribe("closeCurtain", this.saveSearch, this);
            oEventBus.subscribe("openApp", this.appOpened, this);
            oEventBus.subscribe("openHistoryScreen", this.updateView, this);
        },

        onExit: function () {
            if (this.oCurrentSearch) {
                this.oUserRecentsService.noticeSearch(this.oCurrentSearch);
            }
            var oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.unsubscribe("search", this.newSearchInvoked, this);
            oEventBus.unsubscribe("searchDataSourceChange", this.newSearchCategory, this);
            oEventBus.unsubscribe("closeCurtain", this.saveSearch, this);
            oEventBus.unsubscribe("openApp", this.appOpened, this);
            oEventBus.unsubscribe("openHistoryScreen", this.updateView, this);
        },

        updateView: function (sChannelId, sEventId, oData) {
            var fnUpdateAppModel = this.updateAppModel.bind(this),
                oModel = this.getView().getModel();

            this.oUserRecentsService.getRecentApps().done(function (aRecentApps) {
                fnUpdateAppModel(aRecentApps);
            });

            this.oUserRecentsService.getRecentSearches().done(function (aRecentSearches) {
                jQuery.each(aRecentSearches, function (iIndex, oRecentSearch) {
                    var sItemPath = "/searches/" + iIndex;
                    oModel.setProperty(sItemPath, oRecentSearch);
                });
            });
        },

        // wanted behavior: a search is only saved when you navigate away from the search screen
        //      therefore the term is saved (newSearchInvoked()), the category is updated (newSearchCategory())
        //      when the curtain is closing or an app will be opened, it will be saved (saveSearch())
        newSearchInvoked: function (sChannelId, sEventId, oData) {
            if (oData.dataSource) {
                this.oCurrentSearch = {sTerm: oData.searchTerm, oDataSource: oData.dataSource};
            } else {
                this.oCurrentSearch = {
                    sTerm: oData.searchTerm,
                    oDataSource: sap.ushell.Container.getService("Search").getDataSource()
                };
            }
        },

        newSearchCategory: function (sChannelId, sEventId, oData) {
            if (this.oCurrentSearch) {
                this.oCurrentSearch.oObjectName = oData;
            }
        },

        saveSearch: function (sChannelId, sEventId, oData) {
            if (this.oCurrentSearch) {
                this.oUserRecentsService.noticeSearch(this.oCurrentSearch);
                this.oCurrentSearch = null;
            }
        },

        searchAgain: function (oEvent) {
            var oSource = oEvent.getSource(),
                sSearchTerm = oSource.data("sSearchTerm"),
                oDataSource = oSource.data("oDataSource");
//                sObjectNameLabel = oSource.data("sObjectNameLabel"),
//                sObjectNameValue = oSource.data("sObjectNameValue"),
//                oObjectName = {label: sObjectNameLabel, value: sObjectNameValue};
//            if (sObjectNameValue) {
//                sap.ui.getCore().getEventBus().publish("externalSearch", {searchTerm: sSearchTerm, objectName: oObjectName});
//            } else {
//                sap.ui.getCore().getEventBus().publish("externalSearch", {searchTerm: sSearchTerm});
//            }
            sap.ui.getCore().getEventBus().publish("externalSearch", {searchTerm: sSearchTerm, dataSource: oDataSource});
        },

        appOpened: function (sChannelId, sEventId, oData) {
            var that = this,
                oNewApp = {},
                aRecentAppModels;
            this.saveSearch(sChannelId, sEventId, oData);

            if (!oData.semanticObject || !oData.action) {
                return;
            }

            oNewApp.semanticObject = oData.semanticObject;
            oNewApp.action = oData.action;
            oNewApp.sTargetHash = oData.sShellHash;

            this.oSearchService.queryApplicationsByTarget([oNewApp], jQuery.proxy(this.storeRecentApp, this, oNewApp));
        },

        storeRecentApp : function (oNewApp, aCatalogTileDescriptions) {
            if (aCatalogTileDescriptions && aCatalogTileDescriptions.length) {
                this.oUserRecentsService.noticeApp(oNewApp);
            }
        },

        updateAppModel: function (aRecentApps) {
            var oModel = this.getView().getModel(),
                fnBindedInsert = this.insertTileControl.bind(this, oModel, aRecentApps);
            this.oSearchService.queryApplicationsByTarget(aRecentApps, function (aRecentAppTiles) {
                oModel.setProperty("/apps", []);
                jQuery.each(aRecentAppTiles, fnBindedInsert);
            });
        },

        insertTileControl: function (oModel, aSavedData, iIndex, oTile) {
            oModel.setProperty("/apps/" + iIndex, oTile);
        }
    });
}());

}; // end of sap/ushell/renderers/fiori2/search/HistoryScreen.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.HistoryScreen.view') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.HistoryScreen.view');
//Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, SearchLayout */

    
    
    
    
    

    sap.ui.jsview("sap.ushell.renderers.fiori2.search.HistoryScreen", {
        createContent: function (oController) {
            var oSearchItemTemplate,
                oListSearches,
                oRecentApps;

            // recent apps
            oRecentApps =  new sap.ushell.ui.launchpad.SearchResultApps({
                showNoData: false,
                growing: true,
                growingThreshold: 2,
                growingTriggerText: {path: "i18n>showMore"},
                results: {
                    path : "/apps",
                    filters: [new sap.ui.model.Filter("size", sap.ui.model.FilterOperator.EQ, "1x1")],
                    template : new sap.ushell.ui.launchpad.SearchResultAppItem({
                        icon: "{icon}",
                        title: "{title}",
                        targetUrl: "{url}"
                    })
                },
                visible: {
                    path: "/apps/length",
                    formatter: function (iAppCount) {
                        return (iAppCount !== 0);
                    }
                }
            }).addStyleClass("sapUshellHistoryScreenRecentApps");

            // recent searches
            oSearchItemTemplate = new sap.m.StandardListItem({
                title: {
                    parts: ["sTerm", "oDataSource/label", "oDataSource/objectName/value"],
                    formatter: function (sTerm, sCategoryLabel, sObjectNameValue) {
                        if (sObjectNameValue === "$$ALL$$") {
                            return sTerm;
                        }
                        return sTerm + (sCategoryLabel ? ", " + sCategoryLabel : "");
                    }
                },
                type: "Active",
                press: oController.searchAgain
            });
            oSearchItemTemplate.data("sSearchTerm", "{sTerm}");
//            oSearchItemTemplate.data("sObjectNameValue", "{oObjectName/value}");
//            oSearchItemTemplate.data("sObjectNameLabel", "{oObjectName/label}");
            oSearchItemTemplate.data("oDataSource", "{oDataSource}");

            oListSearches = new sap.m.List({
                inset : false,
                showSeparators : sap.m.ListSeparators.Inner,
                visible: {
                    path: "/searches/length",
                    formatter: function (iAppCount) {
                        return (iAppCount !== 0);
                    }
                },
                items : {
                    path: "/searches",
                    template: oSearchItemTemplate
                }
            }).addStyleClass("sapUshellHistoryScreenRecentSearches");

            return new SearchLayout({
                bottomHeader: {
                    parts: ["/searches/length", "i18n>recent_searches"],
                    formatter: function (iSearchCount, sLabel) {
                        return iSearchCount !== 0 ? sLabel : undefined;
                    }
                },
                bottomList: oListSearches,
                topHeader: {
                    parts: ["/apps/length", "i18n>recently_viewed_apps"],
                    formatter: function (iAppCount, sLabel) {
                        return iAppCount !== 0 ? sLabel : undefined;
                    }
                },
                topList: oRecentApps
            });
        },

        getControllerName: function () {
            return "sap.ushell.renderers.fiori2.search.HistoryScreen";
        }
    });
}());

}; // end of sap/ushell/renderers/fiori2/search/HistoryScreen.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.SearchResults.view') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchResults.view');
//Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, console, SearchLayout, SearchResultListItem, SearchResultListItemDetail, SearchResultListWithDetail, SearchResultListItemFooter */

    
    
    
    
    

    // =======================================================================
    // UI5 Helper Methods
    // =======================================================================

    sap.ui.core.Control.extend("sap.search.DivLayout", {
        metadata : {
            aggregations: {
                content: {singularName: "content", multiple:true } // default type is "sap.ui.core.Control", multiple is "true"
            }
        },

        renderer : function(oRm, oControl) {      // the part creating the HTML

            var aChildren = oControl.getContent();
            for (var i = 0; i < aChildren.length; i++) { // loop over all child Controls,
                                                       // render the colored box around them
                oRm.renderControl(aChildren[i]);   // render the child Controls
            }

        }
    });


    sap.ui.core.Control.extend("sap.search.DivContainer", {      // call the new Control type "my.Hello"
                                                  // and let it inherit from sap.ui.core.Control
        metadata : {                              // the Control API
            properties : {
                "cssClass" : "string"
            },
            aggregations: {
               "content": {singularName: "content", multiple:true } // default type is "sap.ui.core.Control", multiple is "true"
            },
        },

        renderer : function(oRm, oControl) {      // the part creating the HTML
            oRm.write('<div');
            oRm.writeControlData(oControl);  // writes the Control ID
            oRm.addClass(oControl.getCssClass());
            oRm.writeClasses();
            oRm.write('>');
            var aChildren = oControl.getContent();
            for (var i = 0; i < aChildren.length; i++) { // loop over all child Controls,
                oRm.renderControl(aChildren[i]);   // render the child Controls
            }
            oRm.write('</div>');
        }
    });


    // =======================================================================
    // Result List View
    // =======================================================================
    sap.ui.jsview("sap.ushell.renderers.fiori2.search.SearchResults", {

        // create content
        // ===================================================================
        createContent: function (oController) {
            var self = this;
            self.oController = oController;
            var listProperties = {
                growing: true,
                threshold: 2,
                inset: false,
                showUnread: true,
                width: "auto",
                showNoData: false
            };
            self.resultList = new sap.m.List(listProperties);
            self.resultList.setGrowingThreshold(2000);
            self.resultList.bindAggregation("items", "/results", function (path, bData) {
                return self.assembleListItem(bData);
            });



            self.appSearchResult = self.assembleAppSearch();
            // self.appListLabel = new sap.m.Label({text:'{i18n>apps}'});

            // self.searchLayout = new SearchLayout({
            //     resultListLabel: new sap.m.Label({text:'{/resultListHeading}'}),
            //     resultListCount: new sap.m.Label({text:'({/count})'}),
            //     resultList: self.resultList,
            //     appListLabel: self.appListLabel,
            //     appList: appSearchResult,
            //     previewLabel: new sap.m.Label({text:'{i18n>more_information_on}'})
            // });

            self.resultListWithDetail = new SearchResultListWithDetail({
                resultList: self.resultList,
                preview: self.assembleDetail()
            });

            self.searchLayout = new SearchLayout({
                showMainHeader:true,
                topHeader: '{i18n>apps}',
                topList: self.appSearchResult,
                bottomHeader: sap.ushell.resources.i18n.getText("others"),
                bottomHeaderIsUnspecific: true,
                bottomList: self.resultListWithDetail,
            });

            self.searchContainer = new sap.search.DivContainer({
                content: self.searchLayout,
                cssClass : 'searchContainer'
            });

            // blub.setPreviewStatus("open");
            return self.searchContainer;

        },

        // is phone
        // ===================================================================
        isPhone: function () {
            return jQuery.device.is.phone;
        },

        newSearchTriggered: function () {
            var self = this;
            var oSearchModel = this.getModel();
            oSearchModel.setProperty("/count", "...");
            oSearchModel.setProperty("/resultListHeading", sap.ushell.resources.i18n.getText("searching"));
            self.searchContainer.setBusy(true);
            // self.resultList.removeAllItems();
            this.selectedPath = null;
        },

        searchFinished: function (result) {
            var self = this;
            var oSearchModel = this.getModel();
            if (result.append)
            {
                return;
            }
            self.searchContainer.setBusy(false);
            self.searchLayout.setBottomCount(Math.max(result.resultset.getSearchResultSet().totalcount,0));

            var category = self.oController.getCategory();
            var bottomLabel;
            if (category)
            {
                bottomLabel = category.label;
            }else{
                bottomLabel = sap.ushell.resources.i18n.getText("others");
            }

            // self.searchLayout.setBottomHeader( || 'Others');

            if (!category || category.objectName.value === '$$ALL$$' )
            {
                self.searchLayout.setBottomHeaderIsUnspecific(true);
                self.searchLayout.setBottomHeader(sap.ushell.resources.i18n.getText("others") );
                // self.searchLayout.setBottomCount(result.resultset.getSearchResultSet().totalcount);
            }else{
                self.searchLayout.setBottomHeaderIsUnspecific(false);
                self.searchLayout.setBottomHeader(bottomLabel);
            }


            var items = self.resultList.getItems();
            if (result.resultset.getSearchResultSet().totalcount !== 0)
            {
                self.searchLayout.setBottomList(self.resultListWithDetail);
                // items[0].setStatus("open");
                var path = '/results/0'; // First item
                self.selectItem(items[0], this.getModel().getProperty(path), path); // sets the detail
            }else{
                // self.resultListWithDetail.setPreview(undefined);
                self.searchLayout.setBottomList(undefined);
            }


        },

        appSearchFinished : function (oResult) {
            var self = this;
            var searchTerm = self.getController().gimmeSearchTerm();
            // if (searchTerm) { // HIGHLIGHTING!!
            //     var tiles = self.oTilesContainer.getTiles();
            //     var baseTitleElem;
            //     var regexObj = new RegExp('(' + searchTerm.replace(/[^A-Za-z0-9;]/g, "") + ')', "gi");
            //     for (var k=0; k<tiles.length; k++) {
            //         baseTitleElem = $(tiles[k].getDomRef()).find('.sapUshellTileBaseTitle');
            //         if (baseTitleElem && baseTitleElem.html()) {
            //             baseTitleElem.html(baseTitleElem.html().replace(regexObj, '<b>$1</b>'));
            //         }
            //     }
            // }
            if (oResult.totalResults === 0)
            {
                self.appsFound = false;
                self.searchLayout.setTopCount(oResult.totalResults);
                self.searchLayout.setTopList(undefined);
            }else{
                self.appsFound = true;
                self.searchLayout.setTopCount(oResult.totalResults);
                self.searchLayout.setTopList(self.appSearchResult);
            }

        },

        onResultItemsChanged: function(){
            var self = this;
            self.resultList.setBusy(false);
        },

        startLoading: function () {
            // this.searchLayout.addStyleClass('loading');
        },

        finishLoading: function () {
            // this.searchLayout.removeStyleClass('loading');
        },

        // app search area
        // ===================================================================
        assembleAppSearch: function(){
            var self = this;
            var oTilesContainer = new sap.ushell.ui.launchpad.SearchResultApps({
                showNoData: false,
                growing: true,
                growingThreshold: 2,
                growingTriggerText: {path: "i18n>showMore"},
                results: {
                    path : "/tiles",
                    template : new sap.ushell.ui.launchpad.SearchResultAppItem({
                        icon: "{icon}",
                        title: "{title}",
                        targetUrl: "{url}"
                    })
                }
            });
            // oTilesContainer.addStyleClass("appSearchContent");



            var appSearchResult = new sap.search.DivContainer({
                content: [oTilesContainer],
                cssClass : 'appSearchResults'
            });
            // appSearchResult.addStyleClass('appSearchResults');

            // var oOpenCatalogLink = new sap.m.Link({
            //     text: "{i18n>open_catalog}",
            //     press: function () {
            //         sap.ui.getCore().getEventBus().publish("openCatalog", {
            //             groupContext: null
            //         });
            //     }
            // });

            // appSearchResult.addItem(oOpenCatalogLink);
            // oOpenCatalogLink.addStyleClass("catalogLink");

            return appSearchResult;
            //**************************************************** APP SEARCH END


        },



        // assemble title item
        // ===================================================================
        assembleTitleItem: function (oData) {
            var item = new sap.m.CustomListItem();
            var title = new sap.m.Label({
                text: "{title}"
            });
            title.addStyleClass('bucketTitle');
            item.addStyleClass('bucketTitleContainer');
            item.addContent(new sap.m.HBox({
                items: [title]
            }));
            return item;
        },

        // assemble footer item
        // ===================================================================
        assembleFooterItem: function (oData) {
            var self = this;

            var item = new SearchResultListItemFooter({
                text : "{i18n>showMore}",
                showMore: function(){
                    self.getController().gimmeSomeMore();
                }
            });
            return item;
        },

        // assemble result list item
        // ===================================================================
        assembleResultListItem: function(oData, path){
            var self = this;
            var item = new SearchResultListItem({
                title: "{$$Name$$}",
                titleUrl: "{uri}",
                type: "{dataSourceName}",
                imageUrl: "{imageUrl}",
                data: oData,
                visibleAttributes: 3,
                navigate: function(){
                    // alert("navigate event received from control");
                },
                previewOpen: function(){

                    self.selectItem(item, oData, path);
                    // self.searchLayout.setRightPaneStatus('preview');
                },
                previewClose: function(){
                    // self.hideDetail(this);
                    // self.showApps();
                    // self.selectedPath = null;

                    // if(this.selectedItem){
                    //     this.selectedItem.setStatus("closed");
                    // }
                }
            });

            if (self.selectedPath === path) // Saved path
            {
                // item.setStatus("open");
                // self.selectedItem = item;
                self.selectItem(item, oData, path);
            }

            return item;
        },


        selectItem: function(item, oData, path){
            var self = this;
            if (item === self.selectedItem)
            {
                return;
            }
            self.selectedPath = path;
            self.resultListWithDetail.setPreview(self.assembleDetail(oData));
            if (item)
            {
            item.setStatus("open");
            }

            if(self.selectedItem){
                self.selectedItem.setStatus("closed");
            }
            self.selectedItem = item;

        },

        // show apps
        // ===================================================================
        showApps: function () {

        },

        assembleDetail: function(oData){
            var self = this;
            // if(self.detail){
            //     self.searchLayout.removeItem(self.detail);
            // }
            var detail = new SearchResultListItemDetail({
                headerLabel: "{i18n>more_information_on}",
                itemTitle: oData ? oData.$$Name$$ : undefined,
                itemTitleUrl: oData ? oData.uri : undefined,
                itemType: oData ? oData.dataSourceName : undefined,
                itemData: oData,
                firstDetailAttribute: 4,
                maxDetailAttributes: 11
            });
            return detail;
            // self.resultListWithDetail.setPreview(detail);
            // self.oController.itemPressed(oData);
        },

        // assemble list item
        // ===================================================================
        assembleListItem: function (bData) {
            var self = this;
            var oData = bData.getObject();
            if (oData.type === 'title') {
                return self.assembleTitleItem(oData);
            } else if (oData.type === 'footer') {
                return self.assembleFooterItem(oData);
            } else {
                return self.assembleResultListItem(oData, bData.getPath());
            }
        },



        // get controller name
        // ===================================================================
        getControllerName: function () {
            return "sap.ushell.renderers.fiori2.search.SearchResults";
        }

    });
}());

}; // end of sap/ushell/renderers/fiori2/search/SearchResults.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.SearchSuggestions.view') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchSuggestions.view');
//Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, setTimeout */

    
    

    sap.ui.jsview("sap.ushell.renderers.fiori2.search.SearchSuggestions", {
        createContent: function (oController) {
            var self = this,
                fnGroupHeaderFactory = function (oNewGroup) {
                    return new sap.m.GroupHeaderListItem({
                        title: oNewGroup.key,
                        visible: oNewGroup.key === "{i18n>suggestion_found_apps}"
                    }).addStyleClass("sapMListHdr");
                },
                oSuggestionSorter = new sap.ui.model.Sorter("type", true, function (oContext) {
                    var sKey = oContext.getProperty("type");
                    return sKey === "app" ? "{i18n>suggestion_found_apps}" : "{i18n>suggestions}";
                }),
                oCategoriesSorter = new sap.ui.model.Sorter("data/valueRaw", true),
                fnLabelFormatter = function (sLabel, sCount, sFooter, bFooter) {
                    return bFooter ? sFooter : sLabel + (sCount ? " (" + sCount + ")" : "");
                },
                oCategoryTemplate = new sap.m.Link({
                    text: {
                        parts: ["suggestions>label",
                                "suggestions>data/valueRaw"],
                        formatter: fnLabelFormatter
                    },
                    press: oController.onClickSuggestion
                }),
                oListItemTemplate = new sap.ushell.ui.launchpad.SearchSuggestionListItem({
                    text: {
                        parts: ["suggestions>label",
                                "suggestions>valueRaw",
                                "i18n>suggestionFooter",
                                "suggestions>isGroupFooter"],
                        formatter: fnLabelFormatter
                    },
                    icon: "{suggestions>icon}",
                    isGroupFooter: "{suggestions>isGroupFooter}",
                    type: sap.m.ListType.Active,
                    press: oController.onClickSuggestion,
                    categories: {
                        path: "suggestions>categories",
                        template: oCategoryTemplate,
                        sorter: oCategoriesSorter
                    }
                }),
                oListSuggestions = new sap.ushell.ui.launchpad.SearchSuggestionList({
                    pressUpFirstItem: this.focusSearchfield,
                    pressEsc: this.focusSearchfield,
                    visible: {
                        parts: ["suggestions>/visible",
                                "suggestions>/items/0/visible",
                                "suggestions>/suggestionsVisible"],
                        formatter: function (bGlobal, bApps, bSuggestions) {
                            if (bGlobal && (bApps || bSuggestions)) {
                                self.showSuggestions();
                            } else {
                                self.hideSuggestions();
                            }
                            return true;
                        }
                    },
                    items: {
                        path: "suggestions>/items",
                        sorter: oSuggestionSorter,
                        groupHeaderFactory: fnGroupHeaderFactory,
                        filters: [new sap.ui.model.Filter("visible", sap.ui.model.FilterOperator.EQ, true)],
                        template: oListItemTemplate
                    }
                });

            sap.ui.getCore().byId("sfOverlay").addEventDelegate({
                onsapdown: function (oEvent) {
                    if (oListSuggestions.getItems().length > 0) {
                        oListSuggestions.setDisableKeyboardNavigation(false);
                        oListSuggestions.focus();

                        oEvent.preventDefault();
                        oEvent.stopPropagation();
                    }
                },
                onsapescape: function (oEvent) {
                    oController.closeSuggestions();

                    oEvent.preventDefault();
                    oEvent.stopPropagation();
                }
            });

            return oListSuggestions;
        },

        focusSearchfield: function (oEvent) {
            sap.ui.getCore().byId("sfOverlay").focus();
        },

        onAfterRendering: function () {
            if (!this.getModel("suggestions").getProperty("/visible")) {
                this.hideSuggestions();
            }
        },

        hideSuggestions: function () {
            this.$().slideUp(200);
        },

        showSuggestions: function () {
            this.$().slideDown(200);
            if (this.getParent() && this.getParent().scrollTo) {
                this.getParent().scrollTo(0);
            } else {
                this.$().parent().scrollTop(0);
            }
        },

        getControllerName: function () {
            return "sap.ushell.renderers.fiori2.search.SearchSuggestions";
        }
    });
}());

}; // end of sap/ushell/renderers/fiori2/search/SearchSuggestions.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.AppConfiguration') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.AppConfiguration");
    

    /**
     * AppConfiguration service.
     *
     * @private
     */
    function AppConfiguration() {
        var oMetadata = {},
            oCurrentApplication = null;

        /**
         * Returns the current metadata.
         * 
         * {
         *      title: {string}
         *      library: {string}
         *      version: {string}
         *      fullWidth: {boolean}
         * }  
         * 
         * @returns {object}
         *   a copy of the metadata object
         *
         * @private
         */
        this.getMetadata = function (oApplication) {
            if (!oApplication) {
                oApplication = oCurrentApplication;
            }

            if (oApplication) {
                var sKey = this.getApplicationUrl(oApplication);
                if (!(oMetadata.hasOwnProperty(sKey))) {
                    this.addMetadata(oApplication);
                }
                return oMetadata[sKey] || {};
            }
            return {};
        };

        /**
         * @private
         */
        this.setCurrentApplication = function (oApplication) {
            oCurrentApplication = oApplication;
        };

        /**
         * Get a settings control to display about dialog and system infos.
         *
         * @returns {sap.ushell.ui.footerbar.SettingsButton}
         *      a settings control which can be embedded where ever its needed
         * @private
         */
        this.getSettingsControl = function () {
            return new sap.ushell.ui.footerbar.SettingsButton();
        };

        /**
         * @private
         */
        this.getApplicationName = function (oApplication) {
            /*jslint regexp: true */
            var aMatches,
                sAdditionalInformation = (oApplication && oApplication.additionalInformation) || null;

            if (sAdditionalInformation) {
                // SAPUI5.Component=<fully-qualified-component-name>
                aMatches = /^SAPUI5\.Component=(.+)$/i.exec(sAdditionalInformation);
                if (aMatches) {
                    // determine namespace, view name, and view type
                    return aMatches[1];
                }
            }
            return null;
        };
        /**
         * @private
         */
        this.getApplicationUrl = function (oApplication) {
            var sUrl = (oApplication && oApplication.url) || null,
                iIndex;

            if (sUrl) {
                iIndex = sUrl.indexOf("?");
                if (iIndex >= 0) {
                    // pass GET parameters of URL via component data
                    // as member startupParameters  ( to allow blending with other oComponentData usage, e.g.
                    // extensibility use case
                    sUrl = sUrl.slice(0, iIndex);
                }
                if (sUrl.slice(-1) !== '/') {
                    sUrl += '/'; // ensure URL ends with a slash
                }
            }
            return sUrl;
        };
        /**
         * @private
         */
        this.addMetadata = function (oApplication) {
            try {
                var sComponentName = this.getApplicationName(oApplication),
                    sUrl = this.getApplicationUrl(oApplication),
                    sComponentFile,
                    oComponent,
                    oResourceBundle,
                    sResourceUrl,
                    oLocalMetadata,
                    oConfig,
                    iIndex,
                    oProperty,
                    oValue,
                    aProperties = [ "libraryName", "version", "fullWidth",
                                    "title",
                                    "icon",
                                    "favIcon",
                                    "homeScreenIconPhone",
                                    "homeScreenIconPhone@2",
                                    "homeScreenIconTablet",
                                    "homeScreenIconTablet@2",
                                    "startupImage320x460",
                                    "startupImage640x920",
                                    "startupImage640x1096",
                                    "startupImage768x1004",
                                    "startupImage748x1024",
                                    "startupImage1536x2008",
                                    "startupImage1496x2048"
                                ],
                    potentiallyRelativeUrls,
                    sComponentUrl,
                    isUrlRelative;


                if (sUrl && !(oMetadata.hasOwnProperty(sUrl))) {
                    oMetadata[sUrl] = {};
                    oComponent = sap.ui.component.load({ url : sUrl, name : sComponentName });
                    oLocalMetadata = oComponent.getMetadata();
                    if (oLocalMetadata) {
                        oConfig = oLocalMetadata && oLocalMetadata.getConfig();
                        if (oConfig) {
                            sResourceUrl = oConfig.resourceBundle || "";
                            if (sResourceUrl) {
                                if (sResourceUrl.slice(0, 1) !== '/') {
                                    sResourceUrl = sUrl + sResourceUrl;
                                }
                                oResourceBundle = jQuery.sap.resources({
                                    url: sResourceUrl,
                                    locale : sap.ui.getCore().getConfiguration().getLanguage()
                                });
                            }
                        }

                        for (iIndex = 0; iIndex < aProperties.length; iIndex = iIndex + 1) {
                            oProperty = aProperties[iIndex];
                            if (oResourceBundle && oConfig.hasOwnProperty(oProperty + "Resource")) {
                                oValue = oResourceBundle.getText(oConfig[oProperty + "Resource"]);
                            } else if (oConfig.hasOwnProperty(oProperty)) {
                                oValue = oConfig[oProperty];
                            } else {
                                oValue = oLocalMetadata["_s" + oProperty.substring(0, 1).toUpperCase() + oProperty.slice(1)];
                            }

                            oMetadata[sUrl][oProperty] = oValue;
                        }
                    }

                    /*
                     * Special behavior for relative URLs:
                     * Relative URLs are considered relative to the folder containing the Component.js,
                     * which requires adjustments here. Otherwise the browser would interpret them as
                     * relative to the location of the HTML file, which might be different and also
                     * hard to guess for app developers.
                     */
                    potentiallyRelativeUrls = [
                        "favIcon",
                        "homeScreenIconPhone",
                        "homeScreenIconPhone@2",
                        "homeScreenIconTablet",
                        "homeScreenIconTablet@2",
                        "startupImage320x460",
                        "startupImage640x920",
                        "startupImage640x1096",
                        "startupImage768x1004",
                        "startupImage748x1024",
                        "startupImage1536x2008",
                        "startupImage1496x2048"
                    ];

                    sComponentUrl = (sUrl && sUrl[sUrl.length - 1] === '/') ?
                            sUrl.substring(0, sUrl.length - 1) : sUrl;

                    isUrlRelative = function (sUrl) {
                        /*jslint regexp : true*/
                        if (sUrl.match(/^https?:\/\/.*/)) {
                            return false;
                        }
                        return sUrl && sUrl[0] !== '/';
                    };

                    potentiallyRelativeUrls.forEach(function (sPropName) {
                        var sOrigValue = oMetadata[sUrl][sPropName],
                            sFinalValue = null;
                        // Some URL properties might not be defined.
                        if (sOrigValue) {
                            sFinalValue = isUrlRelative(sOrigValue) ?
                                    sComponentUrl + "/" + sOrigValue : sOrigValue;
                        }
                        oMetadata[sUrl][sPropName] = sFinalValue;
                    });
                }
            } catch (err) {
                jQuery.sap.log.warning("Application configuration could not be parsed");
            }
        };

    } // Metadata

    /**
     * The Unified Shell App configuration service as a singleton object. 
     * 
     * @class The unified shell's AppConfiguration service.
     * 
     * @name sap.ushell.services.AppConfiguration
     * @since 1.15.0
     * @private
     */
    sap.ushell.services.AppConfiguration = new AppConfiguration();

}());

}; // end of sap/ushell/services/AppConfiguration.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.Container') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * @fileOverview The Unified Shell's container which manages renderers, services, and adapters.
 *
 * @version 1.16.3
 */
/**
 * @namespace Namespace for Unified Shell.
 *
 * @name sap.ushell
 * @see sap.ushell.adapters
 * @see sap.ushell.renderers
 * @see sap.ushell.services
 * @since 1.15.0
 * @public
 */
/**
 * @namespace Default namespace for Unified Shell adapters. Note that there should be subordinate
 * namespaces per platform, e.g. <code>sap.ushell.adapters.abap</code> or
 * <code>sap.ushell.adapters.demo</code>.
 *
 * @name sap.ushell.adapters
 * @see sap.ushell.adapters.abap
 * @see sap.ushell.adapters.demo
 * @since 1.15.0
 * @public
 */
/**
 * @namespace Default namespace for Unified Shell renderers. Note that there should be subordinate
 * namespaces per renderer, e.g. <code>sap.ushell.renderers.standard</code>.
 *
 * @name sap.ushell.renderers
 * @see sap.ushell.renderers.standard
 * @since 1.15.0
 * @public
 */
/**
 * @namespace Default namespace for Unified Shell services. They can usually be placed directly
 * into this namespace, e.g. <code>sap.ushell.services.Container</code>.
 *
 * @name sap.ushell.services
 * @see sap.ushell.services.Container
 * @since 1.15.0
 * @public
 */
(function () {
    "use strict";
    /*global jQuery, sap, setTimeout, window */
    jQuery.sap.declare("sap.ushell.services.Container");

    
    

    /**
     * Creates an adapter. Loads the adapter module if necessary. The resulting module name is
     * <code>"sap.ushell.adapters." + oSystem.platform + "." + sName + "Adapter"</code>.
     *
     * @param {string} sName
     *     the adapter name
     * @param {sap.ushell.System} [oSystem]
     *     the target system, if <code>undefined</code> the logon system is used
     * @param {string} [sParameter]
     *     a parameter which is passed to the constructor (since 1.15.0)
     * @returns {object}
     *     the adapter
     * @public
     */
    function createAdapter(sName, oSystem, sParameter) {
        var sAdapterName
            = "sap.ushell.adapters." + oSystem.getPlatform() + "." + sName + "Adapter";
        jQuery.sap.require(sAdapterName);
        return new (jQuery.sap.getObject(sAdapterName))(oSystem, sParameter);
    }

    /**
     * @class The Unified Shell's container which manages renderers, services, and adapters.
     *
     * @name sap.ushell.services.Container
     * @see sap.ushell.bootstrap
     * @since 1.15.0
     * @public
     */
    /**
     * Constructs a new Unified Shell container for the given container adapter.
     *
     * @param {object} oAdapter
     *     the platform-specific adapter corresponding to this service
     *
     * @private
     * @since 1.15.0
     */
    function Container(oAdapter) {
        var mServicesByName = new sap.ushell.utils.Map(),
            mRemoteSystems = {};

        /**
         * Creates a new renderer instance for the given renderer name.
         * <p>
         * Names without a dot are interpreted as package names within the default naming convention
         * and will be expanded to
         * <code>"sap.ushell.renderers." + sRendererName + ".Renderer"</code>.
         * Names containing a dot are used "as is".
         * <p>
         * The resulting name must point to a SAPUI5 object which is first required and then
         * created (constructor call without arguments).
         * The object must be either a control (i.e. extend <code>sap.ui.core.Control</code>) or a
         * UI component (i.e. extend <code>sap.ui.core.UIComponent</code>), which is then
         * automatically wrapped into a <code>sap.ui.core.ComponentContainer</code> control by this
         * method! This <code>sap.ui.core.ComponentContainer</code> is created with
         * <code>height</code> and <code>width</code> set to "100%" to accommodate the complete
         * available space.
         * <p>
         * The returned renderer is supposed to be added to a direct child (e.g. <code>DIV</code>)
         * of the <code>BODY</code> of the page and there should be no other parts of the page
         * consuming space outside the renderer.
         * Use CSS class <code>sapUShellFullHeight</code> at <code>HTML</code>, <code>BODY</code>
         * and at the element to which the renderer is added to allow the renderer to use 100%
         * height.
         *
         * @param {string} sRendererName
         *     the renderer name, e.g. "standard" or "acme.foo.bar.MyRenderer"
         * @returns {sap.ui.core.Control}
         *     the renderer
         *
         * @methodOf sap.ushell.services.Container#
         * @name createRenderer
         * @since 1.15.0
         * @public
         */
        this.createRenderer = function (sRendererName) {
            var sComponentName, oRenderer;

            if (!sRendererName) {
                throw new Error("Missing renderer name");
            }
            sComponentName = sRendererName.indexOf(".") < 0
                ? "sap.ushell.renderers." + sRendererName + ".Renderer"
                : sRendererName;
            jQuery.sap.require(sComponentName);
            oRenderer = new (jQuery.sap.getObject(sComponentName))();
            if (oRenderer instanceof sap.ui.core.UIComponent) {
                oRenderer = new sap.ui.core.ComponentContainer(
                    {component: oRenderer, height: "100%", width: "100%"}
                );
            }
            if (!(oRenderer instanceof sap.ui.core.Control)) {
                throw new Error("Unsupported renderer type for name " + sRendererName);
            }
            return oRenderer;
        };

        /**
         * Returns the logon system.
         *
         * @returns {sap.ushell.System}
         *     object providing information about the system where the container is logged in.
         *     since 1.15.0 the return value is of type <code>sap.ushell.System</code>
         *
         * @since 1.15.0
         * @private
         */
        this.getLogonSystem = function () {
            return oAdapter.getSystem();
        };

        /**
         * Returns the logged-in user.
         *
         * @returns {sap.ushell.User}
         *      object providing information about the logged-in user
         *
         * @since 1.15.0
         * @private
         */
        this.getUser = function () {
            return oAdapter.getUser();
        };

        /**
         * Gets the service with the given name, creating it if necessary. Services are singleton
         * objects identified by their (resulting) name.
         * <p>
         * Names without a dot are interpreted as service names within the default naming convention
         * and will be expanded to <code>"sap.ushell.services." + sServiceName</code>.
         * Names containing a dot are not yet supported!
         * The resulting name must point to a constructor function which is first required as a
         * SAPUI5 module and then called to create a service instance. The service will be passed a
         * corresponding service adapter for the current logon system as well as a callback
         * interface (of virtual type <code>sap.ushell.services.ContainerInterface</code>) to the
         * container providing a method <code>createAdapter(oSystem)</code> to create further
         * adapters for the same service but connected to remote systems.
         *
         * @param {string} sServiceName
         *     the service name, e.g. "Menu"
         * @param {string} [sParameter]
         *     a parameter which is passed to the service constructor and every adapter
         *     constructor. (since 1.15.0)
         * @returns {object}
         *     the service
         *
         * @methodOf sap.ushell.services.Container#
         * @name getService
         * @see sap.ushell.services.ContainerInterface
         * @since 1.15.0
         * @public
         */
        this.getService = function (sServiceName, sParameter) {
            /**
             * @class This is a virtual type for the callback interface passed by
             * {@link sap.ui.Container.getService()} to any newly created service.
             * @name sap.ushell.services.ContainerInterface
             * @see sap.ushell.services.Container#getService
             * @since 1.15.0
             * @public
             */
            var oContainerInterface = {},
                sModuleName = "sap.ushell.services." + sServiceName,
                sKey = sModuleName + "/" + (sParameter || ""),
                Service, // Service constructor function
                oService,
                oServiceAdapter;

            /**
             * Creates a new adapter for the given remote system, corresponding to the service
             * this container interface was passed to at construction time.
             *
             * @param {sap.ushell.System} oSystem
             *     information about the remote system to which the resulting adapter should
             *     connect
             * @returns {jQuery.Deferred}
             *     a <code>jQuery.Deferred</code> object's promise receiving the remote adapter
             *
             * @name createAdapter
             * @methodOf sap.ushell.services.ContainerInterface#
             * @since 1.15.0
             * @public
             */
            function createRemoteAdapter(oSystem) {
                var oDeferred = new jQuery.Deferred();
                if (!oSystem) {
                    throw new Error("Missing system");
                }
                // Note: this might become really asynchronous once the remote adapter is loaded
                // from the remote system itself
                oDeferred.resolve(createAdapter(sServiceName, oSystem, sParameter));
                sap.ushell.Container.addRemoteSystem(oSystem);
                return oDeferred.promise();
            }

            if (!sServiceName) {
                throw new Error("Missing service name");
            }
            if (sServiceName.indexOf(".") >= 0) {
                //TODO support this once we have some configuration and can thus find adapters
                throw new Error("Unsupported service name");
            }
            if (!mServicesByName.containsKey(sKey)) {
                jQuery.sap.require(sModuleName);
                Service = jQuery.sap.getObject(sModuleName);

                if (Service.hasNoAdapter === true) {
                    // has no adapter: pass container interface and parameter
                    oService = new Service(oContainerInterface, sParameter);
                } else {
                    // pass adapter for logon system as well as container interface and parameter
                    oServiceAdapter
                        = createAdapter(sServiceName, oAdapter.getSystem(), sParameter);
                    oContainerInterface.createAdapter = createRemoteAdapter;
                    oService = new Service(oServiceAdapter, oContainerInterface, sParameter);
                }

                mServicesByName.put(sKey, oService);
                return oService;
            }
            return mServicesByName.get(sKey);
        };

        /**
         * Adds a system to the list of involved remote systems. When calling logout()
         * this list is processed to do the logout for via its specific adapter.
         *
         * @param  {sap.ushell.System} oRemoteSystem
         *
         * @since 1.15.0
         * @public
         */
        this.addRemoteSystem = function (oRemoteSystem) {
            //TODO: check equality by (alias,baseUrl,platform?)
            if (Object.prototype.hasOwnProperty.call(mRemoteSystems, oRemoteSystem.getAlias())) {
                jQuery.sap.log.debug("Remote system " + JSON.stringify(oRemoteSystem)
                    + "already added!", null, "sap.ushell.Container");
                return;
            }

            mRemoteSystems[oRemoteSystem.getAlias()] = oRemoteSystem;
            jQuery.sap.log.debug("Added " + JSON.stringify(oRemoteSystem), null,
                "sap.ushell.Container");
        };

        /**
         * Logs out the current user from all relevant backend systems, especially from the logon
         * system itself.
         * @returns {jQuery.Deferred}
         *          a <code>jQuery.Deferred</code> object's promise to be resolved when logout is
         *          finished, even when it failed
         * @since 1.15.0
         * @public
         */
        this.logout = function () {
            var oDeferred = new jQuery.Deferred(),
                aRemoteLogoutPromises = [];

            function addRemoteSystems(oContainerInterface) {
                var oDeferredReadCatalogs = new jQuery.Deferred(),
                    oPbs;

                oPbs = oContainerInterface.getService("PageBuilding").getFactory().
                    getPageBuildingService();

                oPbs.readAllCatalogsForUser("type eq 'H'",
                    function (oData) { //success handler
                        var aCatalogs = oData.results;
                        if (aCatalogs) {
                            aCatalogs.forEach(function (oCatalog) {
                                oContainerInterface.addRemoteSystem(new sap.ushell.System({
                                    alias : oCatalog.systemId,
                                    platform: "hana"
                                }));
                            });
                        }
                        oDeferredReadCatalogs.resolve();
                    },
                    function (sError) {//error handler
                        jQuery.sap.log.error("Reading HANA catalogs failed: " + sError, null,
                            "sap.ushell.Container");
                        oDeferredReadCatalogs.reject();
                    });
                return oDeferredReadCatalogs.promise();
            }

            // do the logout for each remote system
            addRemoteSystems(this).always(function () {
                Object.keys(mRemoteSystems).forEach(function (sAlias) {
                    aRemoteLogoutPromises.push(
                        createAdapter("Container", mRemoteSystems[sAlias]).logout(false)
                    );
                });

                // wait for all remote logouts to be finished
                jQuery.when.apply(jQuery, aRemoteLogoutPromises).done(function () {
                    // do the logout for the logon system
                    oAdapter.logout(true);
                    mRemoteSystems = {};
                    oDeferred.resolve();
                });
            });
            return oDeferred.promise();
        };
    }

    /**
     * Initializes the Unified Shell container for the given platform. This method must be called
     * exactly once in the very beginning by platform-specific code in order to bootstrap the
     * container. As soon as the returned promise has been resolved, the container will be available
     * as a singleton object <code>sap.ushell.Container</code>.
     * <p>
     * For convenience, platform-specific bootstrap code is available and can be easily included
     * (<b>before</b> the SAPUI5 bootstrap) by a corporate shell as follows:
     * <pre>
     * &lt;script src="/sap/public/bc/ui5_ui5/resources/sap/ushell_abap/bootstrap/abap.js"&gt;&lt;/script&gt;
     * &lt;script id="sap-ui-bootstrap" src=".../sap-ui-core.js"&gt;&lt;/script&gt;
     * </pre>
     * This bootstrap code will automatically defer the initialization of SAPUI5 until the
     * container is available. This is the preferred way of bootstrapping the Unified Shell!
     * <p>
     * Note: For SAPUI5 application projects the recommended way is to add a dependency to the
     * "sap.ushell_abap" library (<code>&lt;groupId&gt;com.sap.ushell&lt;/groupId&gt;
     * &lt;artifactId&gt;ushell_abap&lt;/artifactId&gt;</code>) and load the bootstrap code via the
     * application's resources folder:
     * <pre>
     * &lt;script src=".../resources/sap/ushell_abap/bootstrap/abap.js"&gt;&lt;/script&gt;
     * &lt;script id="sap-ui-bootstrap" src=".../sap-ui-core.js"&gt;&lt;/script&gt;
     * </pre>
     * <p>
     * Since 1.15.0 you can provide a function named
     * <code>window['sap.ushell.bootstrap.callback']</code> to be called back from this method
     * in an asynchronous fashion. SAPUI5's bootstrap is ongoing then (same restrictions apply
     * like for <code>window['sap-ui-config']['xx-bootTask']</code>) and the Unified Shell
     * container has not yet finished its bootstrap! You cannot delay the bootstrap of SAPUI5 or
     * the Unified Shell container and any errors will be ignored! This callback is useful in
     * order to send asynchronous backend requests at the earliest opportunity without delaying
     * the core bootstrap of SAPUI5 and Unified Shell container.
     *
     * @param {string} sPlatform
     *     the target platform, e.g. "abap" or "demo" (Note: there is no fixed enumeration of
     *     possible platforms!)
     * @returns {jQuery.Promise}
     *     a promise that is resolved once the container is available
     *
     * @see sap.ushell.Container
     * @since 1.15.0
     * @public
     */
    sap.ushell.bootstrap = function (sPlatform) {
        var oAdapter;

        if (sap.ushell.Container !== undefined) {
            throw new Error("Cannot initialize twice");
        }
        sap.ushell.Container = null; // "loading..."

        if (typeof window["sap.ushell.bootstrap.callback"] === "function") {
            setTimeout(window["sap.ushell.bootstrap.callback"]);
        }

        oAdapter = createAdapter("Container", new sap.ushell.System({
            // this is the initial logon system object
            alias: "",
            platform: sPlatform
        }));

        return oAdapter.load().done(function () {
            /**
             * The Unified Shell container as a singleton object. This object will only be
             * available after <code>sap.ushell.bootstrap()</code> has finished.
             *
             * @since 1.15.0
             * @type sap.ushell.services.Container
             * @see sap.ushell.bootstrap
             * @public
             */
            sap.ushell.Container = new Container(oAdapter);
        });
    };
}());

}; // end of sap/ushell/services/Container.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.LoginDetailsButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.LoginDetailsButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.LoginDetailsButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/LoginDetailsButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/footerbar/LoginDetailsButton
 * @extends sap.m.Button
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.footerbar.LoginDetailsButton
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.LoginDetailsButton", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell"
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.LoginDetailsButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.LoginDetailsButton.extend
 * @function
 */


// Start of sap/ushell/ui/footerbar/LoginDetailsButton.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    /*global jQuery, sap, window*/

    jQuery.sap.require('sap.ui.layout.form.SimpleForm'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Label'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Text'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Input'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Button'); // unlisted dependency retained

    
    

    jQuery.sap.declare("sap.ushell.ui.footerbar.LoginDetailsButton");

    /**
     * LoginDetailsButton
     *
     * @name sap.ushell.ui.footerbar.LoginDetailsButton
     * @private
     * @since 1.16.0
     */
    sap.ushell.ui.footerbar.LoginDetailsButton.prototype.init = function () {
        this.setIcon('sap-icon://person-placeholder');
        this.setWidth('100%');
        this.setText(sap.ushell.resources.i18n.getText("loginDetails"));
        this.attachPress(this.showLoginDetailsDialog);
        this.setEnabled(!!sap.ushell.Container);
    };

    sap.ushell.ui.footerbar.LoginDetailsButton.prototype.showLoginDetailsDialog = function () {
        var user = sap.ushell.Container.getUser() || {},
            translationBundle = sap.ushell.resources.i18n,
            oSimpleForm = new sap.ui.layout.form.SimpleForm({
                editable : false,
                content : [
                    new sap.m.Label({text: translationBundle.getText("userFld")}),
                    new sap.m.Text({text: user.getFullName() || ''}),
                    new sap.m.Label({text: translationBundle.getText("serverFld")}),
                    new sap.m.Text({text: window.location.host }),
                    new sap.m.Label({text: translationBundle.getText("languageFld")}),
                    new sap.m.Text({text: user.getLanguage() || ''})
                ]
            }),
            oDialog,
            okButton = new sap.m.Button({
                text : translationBundle.getText("okBtn"),
                press : function () {
                    oDialog.close();
                }
            });

        oDialog = new sap.m.Dialog({
            title: translationBundle.getText("loginDetails"),
            contentWidth : "300px",
            leftButton: okButton,
            afterClose : function () {
                oDialog.destroy();
            }
        });

        oDialog.addContent(oSimpleForm);
        oDialog.open();
    };
}());
}; // end of sap/ushell/ui/footerbar/LoginDetailsButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.HeaderTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.HeaderTile.
jQuery.sap.declare("sap.ushell.ui.launchpad.HeaderTile");




/**
 * Constructor for a new ui/launchpad/HeaderTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeaderLevel headerLevel} : sap.m.HeaderLevel (default: sap.m.HeaderLevel.H3)</li>
 * <li>{@link #getHeaderText headerText} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ushell.ui.launchpad.Tile#constructor sap.ushell.ui.launchpad.Tile}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A HeaderTile acts as a separator inside a TileContainer.
 * @extends sap.ushell.ui.launchpad.Tile
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.launchpad.HeaderTile
 */
sap.ushell.ui.launchpad.Tile.extend("sap.ushell.ui.launchpad.HeaderTile", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell",
	properties : {
		"headerLevel" : {type : "sap.m.HeaderLevel", group : "Appearance", defaultValue : sap.m.HeaderLevel.H3},
		"headerText" : {type : "string", group : "Appearance", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.HeaderTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.HeaderTile.extend
 * @function
 */


/**
 * Getter for property <code>headerLevel</code>.
 * 
 *
 * Default value is <code>H3</code>
 *
 * @return {sap.m.HeaderLevel} the value of property <code>headerLevel</code>
 * @public
 * @name sap.ushell.ui.launchpad.HeaderTile#getHeaderLevel
 * @function
 */

/**
 * Setter for property <code>headerLevel</code>.
 *
 * Default value is <code>H3</code> 
 *
 * @param {sap.m.HeaderLevel} oHeaderLevel  new value for property <code>headerLevel</code>
 * @return {sap.ushell.ui.launchpad.HeaderTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.HeaderTile#setHeaderLevel
 * @function
 */


/**
 * Getter for property <code>headerText</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>headerText</code>
 * @public
 * @name sap.ushell.ui.launchpad.HeaderTile#getHeaderText
 * @function
 */

/**
 * Setter for property <code>headerText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeaderText  new value for property <code>headerText</code>
 * @return {sap.ushell.ui.launchpad.HeaderTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.HeaderTile#setHeaderText
 * @function
 */


// Start of sap/ushell/ui/launchpad/HeaderTile.js
// Copyright (c) 2013 SAP AG, All Rights Reserved

/**
 * @name sap.ushell.ui.launchpad.HeaderTile
 * 
 * @private
 */
//sap.ushell.HeaderTile.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap/ushell/ui/launchpad/HeaderTile.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.PlusTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.PlusTile.
jQuery.sap.declare("sap.ushell.ui.launchpad.PlusTile");




/**
 * Constructor for a new ui/launchpad/PlusTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getGroupId groupId} : string (default: '')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.PlusTile#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ushell.ui.launchpad.Tile#constructor sap.ushell.ui.launchpad.Tile}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A specialized tile showing a plus icon.
 * @extends sap.ushell.ui.launchpad.Tile
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.launchpad.PlusTile
 */
sap.ushell.ui.launchpad.Tile.extend("sap.ushell.ui.launchpad.PlusTile", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell",
	properties : {
		"groupId" : {type : "string", group : "Misc", defaultValue : ''}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.PlusTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.PlusTile.extend
 * @function
 */

sap.ushell.ui.launchpad.PlusTile.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>groupId</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>groupId</code>
 * @public
 * @name sap.ushell.ui.launchpad.PlusTile#getGroupId
 * @function
 */

/**
 * Setter for property <code>groupId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sGroupId  new value for property <code>groupId</code>
 * @return {sap.ushell.ui.launchpad.PlusTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.PlusTile#setGroupId
 * @function
 */


/**
 * Fired when user clicks on the tile 
 *
 * @name sap.ushell.ui.launchpad.PlusTile#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ushell.ui.launchpad.PlusTile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.PlusTile</code>.<br/> itself. 
 *  
 * Fired when user clicks on the tile 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.PlusTile</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.PlusTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.PlusTile#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ushell.ui.launchpad.PlusTile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.PlusTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.PlusTile#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.PlusTile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.PlusTile#firePress
 * @function
 */


// Start of sap/ushell/ui/launchpad/PlusTile.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/
/**
 * @name sap.ushell.ui.launchpad.PlusTile
 * 
 * @private
 */
(function () {
    "use strict";

    sap.ushell.ui.launchpad.PlusTile.prototype.onclick = function () {
        this.firePress();
    };

    // Override setters to avoid rerenderings
    sap.ushell.ui.launchpad.PlusTile.prototype.setGroupId = function (v) {
        this.setProperty("groupId", v, true);        // set property, but suppress rerendering
        return this;
    };
}());

}; // end of sap/ushell/ui/launchpad/PlusTile.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.DynamicTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.tile.DynamicTile.
jQuery.sap.declare("sap.ushell.ui.tile.DynamicTile");




/**
 * Constructor for a new ui/tile/DynamicTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getNumberValue numberValue} : string (default: '0.0')</li>
 * <li>{@link #getNumberState numberState} : sap.ushell.ui.tile.State (default: sap.ushell.ui.tile.State.Neutral)</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getNumberDigits numberDigits} : int (default: 0)</li>
 * <li>{@link #getStateArrow stateArrow} : sap.ushell.ui.tile.StateArrow (default: sap.ushell.ui.tile.StateArrow.None)</li>
 * <li>{@link #getNumberFactor numberFactor} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ushell.ui.tile.TileBase#constructor sap.ushell.ui.tile.TileBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * An applauncher for apps that need to display dynamically updated information
 * @extends sap.ushell.ui.tile.TileBase
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.tile.DynamicTile
 */
sap.ushell.ui.tile.TileBase.extend("sap.ushell.ui.tile.DynamicTile", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell",
	properties : {
		"numberValue" : {type : "string", group : "Data", defaultValue : '0.0'},
		"numberState" : {type : "sap.ushell.ui.tile.State", group : "Appearance", defaultValue : sap.ushell.ui.tile.State.Neutral},
		"numberUnit" : {type : "string", group : "Data", defaultValue : null},
		"numberDigits" : {type : "int", group : "Appearance", defaultValue : 0},
		"stateArrow" : {type : "sap.ushell.ui.tile.StateArrow", group : "Appearance", defaultValue : sap.ushell.ui.tile.StateArrow.None},
		"numberFactor" : {type : "string", group : "Data", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.tile.DynamicTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.tile.DynamicTile.extend
 * @function
 */


/**
 * Getter for property <code>numberValue</code>.
 * a number to be formatted with numberDigits decimal digits. Can be sap.ui.core.string as well.
 *
 * Default value is <code>0.0</code>
 *
 * @return {string} the value of property <code>numberValue</code>
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#getNumberValue
 * @function
 */

/**
 * Setter for property <code>numberValue</code>.
 *
 * Default value is <code>0.0</code> 
 *
 * @param {string} sNumberValue  new value for property <code>numberValue</code>
 * @return {sap.ushell.ui.tile.DynamicTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#setNumberValue
 * @function
 */


/**
 * Getter for property <code>numberState</code>.
 * The state of the number, indicating positive or negative conditions
 *
 * Default value is <code>Neutral</code>
 *
 * @return {sap.ushell.ui.tile.State} the value of property <code>numberState</code>
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#getNumberState
 * @function
 */

/**
 * Setter for property <code>numberState</code>.
 *
 * Default value is <code>Neutral</code> 
 *
 * @param {sap.ushell.ui.tile.State} oNumberState  new value for property <code>numberState</code>
 * @return {sap.ushell.ui.tile.DynamicTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#setNumberState
 * @function
 */


/**
 * Getter for property <code>numberUnit</code>.
 * The unit in which numberValue is measured
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>numberUnit</code>
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#getNumberUnit
 * @function
 */

/**
 * Setter for property <code>numberUnit</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumberUnit  new value for property <code>numberUnit</code>
 * @return {sap.ushell.ui.tile.DynamicTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#setNumberUnit
 * @function
 */


/**
 * Getter for property <code>numberDigits</code>.
 * the number of fractional decimal digits
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>numberDigits</code>
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#getNumberDigits
 * @function
 */

/**
 * Setter for property <code>numberDigits</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iNumberDigits  new value for property <code>numberDigits</code>
 * @return {sap.ushell.ui.tile.DynamicTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#setNumberDigits
 * @function
 */


/**
 * Getter for property <code>stateArrow</code>.
 * the state of the trend indicator
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ushell.ui.tile.StateArrow} the value of property <code>stateArrow</code>
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#getStateArrow
 * @function
 */

/**
 * Setter for property <code>stateArrow</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ushell.ui.tile.StateArrow} oStateArrow  new value for property <code>stateArrow</code>
 * @return {sap.ushell.ui.tile.DynamicTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#setStateArrow
 * @function
 */


/**
 * Getter for property <code>numberFactor</code>.
 * defines a scaling factor (like "%", "M" or "k") right to a scaled number
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>numberFactor</code>
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#getNumberFactor
 * @function
 */

/**
 * Setter for property <code>numberFactor</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumberFactor  new value for property <code>numberFactor</code>
 * @return {sap.ushell.ui.tile.DynamicTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#setNumberFactor
 * @function
 */


// Start of sap/ushell/ui/tile/DynamicTile.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * Applauncher displaying an application that provides a service that returns
 * dynamic data.
 * 
 * @name sap.ushell.ui.tile.DynamicTile
 * 
 * @since   1.15.0
 * @private
 */

}; // end of sap/ushell/ui/tile/DynamicTile.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.DynamicTileRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    jQuery.sap.declare("sap.ushell.ui.tile.DynamicTileRenderer");
    
    jQuery.sap.require('sap.ushell.ui.tile.State'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained


    /**
     * @name sap.ushell.ui.tile.DynamicTileRenderer.
     * @static
     * @private
     */
    sap.ushell.ui.tile.DynamicTileRenderer = sap.ui.core.Renderer.extend(sap.ushell.ui.tile.TileBaseRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    sap.ushell.ui.tile.DynamicTileRenderer.renderPart = function (oRm, oControl) {
        // write the HTML into the render manager
        oRm.write("<div");
        oRm.addClass("sapUshellDynamicTile");
        oRm.writeClasses();
        oRm.write(">");

        // dynamic data
        oRm.write("<div");
        oRm.addClass("sapUshellDynamicTileData");
        oRm.addClass(oControl.getNumberState() || sap.ushell.ui.tile.State.Neutral);
        oRm.writeClasses();
        oRm.write(">");

        // state arrow
        if (oControl.getStateArrow()) {
            oRm.write("<div");
            oRm.addClass("sapUshellDynamicTileStateArrow");
            oRm.addClass(oControl.getStateArrow());
            oRm.writeClasses();
            oRm.write(">");
            oRm.write("</div>");
        }

        // number
        oRm.write('<div');
        oRm.addClass("sapUshellDynamicTileNumber");
        oRm.writeClasses();
        oRm.write('>');
        var oNForm = sap.ui.core.format.NumberFormat.getFloatInstance({maxFractionDigits: oControl.getNumberDigits()}),
            number = oNForm.format(oControl.getNumberValue());
        if (number && number !== "") {
            oRm.write(number);
        } else {
            // in case numberValue is a String
            oRm.writeEscaped(oControl.getNumberValue());
        }
        oRm.write('</div>');

        // unit
        oRm.write('<div');
        oRm.addClass("sapUshellDynamicTileNumberFactor");
        oRm.writeClasses();
        oRm.write('>');
        oRm.write(oControl.getNumberFactor());
        oRm.write('</div>');
        
        // end of dynamic data
        oRm.write("</div>");

        // span element
        oRm.write("</div>");
    };
    
    
    sap.ushell.ui.tile.DynamicTileRenderer.getInfoPrefix = function (oControl) {
        return oControl.getNumberUnit();
    };
}());

}; // end of sap/ushell/ui/tile/DynamicTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.ImageTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.tile.ImageTile.
jQuery.sap.declare("sap.ushell.ui.tile.ImageTile");




/**
 * Constructor for a new ui/tile/ImageTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getImageSource imageSource} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ushell.ui.tile.TileBase#constructor sap.ushell.ui.tile.TileBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/tile/ImageTile
 * @extends sap.ushell.ui.tile.TileBase
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.tile.ImageTile
 */
sap.ushell.ui.tile.TileBase.extend("sap.ushell.ui.tile.ImageTile", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell",
	properties : {
		"imageSource" : {type : "string", group : "Appearance", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.tile.ImageTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.tile.ImageTile.extend
 * @function
 */


/**
 * Getter for property <code>imageSource</code>.
 * the URL of the image to display
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>imageSource</code>
 * @public
 * @name sap.ushell.ui.tile.ImageTile#getImageSource
 * @function
 */

/**
 * Setter for property <code>imageSource</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sImageSource  new value for property <code>imageSource</code>
 * @return {sap.ushell.ui.tile.ImageTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.ImageTile#setImageSource
 * @function
 */


// Start of sap/ushell/ui/tile/ImageTile.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * Applauncher displaying a tile with an added image
 * 
 * @name sap.ushell.ui.tile.ImageTile
 * 
 * @since   1.15.0
 * @private
 */
}; // end of sap/ushell/ui/tile/ImageTile.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.ImageTileRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    jQuery.sap.declare("sap.ushell.ui.tile.ImageTileRenderer");
    

    /**
     * @name sap.ushell.ui.tile.ImageTileRenderer
     * @static
     * @private
     */

    sap.ushell.ui.tile.ImageTileRenderer = sap.ui.core.Renderer.extend(sap.ushell.ui.tile.TileBaseRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     *
     * @private
     */
    sap.ushell.ui.tile.ImageTileRenderer.renderPart = function (oRm, oControl) {
        // write the HTML into the render manager
        oRm.write("<img");
        oRm.writeControlData(oControl);
        oRm.addClass("sapUshellImageTile");
        oRm.writeClasses();
        oRm.write("src='" + oControl.getImageSource() + "'");
        oRm.write("/>");
    };
}());

}; // end of sap/ushell/ui/tile/ImageTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.StaticTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.tile.StaticTile.
jQuery.sap.declare("sap.ushell.ui.tile.StaticTile");




/**
 * Constructor for a new ui/tile/StaticTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ushell.ui.tile.TileBase#constructor sap.ushell.ui.tile.TileBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * An applauncher tile for simple, static apps, displaying title, subtitle, an icon and additional information
 * @extends sap.ushell.ui.tile.TileBase
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.ushell.ui.tile.StaticTile
 */
sap.ushell.ui.tile.TileBase.extend("sap.ushell.ui.tile.StaticTile", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ushell"
}});


/**
 * Creates a new subclass of class sap.ushell.ui.tile.StaticTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.tile.StaticTile.extend
 * @function
 */


// Start of sap/ushell/ui/tile/StaticTile.js
// Copyright (c) 2013 SAP AG, All Rights Reserved
/**
 * Applauncher displaying a tile for an application that supports
 * a title, a subtitle, an icon and additional information
 * 
 * @name sap.ushell.ui.tile.StaticTile
 * 
 * @since   1.15.0
 * @private
 */
}; // end of sap/ushell/ui/tile/StaticTile.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.StaticTileRenderer') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";

    jQuery.sap.declare("sap.ushell.ui.tile.StaticTileRenderer");
    

    /**
     * @name sap.ushell.ui.tile.StaticTileRenderer 
     * @static
     * @private
     */
    sap.ushell.ui.tile.StaticTileRenderer = sap.ui.core.Renderer.extend(sap.ushell.ui.tile.TileBaseRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     *
     * @private
     */
    sap.ushell.ui.tile.StaticTileRenderer.renderPart = function (oRm, oControl) {
        // write the HTML into the base classes' render manager
        oRm.write("<span");
        oRm.addClass("sapUshellStaticTile");
        oRm.writeClasses();
        oRm.write(">");

        // span element
        oRm.write("</span>");
    };
}());

}; // end of sap/ushell/ui/tile/StaticTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.Shell.controller') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.Shell.controller');
// Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, console, location, window, f2p, document, setTimeout*/

    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained

    jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained

    setTimeout(function () {
        jQuery.sap.require("sap.ui.thirdparty.datajs");
        jQuery.sap.require("sap.ushell.renderers.fiori2.launchpad.DashboardManager");
    }, 10);

    /* dont delay these cause they are needed for direct bookmarks */
    jQuery.sap.require('sap.m.Shell'); // unlisted dependency retained

    
    
    
    
    
    

    // create global model and add some demo data
    var oModel = new sap.ui.model.json.JSONModel({
        groups : [],
        title : "My demo title",
        searchAvailable: false,
        searchTerm: "",
        states : {
            "home" : {
                "showCurtain" : false,
                "headerHiding" : false,
                "showCatalog" : false,
                "showPane" : false,
                "headItems" : ["configBtn"],
                "search" : "sf",
                "paneContent" : ["groupListPage", "logoutBtn"]
            },
            "app" : {
                "showCurtain" : false,
                "headerHiding" : true,
                "showCatalog" : false,
                "showPane" : false,
                "search" : "sf",
                "headItems" : ["homeBtn"]
            },
            "historyScreen" : {
                "showCurtain" : true,
                "headerHiding" : false,
                "showCatalog" : false,
                "search" : "sf",
                "curtainContent" : ["searchHistoryPage"],
                "paneCurtainContent" : ["searchFilterPage"]
            },
            "searchResults" : {
                "showCurtain" : true,
                "headerHiding" : false,
                "showCatalog" : false,
                "search" : "sf",
                "curtainContent" : ["searchResultPage"],
                "paneCurtainContent" : ["searchFilterPage"]
            },
            "catalog" : {
                "showCurtain" : false,
                "headerHiding" : false,
                "showCatalog" : true,
                "showPane" : false,
                "search" : "sf",
                "headItems" : ["backBtn"]
            }
        }
    }),
        bCloseOverlayByFunction = false;

    sap.ushell.renderers.fiori2.CONST = {
        CATALOG : {
            ID : "ShellCatalog",
            SEMANTICOBJECT : "shell",
            ACTION : "catalog"
        },
        //OBSOLETE FOR NOW: search is not part of the navigation
        SEARCH : {
            ID : "ShellSearch",
            SEMANTICOBJECT : "shell",
            ACTION : "search"
        }
    };

    oModel.setSizeLimit(10000); // override default of 100 UI elements on list bindings

    /**
     * @name sap.ushell.renderers.fiori2.Shell
     * @extends sap.ui.core.mvc.Controller
     * @public
     */
    sap.ui.controller("sap.ushell.renderers.fiori2.Shell", {

        /**
         * SAPUI5 lifecycle hook.
         * @public
         */
        onInit: function () {
            // Add global model to view
            this.getView().setModel(oModel);
            sap.ui.getCore().byId("shellOverlay").setModel(oModel);
            // Bind the translation model to this view
            this.getView().setModel(sap.ushell.resources.i18nModel, "i18n");
            sap.ui.getCore().byId("shellOverlay").setModel(sap.ushell.resources.i18nModel, "i18n");

            sap.ui.getCore().getEventBus().subscribe("externalSearch", this.externalSearchTriggered, this);
            sap.ui.getCore().getEventBus().subscribe("openCatalog", this.openCatalogByHash, this);
            sap.ui.getCore().getEventBus().subscribe("openApp", this.openApp, this);

            this.history = new sap.ushell.renderers.fiori2.History();
            this.oNavContainer = sap.ui.getCore().byId("navContainer");

            this.oLoadingDialog = new sap.ushell.ui.launchpad.LoadingDialog({
                title: null,
                text: "",   // in order to calculate dimension before first call
                showCancelButton: false
            });

            sap.ushell.Container.getService("NavTargetResolution").registerCustomResolver({
                name : "Shell Internal Navigation",
                isApplicable : jQuery.proxy(this.navTargetIsApplicableForShell, this),
                resolveHashFragment : jQuery.proxy(this.resolveHashFragmentForShell, this)
            });
            // must be after event registration (for synchronous navtarget resolver calls)
            sap.ushell.services.ShellNavigation.init(jQuery.proxy(this.doHashChange, this));

            sap.ushell.services.Message.init(jQuery.proxy(this.doShowMessage, this));

            // check if search is available
            try {
                sap.ushell.Container.getService("Search")
                    .isSearchAvailable()
                    .done(jQuery.proxy(this.toggleSearch, this));
            } catch (ex) {
                // disable search on any error
                jQuery.sap.log.error(ex.name, ex.message, "sap.ushell.renderers.fiori2.Shell");
                jQuery.sap.log.warning("Disabling Search due to errors", "", "sap.ushell.renderers.fiori2.Shell");
                this.toggleSearch(false);
            }
        },

        onExit: function () {
            sap.ui.getCore().getEventBus().unsubscribe("externalSearch", this.externalSearchTriggered, this);
            sap.ui.getCore().getEventBus().unsubscribe("openCatalog", this.openCatalogByHash, this);
            sap.ui.getCore().getEventBus().unsubscribe("openApp", this.openApp, this);
        },

        // temporary, should not be exposed
        getModel: function () {
            return oModel;
        },

        openCatalogByHash : function (sChannelId, sEventId, oData) {
            window.location = "#" + sap.ushell.Container.getService("URLParsing").constructShellHash({
                target : {
                    semanticObject : sap.ushell.renderers.fiori2.CONST.CATALOG.SEMANTICOBJECT,
                    action : sap.ushell.renderers.fiori2.CONST.CATALOG.ACTION
                },
                params : {
                    targetGroup : [(oData && oData.groupContext && oData.groupContext.sPath) || "/groups/0"]
                }
            });
        },

        openCatalog : function (oData) {
            if (!sap.ui.getCore().byId("catalogPage")) {
                var sPath = (oData && oData.targetGroup && oData.targetGroup.length && oData.targetGroup[0]) || "/groups/0",
                    oGroupContext = this.getView().getModel().getContext(sPath);
                this.oNavContainer.addPage(sap.ui.view({
                    id : "catalogPage",
                    viewName : "sap.ushell.renderers.fiori2.launchpad.catalog.Catalog",
                    viewData : {
                        groupContext : oGroupContext
                    },
                    type : sap.ui.core.mvc.ViewType.JS
                }));
            }

            this.switchViewState("catalog");
            this.oNavContainer.to("catalogPage", "slide");
        },

        openShellOverlay : function (oData) {
            var oShellOverlay = sap.ui.getCore().byId("shellOverlay");
            oShellOverlay.open();
        },

        closeShellOverlay : function () {
            var oShellOverlay = sap.ui.getCore().byId("shellOverlay");
            if (oShellOverlay.isActive()) {
                bCloseOverlayByFunction = true;
                oShellOverlay.close();
            }
        },

        onCurtainClose : function (oEvent) {
            jQuery.sap.log.warning("Closing Curtain", oEvent);
            var oSearchField = sap.ui.getCore().byId("sf");
            oSearchField.$().find("input").blur();
            sap.ui.getCore().getEventBus().publish("closeCurtain");
            if (!bCloseOverlayByFunction) {
                this.switchViewState("/lastState");
            }
            bCloseOverlayByFunction = false;
        },

        /**
         * Callback registered with Message service. Triggered on message show request.
         *
         * @private
         */
        doShowMessage: function (iType, sMessage, oParameters) {
            if (iType === sap.ushell.services.Message.Type.ERROR) {
                sap.m.MessageBox.show(sMessage, sap.m.MessageBox.Icon.ERROR,
                        oParameters.title || sap.ushell.resources.i18n.getText("error"));
            } else if (iType === sap.ushell.services.Message.Type.CONFIRM) {
                if (oParameters.actions) {
                    sap.m.MessageBox.show(sMessage, sap.m.MessageBox.Icon.QUESTION, oParameters.title, oParameters.actions, oParameters.callback);
                } else {
                    sap.m.MessageBox.confirm(sMessage, oParameters.callback, oParameters.title);
                }
            } else {
                sap.m.MessageToast.show(sMessage, { duration: oParameters.duration || 3000 });
            }
        },

        /**
         * Callback registered with NavService. Triggered on navigation requests
         *
         * Set application container based on information in URL hash.
         * @public
         */
        doHashChange : function (sShellHash, sAppPart, sOldShellHash) {
            if (!sShellHash) {
                sShellHash = '#';
            }
            if (sShellHash.charAt(0) !== '#') {
                sShellHash = '#' + sShellHash;
            }

            this.history.hashChange(sShellHash, sOldShellHash);

            // only show loading indicator if this loaded page is not the first
            // - for this case, the startup loading page is used.
            if (this.history.getHistoryLength() > 1) {
                this.oLoadingDialog.setText("");
                this.oLoadingDialog.openLoadingScreen();
            }

            sap.ushell.Container.getService("NavTargetResolution")
                .resolveHashFragment(sShellHash)
                .done(jQuery.proxy(this.openSomething, this, sShellHash, sOldShellHash))
                .fail(jQuery.proxy(function () {
                    this.oLoadingDialog.closeLoadingScreen();
                    sap.ushell.services.Message.error(sap.ushell.resources.i18n.getText("fail_to_start_app"));
                }, this));

        },

        /**
         *  open either an app or the dashboard
         * @public
         */
        openSomething : function (sShellHash, sOldShellHash, oApplication) {
            var oApplicationInformation;

            if (!this.oNavContainer.getParent() && (!oApplication || oApplication.applicationType !== "NWBC")) {
                sap.ui.getCore().byId("shell").addContent(this.oNavContainer);
            }

            if (oApplication) {
                // application opened
                try {
                    oApplicationInformation = sap.ushell.Container.getService("URLParsing")
                        .parseShellHash(sShellHash);
                } catch (e) {
                    // this happens when trying to parse hashes from fiori wave one
                    oApplicationInformation = undefined;
                }

                if (oApplicationInformation === undefined) {
                    // This will happen, when a custom app is opened, like Wikipedia
                    jQuery.sap.log.warning("Could not parse shell hash: " + sShellHash);
                    oApplicationInformation = {};
                }
                oApplicationInformation.sShellHash = sShellHash;
                oApplicationInformation.sOldShellHash = sOldShellHash;
                oApplicationInformation.oApplication = oApplication;

                sap.ui.getCore().getEventBus()
                    .publish("openApp", oApplicationInformation);
            } else {
                this.openDashboard();
            }
        },

        /**
        *  opens the dashboard
        * @public
        */
        openDashboard : function () {
            // close if necessary
            this.oLoadingDialog.closeLoadingScreen();
            this.switchViewState("home");
            this.oNavContainer.backToTop();
            sap.ushell.services.AppConfiguration.setCurrentApplication(null);
            this.setAppIcons(null);
        },

        /**
         *
         * @param sChannelId
         * @param sEventId
         * @param {Object} oApplication
         * @public
         */
        openApp : function (sChannelId, sEventId, oData) {
            jQuery.sap.log.warning("Triggering navigation to ", oData);
            var oAppContainer,
                oApplication = oData.oApplication,
                oInnerControl = null,
                appid = oData.sShellHash.replace(/\W/g, "-"),
                aOldPages,
                sAppTitle,
                sAppIcon;

            if (oApplication) {
                try {
                    if (oApplication.applicationType === sap.ushell.renderers.fiori2.CONST.CATALOG.ID) {
                        this.openCatalog(oApplication);
                        this.oLoadingDialog.closeLoadingScreen();
                        return;
                    }

                    // WebGUI Application Integration
                    if (oApplication.applicationType === "NWBC") {
                        window.history.back(1);
                        if (!jQuery.device.is.desktop) {
                            sap.ushell.services.Message.error(sap.ushell.resources.i18n.getText("notAvailableMsg"));
                            return;
                        }
                        if (this.history.getHashIndex(oData.sShellHash) === 0) {
                            window.location = oApplication.url;
                        } else {
                            window.open(oApplication.url);
                        }
                        this.oLoadingDialog.closeLoadingScreen();
                        return;
                    }

                    if (!this.oNavContainer.getPage("application" + appid) && !this.oNavContainer.getPage("shellPage" + appid)) {
                        oAppContainer = new sap.ushell.components.container.ApplicationContainer("application" + appid, oApplication);
                        sap.ushell.services.AppConfiguration.setCurrentApplication(oApplication);
                        sAppTitle = sap.ushell.services.AppConfiguration.getMetadata(oApplication).title || "";
                        sAppIcon = sap.ushell.services.AppConfiguration.getMetadata(oApplication).icon || null;
                        // TODO: insert localized strings like "Loading..." etc. from sap.ushell.resources.i18n.getText("...")
                        this.oLoadingDialog.showAppInfo(sAppTitle, sAppIcon);
                        if (!sap.ushell.services.AppConfiguration.getMetadata(oApplication).fullWidth) {
                            oInnerControl = new sap.m.Shell("shellPage" + appid, {
                                title : sAppTitle,
                                showLogout : false,
                                app : oAppContainer
                            }).addStyleClass("sapUshellApplicationPage");
                            if (!sAppTitle) {
                                oInnerControl.addStyleClass("sapUshellApplicationPageNoHdr");
                            }
                        } else {
                            oInnerControl = oAppContainer;
                        }
                        this.oNavContainer.addPage(oInnerControl);
                    }

                    this.setAppIcons(sap.ushell.services.AppConfiguration.getMetadata(oApplication));

                    this.switchViewState("app");

                    if (this.history.backwards && this.oNavContainer.getInitialPage() !== this.oNavContainer.getCurrentPage().getId()) {
                        this.oNavContainer.to(oInnerControl, "slideBack");
                    } else {
                        this.oNavContainer.to(oInnerControl, this.oNavContainer.getInitialPage() ? "slide" : "show");
                    }
                } catch (e) {
                    // create a new navContainer because old one is in a irreparable state
                    // save all other pages besides the page which causes the error
                    jQuery.sap.log.error(e.name, e.message, (oApplication && sap.ushell.services.AppConfiguration.getMetadata(oApplication).title) || null);
                    this.oNavContainer.removePage(this.oNavContainer.getCurrentPage()).destroy();
                    aOldPages = this.oNavContainer.removeAllPages();

                    this.oNavContainer.destroy();
                    this.oNavContainer = this.getView().initNavContainer(this);

                    jQuery.each(aOldPages, jQuery.proxy(function (i, v) {
                        if (!this.oNavContainer.getPage(v.getId())) {
                            this.oNavContainer.addPage(v);
                        }
                        if (v.getId() === this.oNavContainer.getInitialPage()) {
                            v.removeStyleClass("sapMNavItemHidden"); // still there because of old navContainer
                        }
                    }, this));
                    this.navigateToHome();
                    this.oLoadingDialog.closeLoadingScreen();
                    sap.ushell.services.Message.error(sap.ushell.resources.i18n.getText("fail_to_start_app"));
                }
            }
            // close if we are on first position (no app has be launched before)
            if (this.history.getHistoryLength() < 1) {
                this.oLoadingDialog.closeLoadingScreen();
            }
        },

        setAppIcons: function (oMetadataConfig) {
            // TODO Implement adjustment of relative paths:
            // Should be relative to Component.js, not to HTML file!
            var oLaunchIconPhone = (oMetadataConfig && oMetadataConfig.homeScreenIconPhone) ||
                    '../../resources/sap/ushell/themes/base/img/launchicons/57_iPhone_Desktop_Launch.png',
                oLaunchIconPhone2 = (oMetadataConfig && oMetadataConfig["homeScreenIconPhone@2"]) ||
                    '../../resources/sap/ushell/themes/base/img/launchicons/114_iPhone-Retina_Web_Clip.png',
                oLaunchIconTablet = (oMetadataConfig && oMetadataConfig.homeScreenIconTablet) ||
                    '../../resources/sap/ushell/themes/base/img/launchicons/72_iPad_Desktop_Launch.png',
                oLaunchIconTablet2 = (oMetadataConfig && oMetadataConfig["homeScreenIconTablet@2"]) ||
                    '../../resources/sap/ushell/themes/base/img/launchicons/144_iPad_Retina_Web_Clip.png',
                oFavIcon = (oMetadataConfig && oMetadataConfig.favIcon) ||
                    '../../resources/sap/ushell/themes/base/img/launchpad_favicon.ico',
                sTitle = (oMetadataConfig && oMetadataConfig.title) ||
                    //TODO define proper localization tag for default window title
                    sap.ushell.resources.i18n.getText("homeBtn_tooltip");

            jQuery.sap.setIcons({
                'phone': oLaunchIconPhone,
                'phone@2': oLaunchIconPhone2,
                'tablet': oLaunchIconTablet,
                'tablet@2': oLaunchIconTablet2,
                'favicon': oFavIcon,
                'precomposed': true
            });

            window.document.title = sTitle;
        },

        externalSearchTriggered: function (sChannelId, sEventId, oData) {
            oModel.setProperty("/searchTerm", oData.searchTerm);
            oData.query = oData.searchTerm;
            sap.ui.getCore().byId("sfOverlay").fireSearch(oData);
        },

        onAfterNavigate: function (oEvent) {
            var sHome = this.oNavContainer.getInitialPage(),
                sFrom = oEvent.getParameter("fromId");

            if (sFrom !== sHome && sFrom !== "catalogPage" && sFrom !== "f2p_overview") {
                this.oNavContainer.removeAggregation("pages", sFrom, true);
                sap.ui.getCore().byId(sFrom).destroy();
            }
            this.oLoadingDialog.closeLoadingScreen();
        },

        onAfterRendering: function () {
            if (window.f2p) {
                f2p.add(f2p.m.endHomePage);
            }
        },

        navigateToHome: function (oEvent) {
            //(oEvent && oEvent.getParameter("id") === 'backBtn') || 
            if (location.hash === '') {
                this.openDashboard();
            } else {
                location.hash = '';
            }
        },

        toggleSearch : function (bIsAvailable) {
            oModel.setProperty("/searchAvailable", bIsAvailable);
        },

        togglePane : function (oEvent) {
            var oSource = oEvent.getSource(),
                bState = oSource.getSelected();

            if (oEvent.getParameter("id") === "categoriesBtn") {
                oSource.getModel().setProperty("/currentState/showCurtainPane", !bState);
            } else {
                oSource.getModel().setProperty("/currentState/showPane", !bState);
            }
        },

        getActiveViews: function () {
            var aCurtainContent = this.getModel().getProperty("/currentState/curtainContent"),
                oPage = sap.ui.getCore().byId(aCurtainContent[0]),
                aActiveViews = [];

            // the two search suggestion controller need to know
            // which is currently active to not trigger request twice
            jQuery.each(oPage.getContent(), function (i, v) {
                aActiveViews.push(v.getId());
            });

            return aActiveViews;
        },

        switchViewState: function (sState, bSaveLastState) {
            var sPath = sState[0] === "/" ? sState : "/states/" + sState,
                oState = oModel.getProperty(sPath),
                /** @type sap.ui.unified.Shell */
                oShell = sap.ui.getCore().byId("shell"),
                oCurrentState = oModel.getProperty("/currentState") || {};

            if (!oShell.getSearch() || oState.search !== oShell.getSearch().getId()) {
                oShell.setSearch(sap.ui.getCore().byId(oState.search));
            }

            if (!!bSaveLastState) {
                oModel.setProperty("/lastState", oCurrentState);
            }

            oState = jQuery.extend({}, oCurrentState, oState);
            oModel.setProperty("/currentState", oState);

            if (!!oState.showCurtain) {
                this.openShellOverlay();
            } else {
                this.closeShellOverlay();
            }
        },

        /* Make catalog part of the navigation */
        navTargetIsApplicableForShell : function (sHashFragment) {
            var oAppInfo = sap.ushell.Container.getService("URLParsing").parseShellHash(sHashFragment.substring(1));

            return oAppInfo &&
                (oAppInfo.semanticObject === sap.ushell.renderers.fiori2.CONST.CATALOG.SEMANTICOBJECT
                        && oAppInfo.action === sap.ushell.renderers.fiori2.CONST.CATALOG.ACTION);
        },

        resolveHashFragmentForShell : function (sHashFragment) {
            var oAppInfo = sap.ushell.Container.getService("URLParsing").parseShellHash(sHashFragment.substring(1)),
                oDeferred = new jQuery.Deferred(),
                res;
            if (oAppInfo.action === sap.ushell.renderers.fiori2.CONST.CATALOG.ACTION) {
                res = {
                    applicationType: sap.ushell.renderers.fiori2.CONST.CATALOG.ID,
                    catalogSelector : oAppInfo.params.catalogSelector,
                    tileFilter : oAppInfo.params.tileFilter,
                    targetGroup : oAppInfo.params.targetGroup
                };
            }
            oDeferred.resolve(res);
            return oDeferred.promise();
        }
    });
}());

}; // end of sap/ushell/renderers/fiori2/Shell.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.Shell.view') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.Shell.view');
//Copyright (c) 2013 SAP AG, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, location, window, clearTimeout, setTimeout */

    

    //add touch support for mobile devices
    

    sap.ui.jsview("sap.ushell.renderers.fiori2.Shell", {

     /**
     * Most of the following code acts just as placeholder for new Unified Shell Control.
     *
     * @param oController
     * @returns {sap.ui.unified.Shell}
     * @public
     */
        createContent: function (oController) {
            var fnPaneButtonTooltip = function (bState, sShowTooltip, sHideTooltip) {
                    return bState ? sHideTooltip : sShowTooltip;
                },
                fnShellUpdateAggItem = function (sId, oContext) {
                    return sap.ui.getCore().byId(oContext.getObject());
                },
                fnSetCurtainPaneCSS = function (bShow, aCurtainContent) {
                    if (aCurtainContent) {
                        jQuery.each(aCurtainContent, function (i, v) {
                            sap.ui.getCore().byId(v).toggleStyleClass("sapUICurtainPaneVisible", !!bShow);
                        });
                    }
                    return !!bShow;
                },
                oConfigButton = new sap.ui.unified.ShellHeadItem({
                    id: "configBtn",
                    tooltip: {
                        parts: ["/currentState/showPane",
                                "i18n>showGrpsBtn_tooltip",
                                "i18n>hideGrpsBtn_tooltip"],
                        formatter: fnPaneButtonTooltip
                    },
                    icon: sap.ui.core.IconPool.getIconURI("menu2"),
                    selected: {path: "/currentState/showPane"},
                    press: [oController.togglePane, oController]
                }),
                oHomeButton = new sap.ui.unified.ShellHeadItem({
                    id: "homeBtn",
                    title: "Home",
                    tooltip: "{i18n>homeBtn_tooltip}",
                    icon: sap.ui.core.IconPool.getIconURI("home"),
                    press: [oController.navigateToHome, oController]
                }),
                oBackButton = new sap.ui.unified.ShellHeadItem({
                    id: "backBtn",
                    title: "Back",
                    tooltip: "{i18n>backBtn_tooltip}",
                    icon: sap.ui.core.IconPool.getIconURI("nav-back"),
                    press: [oController.navigateToHome, oController]
                }),
                oLogoutBtn = new sap.ushell.ui.footerbar.LogoutButton("logoutBtn", {
                    iconFirst: false
                }).addStyleClass("sapUshellLogoutButton"),
                oUnifiedShell = new sap.ui.unified.Shell({
                    id: "shell",
                    fullHeightContent: true,
                    showPane: {path: "/currentState/showPane"},
                    headItems: {path: "/currentState/headItems", factory: fnShellUpdateAggItem},
                    headEndItems: {path: "/currentState/headEndItems", factory: fnShellUpdateAggItem},
                    paneContent: {path: "/currentState/paneContent", factory: fnShellUpdateAggItem},
                    headerHiding: {path: "/currentState/headerHiding"}
                }),
                oSearchField = new sap.m.SearchField("sf", {
                    width: "100%",
                    placeholder: "{i18n>search}",
                    showMagnifier: false,
                    visible: {path: "/searchAvailable"},
                    value: {path: "/searchTerm"}
                }),
                oSearchFieldOverlay = new sap.m.SearchField("sfOverlay", {
                    width: "100%",
                    placeholder: "{i18n>search}",
                    showMagnifier: false,
                    visible: {path: "/searchAvailable"},
                    value: {path: "/searchTerm"}
                }),
                oShellOverlay = new sap.ui.unified.ShellOverlay("shellOverlay", {
                    search: oSearchFieldOverlay,
                    content: {path: "/currentState/curtainContent", factory: fnShellUpdateAggItem},
                    shell: oUnifiedShell,
                    closed: [oController.onCurtainClose, oController]
                }),
                oHistoryScreen = sap.ui.view({
                    id : "searchHistoryScreen",
                    viewName : "sap.ushell.renderers.fiori2.search.HistoryScreen",
                    type : sap.ui.core.mvc.ViewType.JS
                }),
                oSearchResults = sap.ui.view({
                    id : "searchResultsView",
                    viewName : "sap.ushell.renderers.fiori2.search.SearchResults",
                    type : sap.ui.core.mvc.ViewType.JS
                }),
                oSearchSuggestions = sap.ui.view({
                    id : "searchSuggestionsView",
                    viewName : "sap.ushell.renderers.fiori2.search.SearchSuggestions",
                    type : sap.ui.core.mvc.ViewType.JS
                }),
//                oSearchFilter = sap.ui.view({
//                    id : "searchFilterView",
//                    viewName : "sap.ushell.renderers.fiori2.search.SearchFilter",
//                    type : sap.ui.core.mvc.ViewType.JS
//                }),
//                oResultFilterInfo = sap.ui.view({
//                    id : "resultFilterInfoView",
//                    viewName : "sap.ushell.renderers.fiori2.search.ResultFilterInfo",
//                    type : sap.ui.core.mvc.ViewType.JS
//                }),
                oSearchResultPage = new sap.m.Page({
                    id : "searchResultPage",
                    showHeader: false,
                    //customHeader: new sap.m.Bar({contentMiddle: [oResultFilterInfo]}),
                    content : [oSearchSuggestions.clone(), oSearchResults]
                }),
                oDashboardManager = new sap.ushell.renderers.fiori2.launchpad.DashboardManager("dashboardMgr", {
                    model : oController.getModel()
                }),
                oDashboardPage = this.pageFactory("dashboardPage", oDashboardManager.getDashboardView(), !jQuery.device.is.desktop),
                oGroupListPage = this.pageFactory("groupListPage", oDashboardManager.getGroupListView(), !jQuery.device.is.desktop),
                oShellPage = this.pageFactory("shellPage", oUnifiedShell);

            this.lastSearchTerm = "";
            this.initNavContainer(oController);
            this.pageFactory("searchHistoryPage", [oSearchSuggestions, oHistoryScreen]);
            this.pageFactory("searchFilterPage", []);

            oSearchField.addEventDelegate({
                onfocusin: function (oEvent) {
                    if (!oShellOverlay.isActive()) {
                        setTimeout(jQuery.proxy(function () { //made focus handling work in IE
                            if (oSearchField.getValue().length === 0 || this.lastSearchTerm.length === 0) {
                                sap.ui.getCore().getEventBus().publish("openHistoryScreen");
                                jQuery.proxy(oController.switchViewState("historyScreen", true), oController);
                            } else {
                                jQuery.proxy(oController.switchViewState("searchResults", true), oController);
                            }
                        }, this), 0);
                    }
                }
            }, this);

            oSearchFieldOverlay.addEventDelegate({
                onfocusin: function (oEvent) {
                    // set focus at the end
                    var pos = oSearchFieldOverlay.getValue().length,
                        elem = oSearchFieldOverlay.$().find("input")[0],
                        range;

                    if (elem.setSelectionRange) {
                        elem.setSelectionRange(pos, pos);
                    } else if (elem.createTextRange) {
                        range = elem.createTextRange();
                        range.collapse(true);
                        range.moveEnd('character', pos);
                        range.moveStart('character', pos);
                        range.select();
                    }
                }
            });

            oSearchFieldOverlay.attachSearch(function (oEvent) {
                this.lastSearchTerm = oEvent.getParameter("query");
                if (oEvent.getParameter("query").length > 0) {
                    clearTimeout(this.liveSearchTimeout);
                    jQuery.proxy(oController.switchViewState("searchResults"), oController);

                    var oEventBus = sap.ui.getCore().getEventBus();
                    oEventBus.publish("search", {
                        searchTerm: oEvent.getParameter("query"),
                        dataSource: oEvent.getParameter("dataSource"),
                        categorySuggested: oEvent.getParameter("categorySuggested")
                    });
                }
            }, this);

            oSearchFieldOverlay.attachLiveChange(function (oEvent) {
                var searchTerm = oEvent.getParameter("newValue");

                if (oSearchField.getValue().length === 0) {
                    sap.ui.getCore().getEventBus().publish("openHistoryScreen");
                    if (!oShellOverlay.isActive()) {
                        jQuery.proxy(oController.switchViewState("historyScreen", true), oController);
                    } else {
                        jQuery.proxy(oController.switchViewState("historyScreen"), oController);
                    }
                }

                clearTimeout(this.liveSearchTimeout);

                this.liveSearchTimeout = setTimeout(jQuery.proxy(function () {
                    this.liveSearchTimeout = null;

                    var oEventBus = sap.ui.getCore().getEventBus();
                    oEventBus.publish("searchSuggest", {searchTerm: searchTerm, activeViews: oController.getActiveViews()});
                }, this), 200);
            }, this);

            this.setDisplayBlock(true);

            if (!jQuery.device.is.desktop) {
                oShellPage.setEnableScrolling(false);
            } else {
                oGroupListPage.addStyleClass("groupListDesktopScrollbar");
            }

            oUnifiedShell.updateAggregation = this.updateShellAggregation;
            oShellOverlay.updateAggregation = this.updateShellAggregation;

            return new sap.m.App({
                pages: oShellPage
            });
        },

        initNavContainer: function (oController) {
            var oDashboardPage = sap.ui.getCore().byId("dashboardPage"),
                oNavContainer = new sap.m.NavContainer({
                    id: "navContainer",
                    pages: [oDashboardPage],
                    initialPage: oDashboardPage,
                    afterNavigate: jQuery.proxy(oController.onAfterNavigate, oController)
                });

            oNavContainer.addCustomTransition(
                "slideBack",
                sap.m.NavContainer.transitions.slide.back,
                sap.m.NavContainer.transitions.slide.back
            );

            return oNavContainer;
        },

        updateShellAggregation: function (sName) {
            /*jslint nomen: true */
            var oBindingInfo = this.mBindingInfos[sName],
                oAggregationInfo = this.getMetadata().getJSONKeys()[sName],
                oClone;

            jQuery.each(this[oAggregationInfo._sGetter](), jQuery.proxy(function (i, v) {
                this[oAggregationInfo._sRemoveMutator](v);
            }, this));
            jQuery.each(oBindingInfo.binding.getContexts(), jQuery.proxy(function (i, v) {
                oClone = oBindingInfo.factory(this.getId() + "-" + i, v).setBindingContext(v, oBindingInfo.model);
                this[oAggregationInfo._sMutator](oClone);
            }, this));
        },

        // Disable bouncing outside of the boundaries
        disableBouncing: function (oPage) {
            /*jslint nomen: true */
            oPage.onBeforeRendering = function () {
                sap.m.Page.prototype.onBeforeRendering.apply(oPage);

                var oScroller = this._oScroller,
                    oOriginalAfterRendering = oScroller.onAfterRendering;

                oScroller.onAfterRendering = function () {
                    oOriginalAfterRendering.apply(oScroller);

                    oScroller._scroller.options.bounce = false;
                };
            };

            return oPage;
        },

        getControllerName: function () {
            return "sap.ushell.renderers.fiori2.Shell";
        },

        pageFactory: function (sId, oControl, bDisableBouncing) {
            var oPage = new sap.m.Page({
                    id: sId,
                    showHeader: false,
                    showFooter: false,
                    content: oControl
                }),
                aEvents = ["onAfterHide", "onAfterShow", "onBeforeFirstShow", "onBeforeHide", "onBeforeShow"],
                oDelegates = {};

            // Pass navigation container events to children.
            jQuery.each(aEvents, function (iIndex, sEvent) {
                oDelegates[sEvent] = jQuery.proxy(function (evt) {
                    jQuery.each(this.getContent(), function (iIndex, oControl) {
                        /*jslint nomen: true */
                        oControl._handleEvent(evt);
                    });
                }, oPage);
            });

            oPage.addEventDelegate(oDelegates);

            if (bDisableBouncing) {
                this.disableBouncing(oPage);
            }

            return oPage;
        },

        onAfterRendering: function () {
            if (window.f2p) {//If performance is enabled we initialize the monitor UI so that CTRL + ALT +  L will open it.
                jQuery.sap.require("sap.ushell.components.perf.monitor");
                window.f2pMonitor.init(sap.ui.getCore().byId("navContainer"));
            }
        }

    });
}());

}; // end of sap/ushell/renderers/fiori2/Shell.view.js
