// This file has been generated by the SAPUI5 'AllInOne' Builder
/*!
 * @copyright@
 */

/*******************************************************
* App View Controller
*
* Is the controller for the App View and is responsible 
* for creating and setting a page for the ui5 none-split
* app. This page will display the JAM Feed Widget
********************************************************/

sap.ui.controller("sap.collaboration.components.fiori.feed.app.App", {

/**
* Called when a controller is instantiated and its View controls (if available) are already created.
* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
* It initialize class variables
* @memberOf App
*/
	onInit: function() {
		this.oApp = this.getView().oApp;
		this.oOdataModel = this.getView().getViewData().odataModel;
		this.oLangBundle = this.getView().getViewData().langBundle;
		this.sPrefixId = this.getView().getViewData().controlId;
		this.sAppType = this.getView().getViewData().appType;
		this.sFeedType = this.getView().getViewData().feedType;
		this.sGroupIds = this.getView().getViewData().groupIds;
		this.oBusinessObject = this.getView().getViewData().object;
	},

/**
* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
* (NOT before the first rendering! onInit() is used for that one!).
* It calls the initializeUtils() and the createDetailPage() functions. Refer to these function for the JSDoc.
* @memberOf App
*/
	onBeforeRendering: function() {
		this.initializeUtils();
		this.createDetailPage();
	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
* @memberOf App
*/
//	onAfterRendering: function() {
//
//	},

/**
* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
* @memberOf App
*/
//	onExit: function() {
//
//	}
	
/**
 * Initializes an object from the sap.collaboration.components.utils.OdataUtil class
 * @private
 */
	initializeUtils : function() {
		this.oODataUtil = new sap.collaboration.components.utils.OdataUtil();
	},
	
/**
 * Creates and sets a page for the app. This page is the detail view
 * @private
 */
	createDetailPage : function() {
		var sJamUrl = this.oODataUtil.getJamUrl(this.oOdataModel);
		var sJamToken = this.oODataUtil.getJamToken(this.oOdataModel);
		
		if (this.sAppType === sap.collaboration.AppType.widget){
			this.getGroupIds();
		}
		
		var oDetailView = sap.ui.view({
			id: this.sPrefixId + "detailView", 
			viewData : {
				controlId: this.sPrefixId,
				jamURL:	sJamUrl,
				jamToken: sJamToken,
				appType: this.sAppType,
				feedType: this.sFeedType,
				groupIds: this.sGroupIds,
				object: this.oBusinessObject,
				langBundle: this.oLangBundle
			}, 
			type: sap.ui.core.mvc.ViewType.JS, 
			viewName: "sap.collaboration.components.fiori.feed.commons.Detail"
		});
		
		this.oApp.addPage(oDetailView); 
		this.oApp.setInitialPage(oDetailView); 
	},
	
/**
 * Gets the IDs of the JAM groups belonging to a user or the IDs of the JAM groups belonging to a user and related to a context in a backend system.
 * In case the feed type is "group" and the groups IDs are not set by the developer, it gets all the JAM groups belonging to a user
 * In case the feed type is "context" and the groups IDs are not set by the developer, it gets JAM groups belonging to a user and related to a context 
 * in the same time
 * In case the feed type is "context" and the groups IDs are set by the developer, it gets JAM groups belonging to a user and related to a context in 
 * the same time and uses them to filter the IDs set by the developer
 * @private
 */
	getGroupIds : function() {
		var aGroupData;
		if (this.sFeedType === sap.collaboration.FeedType.group && (this.sGroupIds === undefined || this.sGroupIds === "")){
			aGroupData = this.oODataUtil.getGroupsData(this.oOdataModel, "/Groups");
			this.sGroupIds = this.oODataUtil.getGroupIds(aGroupData);
		}
		else if (this.sFeedType === sap.collaboration.FeedType.objectGroup && (this.sGroupIds === undefined || this.sGroupIds === "")){
		    aGroupData = this.oODataUtil.getGroupsData(this.oOdataModel, "/BusinessObjects('" + this.oBusinessObject.id + "')/AssignedGroups");
		    this.sGroupIds = this.oODataUtil.getGroupIds(aGroupData);
		}
		else if (this.sFeedType === sap.collaboration.FeedType.objectGroup && !(this.sGroupIds === undefined || this.sGroupIds === "")){
			aGroupData = this.oODataUtil.getGroupsData(this.oOdataModel, "/BusinessObjects('" + this.oBusinessObject.id + "')/AssignedGroups");
			var sContextRelatedGroupsId = this.oODataUtil.getGroupIds(aGroupData);
			this.sGroupIds = this.filterGroupIds(sContextRelatedGroupsId);
		}
	},
	
/**
 * filter the JAM groups IDs set by the developer using the context related JAM groups IDs 
 * @param {string} sContextRelatedGroupsId
 * @private
 */
	filterGroupIds : function(sContextRelatedGroupIds) {
		var sGroupIds;
		var aContextRelatedGroupIds = sContextRelatedGroupIds.split(",");
		var aInputGroupIds = this.sGroupIds.split(",");
		
		for(var i=0; i<aInputGroupIds.length; i++){
			if(aContextRelatedGroupIds.indexOf(aInputGroupIds[i]) === -1){
				aInputGroupIds.splice(i,1);
				i = i - 1;
			}
		}
		
		if (aInputGroupIds.length !== 0){
			sGroupIds = aInputGroupIds.join();
		} else{
			sGroupIds = "";
		}
		
		return sGroupIds;
	}
	
});
/*!
 * @copyright@
 */

/*******************************************************
* App View
*
* Is a view that displays the ui for a ui5 none-split app.
* This app will contain a page that will display the JAM
* Feed Widget
********************************************************/

sap.ui.jsview("sap.collaboration.components.fiori.feed.app.App", {

	/** Specifies the Controller belonging to this View. 
	* In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	* @memberOf App
	*/ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.feed.app.App";
	},

	/** Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	* Since the Controller is given to this method, its event handlers can be attached right away.
	* It creates/returns a UI5 app
	* @param {sap.ui.controller} oController The view Controller  
	* @memberOf App
	*/ 
	createContent : function(oController) {
		this.sPrefixId = this.getViewData().controlId;
		this.oApp = new sap.m.App(this.sPrefixId + "app");
		return this.oApp;
	}

});
/*!
 * @copyright@
 */

/*******************************************************
* Detail View
*
* Is a view that displays the ui for a ui5 page. This page
* will display the JAM Feed Widget
********************************************************/

sap.ui.jsview("sap.collaboration.components.fiori.feed.commons.Detail", {

	/** Specifies the Controller belonging to this View. 
	* In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	* @memberOf detail
	*/ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.feed.commons.Detail";
	},

	/** Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	* Since the Controller is given to this method, its event handlers can be attached right away.
	* It creates a UI5 page with a scroll container.
	* @param {sap.ui.controller} oController The view Controller 
	* @memberOf detail
	*/ 
	createContent : function(oController) {
		var oLangBundle = this.getViewData().langBundle;
		this.sPrefixId  = this.getViewData().controlId;
		
		this.oDetailPage = new sap.m.Page(this.sPrefixId + "feedDetailsPage",{
			title: oLangBundle.getText("FRV_DOMAIN_DATA_FEED_TYPES_FOLLOWS"),
			enableScrolling: false,
			content: [
						new sap.m.ScrollContainer(this.sPrefixId + "widgetContainer",{
							width: "100%",
							height: "100%",
							horizontal: false,
							vertical: false
						}) 
			]
		});
		
 		return this.oDetailPage;
	}

});
/*!
 * @copyright@
 */

/*******************************************************
* FeedTypeMaster View Controller
*
* Is the controller for the FeedTypeMaster View and is 
* responsible for creating JAM Feed Widget and for 
* navigating to other master pages
********************************************************/

sap.ui.controller("sap.collaboration.components.fiori.feed.splitApp.FeedTypeMaster", {

/**
* Called when a controller is instantiated and its View controls (if available) are already created.
* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
* It initialize class variables.
* @memberOf master
*/
	onInit: function() {
		this.sJamToken = this.getView().getViewData().jamToken;
		this.sPrefixId = this.getView().getViewData().controlId;
		this.oBusinessObject = this.getView().getViewData().object;
	},

/**
* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
* (NOT before the first rendering! onInit() is used for that one!).
* @memberOf master
*/
//	onBeforeRendering: function() {
//
//	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
* @memberOf master
*/
//	onAfterRendering: function() {
//
//	},

/**
* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
* @memberOf master
*/
//	onExit: function() {
//
//	}
	
	/**
	 * Handler for the list item press event
	 * This handler display the widget in case of feed type is "follows" or "company" by calling getJamWidget function
	 * Or it navigates to the Group Master Page in case the feed type in other that the above by calling navigateToGroupMaster
	 * @param {string} sFeedType The feed type for the widget
	 * @private
	 */
	listItemPress : function(sFeedType) {
		if (sFeedType === sap.collaboration.FeedType.follows || sFeedType === sap.collaboration.FeedType.company){
			this.getJamWidget(sFeedType);
			this.setDetailPageTitle(sFeedType);
		} else{
			this.navigateToGroupMaster(sFeedType);
		}
	},
	
	/**
	 * Display the widget
	 * @param {string} sFeedType The feed type for the widget
	 * @private
	 */
	getJamWidget : function(sFeedType){
		var oJamUtil = new sap.collaboration.components.utils.JamUtil();
		oJamUtil.createJamWidget(this.sJamToken, this.sPrefixId + "widgetContainer", sFeedType, this.oBusinessObject);
	},
	
	/**
	 * Sets the detail page title
	 * @param {string} sFeedType The feed type for the widget
	 * @private
	 */
	setDetailPageTitle : function(sFeedType){	
		var sDetailPageTitle;
		   sFeedType === sap.collaboration.FeedType.follows?		sDetailPageTitle = this.getView().oLangBundle.getText("FRV_DOMAIN_DATA_FEED_TYPES_FOLLOWS") 
	   					  		  :  	sDetailPageTitle = this.getView().oLangBundle.getText("FRV_DOMAIN_DATA_FEED_TYPES_COMPANY");
		   sap.ui.getCore().byId(this.sPrefixId + "feedDetailsPage").setTitle(sDetailPageTitle);
   },

   /**
	 * Navigates the split app master page to to the Group Master View
	 * And creates the navigation data by calling the createNavigationData function
	 * @param {string} sFeedType The feed type for the widget
	 * @private
	 */
   navigateToGroupMaster : function(sFeedType) {
	   var oNavData = this.createNavigationData(sFeedType);
	   
	   sap.ui.getCore().getEventBus().publish("nav", "to", oNavData);
	},
	
	/**
	 * Creates the navigation data
	 * @param {string} sFeedType The feed type for the widget
	 * @private
	 */
	createNavigationData : function(sFeedType) {
		var oData;
		sFeedType === sap.collaboration.FeedType.group? 
				oData = {
							viewName: "sap.collaboration.components.fiori.feed.splitApp.GroupMaster",
							viewId: this.sPrefixId + "groupMasterView",
				   			data: {
				   					feedType: sap.collaboration.FeedType.group, 
				   					lanBundle: this.getView().oLangBundle, 
				   					groupMasterPageTitle: this.getView().oLangBundle.getText("GROUP_MASTER_PAGE_GROUP_TITLE")
				   			}
			   			} 
				: 
				oData = {
							viewName: "sap.collaboration.components.fiori.feed.splitApp.GroupMaster",
							viewId: this.sPrefixId + "groupMasterView",
				   			data: {
				   					feedType: sap.collaboration.FeedType.object, 
				   					lanBundle: this.getView().oLangBundle, 
				   					groupMasterPageTitle: this.getView().oLangBundle.getText("GROUP_MASTER_PAGE_BO_TITLE")
				   			}
						};
			   					
		return oData;
	}

});
/*!
 * @copyright@
 */

/*******************************************************
* FeedTypeMaster View
*
* Is a view that displays the ui for a ui5 page.
* This page will contain a list of Feed Types
* It will be used as a mater page for the ui5 split app
********************************************************/

sap.ui.jsview("sap.collaboration.components.fiori.feed.splitApp.FeedTypeMaster", {

	/** Specifies the Controller belonging to this View. 
	* In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	* @memberOf master
	*/ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.feed.splitApp.FeedTypeMaster";
	},

	/** Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	* Since the Controller is given to this method, its event handlers can be attached right away.
	* @param {sap.ui.controller} oController The view Controller  
	* It creates a page with a list of feed types.
	* @memberOf master
	*/ 
	createContent : function(oController) {
		
		this.oLangBundle = this.getViewData().langBundle;
		this.sPrefixId  = this.getViewData().controlId;
		
 		return new sap.m.Page(this.sPrefixId + "feedTypePage", {
			title: this.oLangBundle.getText("FEED_MASTER_PAGE_TITLE"),
			content: [
						new sap.m.List(this.sPrefixId + "FeedTypes", 
							{
								//mode: sap.m.ListMode.SingleSelectMaster,
								inset: true,
								items: [
							         	new sap.m.StandardListItem({
							         		title : this.oLangBundle.getText("FRV_DOMAIN_DATA_FEED_TYPES_FOLLOWS"),
											type : sap.m.ListType.Active,
											selected: true,
											press : function(){
												oController.listItemPress("follows");
											}
										}),
										new sap.m.StandardListItem({
											title : this.oLangBundle.getText("FRV_DOMAIN_DATA_FEED_TYPES_COMPANY"),
											type : sap.m.ListType.Active,
											press : function(){
												oController.listItemPress("company");
											}
										}),
										new sap.m.StandardListItem({
											title : this.oLangBundle.getText("FRV_DOMAIN_DATA_FEED_TYPES_GROUP"),
											type : sap.m.ListType.Active,
											press : function(){
												oController.listItemPress("group");
											}
										}),
										new sap.m.StandardListItem({
											title : this.oLangBundle.getText("FRV_DOMAIN_DATA_FEED_TYPES_BO"),
											type : sap.m.ListType.Active,
											press : function(){
												oController.listItemPress("context");
											}
										})
                                     ]})
			]
		});
	}

});
/*!
 * @copyright@
 */

/*******************************************************
* GroupMaster View Controller
*
* Is the controller for the GroupMaster View and is 
* responsible for setting the view data model, for
* binding data to the group list and for navigating to 
* a previous master page
********************************************************/

sap.ui.controller("sap.collaboration.components.fiori.feed.splitApp.GroupMaster", {
	
/**
* Called when a controller is instantiated and its View controls (if available) are already created.
* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
* It initializes class variables.
* @memberOf detail
*/
	onInit: function() {
		this.oOdataModel = this.getView().getViewData().odataModel;
		this.oBusinessObject = this.getView().getViewData().object;
		this.sFeedType = this.getView().getViewData().feedType;
		this.sPageTitle = this.getView().getViewData().pageTitle;
		this.sJamToken = this.getView().getViewData().jamToken;
		this.oLangBundle = this.getView().getViewData().langBundle;
		this.sPrefixId  = this.getView().getViewData().controlId;
	},

/**
* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
* (NOT before the first rendering! onInit() is used for that one!).
* It binds data to the groups list.
* @memberOf detail
*/
	onBeforeRendering: function() {
		var self = this;
		this.getView().groupMasterPage.setTitle(this.sPageTitle);
		
		this.initializeUtils();
		this.setViewModel();
		
		var oStandardListItem = new sap.m.StandardListItem();
		oStandardListItem.bindProperty("title", "Name");
		oStandardListItem.setType(sap.m.ListType.Active);
		oStandardListItem.attachPress(function(){
			var sGroupId = this.getBindingContext().getProperty(this.getBindingContext().getPath()).Id;
			var sGroupName = this.getBindingContext().getProperty(this.getBindingContext().getPath()).Name;
			self.oJamUtil.createJamWidget(self.sJamToken, self.sPrefixId + "widgetContainer", self.sFeedType, sGroupId);
			sap.ui.getCore().byId(self.sPrefixId + "feedDetailsPage").setTitle(sGroupName);
			
		});
		sap.ui.getCore().byId(this.sPrefixId + "groupsList").bindItems("/groupsData", oStandardListItem);
		
		var oStandardListItem_AllGroups = 
			new sap.m.StandardListItem({title: this.oLangBundle.getText("GROUP_MASTER_LIST_All_GROUPS")});
		oStandardListItem_AllGroups.setType(sap.m.ListType.Active);
		oStandardListItem_AllGroups.attachPress(function(){
			var sGroupIds = self.oODataUtil.getGroupIds(self.aGroupData);
			self.oJamUtil.createJamWidget(self.sJamToken, self.sPrefixId + "widgetContainer", self.sFeedType, sGroupIds);
			sap.ui.getCore().byId(self.sPrefixId + "feedDetailsPage").setTitle(self.oLangBundle.getText("GROUP_MASTER_LIST_All_GROUPS"));
		});
		sap.ui.getCore().byId(this.sPrefixId + "groupsList").insertItem(oStandardListItem_AllGroups,0);
	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
* @memberOf detail
*/
	onAfterRendering: function() {
	},

/**
* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
* @memberOf detail
*/
//	onExit: function() {
//
//	}
	
/**
 * Initializes an object from the sap.collaboration.components.utils.OdataUtil class
 * and an object from the sap.collaboration.components.utils.JamUtil class
 * @private
 */
	initializeUtils : function() {
		this.oODataUtil = new sap.collaboration.components.utils.OdataUtil();
		this.oJamUtil = new sap.collaboration.components.utils.JamUtil();
	},
	
/**
 * Sets the data model to the view
 * @private
 */
	setViewModel : function() {
		this.aGroupData;
		this.sFeedType === sap.collaboration.FeedType.group?
				this.aGroupData = this.oODataUtil.getGroupsData(this.oOdataModel, "/Groups")
			    :
		    	this.aGroupData = this.oODataUtil.getGroupsData(this.oOdataModel, "/BusinessObjects('" + this.oBusinessObject.id + "')/AssignedGroups");
			
	   	this.oViewData = {
			groupsData:	this.aGroupData
		};
	   	
	   	this.oViewModel = new sap.ui.model.json.JSONModel(this.oViewData);
		this.getView().setModel(this.oViewModel);
			
	},
	
/**
 * Handler for the "showNavButton" press event
 * @private
 */
	onNavButtonTap : function() {
		sap.ui.getCore().getEventBus().publish("nav", "back");
	}
	
});
/*!
 * @copyright@
 */

/*******************************************************
* GroupMaster View
*
* Is a view that displays the ui for a ui5 page.
* This page will contain a list of JAM groups
* It will be used as a mater page for the ui5 split app
********************************************************/

sap.ui.jsview("sap.collaboration.components.fiori.feed.splitApp.GroupMaster", {

	/** Specifies the Controller belonging to this View. 
	* In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	* @memberOf detail
	*/ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.feed.splitApp.GroupMaster";
	},

	/** Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	* Since the Controller is given to this method, its event handlers can be attached right away.
	* It creates a UI5 page that has a list. 
	* @param {sap.ui.controller} oController The view Controller 
	* @memberOf detail
	*/ 
	createContent : function(oController) {
		
		this.sPrefixId  = this.getViewData().controlId;
		
		this.groupMasterPage = 
			new sap.m.Page(this.sPrefixId  + "groupPage", {
				title: this.getViewData().groupMasterpageTitle,
				showNavButton : true,
				navButtonPress: oController.onNavButtonTap,
				content: [
				          	new sap.m.List(this.sPrefixId + "groupsList",{inset: true})
				          ]
		});
		
		return this.groupMasterPage;
	}

});
/*!
 * @copyright@
 */

/*************************************************************
* SplitApp View Controller
*
* Is the controller for the SplitApp View and is responsible 
* for creating and setting the master and detail pages for 
* the ui5 split app and for registering the navigation events
**************************************************************/

sap.ui.controller("sap.collaboration.components.fiori.feed.splitApp.SplitApp", {

/**
* Called when a controller is instantiated and its View controls (if available) are already created.
* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
* It initializes class variables and registers event handlers for the navigation.
* @memberOf splitApp
*/
	onInit: function() {
		this.oSplitApp = this.getView().oSplitApp;
		this.sAppType = this.getView().getViewData().appType;
		this.oOdataModel = this.getView().getViewData().odataModel;
		this.oBusinessObject = this.getView().getViewData().object;
		this.oLangBundle = this.getView().getViewData().langBundle;
		
		this.sPrefixId = this.getView().getViewData().controlId;
		
		this.oEventBus = sap.ui.getCore().getEventBus();
		this.oEventBus.subscribe("nav", "to", this.navToHandler, this);
		this.oEventBus.subscribe("nav", "back", this.navBackHandler, this);
	},

/**
* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered.
* (NOT before the first rendering! onInit() is used for that one!).
* It calls the createMasterDetail() function. Please refer to this function for the JSDoc.
* @memberOf splitApp
*/
	onBeforeRendering: function() {
		this.createMasterDetail();
	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
* @memberOf splitApp
*/
//	onAfterRendering: function() {
//
//	},

/**
* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
* @memberOf splitApp
*/
//	onExit: function() {
//
//	}
	
/**
 * Creates and sets the master and detail pages for the split app.
 * The master page on initial load will be the Feed Type Master View.
 * The detail page will be the Detail View.
 * @private
 */
	createMasterDetail : function() {
		
		var oODataUtil = new sap.collaboration.components.utils.OdataUtil();
		var sJamUrl = oODataUtil.getJamUrl(this.oOdataModel);
		this.sJamToken = oODataUtil.getJamToken(this.oOdataModel);
		
		var oMasterView = sap.ui.view({
			id: this.sPrefixId + "masterView", 
			viewData : {
				controlId: this.sPrefixId,
				jamToken: this.sJamToken,
				langBundle: this.oLangBundle,
				object: this.oBusinessObject
			}, 
			type: sap.ui.core.mvc.ViewType.JS, 
			viewName: "sap.collaboration.components.fiori.feed.splitApp.FeedTypeMaster"
		});
		
		var oDetailView = sap.ui.view({
			id: this.sPrefixId + "detailView", 
			viewData : {
				controlId: this.sPrefixId,
				appType: this.sAppType,
				jamURL:	sJamUrl,
				jamToken: this.sJamToken,
				langBundle: this.oLangBundle,
				object: this.oBusinessObject
			}, 
			type: sap.ui.core.mvc.ViewType.JS, 
			viewName: "sap.collaboration.components.fiori.feed.commons.Detail"
		});
		
		this.oSplitApp.addDetailPage(oDetailView); 
		this.oSplitApp.addMasterPage(oMasterView);
		this.oSplitApp.setInitialDetail(oDetailView); 
		this.oSplitApp.setInitialMaster(oMasterView);
	},
	
/**
 * Handler for the "navigate to" event.
 * This handler creates the Group Master View in case it was not previously created and add it to the master page of the split app.
 * @param {string} sChannelId The ID for the Navigation channel.
 * @param {string} sEventId The ID of the Event.
 * @param {object} oData The navigation data.
 * @private
 */
	navToHandler : function(sChannelId, sEventId, oData) {
        if (oData && oData.viewId === this.sPrefixId + "groupMasterView") {
        	if (!sap.ui.getCore().byId(oData.viewId)) {
				var oView = sap.ui.view({
					id: oData.viewId, 
					viewData : {
						controlId: this.sPrefixId,
						odataModel:  this.oOdataModel,
						object:	this.oBusinessObject,
						feedType: oData.data.feedType,
						pageTitle: oData.data.groupMasterPageTitle,
						jamToken: this.sJamToken,
						langBundle: this.oLangBundle
					}, 
					type: sap.ui.core.mvc.ViewType.JS, 
					viewName: oData.viewName
				});
				
				this.oSplitApp.addMasterPage(oView);
			} 
        	else{
        		// the rerender() will not create the content of the view again or call the init of the controller, it will only start from calling the onBeforeRendering()
        		// it is needed so that the group list is rebound again with the groups in case we switch from groups to bo groups or in case the data changes on the backend
        		// ie to get always the latest data (groups)
        		sap.ui.getCore().byId(oData.viewId).getController().sFeedType = oData.data.feedType;
        		sap.ui.getCore().byId(oData.viewId).getController().sPageTitle = oData.data.groupMasterPageTitle;
        		sap.ui.getCore().byId(oData.viewId).rerender();
        	}
        	this.oSplitApp.to(oData.viewId);
        } else {
            jQuery.sap.log.error("nav-to event cannot be processed. Invalid data: " + oData);
        }
    },

/**
 * Handler for the "navigate back" event.
 * It navigates back to the previous master page.
 * @private
 */
    navBackHandler : function() {
        this.oSplitApp.backMaster();
    }

});
/*!
 * @copyright@
 */

/*******************************************************
* SplitApp View
*
* Is a view that displays the ui for a ui5 split app.
* This split app will contain a master page and a detail
* page. The master page will display either a list of 
* Feed Types or a list of JAM groups. The detail page
* will display the JAM Feed WIdget
********************************************************/

sap.ui.jsview("sap.collaboration.components.fiori.feed.splitApp.SplitApp", {

	/** Specifies the Controller belonging to this View. 
	* In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	* @memberOf splitApp
	*/ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.feed.splitApp.SplitApp";
	},

	/** Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	* Since the Controller is given to this method, its event handlers can be attached right away. 
	* It creates a UI5 split app
	* @param {sap.ui.controller} oController The view Controller 
	* @memberOf splitApp
	*/ 
	createContent : function(oController) {
		this.sPrefixId = this.getViewData().controlId;
		this.oSplitApp = new sap.m.SplitApp(this.sPrefixId + "splitApp");
		return this.oSplitApp;
	}

});
/*!
 * @copyright@
 */

sap.ui.controller("sap.collaboration.components.fiori.sharing.Sharing", {

/**
* Called when a controller is instantiated and its View controls (if available) are already created.
* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
* Initialize class variables
* @memberOf Sharing
*/
	onInit: function() {
		this.sPrefixId = this.getView().getViewData().controlId;
		this.oLangBundle = this.getView().getViewData().langBundle;
		this.aJamGroups = this.getView().getViewData().jamGroups;
		this.sObjectShare = this.getView().getViewData().objectShare;
		this.oObjectDisplay = this.getView().getViewData().objectDisplay;
	},

/**
* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
* (NOT before the first rendering! onInit() is used for that one!).
* @memberOf Sharing
*/
	onBeforeRendering: function() {
		if (this.aJamGroups.length !== 0){
			this.addFormElement();
			this.processGroupsData();
			this.setViewModel();
			this.bindGroupSelect();
		}
		else{
			this.addNoGroupsMessage();
		}
	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
* @memberOf Sharing
*/
	onAfterRendering: function() {
		this.sSelectedGroupId = sap.ui.getCore().byId(this.sPrefixId + "_GroupSelect").getSelectedKey();
		
		//in case the view was rerendered (ie it was created previously and then reused again), we have to reset the field for note
		if(this.sObjectShare){
			sap.ui.getCore().byId(this.sPrefixId + "_NoteTextArea").setValue(this.sObjectShare);
		}
		
	},

/**
* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
* @memberOf Sharing
*/
//	onExit: function() {
//	}
	
	/**
	* Adds Form elements to the VBox in case there are groups
	* @private
	*/
	addFormElement : function() {
		this.getView().oSharingVBox.removeAllItems();
		
		if(this.oObjectDisplay){
			this.getView().oSharingVBox.addItem(
				this.oObjectDisplay
         	);
		}
				
		this.getView().oSharingVBox.addItem(
            this.getView().oGroupSelectionLayout
            );
		
		this.getView().oSharingVBox.addItem(
	        this.getView().oNoteLayout
	        );
	},
	
	/**
	* Adds information message to the VBox in case there are no groups
	* @private
	*/
	addNoGroupsMessage : function() {
		this.getView().oSharingVBox.removeAllItems();
		this.getView().oSharingVBox.addItem(
            this.getView().oNoDataLayout
       	);
	},
	
	/**
	* Processes the group data to append the type of the group to the group name
	* @private
	*/
	processGroupsData : function() {
		for(var i=0; i<this.aJamGroups.length; i++){
			this.aJamGroups[i].Name = this.aJamGroups[i].Name + " (" + this.aJamGroups[i].GroupType + ")";
		}
	},
	
	/**
	* Sets the view model
	* @private
	*/
	setViewModel : function() {
	   	this.oViewData = {
			jamGroups:	this.aJamGroups
		};
	   	
	   	this.oViewModel = new sap.ui.model.json.JSONModel(this.oViewData);
		this.getView().setModel(this.oViewModel);
	},
	
	/**
	* Binds data to the group DDB
	* @private
	*/
	bindGroupSelect : function() {
		var oItemTemplate = new sap.ui.core.Item({
			key: "{Id}",
			text: "{Name}"
		});
		
		sap.ui.getCore().byId(this.sPrefixId + "_GroupSelect").bindItems("/jamGroups", oItemTemplate);
	},
	
	/**
	* Event Handler for the group DDB
	* @private
	*/
	onGroupSelectChange : function(oControlEvent){
		this.sSelectedGroupId = oControlEvent.getParameter("selectedItem").getKey();
	},
	
	/**
	* Gets the form data that can be used by other class to share some info to Jam
	* @private
	*/
	getSharingData : function() {
		var oSharingData = {
				note:		sap.ui.getCore().byId(this.sPrefixId + "_NoteTextArea").getValue(),
				groupId:	this.sSelectedGroupId
		};
		
		return oSharingData;
	}

});
/*!
 * @copyright@
 */

sap.ui.jsview("sap.collaboration.components.fiori.sharing.Sharing", {

	/** Specifies the Controller belonging to this View. 
	* In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	* @memberOf Sharing
	*/ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.sharing.Sharing";
	},

	/** Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	* Since the Controller is given to this method, its event handlers can be attached right away.
	* Creates and returns a UI5 mobile VBox 
	* @memberOf Sharing
	*/ 
	createContent : function(oController) {
		var sPrefixId = this.getViewData().controlId;
		
		this.prepareSharingVBoxContent(oController);
		
		this.oSharingVBox = new sap.m.VBox(sPrefixId + "_SharingVbox");
		
		return this.oSharingVBox;
	},
	
	/** 
	* Prepares the UI5 elements/controls that should be rendered in the VBox
	* @param {sap.ui.controller} oController The view Controller
	* @private
	*/ 
	prepareSharingVBoxContent : function(oController) {
		var sPrefixId = this.getViewData().controlId;
		var oLangBundle = this.getViewData().langBundle;
		var sJamUrl = this.getViewData().jamUrl;
		
		// Prepare the UI controls in case of no groups available 
		this.oNoDataLayout = new sap.ui.layout.VerticalLayout(sPrefixId + "_NoDataLayout", {
			width: "100%",
		    content: [
						new sap.ui.core.HTML(sPrefixId + "_NoDataDiv", {content: "<div>" + oLangBundle.getText("No_GROUPS_ERROR") + "</div>"}),
						new sap.m.VBox(sPrefixId + "_LinkVbox",{
							alignItems: sap.m.FlexAlignItems.End,
							items: [
				                new sap.m.Link(sPrefixId + "_JamLink", {
				                	text : oLangBundle.getText("JAM_URL_TEXT"),
				                	target: "_blank",
				                	href : sJamUrl
				                })
			                ]
						}).addStyleClass("linkVBox")
			]
		});
		
		//***************** In case there are groups ********************//
		// Prepare the UI that will be displayed in the VBox, ie DDB, Text Areas, labels .....
		var oGroupLabel = new sap.m.Label(sPrefixId + "_GroupLabel", {
			text: oLangBundle.getText("GRP_SELECT_LABEL"),
			required : true,
			width: "100%"
		}); 
		
		var oGroupSelect = new sap.m.Select(sPrefixId + "_GroupSelect", {
			width: "100%",
			items: [],
			change: function(oControlEvent) {
				oController.onGroupSelectChange(oControlEvent);
			}
		});
		
		this.oGroupSelectionLayout = new sap.ui.layout.VerticalLayout(sPrefixId + "_GroupSelectionLayout", {
			width: "100%",
			layoutData: new sap.m.FlexItemData({growFactor: 1}),
		    content: [
						oGroupLabel, 
						oGroupSelect
			]
		}).addStyleClass("sharingVBox");
		
		var oNoteLabel = new sap.m.Label(sPrefixId + "_NoteLabel", {
			text: oLangBundle.getText("ADD_NOTE_LABEL"),
			width: "100%"
		}); 
		
		var iObjectId_CharLength;
		this.getViewData().objectId ? iObjectId_CharLength = this.getViewData().objectId.length : iObjectId_CharLength = 0;
		var iNoteTextArea_MaxChar = 1000 - iObjectId_CharLength - 1; // -1 to account for the newline we add as separator bet the Obj Id and the note in the feed
		var oNoteTextArea = new sap.m.TextArea(sPrefixId + "_NoteTextArea", {
			rows: 6,
			width : "100%",
			maxLength: iNoteTextArea_MaxChar
		});
		
		this.oNoteLayout = new sap.ui.layout.VerticalLayout(sPrefixId + "_NoteLayout", {
			width: "100%",
			layoutData: new sap.m.FlexItemData({growFactor: 2}),
		    content: [
						oNoteLabel, 
						oNoteTextArea
			]
		}).addStyleClass("sharingVBox");
	}

});
jQuery.sap.declare('sap.collaboration.library-all');
jQuery.sap.declare('sap.collaboration.components.fiori.feed.app.App.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.app.App.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.commons.Detail.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.splitApp.FeedTypeMaster.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.splitApp.FeedTypeMaster.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.splitApp.GroupMaster.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.splitApp.GroupMaster.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.splitApp.SplitApp.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.splitApp.SplitApp.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.sharing.Sharing.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.sharing.Sharing.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.collaboration.components.utils.CommonUtil') ) {
/*!
 * @copyright@
 */

/*************************************************************
* CommonUtil helper class
*
* Common utilities functions
**************************************************************/
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained

jQuery.sap.declare("sap.collaboration.components.utils.CommonUtil");

sap.ui.base.Object.extend("sap.collaboration.components.utils.CommonUtil",{

	/**
	 * Gets language bundle
	 * @private
	 */
	getLanguageBundle: function() {
		if (!this.oLangBundle){
			jQuery.sap.require("jquery.sap.resources");
			var sLocale = sap.ui.getCore().getConfiguration().getLanguage();
			this.oLangBundle = jQuery.sap.resources({
				url : jQuery.sap.getModulePath("sap.collaboration.components") + "/i18n/messagebundle.properties", 
				locale: sLocale
			});
		}
		
		return this.oLangBundle;
	},
	
	/**
	 * Displays a MessageBox with an error message
	 * @param {oError} object The error object
	 * @private
	 */
	displayError : function(oError) {
		var sMessage = this.getLanguageBundle().getText("SYSTEM_ERROR_MESSAGEBOX_GENERAL_TEXT");
		
		sap.m.MessageBox.show(
				sMessage,
   				sap.m.MessageBox.Icon.ERROR,
   				this.getLanguageBundle().getText("SYSTEM_ERROR_MESSAGEBOX_TITLE")
		);
	}
	
	
});
}; // end of sap/collaboration/components/utils/CommonUtil.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.utils.JamUtil') ) {
/*!
 * @copyright@
 */

/*************************************************************
* JamUtil helper class
*
* Is responsible for the integration and communication with the
* JAM APIs
**************************************************************/

jQuery.sap.declare("sap.collaboration.components.utils.JamUtil");

sap.ui.base.Object.extend("sap.collaboration.components.utils.JamUtil",{
	
	FeedRenderedControllerConstants : {
		jamWidgetCSS :	{
			avatar: false, 
			skin: "gr", 
			post_mode: "inline", 
			reply_mode: "inline",
			mobile_mode: true,
			live_update: true
		}
	},
	
	JamFeedType: {
		Follows: "follows",
		Company: "company",
		Group: "group",
		ObjectGroup: "context",
		Object: "external"
	},
	
	JamCallback: {
		autocomplete: "autocomplete",
		post_status: "post_status",
		link: "link"		
	},	
	
	JamEventType: {
		mouseover: "mouseover",
		mouseout: "mouseout",
		click: "click"
	},
	
	/**
	 * Creates the feed widget
	 * @param {string} sJamURL The URL for the JAM System
	 * @param {callback} fLoadSuccess A call back function in case of success
	 * @param {callback} fLoadError A call back function in case of error
	 * @private
	 */
	loadFeedWidgetScript : function(sJamURL, fLoadSuccess, fLoadError) {
		var self = this;
		var sScriptUrl = sJamURL  + "/assets/feed_widget_v1.js";
		
		jQuery.sap.includeScript(sScriptUrl, "sap.collaboration.feed.JamFeedWidget", fLoadSuccess, fLoadError);
		jQuery.sap.log.info("Jam Feed Widget Script Loading Asynchronously","sap.collaboration.components.utils.JamUtil.loadFeedWidgetScript()");
		
	},
	
	/**
	 * Initialize the JAM feed widget by calling JAM API
	 * @param {string} sJamURL The URL for the JAM System
	 * @private
	 */
	initializeJamWidget : function(sJamURL) {
		try{
		   this.sapjam = eval('sapjam');
		   this.sapjam.feedWidget.init(sJamURL + "/widget/v1/feed", "single_use_token");
		   jQuery.sap.log.info("Jam Feed Widget Initialized", "sap.collaboration.components.utils.JamUtil.initializeJamWidget()");
		   // "/c/cubetree.com/widget/v1/feed", "single_use_token"
		} catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.JamUtil.initializeJamWidget()");
			throw oError;
		}
	},

   /**
	 * Creates the JAM feed widget by calling the JAM API
	 * @param {string} sJamToken A JAM token
	 * @param {string} sWidgetContainerID The DIV ID for the widget
	 * @param {string} sFeedType The widget feed type
	 * @param {string} sGroupIds The JAM groups ID in case feed type is "group"
	 * @param {object} oBusinessObject The object in case of object feed
	 * @private
	 */
	createJamWidget:function(sWidgetContainerID, oWidgetData){
		try{				
			//var oWidgetData = this.prepareWidgetData(sJamToken, sFeedType, sGroupIds, oBusinessObject);
			this.sapjam = eval('sapjam');
			this.sapjam.feedWidget.create(sWidgetContainerID, oWidgetData);
		} catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.JamUtil.createJamWidget()");
			throw oError;
		}

	},
	
	/**
	 * Creates the data needed by the JAM API to create the widget 
	 * @param {string} sJamToken A JAM token
	 * @param {string} sFeedType The widget feed type
	 * @param {string} sGroupIds The JAM groups ID in case feed type is "group"
	 * @param {object} oBusinessObject The object in case of object feed
	 * @private
	 */
	prepareWidgetData:function(sJamToken, sFeedType, sGroupIds, oBusinessObject) {
		var oWidgetData;
		
		oWidgetData = {
			type: sFeedType, 
			avatar: this.FeedRenderedControllerConstants.jamWidgetCSS.avatar, 
			//skin: this.FeedRenderedControllerConstants.jamWidgetCSS.skin, 
			live_update: this.FeedRenderedControllerConstants.jamWidgetCSS.live_update,
			post_mode: this.FeedRenderedControllerConstants.jamWidgetCSS.post_mode, 
			reply_mode: this.FeedRenderedControllerConstants.jamWidgetCSS.reply_mode,
			mobile_mode: this.FeedRenderedControllerConstants.jamWidgetCSS.mobile_mode,
			hide_bookmark: true,
			single_use_token: sJamToken
		};
		
		switch(sFeedType){
			case sap.collaboration.FeedType.follows:
	   		case sap.collaboration.FeedType.company:
				oWidgetData.type = sFeedType;
				break;
	   		case sap.collaboration.FeedType.group:
	   		case sap.collaboration.FeedType.objectGroup:
				oWidgetData.type 			= this.JamFeedType.Group;
				oWidgetData.group_id 		= sGroupIds;
				break;
	   		case sap.collaboration.FeedType.object:
				oWidgetData.type 			= this.JamFeedType.Object;
				if(!oBusinessObject){
					var oErrorObjectUndefined = new Error("Object is undefined");
					jQuery.sap.log.error(oErrorObjectUndefined, "", "sap.collaboration.components.utils.JamUtil.prepareWidgetData()");
					throw oErrorObjectUndefined;
				}
				if(!oBusinessObject.id){
					var oErrorIdUndefined = new Error("Property 'id' is undefined");
					jQuery.sap.log.error(oErrorIdUndefined, "", "sap.collaboration.components.utils.JamUtil.prepareWidgetData()");
					throw oErrorIdUndefined;
				}
				if(!oBusinessObject.type){
					var oErrorTypeUndefined = new Error("Property 'type' is undefined");
					jQuery.sap.log.error(oErrorTypeUndefined, "", "sap.collaboration.components.utils.JamUtil.prepareWidgetData()");
					throw oErrorTypeUndefined;
				}
				try{
					oWidgetData.external_id		= oBusinessObject.id;
					oWidgetData.external_type	= oBusinessObject.type;					
					oWidgetData.external_object = oBusinessObject;
				} catch(oError){
					jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.JamUtil.prepareWidgetData()");
					throw oError;
				}
				break;
	   		default:
				var sError = "Feed Type not supported";
				jQuery.sap.log.error(sError, "", "sap.collaboration.components.utils.JamUtil.prepareWidgetData()");
				throw new Error(sError);
		}
		
		return oWidgetData;
	}
});
}; // end of sap/collaboration/components/utils/JamUtil.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.utils.OdataUtil') ) {
/*!
 * @copyright@
 */

/*************************************************************
* OdataUtil helper class
*
* Is responsible for the integration and communication with the
* Backend OData Server
**************************************************************/

jQuery.sap.declare("sap.collaboration.components.utils.OdataUtil");

sap.ui.base.Object.extend("sap.collaboration.components.utils.OdataUtil",{

	/**
	 * Gets the JAM URL using OData
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @private
	 */
	getJamUrl:function(oOdataModel) {
	   var sJamUrl = "";
	   var sErrorCode;
	   var fSuccessFn = function(oData,response){
		   sJamUrl = oData.GetCollaborationHostUrl.Url;
	   	};		   
	   	var fErrorFn = function(oError){
	   		jQuery.sap.log.error(JSON.stringify(oError));
	   		sErrorCode = oError.response.statusCode;
	   	};
	   	oOdataModel.read("/GetCollaborationHostUrl", null, null, false, fSuccessFn, fErrorFn);
	   	
	   	if (sErrorCode){
	   		throw new Error(sErrorCode);
	   	}
	   	
	   	return sJamUrl;

	},
	
	/**
	 * Gets the JAM token using OData
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @private
	 */
	getJamToken:function(oOdataModel) {
	   var sJamToken = "";
	   var sErrorCode;
	   var fSuccessFn = function(oData,response){
			sJamToken = oData.GetSingleUseToken.Id;
	   	};		   
	   	var fErrorFn = function(oError){
	   		jQuery.sap.log.error(JSON.stringify(oError));
	   		sErrorCode = oError.response.statusCode;
	   	};
	   	oOdataModel.read("/GetSingleUseToken", null, null, false, fSuccessFn, fErrorFn);
	   	
		if (sErrorCode){
			throw new Error(sErrorCode);
		}
		
		return sJamToken;
	   	
	},
	
	/**
	 * Gets the JAM groups using OData
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {string}	sODataEndPoint The OData end point
	 * @private
	 */
	getGroupsData:function(oOdataModel, sODataEndPoint) {		
		var aGroupsData;
		var sErrorCode = "";
		var fSuccessFn = function(oData,response){
		   aGroupsData = oData.results;
	   	};
	   	var fErrorFn = function(oError){
	   		jQuery.sap.log.error(JSON.stringify(oError));
	   		sErrorCode = oError.response.statusCode;
	   	};
	   	oOdataModel.read(sODataEndPoint, null, null, false, fSuccessFn, fErrorFn);
	   	
	   	if (sErrorCode){
	   		throw new Error(sErrorCode);
	   	}
	   	
	   	return aGroupsData;
	},
	
	/**
	 * Helper function to extract the JAM groups' IDs
	 * @param {array} aGroupData An array of JAM Groups 
	 * @private
	 */
	getGroupIds:function(aGroupData) {
		var sGroupsIds="";
		for (var i = 0; i < aGroupData.length; i++){
			if (i == 0){
				sGroupsIds += aGroupData[i].Id;
			} else{
				sGroupsIds +=  "," + aGroupData[i].Id;
			}
		}
		return sGroupsIds;
	},
	
	/**
	 * Creates JAM groups Feed using OData
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {string}	sGroupId Jam Group Id
	 * @param {string}	sFeedContent The content of the Feed
	 * @private
	 */
	createGroupFeed: function(oOdataModel, sGroupId, sFeedContent) {
		var sOdataEndPoint = "/Groups(" + sGroupId + ")/Feed";
		var oPayload = {
				"Text": sFeedContent
		};
		var bStatus;
		var fSuccess = function(){
			bStatus = true;
		};
		var fError = function(oError){
			jQuery.sap.log.error(JSON.stringify(oError.response.body));
			bStatus = false;
		};
		
		oOdataModel.create(sOdataEndPoint, oPayload, null, fSuccess, fError);
		
		return bStatus;
	}
});
}; // end of sap/collaboration/components/utils/OdataUtil.js
if ( !jQuery.sap.isDeclared('sap.collaboration.library') ) {
/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.collaboration (1.16.3)
 */
jQuery.sap.declare("sap.collaboration.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAP UI library: sap.collaboration (by SAP, Author)
 *
 * @namespace
 * @name sap.collaboration
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.collaboration",
  dependencies : ["sap.ui.core"],
  types: [
    "sap.collaboration.AppType",
    "sap.collaboration.FeedType"
  ],
  interfaces: [],
  controls: [],
  elements: [],
  noLibraryCSS: true,
  version: "1.16.3"});

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.collaboration.AppType.
jQuery.sap.declare("sap.collaboration.AppType");


/**
 * @class Application Type (Mode)
 *
 * @version 1.16.3
 * @static
 * @public
 */
sap.collaboration.AppType = {
  
    /**
     * Fiori Split App 
     * @public
     */
    split : "split",

    /**
     * SAP Jam Feed Widget Wrapper 
     * @public
     */
    widget : "widget"

  };
/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.collaboration.FeedType.
jQuery.sap.declare("sap.collaboration.FeedType");


/**
 * @class Feed Types
 *
 * @version 1.16.3
 * @static
 * @public
 */
sap.collaboration.FeedType = {
  
    /**
     * Follows feed type 
     * @public
     */
    follows : "follows",

    /**
     * Company feed type 
     * @public
     */
    company : "company",

    /**
     * Group feed type 
     * @public
     */
    group : "group",

    /**
     * Object group feed type 
     * @public
     */
    objectGroup : "objectGroup",

    /**
     * Oject feed type 
     * @public
     */
    object : "object"

  };

}; // end of sap/collaboration/library.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.feed.Component') ) {
/*!
 * @copyright@
 */





jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained


jQuery.sap.declare("sap.collaboration.components.fiori.feed.Component");


/**
* Constructor for the Feed Component.
* @since version 1.16
* @constructor
* @param {sap.ui.core.URI} [oDataServiceUrl] The OData service URL needed for the Feed Component, the default value is <tt>"/sap/opu/odata/sap/SM_INTEGRATION_SRV".</tt>
* @param {sap.collaboration.FeedType} feedType The type of feed to be displayed.
* @param {string} [groupIds] A comma separated list of group IDs.
* @param {JSON object} [object] A JSON object passed to the Feed component. 
* It is required when the value of <tt>feedType</tt> is <tt>sap.collaboration.FeedType.object</tt> or <tt>sap.collaboration.FeedType.objectGroup</tt>.
* This object represents business related information, such as a sales order, an opportunity, etc. It contains the following properties:
*		<ul>
*			<li><tt>id</tt>: the business object ID to be posted in the SAP Jam Feed. It can be any text as long as unique for each object or 
*							it can be an OData URL to the object in the application.</li>
*			<li><tt>type</tt>: the type of the business object. It can be any text or it can be the OData meta data URL to the object Entity Type.</li>
*			<li><tt>name</tt> (optional): the description of the business object to be displayed in SAP Jam, i.e. "SO 57746", "Opportunity 123", etc.</li>
*			<li><tt>ui_url</tt> (optional): the URL to navigate to the same business object in the application.</li>
*		</ul>
*
* @class Feed Component
*
* A Feed Component is a ui5 component that applications 
* can use to render a <tt>sap.m.App</tt> that 
* embeds the JAM Feed Widget.
* 
* @name sap.collaboration.components.fiori.feed.Component
* @public
*/
sap.ui.core.UIComponent.extend("sap.collaboration.components.fiori.feed.Component",
		/** @lends sap.collaboration.components.fiori.feed.Component */ {		
	
		metadata: {
			properties: {
				width: 		 			{type: "sap.ui.core.CSSSize", defaultValue: ""},
				height:		 			{type: "sap.ui.core.CSSSize", defaultValue: ""},				
				oDataServiceUrl:		{type: "sap.ui.core.URI", defaultValue: "/sap/opu/odata/sap/SM_INTEGRATION_SRV"},
				feedType:				{type: "string"},
				groupIds:				{type: "string"},
				object:					{type: "object"}
			},
			
			aggregations: {
			},
			
			events: {
			}
		},
		
		/**
		* Initialization of the Component
		* @private
		*/
		init: function(){
			//Initialize and apply constants for width and height 
			this.CollaborationFeedConstants = {
				defaultWidth: '100%',
				defaultHeight: '100%'
			 };
				
			this.setWidth(this.CollaborationFeedConstants.defaultWidth);
			this.setHeight(this.CollaborationFeedConstants.defaultHeight);
			// For SP06 the split app mode is disabled.
			this.mode = sap.collaboration.AppType.widget;
			
			this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
			this.oLangBundle = this.oCommonUtil.getLanguageBundle();
			
			sap.ui.core.UIComponent.prototype.init.apply(this);
		},
		
		/**
		* Contract for passing the settings to the Component.
		* @public
		* @param {JSON Object} oSettings A JSON object containing the following attributes:
		* 		<ul>
		* 			<li><tt>{sap.ui.core.URI} oDataServiceUrl</tt>: the URL of the OData Service needed for the Feed Component.</li>
		* 			<li><tt>{sap.collaboration.FeedType} feedType</tt>: the type of feed to be displayed.</li>
		* 			<li><tt>{string} [groupIds?]</tt>: a comma separated list of group IDs.</li>
		* 			<li><tt>{JSON object} object</tt>: the representation of a business object.</li>
		* 		</ul>
		*/
		setSettings : function(oSettings) {
			this.setODataServiceUrl(oSettings.oDataServiceUrl);
			this.setFeedType(oSettings.feedType);
			this.setGroupIds(oSettings.groupIds);
			this.setObject(oSettings.object);
		},		
		
		/**
		* Invoked before the Component is rendered.
		* Initializes the OData model.
		* @private
		*/
		onBeforeRendering: function(){
			var asJson = true;
            this.sODataServiceUrl = this.getODataServiceUrl();
            this.oOdataModel = new sap.ui.model.odata.ODataModel(this.sODataServiceUrl, asJson);
            
            // delete views before rendering
            if( sap.ui.getCore().byId(this.getId() + "_oAppView") ){
                  sap.ui.getCore().byId(this.getId() + "_oAppView").destroy();
            }
            if( sap.ui.getCore().byId(this.getId() + "_oSplitAppView") ){
                  sap.ui.getCore().byId(this.getId() + "_oSplitAppView").destroy();
            }
		},
		
		/**
		* Called when the Component has been rendered 
		* Creates a View that represents a UI5 app or a UI5 split app and place this view in the Component main HTML DIV created by the render function
		* @function
		* @private
		*/
		onAfterRendering: function(){	
			// log properties
			jQuery.sap.log.debug("Feed Component properties:", "", 
					"sap.collaboration.components.fiori.feed.Component.onAfterRendering()");
			jQuery.sap.log.debug("width: " + this.getWidth());
	        jQuery.sap.log.debug("height: " + this.getHeight());
	        jQuery.sap.log.debug("oDataServiceUrl: " + this.getODataServiceUrl());
	        jQuery.sap.log.debug("feedType: " + this.getFeedType());
	        jQuery.sap.log.debug("groupIds: " + this.getGroupIds());
	        jQuery.sap.log.debug("object: " + JSON.stringify(this.getObject()));
	        
			if(this.getMode() === sap.collaboration.AppType.widget){
				var oAppView = 
					sap.ui.view({
						id: this.getId() + "_oAppView",
						viewData : {
							controlId: this.getId(),
							odataModel:  this.oOdataModel,
							appType: this.getMode(),	
							feedType: this.getFeedType(),
							groupIds: this.getGroupIds(),
							object: this.getObject(),
							langBundle: this.oLangBundle
						}, 
						type:sap.ui.core.mvc.ViewType.JS, 
						viewName:"sap.collaboration.components.fiori.feed.app.App"
					});
				
				oAppView.placeAt(this.getId());
			}
			else if(this.getMode() === sap.collaboration.AppType.split){
				var oSplitAppView = 
					sap.ui.view({
						id: this.getId() + "_oSplitAppView",
						viewData : {
							controlId: this.getId(),
							odataModel:  this.oOdataModel,
							appType: this.getMode(),
							object: this.getObject(),
							langBundle: this.oLangBundle
						}, 
						type:sap.ui.core.mvc.ViewType.JS, 
						viewName:"sap.collaboration.components.fiori.feed.splitApp.SplitApp"
					});
				
				oSplitAppView.placeAt(this.getId());
			}
		},
		
		/**
		 * Renders the outer HTML for the Component
		 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
		 * @private
		 */
		render: function(oRm){
			oRm.write("<div id='" + this.getId() + "' style='width:" + this.getWidth() + ";height:" + this.getHeight() + "'");
			oRm.write(">");
			oRm.write("</div>");
			
		},
		
		/**
		 * Getter for the mode property
		 * @private
		 */
		getMode: function(){
			return this.mode;
		}
	}
);
}; // end of sap/collaboration/components/fiori/feed/Component.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.feed.commons.Detail.controller') ) {
  jQuery.sap.declare('sap.collaboration.components.fiori.feed.commons.Detail.controller');
/*!
 * @copyright@
 */


/**********************************************************
* Detail View Controller
*
* Is the controller for the Detail View and is responsible 
* for loading JAM API Script and for creating and rendering
* the JAM Feed Widget
***********************************************************/

sap.ui.controller("sap.collaboration.components.fiori.feed.commons.Detail", {
	
/**
* Called when a controller is instantiated and its View controls (if available) are already created.
* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
* It initializes class variables.
* @memberOf detail
*/
	onInit: function() {
		var self = this;
		this.sJamToken = this.getView().getViewData().jamToken;
		this.sJamURL = this.getView().getViewData().jamURL;
		this.oLangBundle = this.getView().getViewData().langBundle;
		this.sPrefixId  = this.getView().getViewData().controlId;
		this.oBusinessObject = this.getView().getViewData().object;
		
		if (this.getView().getViewData().appType === sap.collaboration.AppType.split){
			this.sFeedType = sap.collaboration.FeedType.follows;
		} else{
			this.sFeedType = this.getView().getViewData().feedType;
			this.getView().oDetailPage.setShowHeader(false);
		}
		
		this.oJamUtil = new sap.collaboration.components.utils.JamUtil();
	},

/**
* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
* (NOT before the first rendering! onInit() is used for that one!).
* @memberOf detail
*/
	onBeforeRendering: function() {
	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
* It calls the loadFeedWidgetScript() function. Please refer to this function for the JSDoc.
* @memberOf detail
*/
	onAfterRendering: function() {		
		try{
			this.loadFeedWidgetScript(this.sJamURL);			
		} catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.fiori.feed.commons.Detail.onInit()");
			throw oError;
		}
	},
	
	/**
	 * Loads the JAM API scripts used to create feed widget
	 * @private
	 */
	loadFeedWidgetScript: function(sJamURL){
	   var self = this;	 
		   
	   try{
		   //1) Prepare the widget data
		   var sGroupIds = self.getView().getViewData().groupIds;
		   var oWidgetData = this.oJamUtil.prepareWidgetData(self.sJamToken, self.sFeedType, sGroupIds, self.oBusinessObject);
		   	   
		   // Callback function to get notified once the script has been loaded
		   var fLoadSuccess = function(response){
			   jQuery.sap.log.info("Jam Feed Widget Loaded Successfully","sap.collaboration.components.fiori.feed.commons.Detail.onInit()");
			   //3) Initialize the jam widget
			   self.oJamUtil.initializeJamWidget(self.sJamURL);	
			   
			   //4) Create the Feed Widget
			   self.oJamUtil.createJamWidget(self.sPrefixId + "widgetContainer", oWidgetData);
	   		};	
		   		   	
		   	var fLoadError = function(oError){
		   		jQuery.sap.log.error(oError, "", "sap.collaboration.components.fiori.feed.commons.Detail.loadFeedWidgetScript()");
		   		throw oError;
		   	};
		   	
		    //2) Load the feed widget
		   	this.oJamUtil.loadFeedWidgetScript(sJamURL, fLoadSuccess, fLoadError);
			
		} catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.fiori.feed.commons.Detail.loadFeedWidgetScript()");
			throw oError;
		}
			
	}
	   
/**
* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
* @memberOf detail
*/
//	onExit: function() {
//
//	}
	
});
}; // end of sap/collaboration/components/fiori/feed/commons/Detail.controller.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.feed.dialog.Component') ) {
/*!
 * @copyright@
 */





jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained


jQuery.sap.declare("sap.collaboration.components.fiori.feed.dialog.Component");

/**
* Constructor for the Feed Dialog Component.
* @since version 1.16
* @constructor
* @param {sap.ui.core.URI} [oDataServiceUrl] The OData service URL needed for the Feed Dialog Component, the default value is <tt>"/sap/opu/odata/sap/SM_INTEGRATION_SRV".</tt>
* @param {sap.collaboration.FeedType} feedType The type of feed to be displayed.
* @param {string} [groupIds] A comma separated list of group IDs.
* @param {JSON object} [object] A JSON object passed to the Feed Dialog component. 
* It is required when the value of <tt>feedType</tt> is <tt>sap.collaboration.FeedType.object</tt> or <tt>sap.collaboration.FeedType.objectGroup</tt>.
* This object represents business related information, such as a sales order, an opportunity, etc. It contains the following properties:
*		<ul>
*			<li><tt>id</tt>: the business object ID to be posted in the SAP Jam Feed. It can be any text as long as unique for each object or 
*							it can be an OData URL to the object in the application.</li>
*			<li><tt>type</tt>: the type of the business object. It can be any text or it can be the OData meta data URL to the object Entity Type.</li>
*			<li><tt>name</tt> (optional): the description of the business object to be displayed in SAP Jam, i.e. "SO 57746", "Opportunity 123", etc.</li>
*			<li><tt>ui_url</tt> (optional): the URL to navigate to the same business object in the application.</li>
*		</ul>
*
* @class Feed Dialog Component
*
* A Feed Dialog Component is a ui5 component that applications 
* can use to render the feed widget view in a dialog and then can
* be used to share information in SAP JAM.
* 
* @name sap.collaboration.components.fiori.feed.dialog.Component
* @public
*/
sap.ui.core.UIComponent.extend("sap.collaboration.components.fiori.feed.dialog.Component",
		/** @lends sap.collaboration.components.fiori.feed.dialog.Component */ {
		metadata: {
			includes: ["../../../css/Sharing.css"],
			properties: {
				width: 		 			{type: "sap.ui.core.CSSSize", defaultValue: "575px"}, // Value defined by Central UX. Internal Message 3216022/2013
				//We need to pass a value in pixels, otherwise the dialog won't render correctly
				height:		 			{type: "sap.ui.core.CSSSize", defaultValue: "605px"}, // Value defined by Central UX. Internal Message 3216022/2013
				oDataServiceUrl:		{type: "sap.ui.core.URI", defaultValue: "/sap/opu/odata/sap/SM_INTEGRATION_SRV"},
				feedType:				{type: "string", defaultValue: sap.collaboration.FeedType.object},
				groupIds:				{type: "string"},
				object:					{type: "object"}
			},
			
			aggregations: {
			},
			
			events: {
			}
		},
		
		/**
		* Initialization of the Component
		* @private
		*/
		init: function(){
			this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
			this.oLangBundle = this.oCommonUtil.getLanguageBundle();	
			
			sap.ui.core.UIComponent.prototype.init.apply(this);
		},
		
		/**
		* Contract for passing the settings to the Component.
		* @public
		* @param {JSON Object} oSettings A JSON object containing the following attributes:
		* 		<ul>
		* 			<li><tt>{sap.ui.core.URI} oDataServiceUrl</tt>: the URL of the OData Service needed for the Feed Dialog Component.</li>
		* 			<li><tt>{sap.collaboration.FeedType} feedType</tt>: the type of feed to be displayed.</li>
		* 			<li><tt>{string} [groupIds?]</tt>: a comma separated list of group IDs.</li>
		* 			<li><tt>{JSON object} object</tt>: the representation of a business object.</li>
		* 		</ul>
		*/
		setSettings : function(oSettings) {
			this.setODataServiceUrl(oSettings.oDataServiceUrl);
			this.setFeedType(oSettings.feedType);
			this.setGroupIds(oSettings.groupIds);
			this.setObject(oSettings.object);
		},
		
		/**
		* Invoked before the Component is rendered.
		* Initializes the OData model.
		* @private
		*/
		onBeforeRendering: function(){				
		},
		
		/**
		* Called when the Component has been rendered 
		* Creates a View that represents a UI5 app or a UI5 split app and place this view in the Component main HTML DIV created by the render function
		* @function
		* @private
		*/
		onAfterRendering: function(){
		},
		
		/**
		 * Renders the outer HTML for the Component
		 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
		 * @private
		 */
		render: function(oRm){
		},
		
		/**
		 * Initializes the OData needed by the feed widget:
		 * The model, OData Util class. 
		 * Then get the Jam Url from our OData service and Token from Jam
		 * The values will be assigned to member variables to be used later when the Feed View is created
		 * @private
		 */
		initOdata: function(){
			// The variable asJson is used instead of just passing the boolean value 
			// to explain what is the effect of passing true to the ODataModel Constructor
			var asJson = true;            
			//Using a variable for better maintenance and debugging
			var sODataServiceUrl = this.getODataServiceUrl();
			
			// Initialize the OData Model
            this.oOdataModel = new sap.ui.model.odata.ODataModel(sODataServiceUrl, asJson);
            if(!this.oOdataModel.oMetadata.oMetadata){
            	var oErrorMetadataUndefined = new Error("Metadata is undefined");
            	jQuery.sap.log.error(oErrorMetadataUndefined, "", "sap.collaboration.components.fiori.feed.dialog.Component.initOdata()");
            	throw oErrorMetadataUndefined;
            }		            	
			
            // Use the OData utility class to get the jam url and token
			var oODataUtil = new sap.collaboration.components.utils.OdataUtil();
			
			try{
				this.sJamUrl = oODataUtil.getJamUrl(this.oOdataModel);  //Throws exception
				this.sJamToken = oODataUtil.getJamToken(this.oOdataModel); //Throws exception
			} catch(oError){				
				jQuery.sap.log.error(oError, "", "sap.collaboration.components.fiori.feed.dialog.Component.initOdata()");
				throw oError;
			}
		},
		
		/**
		 * Create the Feed Dialog Component
		 * @private
		 */
		createFeedDialogComponent: function(){
			//The following initialization and creation  methods cannot be called in the init() method 
			//because the parameters passed to the constructor are not available (SAPUI5 bug).
			try{				
				this.initOdata();								
				this.createFeedView();
				this.createFeedDialog();			
			} catch(oError){				
				jQuery.sap.log.error(oError, "", "sap.collaboration.components.fiori.feed.dialog.Component.createFeedDialogComponent()");
				throw oError;
			}
		},
		
		/**
		 * Creates the View that wraps the Feed Widget
		 * @private
		 */
		createFeedView : function() {
			try{							
				if(!this.oFeedView){					
					this.oFeedView  = sap.ui.view({
						id: this.getId() + "_FeedView", 
						height: "100%",
						viewData : {
							controlId: this.getId(),
							jamURL:	this.sJamUrl,
							jamToken: this.sJamToken,
							appType: sap.collaboration.AppType.widget,
							feedType: this.getFeedType(),
							groupIds: this.getGroupIds(),
							object: this.getObject(),
							langBundle: this.oLangBundle
						}, 
						type: sap.ui.core.mvc.ViewType.JS, 
						viewName: "sap.collaboration.components.fiori.feed.commons.Detail"
					});
				}
				else{
					//If the Feed View already exists, we pass the new settings
					this.oFeedView.getController().sFeedType = this.getFeedType();
					this.oFeedView.getViewData().groupIds = this.getGroupIds();
					this.oFeedView.getController().oBusinessObject = this.getObject();
				}
			} catch(oError){
				jQuery.sap.log.error(oError, "", "sap.collaboration.components.fiori.feed.dialog.Component.createFeedView()");
				throw oError;
			}
		},
		
		/**
		 * Creates the Dialog Mobile Control and passes the view in the content.
		 * @returns oFeedDialog A Feed Dialog Object of class sap.m.Dialog
		 * @private
		 */
		createFeedDialog: function() {
			var self = this;
			
			if (!this.oFeedDialog){
				this.oFeedDialog = new sap.m.Dialog(this.getId() + "FeedDialog", {
					title: this.oLangBundle.getText("FEED_DIALOG_TITLE"),
					stretch: false,
					contentWidth: this.getWidth(),
					contentHeight: this.getHeight(),
					content: [
					          this.oFeedView
					],
					endButton:
						new sap.m.Button({
							text: this.oLangBundle.getText("CLOSE_BUTTON_TEXT"),
							press : function() {
								self.oFeedDialog.close();
							}
						})
				}); 
			
				if(jQuery.device.is.phone){
					this.oFeedDialog.setStretch(true);
				}
			}
		},
		
		/**
		 * Open the Feed Dialog.
		 * @public
		 */
		open : function(){
			
			// log properties
			jQuery.sap.log.debug("Feed Dialog Component properties:", "", 
					"sap.collaboration.components.fiori.feed.dialog.Component.open()");
			jQuery.sap.log.debug("width: " + this.getWidth());
	        jQuery.sap.log.debug("height: " + this.getHeight());
	        jQuery.sap.log.debug("oDataServiceUrl: " + this.getODataServiceUrl());
	        jQuery.sap.log.debug("feedType: " + this.getFeedType());
	        jQuery.sap.log.debug("groupIds: " + this.getGroupIds());
	        jQuery.sap.log.debug("object: " + JSON.stringify(this.getObject()));
	        
			try{
					this.createFeedDialogComponent();
					this.oFeedDialog.open();			
			} catch (oError){
					jQuery.sap.log.error(oError, "", "sap.collaboration.components.fiori.feed.dialog.Component.open()");
					this.oCommonUtil.displayError(oError);
			}							
		}

	}
);
}; // end of sap/collaboration/components/fiori/feed/dialog/Component.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.sharing.Component') ) {
/*!
 * @copyright@
 */



jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

jQuery.sap.declare("sap.collaboration.components.fiori.sharing.Component");
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained


/**
* Constructor for the share component
* @since version 1.16
* @constructor
* @param {sap.ui.core.URI} [oDataServiceUrl] The OData service URL needed for the share component, the default value is "/sap/opu/odata/sap/SM_INTEGRATION_SRV"
* @param {JSON object} [object] A JSon object passed to the share component. This object contains the following properties:
*		<ul>
* 			<li>id (optional): is the object Id to be shared in SAP Jam, i.e a URL that navigates back to the same object in the application</li>
*			<li>display (optional): is a UI5 control to be displayed in the component UI</li>
*			<li>share (optional): is a note that will be displayed in the component UI and shared to SAP Jam too</li>
*		</ul>
* 		
* @class Share Component
*
* A Share Component is a ui5 component that applications 
* can use to share information to JAM
* @name sap.collaboration.components.fiori.sharing.Component
* @public
*/

sap.ui.core.UIComponent.extend("sap.collaboration.components.fiori.sharing.Component",
		/** @lends sap.collaboration.components.fiori.sharing.Component */ {		
	
		metadata: {
			includes: ["../../css/Sharing.css"],
			/**
			 * the Properties are:
			 * 		component width
			 * 		component height
			 * 		OData Service URL
			 * 		JSON like Object that looks like:
			 *		{
             *   		display: display,
             *   		id:"id",
             *   		share: "share"
			 *		}
			 *		
			 *		where: 
			 *				display is a UI5 control to be displayed in the component UI
			 * 				id is the Object Id to be shared in JAM
			 *				share: is a note that will be displayed in the component UI that is used also as sharing info to jam
			 * */
			properties: {
				width: 		 			{type: "sap.ui.core.CSSSize", defaultValue: "100%"},
				height:		 			{type: "sap.ui.core.CSSSize", defaultValue: "100%"},
				oDataServiceUrl:		{type: "sap.ui.core.URI", defaultValue: "/sap/opu/odata/sap/SM_INTEGRATION_SRV"},
				object:					{type: "object"}
			},
			
			aggregations: {
			},
			
			events: {
			}
		},
		
		/**
		* Initialization of the Component
		* @private
		*/
		init: function(){
			this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();			
			this.oLangBundle = this.oCommonUtil.getLanguageBundle();
			
			this.aJamGroups = [];
			
			// a flag that can be set to inform this component to bypass any OData call
			// so in this case the groups "this.aJamGroups" should be initialized by the caller like:
			// var oComp =  sap.ui.getCore().createComponent(....);
			// oComp.aJamGroups = aGroups;
			this.bOdataOn = true;
		},
		
		/**
		* Invoked before the Component is rendered.
		* It calls the setGroupsData() function. Refer to the setGroupsData() for the JSDoc 
		* @private
		*/
		onBeforeRendering: function(){
			
			if (this.bOdataOn === true){
				try{
					this.setGroupsData();
				}
				catch(oError){					
					this.oCommonUtil.displayError(oError);
					this.bStopRendering = true;
				}
			}
		},
		
		/**
		* Called when the Component has been rendered 
		* Creates the sharing View or rerender it
		* @function
		* @private
		*/
		onAfterRendering: function(){
			// log properties
			jQuery.sap.log.debug("Share Component properties:", "", 
					"sap.collaboration.components.fiori.sharing.Component.onAfterRendering()");
			jQuery.sap.log.debug("width: " + this.getWidth());
	        jQuery.sap.log.debug("height: " + this.getHeight());
	        jQuery.sap.log.debug("oDataServiceUrl: " + this.getODataServiceUrl());
	        if(this.getObject()) {
	        	jQuery.sap.log.debug("object->id: " + this.getObject().id);
	        	jQuery.sap.log.debug("object->share: " + this.getObject().share);
	        	jQuery.sap.log.debug("object->display: " + this.getObject().display);
	        } else {
	        	jQuery.sap.log.debug("object: undefined");
	        }
	        
			var oObject = this.getObject();
			var oObjectDisplay;
			var sObjectShare;
			var sObjectId;
			
			if (oObject){
				oObjectDisplay = oObject.display; 
				sObjectShare = oObject.share; 
				sObjectId = oObject.id;
			}
			
			if(this.bStopRendering === undefined || this.bStopRendering === false){
				if(!this.oSharingView)
				{
					var sJamUrl = this.getJamUrl();
					
					this.oSharingView = sap.ui.view({
						id: this.getId() + "_SharingView",
						viewData : {
							controlId: 	this.getId(), 
							langBundle: this.oLangBundle,
							jamGroups: this.aJamGroups,
							jamUrl:	sJamUrl,
							objectDisplay: oObjectDisplay,
							objectShare: sObjectShare,
							objectId: sObjectId
						}, 
						type: sap.ui.core.mvc.ViewType.JS, 
						viewName: "sap.collaboration.components.fiori.sharing.Sharing"
					});
					
				}
				else{
						this.oSharingView.getController().aJamGroups = this.aJamGroups;
						this.oSharingView.getController().sObjectShare = sObjectShare;
						this.oSharingView.getController().oObjectDisplay = oObjectDisplay;
						//**** Note: we dont rerender the view here because when the component container rerender this component, it deleted the domRef and the rerender
						//**** for the view can not be accomplished without the domRef, so we depend on the "placeAt" to do the trick
						//this.oSharingView.rerender();
				}
				
				this.oSharingView.placeAt(this.getId());
			}
		},
		
		/**
		* Called when the Component is destroyed. Use this one to free resources and finalize activities.
		* Destroys the sharing view
		* @private
		*/
		exit: function() {
			// destroy the view in case the component is destroyed as the view will not be destroyed by default. It's not in the aggregation of the component.
			this.oView.destroy();
		},
		
		/**
		* Setter for the Component settings.
		* @param {JSON Object} oSettings A JSON object used to set the component settings, this object should contains the same 
		* properties used in the constructor. 
		* @public
		*/
		setSettings : function(oSettings) {
			this.setODataServiceUrl(oSettings.oDataServiceUrl);
			this.setObject(oSettings.object);
		},
		
		/**
		 * Renders the outer HTML for the Component
		 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
		 * @private
		 */
		render: function(oRm){
			oRm.write("<div id='" + this.getId() + "' style='width:" + this.getWidth() + ";height:" + this.getHeight() + "'");
			oRm.write(">");
			oRm.write("</div>");
		},
		
		/**
		* Initializes the OData model.
		* It calls initializeOdataModel(), initializeOdataUtils() and getJamGroups(). Refer to these functions for the JSDoc
		* @private
		*/
		setGroupsData : function() {
			this.initializeOdataModel();
			this.initializeOdataUtils();
			
			try{
				this.aJamGroups = this.getJamGroups();
			}
			catch(oError){
				throw new Error(oError.message);
			}
		},
		
		/**
		 * Initializes the OData Model
		 * @private
		 */
		initializeOdataModel : function() {
			var asJson = true;
            this.sODataServiceUrl = this.getODataServiceUrl();
        	this.oOdataModel = new sap.ui.model.odata.ODataModel(this.sODataServiceUrl, asJson);
		},
		
		/**
		 * Initialize the OData Utility Class
		 * @private
		 */
		initializeOdataUtils : function() {
			this.oODataUtil = new sap.collaboration.components.utils.OdataUtil();
		},
		
		/**
		 * Gets the Jam groups
		 * @private
		 */
		getJamGroups : function() {
			return this.oODataUtil.getGroupsData(this.oOdataModel, "/Groups");
		},
		
		/**
		 * Gets the Jam URL
		 * @private
		 */
		getJamUrl : function() {
			return this.oODataUtil.getJamUrl(this.oOdataModel);
		},
		
		/**
		 * Shares the data to Jam group
		 * @public
		 */
		shareToJam : function() {
			var oSharingData = this.oSharingView.getController().getSharingData();
			
			var self = this;
			var sNote = oSharingData.note;
			var sGroupId = oSharingData.groupId;
			var sFeedContent = sNote; 
			var sObjectId;
			var resultMessage;
			
			if(this.getObject()){
				sObjectId = this.getObject().id;
			}
			
			if(sObjectId && sFeedContent !== ""){
				sFeedContent = sFeedContent + "\n" + this.getObject().id;
			} else if(sObjectId){
				sFeedContent = this.getObject().id;
			}
			
			// log sFeedContent
			jQuery.sap.log.debug("Share Component sFeedContent: " + sFeedContent, "", 
					"sap.collaboration.components.fiori.sharing.Component.shareToJam()");

			
			var result = this.oODataUtil.createGroupFeed(this.oOdataModel, sGroupId, sFeedContent);
			if(result === true){
				resultMessage = self.oLangBundle.getText("SHARING_SUCCESS_MSG");
			} else{
				resultMessage = self.oLangBundle.getText("SHARING_ERROR_MSG");
			}
			
			return resultMessage;
		}
	}
);
}; // end of sap/collaboration/components/fiori/sharing/Component.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.sharing.dialog.Component') ) {
/*!
 * @copyright@
 */



jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

jQuery.sap.declare("sap.collaboration.components.fiori.sharing.dialog.Component");
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained



/**
* Constructor for the share dialog component
* @since version 1.16
* @constructor
* @param {sap.ui.core.URI} [oDataServiceUrl] The OData service URL needed for the share component, the default value is "/sap/opu/odata/sap/SM_INTEGRATION_SRV"
* @param {JSON object} [object] A JSon object passed to the share component. This object contains the following properties:
*		<ul>
* 			<li>id (optional): is the object Id to be shared in SAP Jam, i.e a url that navigates back to the same object in the application</li>
*			<li>display (optional): is a UI5 control to be displayed in the component UI</li>
*			<li>share (optional): is a note that will be displayed in the component UI and shared to SAP Jam too</li>
*		</ul>
* 	
* @class Share Dialog Component
* 
* A Share Dialog Component is a ui5 component that applications 
* can use to render the share component in a dialog and then can 
* be used to share information to SAP Jam
* @name sap.collaboration.components.fiori.sharing.dialog.Component
* @public
*/


sap.ui.core.UIComponent.extend("sap.collaboration.components.fiori.sharing.dialog.Component", 
		/** @lends sap.collaboration.components.fiori.sharing.dialog.Component */ 
		{		
	
		metadata: {
			/*
			 * the Properties are:
			 * 		component width
			 * 		component height
			 * 		OData Service URL
			 * 		JSON like Object that looks like:
			 *		{
             *   		display: display,
             *   		id:"id",
             *   		share: "share"
			 *		}
			 *		
			 *		where: 
			 *				display is a UI5 control to be displayed in the component UI
			 * 				id is the Object Id to be shared in JAM
			 *				share: is a note that will be displayed in the component UI that is used also as sharing info to jam
			 * */
			properties: {
				width: 		 			{type: "sap.ui.core.CSSSize"}, // not used for 1.16
				height:		 			{type: "sap.ui.core.CSSSize"}, // not used for 1.16
				oDataServiceUrl:		{type: "sap.ui.core.URI", defaultValue: "/sap/opu/odata/sap/SM_INTEGRATION_SRV"},
				object:					{type: "object"}
			},
			
			aggregations: {
			},
			
			events: {
			}
		},
		
		/**
		* Initialization of the Component
		* @private
		*/
		init: function(){
			this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();	
			this.oLangBundle = this.oCommonUtil.getLanguageBundle();
		},
		
		/**
		* Setter for the Component settings.
		* @param {JSON Object} oSettings A JSON object used to set the component settings, this object should contains the same 
		* properties used in the constructor. 
		* @public
		*/
		setSettings : function(oSettings) {
			this.setODataServiceUrl(oSettings.oDataServiceUrl);
			this.setObject(oSettings.object);
		},
		
		/**
		 * Creates the sharing component
		 * @private
		 */
		createSharingComponent : function() {
			var oObjectDisplay= this.getObject();
			var sOdataServiceUrl = this.getODataServiceUrl();
			var oSettings = {
					oDataServiceUrl: 	sOdataServiceUrl,
					object: 			oObjectDisplay
			};
			
			if (!this.sharingComponent){
				this.sharingComponent = sap.ui.getCore().createComponent({
			 		name: "sap.collaboration.components.fiori.sharing",
			 		id: this.getId() + "_SharingComponent"
			 		//settings: oSettings
			 	});
				
			 	this.sharingComponentContainer = new sap.ui.core.ComponentContainer(this.getId() + "SharingComponentContainer", {
			 		component: this.sharingComponent
			 	});
			 	
				this.sharingComponent.bOdataOn = false;
			}
			
			this.sharingComponent.setSettings(oSettings);
			try{
				this.sharingComponent.setGroupsData();
			}
			catch(oError)
			{
				this.oCommonUtil.displayError(oError);
				
				this.bStopRendering = true;
			}

		},
		
		/**
		 * Creates the sharing component
		 * @private
		 */
		createSharingDialog: function() {
			
		 	this.sResultMessage = "";
		 	var self = this;
			
			var oSharingDialog = new sap.m.Dialog(this.getId() + "_SharingDialog", {
				title: this.oLangBundle.getText("SHARING_PAGE_TITLE"),
				stretch: false,
				//contentWidth: this.getWidth(),
				content: [
				          	this.sharingComponentContainer
				],
				afterClose : function(){
					self.showMessage();
				}
			}).addStyleClass("sapUiPopupWithPadding"); 
			
			return oSharingDialog;
		},
		
		/**
		 * Opens a dialog that will contain the share component
		 * @public
		 */
		open : function(){
			
			this.createSharingComponent();
			
			if(this.bStopRendering === undefined || this.bStopRendering  === false){
				if (!this.oSharingDialog){
					this.oSharingDialog = this.createSharingDialog();
				}
				
				this.createDialogButtons();
				
				if(jQuery.device.is.phone){
					this.oSharingDialog.setStretch(true);
				}
				
				this.oSharingDialog.open();
			}
		},
		
		createDialogButtons : function() {
			var self = this;
			if (this.sharingComponent.aJamGroups.length === 0){
				this.oSharingDialog.destroyBeginButton();
				this.oSharingDialog.destroyEndButton();
				this.oSharingDialog.setEndButton(
						new sap.m.Button({
							text: this.oLangBundle.getText("CLOSE_BUTTON_TEXT"),
							press : function() {
								self.oSharingDialog.close();
							}
						})
				);
			}
			else{
					this.oSharingDialog.destroyEndButton();
					this.oSharingDialog.setBeginButton(
							new sap.m.Button({
								text: this.oLangBundle.getText("OK_BUTTON_TEXT"),
								press : function() {
									self.oSharingDialog.getBeginButton().setEnabled(false);
									self.sResultMessage = self.sharingComponent.shareToJam();
									self.oSharingDialog.close();
								}
							})
					);
					this.oSharingDialog.setEndButton(new sap.m.Button({
						text: this.oLangBundle.getText("CANCEL_BUTTON_TEXT"),
						press : function() {
							self.oSharingDialog.close();
						}
					}));
			}
		},
		
		/**
		 * Creates a Message Toast to inform the user about the success/failure of the sharing to Jam
		 * @private
		 */
		showMessage : function() {
			if (this.sResultMessage !== ""){
				sap.m.MessageToast.show(this.sResultMessage, {duration: 3000});
				this.sResultMessage = "";
			}
			
			
		}
	}
);

}; // end of sap/collaboration/components/fiori/sharing/dialog/Component.js
