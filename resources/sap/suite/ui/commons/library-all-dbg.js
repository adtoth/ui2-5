// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.commons.library-all');
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.BusinessCardRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.BusinessCardRenderer");
jQuery.sap.require('sap.ui.commons.Link'); // unlisted dependency retained

/**
 * @class BusinessCard renderer. 
 * @static
 */
sap.suite.ui.commons.BusinessCardRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.BusinessCardRenderer.render = function(rm, oControl){ 
	// accessibility
    var bAcc = sap.ui.getCore().getConfiguration().getAccessibility();

    // control properties
    var sId = oControl.getId();
    var sType = oControl.getType();
    var oFirstTitle = oControl.getFirstTitle();
    var sImageTooltip = oControl.getImageTooltip();
    var sIcon = oControl.getIconPath();
    var sDesc = oControl.getSecondTitle();
    var sWidth = oControl.getWidth();

    rm.write("<div");
    rm.writeControlData(oControl);
    rm.addClass("suiteUiCard");
    rm.writeClasses();
    if (sWidth) {
        rm.addStyle("width", sWidth);
        rm.writeStyles();
    }
    rm.write(">");

        if (sType) {
            rm.write("<div");
            rm.addClass("suiteUiCardTypeHolder");
            rm.writeClasses();
            rm.writeAttribute("id", sId + "-type");
            rm.write(">");
                var oTypeLabel = new sap.ui.commons.Label({
                    id: sId + "-type-label",
                    text: sType,
                    tooltip: sType
                });
                oTypeLabel.addStyleClass("suiteUiCardType");
                rm.renderControl(oTypeLabel);
                oTypeLabel.destroy();
            rm.write("</div>");
        }

        rm.write("<div");
        rm.addClass("suiteUiCardContainer");
        rm.writeClasses();
        rm.writeAttribute("id", sId + "-container");
        rm.write(">");

            //icon
            if (sIcon) {
                rm.write("<div");
                rm.addClass("suiteUiCardIconHolder");
                rm.writeClasses();
                rm.writeAttribute("id", sId + "-icon");
                rm.write(">");
                    rm.write("<img");
                    rm.addClass("suiteUiCardIcon");
                    rm.writeClasses();
                    rm.writeAttributeEscaped("src", sIcon);
                    rm.writeAttributeEscaped("title", (sImageTooltip || ""));
                    rm.writeAttribute("alt", "");
                    rm.writeAttribute("id",sId + "-img");
                    rm.writeAttribute("tabindex", "-1");
                    if (bAcc) {
                        // ARIA - icon is decorative
                        rm.writeAttribute("role", "presentation");
                    }
                    rm.write("></img>");
                rm.write("</div>");
            }

            rm.write("<div");
            rm.addClass("suiteUiCardNameHolder");
            rm.writeClasses();
            rm.writeAttribute("id", sId + "-name");
            if (bAcc && sDesc){
                rm.writeAttribute("aria-describedby", sId + "-desc-label");
            }
            rm.write(">");
            if (oFirstTitle) {
                oFirstTitle.addStyleClass("suiteUiCardName");
                rm.renderControl(oFirstTitle);
            }
            rm.write("</div>");

            //title2
            if (sDesc) {
                rm.write("<div");
                rm.addClass("suiteUiCardDescHolder");
                rm.writeClasses();
                rm.writeAttribute("id", sId + "-desc");
                rm.write(">");
                    var oDescLabel = new sap.ui.commons.Label({
                        id: sId + "-desc-label",
                        text: sDesc,
                        tooltip: sDesc
                    });
                    oDescLabel.addStyleClass("suiteUiCardDesc");
                    rm.renderControl(oDescLabel);
                    oDescLabel.destroy();
                rm.write("</div>");
            }

            rm.write("<div");
            rm.addClass("suiteUiCardContent");
            rm.writeClasses();
            rm.writeAttribute("id", sId + "-content");
            rm.write(">");
                rm.renderControl(oControl.getContent());
            rm.write("</div>");
        rm.write("</div>");
    rm.write("</div>");
};

}; // end of sap/suite/ui/commons/BusinessCardRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.DateRangeScrollerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.DateRangeScrollerRenderer");

/**
 * @class DateRangeScroller renderer.
 * @static
 */
sap.suite.ui.commons.DateRangeScrollerRenderer = {};

/**
 * Render decrementScrollButton
 * 
 * @private
 */
sap.suite.ui.commons.DateRangeScrollerRenderer.renderDecrementScrollButton=function (oRm, oDateRangeScroller, oDisplay) {

    oRm.write("<a>");
    oRm.write('<span id="' + oDateRangeScroller.getId() + '-decrementScrollButton"');
    oRm.write('title="');
    oRm.writeEscaped(oDisplay.resBundle.getText("DATERANGESCROLLER_PREV_TEXT"));
    oRm.write('"');
    oRm.addClass("sapSuiteUiCommonsDateRangeScrollerScrollBtn");
    oRm.addClass("sapSuiteUiCommonsDateRangeScrollerDecBtnArrow");
    oRm.writeClasses();  
    oRm.write(">");
    oRm.write("</span>");
    oRm.write("</a>");
};

/**
 * Render incrementScrollButton
 * 
 * @private
 */
sap.suite.ui.commons.DateRangeScrollerRenderer.renderIncrementScrollButton = function (oRm, oDateRangeScroller, oDisplay) {

    oRm.write("<a>");
    oRm.write('<span id="' + oDateRangeScroller.getId() + '-incrementScrollButton"');
    oRm.write('title="');
    oRm.writeEscaped(oDisplay.resBundle.getText("DATERANGESCROLLER_NEXT_TEXT"));
    oRm.write('"');
    oRm.addClass("sapSuiteUiCommonsDateRangeScrollerScrollBtn");
    oRm.addClass("sapSuiteUiCommonsDateRangeScrollerIncBtnArrow");
    oRm.writeClasses();   
    oRm.write(">");    
    oRm.write("</span>");
    oRm.write("</a>");
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control}
 *                oDateRangeScroller an object representation of the control that should be rendered
 */
sap.suite.ui.commons.DateRangeScrollerRenderer.render = function(oRm, oDateRangeScroller) {

    var oLocale = sap.ui.getCore().getConfiguration().getLanguage();
    var oResBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons", oLocale);
    var sPrevArrowSymbol = "&#9668";
    var sNextArrowSymbol = "&#9658";
    var oDisplay = {
        resBundle : oResBundle,
        prevArrowSymbol : sPrevArrowSymbol,
        nextArrowSymbol : sNextArrowSymbol
    };

    // write the HTML into the render manager
    oRm.write("<span");
    oRm.writeControlData(oDateRangeScroller);
    oRm.addClass("sapSuiteUiCommonsDateRangeScroller");
    oRm.writeClasses();
    oRm.writeAttribute("tabindex", "-1");
    oRm.write(">"); // span element

    // invisible span with tooltip as text for aria
    if (oDateRangeScroller.getTooltip_AsString()) {
        oRm.write('<SPAN id="' + oDateRangeScroller.getId() + '-Descr" style="visibility: hidden; display: none;"');
        oRm.write('>');
        oRm.writeEscaped(oDateRangeScroller.getTooltip_AsString());
        oRm.write('</SPAN>');
    }

    this.renderDecrementScrollButton(oRm, oDateRangeScroller, oDisplay);

    this.renderIncrementScrollButton(oRm, oDateRangeScroller, oDisplay);

    // Start label area
    oRm.write("<span");
    oRm.writeAttribute("id", oDateRangeScroller.getId() + "-labelarea");
    oRm.writeAttribute("tabindex", "0");
    oRm.writeClasses();

    // ARIA
    oRm.writeAccessibilityState(oDateRangeScroller, {
        role : 'list',
        live : 'assertive',
        describedby : oDateRangeScroller.getTooltip_AsString() ? (oDateRangeScroller.getId() + '-Descr ' + oDateRangeScroller.getAriaDescribedBy().join(" ")) : undefined
    });

    oRm.write(">");

    oRm.renderControl(oDateRangeScroller._oDateRangeLabel);

    oRm.write("</span>"); // label span

    oRm.write("</span>");
};

}; // end of sap/suite/ui/commons/DateRangeScrollerRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.DateRangeSliderInternalRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.DateRangeSliderInternalRenderer");
jQuery.sap.require('sap.ui.commons.RangeSliderRenderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class DateRangeSlider renderer.
 * @static
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.RangeSliderRenderer);

/**
 * Render buffer div to accommodate bubbles height.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderBufferDivForBubbles = function(oRm, oDateRangeSliderInternal) {

    if (oDateRangeSliderInternal.getShowBubbles()) {
        oRm.write('<DIV id="' + oDateRangeSliderInternal.getId() + '-bubbleBuffer" style="height:40px">');
        oRm.write('</DIV>');
    }
};

/**
 * Render enclosing DIV with styles and classes.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderEnclosingDiv = function(oRm, oDateRangeSliderInternal) {

    oRm.write('<DIV');
    oRm.writeControlData(oDateRangeSliderInternal);
    oRm.addClass('sapUiSli');
    this.controlAdditionalCode(oRm, oDateRangeSliderInternal);
    if (oDateRangeSliderInternal.getTooltip_AsString()) {
        oRm.writeAttributeEscaped('title', oDateRangeSliderInternal.getTooltip_AsString());
    }

    if (!oDateRangeSliderInternal.getVertical() && oDateRangeSliderInternal.getWidth()) {
        oRm.writeAttribute('style', 'width:' + oDateRangeSliderInternal.getWidth() + ';');
    }

    if (!oDateRangeSliderInternal.getEnabled()) {
        oRm.addClass('sapUiSliDsbl');
    } else {
        if (!oDateRangeSliderInternal.getEditable()) {
            oRm.addClass('sapUiSliRo');
        } else {
            oRm.addClass('sapUiSliStd');
        }
    }

    if (!oDateRangeSliderInternal.getVertical()) {
        oRm.addClass('sapUiSliHori');
    }

    if (oDateRangeSliderInternal.getShowBubbles()) {
        oRm.addClass('sapUiSuiteDRSliBub');
    }

    oRm.writeClasses();
    oRm.write('>');
};

/**
 * Render closing tag for enclosing DIV.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderEnclosingDivEnd = function(oRm, oDateRangeSliderInternal) {

    oRm.write('</DIV>');
};

/**
 * Render invisible span with tooltip as text for aria on grip.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderAriaGripTooltip = function(oRm, oDateRangeSliderInternal) {

    if (oDateRangeSliderInternal.getTooltip_AsString()) {
        oRm.write('<SPAN id="' + oDateRangeSliderInternal.getId() + '-Descr" style="visibility: hidden; display: none;">');
        oRm.writeEscaped(oDateRangeSliderInternal.getTooltip_AsString());
        oRm.write('</SPAN>');
    }
};

/**
 * Renders the HTML for two bubbles to show selected dates on top of the slider. *
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered.
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderBubbles = function(oRm, oDateRangeSliderInternal) {

    if (!oDateRangeSliderInternal.getShowBubbles()) {
        return;
    }

    oRm.write('<div id="' + oDateRangeSliderInternal.getId() + '-bubble"');
    oRm.addClass("sapSuiteUiCommonsDateRangeSliderBubble");
    oRm.writeClasses();
    oRm.write('>');
    oRm.write('<div');
    oRm.addClass("sapSuiteUiCommonsDateRangeSliderBubbleLbl");
    oRm.writeClasses();
    oRm.write('>');
    oRm.renderControl(oDateRangeSliderInternal._oBubble);
    oRm.write('</div>');
    oRm.write('</div>');
    oRm.write('<div id="' + oDateRangeSliderInternal.getId() + '-bubble2"');
    oRm.addClass("sapSuiteUiCommonsDateRangeSliderBubble");
    oRm.writeClasses();
    oRm.write('>');
    oRm.write('<div');
    oRm.addClass("sapSuiteUiCommonsDateRangeSliderBubbleLbl");
    oRm.writeClasses();
    oRm.write('>');
    oRm.renderControl(oDateRangeSliderInternal._oBubble2);
    oRm.write('</div>');
    oRm.write('</div>');
};

/**
 * Render the slide bar.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderSliderBar = function(oRm, oDateRangeSliderInternal) {

    oRm.write('<DIV');
    oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-right');
    oRm.write('class="sapUiSliR"> <DIV');

    oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-left');
    oRm.write('class="sapUiSliL"> <DIV');

    oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-bar');
    oRm.write('class="sapUiSliBar">');
};

/**
 * Render closing tag for the slide bar.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderSliderBarEnd = function(oRm, oDateRangeSliderInternal) {

    oRm.write('</DIV></DIV></DIV>');
};

/**
 * Render labels and ticks.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderTicksAndLabels = function(oRm, oDateRangeSliderInternal) {

    var bUseTextLabels = false;
    if (oDateRangeSliderInternal.getLabels() && oDateRangeSliderInternal.getLabels().length > 0) {
        bUseTextLabels = true;
    }

    if (oDateRangeSliderInternal.getTotalUnits() > 0 || bUseTextLabels) {
        var iTotalUnits = oDateRangeSliderInternal.getTotalUnits();
        if (bUseTextLabels) {
            iTotalUnits = oDateRangeSliderInternal.getLabels().length - 1;
        }

        // Add ticks
        for ( var i = 0; i <= iTotalUnits; i++) {
            oRm.write('<DIV');
            oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-tick' + i);
            oRm.write('class="sapUiSliTick" ');
            oRm.write('></DIV>'); // tick

            if (oDateRangeSliderInternal.getStepLabels()) {
                // Texts
                oRm.write('<DIV');
                oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-text' + i);
                switch (i) {
                    case (0):
                        oRm.write('class="sapUiSliText sapUiSliTextLeft" >');
                        break;
                    case (iTotalUnits):
                        oRm.write('class="sapUiSliText sapUiSliTextRight" >');
                        break;
                    default:
                        oRm.write('class="sapUiSliText" >');
                        break;
                }

                if (bUseTextLabels) {
                    oRm.write(oDateRangeSliderInternal.getLabels()[i]);
                } else {
                    var fStepSize = (oDateRangeSliderInternal.getMax() - oDateRangeSliderInternal.getMin()) / iTotalUnits;
                    oRm.write(oDateRangeSliderInternal.getMin() + i * fStepSize);
                }

                oRm.write('</DIV>'); // Text
            }
        }
    }
};

/**
 * Render highlight bar between grips.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderHighlightBar = function(oRm, oDateRangeSliderInternal) {

    // Highlight bar
    oRm.write('<DIV');
    oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-hili');
    oRm.write('class="sapUiSliHiLi"></DIV>');
};

/**
 * Renders the Grip for the slider control, using the provided {@link sap.ui.fw.RenderManager}.
 * 
 * @param {sap.ui.fw.RenderManager}
 *                oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal An object representation of the control that should be rendered.
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderGrip = function(oRm, oDateRangeSliderInternal) {

    // Left Grip
    oRm.write('<DIV');

    // Icon for grip
    oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-grip');
    if (oDateRangeSliderInternal.getEnabled()) {
        oRm.writeAttribute('tabIndex', '0');
    } else {
        oRm.writeAttribute('tabIndex', '-1');
    }

    if (oDateRangeSliderInternal.getPinGrip()) {
        oRm.write('class="sapUiSliGrip sapUiSliGripPin"');
    } else {
        oRm.write('class="sapUiSliGrip"');
    }
    
    oRm.writeAccessibilityState(oDateRangeSliderInternal, {
        role : 'slider',
        controls : oDateRangeSliderInternal.getId() + '-grip',
        orientation : 'horizontal',
        valuemin : oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getMinDate()),
        valuemax : oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getValue2Date()),
        valuenow: oDateRangeSliderInternal.getValue(),
        valuetext : oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getValueDate()),
        disabled : !oDateRangeSliderInternal.getEditable() || !oDateRangeSliderInternal.getEnabled(),
        describedby : oDateRangeSliderInternal.getTooltip_AsString() ? (oDateRangeSliderInternal.getId() + '-Descr ' + oDateRangeSliderInternal.getAriaDescribedBy().join(" ")) : undefined,
        live : 'assertive'
    });
    

    oRm.write('>&#9650;</DIV>'); // Symbol for HCB Theme (Must be hidden in other themes)
};

/**
 * Renders the Grip2 for the slider control, using the provided {@link sap.ui.fw.RenderManager}.
 * 
 * @param {sap.ui.fw.RenderManager}
 *                oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal An object representation of the control that should be rendered.
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderGrip2 = function(oRm, oDateRangeSliderInternal) {

    // Right Grip
    oRm.write('<DIV');

    // Icon for grip
    oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-grip2');
    if (oDateRangeSliderInternal.getEnabled()) {
        oRm.writeAttribute('tabIndex', '0');
    } else {
        oRm.writeAttribute('tabIndex', '-1');
    }

    if (oDateRangeSliderInternal.getPinGrip2()) {
        oRm.write('class="sapUiSliGrip sapUiSliGripPin"');
    } else {
        oRm.write('class="sapUiSliGrip"');
    }

    oRm.writeAttribute('title', oDateRangeSliderInternal.getValue2());
    
    oRm.writeAccessibilityState(oDateRangeSliderInternal, {
        role : 'slider',
        controls : oDateRangeSliderInternal.getId() + '-grip2',
        orientation : 'horizontal',
        valuemin : oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getValueDate()),
        valuemax : oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getMaxDate()),
        valuenow : oDateRangeSliderInternal.getValue2(),
        valuetext : oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getValue2Date()),
        disabled : !oDateRangeSliderInternal.getEditable() || !oDateRangeSliderInternal.getEnabled(),
        describedby : oDateRangeSliderInternal.getTooltip_AsString() ? (oDateRangeSliderInternal.getId() + '-Descr ' + oDateRangeSliderInternal.getAriaDescribedBy().join(" ")) : undefined,
        live : 'assertive'
    });    
    oRm.write('>&#9650;</DIV>'); // Symbol for HCB Theme (Must be hidden in other themes)

};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.render = function(oRm, oDateRangeSliderInternal) {

    // Return immediately if control is invisible
    if (!oDateRangeSliderInternal.getVisible()) {
        return;
    }

    this.renderEnclosingDiv(oRm, oDateRangeSliderInternal);
    this.renderBufferDivForBubbles(oRm, oDateRangeSliderInternal);
    this.renderAriaGripTooltip(oRm, oDateRangeSliderInternal);
    this.renderBubbles(oRm, oDateRangeSliderInternal);
    this.renderSliderBar(oRm, oDateRangeSliderInternal);
    this.renderTicksAndLabels(oRm, oDateRangeSliderInternal);
    this.renderHighlightBar(oRm, oDateRangeSliderInternal);

    if (oDateRangeSliderInternal.getPinGrip() || 
       (oDateRangeSliderInternal.getPinGrip() && oDateRangeSliderInternal.getPinGrip2()) || 
       (!oDateRangeSliderInternal.getPinGrip() && !oDateRangeSliderInternal.getPinGrip2())) {
        this.renderGrip(oRm, oDateRangeSliderInternal);
        this.renderGrip2(oRm, oDateRangeSliderInternal);
    } else if (oDateRangeSliderInternal.getPinGrip2()) {
        this.renderGrip2(oRm, oDateRangeSliderInternal);
        this.renderGrip(oRm, oDateRangeSliderInternal);
    }

    this.renderSliderBarEnd(oRm, oDateRangeSliderInternal);
    this.renderEnclosingDivEnd(oRm, oDateRangeSliderInternal);
};

}; // end of sap/suite/ui/commons/DateRangeSliderInternalRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.DateRangeSliderRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.DateRangeSliderRenderer");

/**
 * @class DateRangeSlider renderer.
 * @static
 */
sap.suite.ui.commons.DateRangeSliderRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSlider}
 *                oDateRangeSlider an object representation of the control that should be rendered
 */
sap.suite.ui.commons.DateRangeSliderRenderer.render = function(oRm, oDateRangeSlider) {

    if (!oDateRangeSlider.getVisible()) {
        return;
    }
    // write the HTML into the render manager
    oRm.write("<span");
    oRm.writeControlData(oDateRangeSlider);
    oRm.addClass("sapSuiteUiCommonsDateRangeSlider");
    oRm.writeClasses();
    oRm.write(">"); // span element
    oRm.renderControl(oDateRangeSlider._oDateRangeSliderInternal);
    oRm.write("</span>");
};

}; // end of sap/suite/ui/commons/DateRangeSliderRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.FacetOverviewRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.FacetOverviewRenderer");

/**
 * @class FacetOverview renderer.
 * @static
 */
sap.suite.ui.commons.FacetOverviewRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.FacetOverviewRenderer.render = function(oRm, oControl) { 
    oRm.write("<div");
    oRm.writeControlData(oControl);
    if (oControl.hasListeners("press")) {
    	oRm.writeAttribute("tabindex", "0");
    	oRm.addClass("sapSuiteFovClickable");
    }
    oRm.addClass("sapSuiteFov");
    oRm.writeClasses();
    oRm.addStyle("width", oControl.getWidth());
    oRm.addStyle("height", oControl.getHeight());
    oRm.writeStyles();
    oRm.write(">");
        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-title");
        oRm.addClass("sapSuiteFovTitle");
        oRm.writeClasses();
        oRm.write(">");
	        oRm.write("<div");
	        oRm.writeAttribute("id", oControl.getId() + "-title-text");
	        oRm.addClass("sapSuiteFovTitleText");
	        oRm.writeClasses();
	        oRm.write(">");
            	oRm.writeEscaped(oControl.getTitle());
            oRm.write("</div>");

            if (oControl.getQuantity() >= 0) {
                oRm.write("<div");
                oRm.writeAttribute("id", oControl.getId() + "-qty");
                oRm.addClass("sapSuiteFovQty");
                oRm.writeClasses();
                oRm.write(">");
                    oRm.writeEscaped("(" + oControl.getQuantity() + ")");
                oRm.write("</div>");
            }
                        
            if (oControl._oHoverIcon) {
	            oRm.write("<div");
	            oRm.writeAttribute("id", oControl.getId() + "-hover-icon");
	            oRm.addClass("sapSuiteFovHoverIcon");
	            oRm.writeClasses();
	            oRm.write(">");
	            	oRm.renderControl(oControl._oHoverIcon);
	            oRm.write("</div>");
	        }
        oRm.write("</div>");

        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-content");
        oRm.addClass("sapSuiteFovContent");
        oRm.writeClasses();
        oRm.write(">");
			oRm.renderControl(oControl.getContent() ? oControl.getContent() : oControl._oNoDataLabel);
        oRm.write("</div>");

    oRm.write("</div>");
};

}; // end of sap/suite/ui/commons/FacetOverviewRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.KpiTileRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.KpiTileRenderer");

/**
 * @class KpiTile renderer.
 * @static
 */
sap.suite.ui.commons.KpiTileRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.KpiTileRenderer.render = function(oRm, oControl) {
    oRm.write("<div");
    oRm.writeControlData(oControl);
    oRm.addClass("sapSuiteKTile");
    oRm.writeClasses();
    oRm.write(">");

        oRm.write("<div");
        oRm.addClass("sapSuiteKTileValue");
        oRm.addClass("sapSuiteKTileStatus" + oControl.getValueStatus());
        if (oControl.getDoubleFontSize()) {
            oRm.addClass("sapSuiteKTileValueLargeText");
        } else {
            oRm.addClass("sapSuiteKTileValueSmallText");
        }
        oRm.writeClasses();
        oRm.write(">");
            oRm.writeEscaped(oControl.getValue());

        if (oControl.getValueScale()) {
            oRm.write("<span");
            oRm.addClass("sapSuiteKTileScale");
            oRm.writeClasses();
            oRm.write(">");
                oRm.writeEscaped(oControl.getValueScale());
            oRm.write("</span>");
        }
        oRm.write("</div>");

        oRm.write("<div");
        oRm.addClass("sapSuiteKTileDesc");
        oRm.writeClasses();
        oRm.writeAttributeEscaped("title", oControl.getDescription());
        oRm.write(">");
            if (oControl.getValueUnit()) {
                oRm.writeEscaped(oControl.getValueUnit()).write(", ");
            }
            oRm.writeEscaped(oControl.getDescription());
        oRm.write("</div>");
    oRm.write("</div>");
};

}; // end of sap/suite/ui/commons/KpiTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.LaunchTileRenderer') ) {
// @copyright 

jQuery.sap.declare("sap.suite.ui.commons.LaunchTileRenderer");

/**
 * @class LaunchTile renderer.
 * @static
 */
sap.suite.ui.commons.LaunchTileRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.LaunchTileRenderer.render = function(oRm, oLaunchTile) {

	var oLocale = sap.ui.getCore().getConfiguration().getLanguage();
	var oResBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons", oLocale);
	var sAriaLabel = "";

	// write the HTML into the render manager
	oRm.write("<div");
	oRm.writeControlData(oLaunchTile);
	oRm.addClass("sapSuiteUiCommonsLaunchTile");
	oRm.addClass("sapSuiteUiCommonsPointer");
	oRm.writeAttribute("tabindex", "0");
	oRm.writeClasses();

	if (oLaunchTile.getTooltip_AsString()) {
		sAriaLabel = oLaunchTile.getTooltip_AsString();
		oRm.writeAttributeEscaped("title", oLaunchTile.getTooltip_AsString());
	} else {
		sAriaLabel = oResBundle.getText("LAUNCHTILE_LAUNCH") + " " + oLaunchTile.getTitle();
	}

	// ARIA
	oRm.writeAccessibilityState(oLaunchTile, {
		role : 'link',
		live : 'assertive',
		label : sAriaLabel
	});

	oRm.write(">"); // tile element

	oRm.write('<div id="' + oLaunchTile.getId() + '-launchTileText"');
	oRm.addClass("sapSuiteUiCommonsLaunchTileTitle");
	oRm.writeClasses();
	oRm.write(">");
	oRm.writeEscaped(oLaunchTile.getTitle());
	oRm.write("</div>");

	// Container for icon
	oRm.write('<div id="' + oLaunchTile.getId() + '-launchTileIcon"'); // Start icon container
	oRm.addClass("sapSuiteUiCommonsLaunchTileIcon");
	oRm.writeClasses();
	oRm.write(">");
	oRm.renderControl(oLaunchTile._iconImage);
	oRm.write("</div>"); // end icon container

	oRm.write("</div>"); // end launch tile
};

}; // end of sap/suite/ui/commons/LaunchTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.LinkActionSheetRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
 
jQuery.sap.declare("sap.suite.ui.commons.LinkActionSheetRenderer");
jQuery.sap.require('sap.m.ActionSheetRenderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class LinkActionSheet renderer. 
 * @static
 */
sap.suite.ui.commons.LinkActionSheetRenderer = sap.ui.core.Renderer.extend(sap.m.ActionSheetRenderer);


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.LinkActionSheetRenderer.render = function(oRm, oControl){ 
    var aActionItems = oControl.getItems(), i, bMixedButtons=false;
        
    for(i = 0 ; i < aActionItems.length ; i++) {
        if(aActionItems[i].getIcon && aActionItems[i].getIcon()){
            bMixedButtons = true;
            break;
        }
    }
        
    // write the HTML into the render manager
    oRm.write("<div");
    oRm.writeControlData(oControl);
    oRm.addClass("sapMActionSheet");
    oRm.addClass("sapUILinkActionSheet");
    if(bMixedButtons){
        oRm.addClass("sapMActionSheetMixedButtons");
    }
    oRm.writeClasses();
        
    var sTooltip = oControl.getTooltip_AsString();
    if (sTooltip) {
        oRm.writeAttributeEscaped("title", sTooltip);
    }
        
    oRm.write(">");
        
    for(i = 0 ; i < aActionItems.length ; i++){
        if (aActionItems[i].getType) { // if this is a button
            var oButton = aActionItems[i];
            oButton.addStyleClass("sapMActionSheetButton");
            oButton.addStyleClass("sapUILinkActionSheetButton");
            oRm.renderControl(oButton);
        } else if (aActionItems[i].getHref) { // if this is a link
            oRm.renderControl(aActionItems[i].addStyleClass("sapUILinkActionSheetLink"));
        }
    }
         
    if((jQuery.device.is.iphone || (sap.m.Dialog._bOneDesign && jQuery.device.is.phone)) && oControl.getShowCancelButton()){
        oRm.renderControl(oControl._getCancelButton());
    }
        
    oRm.write("</div>");
};

}; // end of sap/suite/ui/commons/LinkActionSheetRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NoteTakerFeederRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.NoteTakerFeederRenderer");

/**
 * @class NoteTakerFeeder renderer. 
 * @static
 */
sap.suite.ui.commons.NoteTakerFeederRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.NoteTakerFeederRenderer.render = function(oRm, oControl){ 
    // write the HTML into the render manager
    oRm.write("<div");
    oRm.writeControlData(oControl);
    oRm.addClass("sapSuiteUiCommonsNoteTakerFeeder");
    oRm.writeClasses();
    oRm.writeAttribute("tabindex", "0");
    oRm.writeAccessibilityState(oControl, {
		role : 'region',
		describedby : oControl.getId() + "-header"
	});
    oRm.write(">");

    //write header
        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-header");
        oRm.addClass("sapSuiteUiCommonsNoteTakerFeederHeader");
        oRm.writeClasses();
        oRm.write(">");
            oRm.write("<div");
            oRm.writeAttribute("id", oControl.getId() + "-header-text");
            oRm.writeAccessibilityState(oControl, {
        		role : 'heading'
            });
            oRm.write(">");
                oRm.writeEscaped(oControl._rb.getText("NOTETAKERFEEDER_TITLE"));
            oRm.write("</div>");
        oRm.write("</div>");

    //write tag panel
        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-tag-panel");
        oRm.addClass("sapSuiteUiCommonsNoteTakerFeederTagPanel");
        oRm.writeClasses();
        oRm.write(">");

            oRm.write("<div");
            oRm.writeAttribute("id", oControl.getId() + "-left-toolbar");
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederLeftPanel");
            oRm.writeClasses();
            oRm.write(">");
                oRm.renderControl(oControl._oTagButton);
            oRm.write("</div>");

            oRm.write("<div");
            oRm.writeAttribute("id", oControl.getId() + "-right-toolbar");
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederRightPanel");
            oRm.writeClasses();
            oRm.write(">");
                oRm.renderControl(oControl._oThumbUpButton);
                oRm.renderControl(oControl._oThumbDownButton);
                oRm.renderControl(oControl._oAddAttachButton);
                oRm.renderControl(oControl._oFileUploader);
            oRm.write("</div>");
        oRm.write("</div>");

        //write attachment panel
        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-attachment-panel");
        oRm.addClass("sapSuiteUiCommonsNoteTakerFeederAttachmentPanel");
        oRm.writeClasses();
        oRm.write(">");
            oRm.write("<div");
            oRm.writeAttribute("id", oControl.getId() + "-attachment-content");
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederAttachmentContent");
            oRm.writeClasses();
            oRm.write(">");
                oRm.write("<div");
                oRm.writeAttribute("id", oControl.getId() + "-attachment-name");
                oRm.addClass("sapSuiteUiCommonsNtfAttachmentNamelbl");
                oRm.writeClasses();
                oRm.write(">");
                    oRm.write("<div");
                    oRm.writeAttribute("id", oControl.getId() + "-attachment-image");
                    oRm.addClass("sapSuiteUiCommonsNtfAttachImg");
                    oRm.writeClasses();
                    oRm.write("/>");
                    oRm.renderControl(oControl._oAttachmentLink);
                oRm.write("</div>"); 
                
                oRm.write("<div");
                oRm.writeAttribute("id", oControl.getId() + "-attachment-loading");
                oRm.addClass("sapSuiteUiCommonsNtfLoadingLbl");
                oRm.writeClasses();
                oRm.write(">");
                    oRm.renderControl(oControl._oAttachmentLoadingLabel);
                oRm.write("</div>");
                
                oRm.write("<div");
                oRm.writeAttribute("id", oControl.getId() + "-attachment-delete");
                oRm.addClass("sapSuiteUiCommonsNtfDeleteBtn");
                oRm.writeClasses();
                oRm.write(">");
                    oRm.renderControl(oControl._oDeleteAttachButton);
                oRm.write("</div>");
            oRm.write("</div>"); 
        oRm.write("</div>");
        
    //write title panel
        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-title-panel");
        oRm.addClass("sapSuiteUiCommonsNoteTakerFeederTitlePanel");
        oRm.writeClasses();
        oRm.write(">");
            oRm.renderControl(oControl._oTitle);
        oRm.write("</div>");

    //write body
        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-body");
        if(oControl._oAddAttachButton.getEnabled()) {
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederBody");            
        } else {
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederBodySmaller");
        }
        oRm.writeClasses();
        oRm.write(">");
            oRm.renderControl(oControl._oBody);
        oRm.write("</div>");

        oRm.renderControl(oControl._oAddButton);

        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-selectTag-panel");
        oRm.addClass("sapSuiteUiCommonsNoteTakerFeederSelectTagPanel");
        oRm.addClass("sapUiShd");
        oRm.writeClasses();
        oRm.write(">");

            oRm.write("<div");
            oRm.writeAttribute("id", oControl.getId() + "-selectTag-arrow");
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederSelectTagArrow");
            oRm.writeClasses();
            oRm.write(">");
            oRm.write("</div>");

            oRm.write("<div");
            oRm.writeAttribute("id", oControl.getId() + "-selectTag-header");
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederSelectTagHeader");
            oRm.writeClasses();
            oRm.write(">");
                oRm.writeEscaped(oControl._rb.getText("NOTETAKERFEEDER_TOOLPOPUP_TITLE"));
            oRm.write("</div>");

            oRm.write("<div>");
                oRm.renderControl(oControl._oTagInput);
            oRm.write("</div>");

            oRm.write("<div>");
                oRm.renderControl(oControl._oTagList);
            oRm.write("</div>");

            oRm.write("<div");
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederSelectTagButtons");
            oRm.writeClasses();
            oRm.write(">");
                oRm.renderControl(oControl._oAddTagButton);
                oRm.renderControl(oControl._oCancelTagButton);
            oRm.write("</div>");
        oRm.write("</div>");
    oRm.write("</div>");
};
}; // end of sap/suite/ui/commons/NoteTakerFeederRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NoteTakerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.NoteTakerRenderer");

/**
 * @class NoteTaker renderer. 
 * @static
 */
sap.suite.ui.commons.NoteTakerRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.NoteTakerRenderer.render = function(rm, oControl){ 
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapSuiteUiCommonsNoteTaker");
	rm.writeClasses();
	rm.writeAttribute("style", "width:" + (oControl.getVisibleNotes() * 350 + 50) + "px");
	rm.write(">");
        rm.write("<div");
        rm.writeAttribute("id", oControl.getId() + "-filterPane");
        rm.addClass("sapSuiteUiCommonsNoteTakerFilterPane");
        rm.writeClasses();
        rm.write(">");
            // Left section
            rm.write("<div");
            rm.addClass("suiteUiNtFilterPaneLeftSection");
            rm.writeClasses();
            rm.write(">");
                rm.renderControl(oControl._oHomeButton);
                rm.write("<span");
                rm.writeAttribute("id", oControl.getId() + "-filterPane-header");
                rm.addClass("suiteUiNtFilterTitle");
                rm.writeClasses();
                rm.write(">");
                    rm.writeEscaped(oControl._rb.getText("NOTETAKER_FILTER_TITLE") + ":");
                rm.write("</span>");
                rm.renderControl(oControl._oFilterTagButton);
                rm.renderControl(oControl._oFilterThumbUpButton);
                rm.renderControl(oControl._oFilterThumbDownButton);
                rm.renderControl(oControl._oFilterAllButton);
            rm.write("</div>");

            // Right section
            rm.write("<div");
            rm.addClass("suiteUiNtFilterPaneRightSection");
            rm.writeClasses();
            rm.write(">");
                if (oControl.getVisibleNotes() > 1) {
                    rm.renderControl(oControl._oFilterSearchField);
                } else {
                	rm.renderControl(oControl._oSearchButton);
                }
            rm.write("</div>");
        rm.write("</div>");

        rm.renderControl(oControl._carousel);
        
        if (oControl.getVisibleNotes() == 1) {
        	this.searchTextRender(rm, oControl);
		}
        
        rm.write("<div");
        rm.writeAttribute("id", oControl.getId() + "-filterTag-panel");
        rm.addClass("sapSuiteUiCommonsNoteTakerFilterTagPanel");
        rm.addClass("sapUiShd");
        rm.writeClasses();
        rm.write(">");

            rm.write("<div");
            rm.writeAttribute("id", oControl.getId() + "-filterTag-arrow");
            rm.addClass("sapSuiteUiCommonsNoteTakerFilterTagArrow");
            rm.writeClasses();
            rm.write(">");
            rm.write("</div>");

            rm.write("<div");
            rm.writeAttribute("id", oControl.getId() + "-filterTag-header");
            rm.addClass("sapSuiteUiCommonsNoteTakerFilterTagHeader");
            rm.writeClasses();
            rm.write(">");
                rm.writeEscaped(oControl._rb.getText("NOTETAKERFEEDER_TOOLPOPUP_TITLE"));
            rm.write("</div>");

            rm.write("<div>");
                rm.renderControl(oControl._oFilterTagList);
            rm.write("</div>");

            rm.write("<div");
            rm.addClass("sapSuiteUiCommonsNoteTakerFilterTagButtons");
            rm.writeClasses();
            rm.write(">");
                rm.renderControl(oControl._oApplyFilterTagButton);
                rm.renderControl(oControl._oCancelFilterTagButton);
            rm.write("</div>");
        rm.write("</div>");
        
	rm.write("</div>");
};

sap.suite.ui.commons.NoteTakerRenderer.searchTextRender = function(rm, oControl){
    rm.write("<div");
    rm.writeAttribute("id", oControl.getId() + "-search-panel");
    rm.addClass("sapSuiteUiCommonsNoteTakerSearchPanel");
    rm.addClass("sapUiShd");
    rm.writeClasses();
    rm.write(">");
        rm.write("<div");
        rm.writeAttribute("id", oControl.getId() + "-search-arrow");
        rm.addClass("sapSuiteUiCommonsNoteTakerSearchArrow");
        rm.writeClasses();
        rm.write(">");
        rm.write("</div>");
        
        rm.write("<div>");
        rm.renderControl(oControl._oFilterSearchField);
        rm.write("</div>");
    rm.write("</div>");
};	

}; // end of sap/suite/ui/commons/NoteTakerRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.SplitButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.SplitButtonRenderer");

/**
 * @class SplitButton renderer.
 * @static
 */
sap.suite.ui.commons.SplitButtonRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control}
 *                oSplitButton an object representation of the control that should be rendered
 */
sap.suite.ui.commons.SplitButtonRenderer.render = function(oRm, oSplitButton) {

    // return immediately if control is invisible
    if (!oSplitButton.getVisible()) {
        return;
    }
    // write the HTML into the render manager
    oRm.write("<span");
    oRm.writeControlData(oSplitButton);
    oRm.addClass("sapSuiteUiCommonsSplitButton");
    oRm.writeClasses();
    oRm.write(">"); // span element
    oRm.renderControl(oSplitButton._oDefaultActionButton);
    oRm.renderControl(oSplitButton._oMenuButton);
    oRm.write("</span>");
};

}; // end of sap/suite/ui/commons/SplitButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ThingCollectionRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
 
jQuery.sap.declare("sap.suite.ui.commons.ThingCollectionRenderer");

/**
 * @class ThingCollection renderer. 
 * @static
 */
sap.suite.ui.commons.ThingCollectionRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.ThingCollectionRenderer.render = function(oRm, oControl){
	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.addClass("sapSuiteTc");
	oRm.writeClasses();
	oRm.addStyle("width", oControl.getWidth());
	oRm.addStyle("height", oControl.getHeight());
	if (oControl.getMinWidth()) {
	    oRm.addStyle("min-width", oControl.getMinWidth());
	}
	if (oControl.getMinHeight()) {
	    oRm.addStyle("min-height", oControl.getMinHeight());
	}
	oRm.writeStyles();
	oRm.write(">");
        oRm.renderControl(oControl._oRemoveButton);
	
	    oRm.write("<nav");
	    oRm.writeAttribute("id", oControl.getId() + "-nav-prev");
	    oRm.addClass("sapSuiteTcNavPrev");
	    oRm.writeClasses();
	    oRm.write(">");
	    oRm.write("</nav>");
	
	    oRm.write("<div");
	    oRm.writeAttribute("id", oControl.getId() + "-container");
	    oRm.writeAttribute("tabindex", "0");
	    
		oRm.writeAccessibilityState(oControl, {
			role: 'list',
			live: 'assertive',
			disabled: false
		});
	
	    oRm.addClass("sapSuiteTcContainer");
	    oRm.writeClasses();
	    oRm.write(">");
	
	        oRm.write("<div");
	        oRm.writeAttribute("id", oControl.getId() + "-first");
	        oRm.writeAttribute("aria-hidden", "true");
	        oRm.addClass("sapSuiteTcPrev");
	        oRm.writeClasses();
	        oRm.write(">");
	        oRm.write("</div>");
	
	        oRm.write("<div");
	        oRm.writeAttribute("id", oControl.getId() + "-second");
            oRm.writeAttribute("aria-hidden", "false");
	        oRm.addClass("sapSuiteTcCenter");
	        oRm.writeClasses();
	        oRm.write(">");
	            if (oControl._oCenterControl) {
	                oRm.renderControl(oControl._oCenterControl);
	            }
	        oRm.write("</div>");
	
	        oRm.write("<div");
	        oRm.writeAttribute("id", oControl.getId() + "-third");
            oRm.writeAttribute("aria-hidden", "true");
	        oRm.addClass("sapSuiteTcNext");
	        oRm.writeClasses();
	        oRm.write(">");
	        oRm.write("</div>");
	
	    oRm.write("</div>");
	
	    oRm.write("<nav");
	    oRm.writeAttribute("id", oControl.getId() + "-nav-next");
	    oRm.addClass("sapSuiteTcNavNext");
	    oRm.writeClasses();
	    oRm.write(">");
	    oRm.write("</nav>");
	oRm.write("</div>");
};

}; // end of sap/suite/ui/commons/ThingCollectionRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ThreePanelThingInspectorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.ThreePanelThingInspectorRenderer");
jQuery.sap.require('sap.ui.ux3.ThingInspectorRenderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


sap.suite.ui.commons.ThreePanelThingInspectorRenderer = sap.ui.core.Renderer.extend(sap.ui.ux3.ThingInspectorRenderer);

}; // end of sap/suite/ui/commons/ThreePanelThingInspectorRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ThreePanelThingViewerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.ThreePanelThingViewerRenderer");
jQuery.sap.require('sap.ui.ux3.ThingViewerRenderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class ThreePanelThingViewer renderer. 
 * @static
 */
sap.suite.ui.commons.ThreePanelThingViewerRenderer = sap.ui.core.Renderer.extend(sap.ui.ux3.ThingViewerRenderer);


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.ThreePanelThingViewerRenderer.renderContent = function(oRm, oControl){ 
	oRm.write("<div");
	oRm.addClass("sapSuiteTvMinHeight");
	oRm.writeClasses();
	oRm.write(">");
	
    oRm.write("<header");
    oRm.writeAttribute("id", oControl.getId() + "-header");
    oRm.addClass("sapSuiteTvTitle");
    oRm.writeClasses();
    oRm.addStyle("width", oControl.getSidebarWidth());
    oRm.writeStyles();
    oRm.write(">");
        this.renderHeader(oRm, oControl);
    oRm.write("</header>");

    oRm.write("<nav");
    oRm.writeAttribute("id", oControl.getId() + "-navigation");
    oRm.addClass("sapSuiteTvNav");
    if (!oControl.getLogo()) {
        oRm.addClass("sapSuiteTvNavNoLogo");
    }
    oRm.writeClasses();
    oRm.addStyle("width", oControl.getSidebarWidth());
    oRm.writeStyles();
    oRm.write(">");
        oRm.renderControl(oControl._getNavBar());
    oRm.write("</nav>");

    oRm.write("<aside");
    oRm.writeAttribute("id", oControl.getId() + "-headerContent");
    oRm.addClass("sapSuiteTvHeader");
    oRm.writeClasses();
    oRm.write(">");
        this.renderHeaderContent(oRm, oControl);
    oRm.write("</aside>");

    oRm.write("<div");
    oRm.writeAttribute("id", oControl.getId() + "-facetContent");
    oRm.addClass("sapSuiteTvFacet");
    oRm.writeClasses();
    oRm.write(">");
        this.renderFacetContent(oRm, oControl);
    oRm.write("</div>");

    if (oControl.getLogo()) {
        oRm.write("<footer");
        oRm.writeAttribute("id", oControl.getId() + "-footer");
        oRm.addClass("sapSuiteTvLogo");
        oRm.writeClasses();
        oRm.addStyle("width", oControl.getSidebarWidth());
        oRm.writeStyles();
        oRm.write(">");
	        oRm.write("<img");
	        oRm.writeAttribute("id", oControl.getId() + "-logo");
	        oRm.writeAttribute("role", "presentation");
	        oRm.writeAttributeEscaped("src", oControl.getLogo());
	        oRm.addClass("sapSuiteTvLogoIcon");
	        oRm.writeClasses();
	        oRm.write("/>");
        oRm.write("</footer>");
    }    
    oRm.write("</div>");
};

sap.suite.ui.commons.ThreePanelThingViewerRenderer.renderHeader = function(oRm, oControl) {
    var iMenuContentLength = oControl.getMenuContent().length;

    oRm.write("<div");
    oRm.addClass("sapSuiteTvTitleBar");
    oRm.writeClasses();
    oRm.write(">");
        if (oControl.getIcon()) {
            oRm.write("<img");
            oRm.writeAttribute("id", oControl.getId() + "-swatch");
            oRm.writeAttribute("role", "presentation");
            oRm.writeAttributeEscaped("src", oControl.getIcon());
            oRm.addClass("sapSuiteTvTitleIcon");
            oRm.writeClasses();
            oRm.write("/>");
        }

        if (iMenuContentLength > 0) {
            oRm.renderControl(oControl._oMenuButton);
        }

        oRm.write("<div");
        oRm.writeAttribute("role", "heading");
        oRm.writeAttribute("aria-level", 1);
        oRm.writeAttributeEscaped("title", oControl.getType());
        oRm.addClass("sapSuiteTvTitleType");
        oRm.addClass("sapSuiteTvTextCrop");
        oRm.writeClasses();
        oRm.write(">");
            oRm.writeEscaped(oControl.getType());
        oRm.write("</div>");

        oRm.write("<div");
        oRm.writeAttribute("role", "heading");
        oRm.writeAttribute("aria-level", 2);
        oRm.writeAttributeEscaped("title", oControl.getTitle());
        oRm.addClass("sapSuiteTvTitleFirst");
        oRm.writeClasses();
        oRm.write(">");
            oRm.writeEscaped(oControl.getTitle());
        oRm.write("</div>");

        oRm.write("<div");
        oRm.writeAttribute("role", "heading");
        oRm.writeAttribute("aria-level", 3);
        oRm.writeAttributeEscaped("title", oControl.getSubtitle());
        oRm.addClass("sapSuiteTvTitleSecond");
        oRm.addClass("sapSuiteTvTextCrop");
        oRm.writeClasses();
        oRm.write(">");
            oRm.writeEscaped(oControl.getSubtitle());
        oRm.write("</div>");
    oRm.write("</div>");

    this.renderFlyOutMenu(oRm,  oControl);
};

sap.suite.ui.commons.ThreePanelThingViewerRenderer.renderFacetContent = function(oRm, oControl) {
    var aFacetContent = oControl.getFacetContent();
    for (var i = 0; i < aFacetContent.length; i++) {
        var oGroup = aFacetContent[i];

        oRm.write("<div");
        oRm.writeAttribute("role", "form");
        if (oGroup.getColspan()) {
            oRm.addClass("sapUiUx3TVFacetThingGroupSpan");
        } else {
            oRm.addClass("sapUiUx3TVFacetThingGroup");
        }
        oRm.writeClasses();
        oRm.write(">");
            oRm.write("<div");
            oRm.writeAttributeEscaped("title", oGroup.getTitle());
            oRm.addClass("sapUiUx3TVFacetThingGroupContentTitle");
            oRm.writeClasses();
            oRm.write(">");
                oRm.write("<span>");
                    oRm.writeEscaped(oGroup.getTitle());
                oRm.write("</span>");
            oRm.write("</div>");

            oRm.write("<div");
            oRm.addClass("sapUiUx3TVFacetThingGroupContent");
            oRm.writeClasses();
            oRm.write(">");
                var oGroupContent = oGroup.getContent();
                for (var j = 0; j < oGroupContent.length; j++) {
                    oRm.renderControl(oGroupContent[j]);
                }
            oRm.write("</div>");
        oRm.write("</div>");
    }
};

sap.suite.ui.commons.ThreePanelThingViewerRenderer.renderFlyOutMenu = function(oRm, oControl) {
    oRm.write("<div");
    oRm.writeAttribute("id", oControl.getId() + "-menu-popup");
    oRm.writeAttribute("role", "menu");
    oRm.addClass("sapSuiteTvPopupMenu");
    oRm.writeClasses();
    oRm.write(">");

    var aMenuContent = oControl.getMenuContent();
    for (var i = 0; i < aMenuContent.length; i++) {
        var oMenuItem = aMenuContent[i];
        oMenuItem.addStyleClass("sapSuiteTvPopupMenuLink");
        oRm.renderControl(oMenuItem);
    }

    oRm.write("</div>");
};

}; // end of sap/suite/ui/commons/ThreePanelThingViewerRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.UnifiedThingGroupRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.UnifiedThingGroupRenderer");

/**
 * @class UnifiedThingGroup renderer. 
 * @static
 */
sap.suite.ui.commons.UnifiedThingGroupRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.UnifiedThingGroupRenderer.render = function(rm, oControl){ 
	 // write the HTML into the render manager
	 rm.write("<div");
	 rm.writeControlData(oControl);
	 rm.addClass("sapSuiteUtg");
	 rm.writeClasses();
	 rm.write(">"); // div element
	 
	 // header div
	 rm.write("<div");
	 rm.addClass("sapSuiteUtgHeader");
	 rm.writeClasses();
	 rm.writeAttribute("id", oControl.getId() + "-thing-group-header");
	 rm.write(">");
         // title div
         rm.write("<div");
         rm.addClass("sapSuiteUtgTitle");
         rm.writeClasses();
         rm.writeAttribute("id", oControl.getId() + "-thing-group-title");
         rm.write(">");
            rm.writeEscaped(oControl.getTitle());
         rm.write("</div>");

         // description div
         rm.write("<div");
         rm.addClass("sapSuiteUtgDesc");
         rm.writeClasses();
         rm.writeAttribute("id", oControl.getId() + "-thing-group-desc");
         rm.write(">");
            rm.writeEscaped(oControl.getDescription());
         rm.write("</div>");
	 rm.write("</div>");

	 // content div
	 rm.write("<div");
	 rm.addClass("sapSuiteUtgContent");
     rm.addClass("sapSuiteUtgContent"+oControl.getDesign());
	 rm.writeClasses();
	 rm.writeAttribute("id", oControl.getId() + "-thing-group-content");
	 rm.write(">");
	 	 rm.renderControl(oControl.getContent());
	 rm.write("</div>");

	 rm.write("</div>");
};

}; // end of sap/suite/ui/commons/UnifiedThingGroupRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.UnifiedThingInspectorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.UnifiedThingInspectorRenderer");

/**
 * @class UnifiedThingInspector renderer. 
 * @static
 */
sap.suite.ui.commons.UnifiedThingInspectorRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.UnifiedThingInspectorRenderer.render = function(oRm, oControl){ 
	 // write the HTML into the render manager
    oRm.write("<div");
    oRm.writeControlData(oControl);
    oRm.addStyle("max-width", jQuery.device.is.desktop ? "1024px" : "100%" );
    oRm.addStyle("height", oControl.getHeight());
    oRm.writeStyles();
    oRm.addClass("sapSuiteUti");
    oRm.writeClasses();
    oRm.write(">");
        oRm.renderControl(oControl._oNavContainer);
    oRm.write("</div>");
};

}; // end of sap/suite/ui/commons/UnifiedThingInspectorRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.VerticalNavigationBarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.VerticalNavigationBarRenderer");
jQuery.sap.require('sap.ui.ux3.NavigationBarRenderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class VerticalNavigationBar renderer. 
 * @static
 */
sap.suite.ui.commons.VerticalNavigationBarRenderer =sap.ui.core.Renderer.extend(sap.ui.ux3.NavigationBarRenderer); 


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.VerticalNavigationBarRenderer.render = function(oRm, oControl){ 
    if (!oControl.getVisible()) {            // return immediately if control is invisible
        return;
    }

    // write the HTML into the render manager
    oRm.write("<nav");
    oRm.writeControlData(oControl);
    oRm.writeAttribute("role", "navigation");
    oRm.addClass("sapSuiteTvNavBar");
    oRm.addClass("sapUiUx3NavBarUpperCase");
    oRm.writeClasses();
    oRm.write(">");
        oRm.write("<ul");
        oRm.writeAttribute("id", oControl.getId() + "-list");
        oRm.writeAttribute("role", "menubar");
        oRm.addClass("sapSuiteTvNavBarList");
        oRm.writeClasses();
        oRm.write(">");
            this.getItemsHtml(oRm, oControl);
        oRm.write("</ul>");
    oRm.write("</nav>");
};

sap.suite.ui.commons.VerticalNavigationBarRenderer.getItemsHtml = function(oRm, oControl) {
    var aItems = oControl.getItems();
    var bNeedToGetInstances = false;

    if (!aItems || aItems.length == 0) {            // use the association instead, if the aggregation is empty
        aItems = oControl.getAssociatedItems();
        bNeedToGetInstances = true;                 // avoid type checks in the loop
    }

    var iNoOfItems = aItems.length;
    var selectedItemId = oControl.getSelectedItem();

    for (var i = 0; i < iNoOfItems; i++) {
        var oItem = bNeedToGetInstances ? sap.ui.getCore().byId(aItems[i]) : aItems[i];

        if (oItem.getVisible()) {
            var bIsSelected = (oItem.getId() == selectedItemId);
            var iCharsInQty = -1;

            if (oItem.getQuantity && oItem.getQuantity()) {
                iCharsInQty = oItem.getQuantity().length;
                if (iCharsInQty > 0) iCharsInQty += 2;
            }

            oRm.write("<li");
            oRm.addClass("sapSuiteTvNavBarItem");
            if (bIsSelected) {
                oRm.addClass("sapUiUx3NavBarItemSel");
            }
            oRm.writeClasses();
            oRm.write(">");
                oRm.write("<a");                              // onclick='this.parentNode.onclick(event);'
                oRm.writeAttribute("id", oItem.getId());
                oRm.writeAttributeEscaped("href", oItem.getHref() || "javascript:void(0);");
                oRm.writeAttribute("aria-setsize", iNoOfItems);
                oRm.writeAttribute("aria-posinset", i + 1);
                oRm.writeAttribute("aria-checked", bIsSelected ? "true" : "false");
                oRm.writeAttribute("role", "menuitemradio");
                
                oRm.addClass("sapSuiteTvNavBarItemLink");
                oRm.writeClasses();
                oRm.write(">");

                    oRm.write("<span");
                    oRm.addClass("sapSuiteTvNavBarItemName");
                    oRm.writeClasses();
                    //externalized to allow skipping in inherited classes
                    this._addQuantityMargin(oRm, oControl, iCharsInQty);
                    oRm.write(">");
                        oRm.writeEscaped(oItem.getText());
                    oRm.write("</span>");

                    if (iCharsInQty > 0) {
                        oRm.write("<span");
                        oRm.addClass("sapSuiteTvNavBarItemQty");
                        oRm.writeClasses();
                        oRm.write(">");
                        oRm.write(" (").writeEscaped(oItem.getQuantity()).write(")");
                        oRm.write("</span>");
                    }

                oRm.write("</a>");

            oRm.write("</li>");
        }
    }

    oRm.write("<span");
    oRm.writeAttribute("id", oControl.getId() + "-arrow");
    oRm.writeAttribute("style", "display:none;");
    oRm.write("></span>");
};

sap.suite.ui.commons.VerticalNavigationBarRenderer._addQuantityMargin = function(oRm, oControl, iCharsInQty) {
    if (iCharsInQty > 0) {
        var sMarginStyle = "margin-right:-"+(1+iCharsInQty*0.6)+"em; padding-right:"+(1+iCharsInQty*0.6)+"em";
        oRm.writeAttribute("style", sMarginStyle);
    }
};

}; // end of sap/suite/ui/commons/VerticalNavigationBarRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ViewRepeaterRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.ViewRepeaterRenderer");
jQuery.sap.require('sap.ui.commons.RowRepeaterRenderer'); // unlisted dependency retained


/**
 * @class RowRepeater renderer. 
 * @static
 */
sap.suite.ui.commons.ViewRepeaterRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.RowRepeaterRenderer);

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.ViewRepeaterRenderer.render = function(oRenderManager, oControl) { 
	// escape directly if control is not visible
	if(!oControl.getVisible()) {
	    return;
	}
	
	// opening root DIV
	oRenderManager.write("<div");
	oRenderManager.writeControlData(oControl);
	// add design CSS class: sapUiRrDesignStandard/sapUiRrDesignTransparent/sapUiRrDesignBareShell
	oRenderManager.addClass("sapUiRrDesign" + oControl.getDesign() );
	
	if (oControl.getResponsive() && oControl.getShowMoreSteps() == 0) {
		oRenderManager.addClass("suiteUiVrResp");
	}
	
	oRenderManager.writeClasses();
	
	if (oControl.getResponsive() && oControl.getShowMoreSteps() == 0) {
		oRenderManager.write(" style='height:" + oControl.getHeight() +"'");
	}
	
	oRenderManager.write(">");
	
	// render the row repeater header (not in BARESHELL design)
	if( oControl.getDesign() !== sap.ui.commons.RowRepeaterDesign.BareShell){
	    this.renderHeader(oRenderManager, oControl);
	}
	
	if (oControl.getExternal() !== true) {
	    // render the row repeater body
	    this.renderBody(oRenderManager, oControl);
	
	    // render the row repeater footer (not in BARESHELL design)
	    if( oControl.getDesign() !== sap.ui.commons.RowRepeaterDesign.BareShell){
	        this.renderFooter(oRenderManager, oControl);
	    }
	} else {
	    oRenderManager.renderControl(sap.ui.getCore().byId(oControl.getAssociation("externalRepresentation")));
	}
	
	// closing root DIV
	oRenderManager.write("</div>");
};

sap.suite.ui.commons.ViewRepeaterRenderer.renderHeader = function(oRenderManager, oControl) {
    this.renderViewSwitcher(oRenderManager, oControl);
    if (oControl.getExternal() !== true) {
        sap.ui.commons.RowRepeaterRenderer.renderHeader.call(this, oRenderManager, oControl);
    }
};

sap.suite.ui.commons.ViewRepeaterRenderer.renderFooter = function(oRenderManager, oControl) {
    if (oControl.getExternal() !== true) {
        sap.ui.commons.RowRepeaterRenderer.renderFooter.call(this, oRenderManager, oControl);
    }
};

sap.suite.ui.commons.ViewRepeaterRenderer.renderViewSwitcher = function(oRenderManager, oControl) {
	if (oControl.getShowViews() || oControl.getShowSearchField()) {
        oRenderManager.write("<div");
        oRenderManager.addClass("suiteUiVrViewSwHolder");
        oRenderManager.writeClasses();
        oRenderManager.write(">");

        if (oControl.getShowViews()) {
            // opening view switcher DIV
            oRenderManager.write("<div");
            oRenderManager.addClass("suiteUiVrViewSw");
            oRenderManager.writeClasses();
            oRenderManager.write(">");
                oRenderManager.renderControl(oControl._oSegBtn);
            // closing view switcher DIV
            oRenderManager.write("</div>");
        }

        if (oControl.getShowSearchField()) {
            // opening view switcher DIV
            oRenderManager.write("<div");
            oRenderManager.addClass("suiteUiVrSearchFld");
            oRenderManager.writeClasses();
            oRenderManager.write(">");
                oRenderManager.renderControl(oControl._oSearchField);
            // closing view switcher DIV
            oRenderManager.write("</div>");
        }
        oRenderManager.write("</div>");
    }
    oRenderManager.write("<div style='clear:both;'/>");
};
}; // end of sap/suite/ui/commons/ViewRepeaterRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.suite.ui.commons (1.16.3)
 */
jQuery.sap.declare("sap.suite.ui.commons.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAP UI library: sap.suite.ui.commons
 *
 * @namespace
 * @name sap.suite.ui.commons
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.suite.ui.commons",
  dependencies : ["sap.ui.core","sap.ui.commons"],
  types: [
    "sap.suite.ui.commons.ThingGroupDesign",
    "sap.suite.ui.commons.ValueStatus"
  ],
  interfaces: [],
  controls: [
    "sap.suite.ui.commons.BusinessCard",
    "sap.suite.ui.commons.DateRangeScroller",
    "sap.suite.ui.commons.DateRangeSlider",
    "sap.suite.ui.commons.DateRangeSliderInternal",
    "sap.suite.ui.commons.FacetOverview",
    "sap.suite.ui.commons.FeedItemHeader",
    "sap.suite.ui.commons.FeedTile",
    "sap.suite.ui.commons.KpiTile",
    "sap.suite.ui.commons.LaunchTile",
    "sap.suite.ui.commons.LinkActionSheet",
    "sap.suite.ui.commons.NoteTaker",
    "sap.suite.ui.commons.NoteTakerCard",
    "sap.suite.ui.commons.NoteTakerFeeder",
    "sap.suite.ui.commons.RepeaterViewConfiguration",
    "sap.suite.ui.commons.SplitButton",
    "sap.suite.ui.commons.ThingCollection",
    "sap.suite.ui.commons.ThreePanelThingInspector",
    "sap.suite.ui.commons.ThreePanelThingViewer",
    "sap.suite.ui.commons.UnifiedThingGroup",
    "sap.suite.ui.commons.UnifiedThingInspector",
    "sap.suite.ui.commons.VerticalNavigationBar",
    "sap.suite.ui.commons.ViewRepeater"
  ],
  elements: [
    "sap.suite.ui.commons.CountingNavigationItem",
    "sap.suite.ui.commons.FeedItem"
  ],
  version: "1.16.3"});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.ThingGroupDesign.
jQuery.sap.declare("sap.suite.ui.commons.ThingGroupDesign");


/**
 * @class Defines the way how UnifiedThingGroup control is rendered.
 *
 * @version 1.16.3
 * @static
 * @public
 */
sap.suite.ui.commons.ThingGroupDesign = {
  
    /**
     * In this design there is no indentation between header and content of the group. 
     * @public
     */
    ZeroIndent : "ZeroIndent",

    /**
     * In this design there is indentation between header and content of the group. 
     * @public
     */
    TopIndent : "TopIndent"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.suite.ui.commons.ValueStatus.
jQuery.sap.declare("sap.suite.ui.commons.ValueStatus");


/**
 * @class Marker for the key value status.
 *
 * @version 1.16.3
 * @static
 * @public
 */
sap.suite.ui.commons.ValueStatus = {
  
    /**
     * Good value. 
     * @public
     */
    Good : "Good",

    /**
     * Positive value. 
     * @public
     */
    Neutral : "Neutral",

    /**
     * Critical value. 
     * @public
     */
    Critical : "Critical",

    /**
     * Bad value. 
     * @public
     */
    Bad : "Bad"

  };

}; // end of sap/suite/ui/commons/library.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.util.DateUtils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.util.DateUtils");

/**
 * Constructor for DateUtils - must not be used. All functions are static, so it is illegal to call this constructor.
 * 
 * @class DateUtils is a static class for Date utility functions.
 * 
 * @public
 */
sap.suite.ui.commons.util.DateUtils = function() {

    throw new Error();
};

/**
 * Adjust the given date to the start of the day, with time set to 0 hours, 0 minutes, and 0 seconds.
 * 
 * @param {Date}
 *                The date to be adjusted.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay = function(dDate) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {
        dDate.setHours(0);
        dDate.setMinutes(0);
        dDate.setSeconds(0);
        dDate.setMilliseconds(0);
    }
};

/**
 * Adjust the given date to the end of the day, with time set to 23 hours, 59 minutes, and 59 seconds.
 * 
 * @param {Date}
 *                The date to be adjusted.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay = function(dDate) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {
        dDate.setHours(23);
        dDate.setMinutes(59);
        dDate.setSeconds(59);
        dDate.setMilliseconds(999);
    }
};

/**
 * Adjust the given date to the first day of the month, start of day.
 * 
 * @param {Date}
 *                The date to be adjusted.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth = function(dDate) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {
        dDate.setDate(1);
        sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dDate);
    }
};

/**
 * Adjust the given date to the last day of the month, end of day.
 * 
 * @param {Date}
 *                The date to be adjusted.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToEndOfMonth = function(dDate) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {
        dDate.setDate(1);
        dDate.setMonth(dDate.getMonth() + 1);
        dDate.setDate(0);
        sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(dDate);
    }
};

/**
 * Adjust the given date to the first day of the year, start of day.
 * 
 * @param {Date}
 *                The date to be adjusted.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToStartOfYear = function(dDate) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {
        dDate.setMonth(0);
        sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(dDate);
    }
};

/**
 * Adjust the given date to the last day of the year, end of day.
 * 
 * @param {Date}
 *                The date to be adjusted.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToEndOfYear = function(dDate) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {
        dDate.setMonth(11);
        sap.suite.ui.commons.util.DateUtils.resetDateToEndOfMonth(dDate);
    }
};

/**
 * Adjust the given date to the day specified by <code>iFirstDayOfWeek</code>. The date will be set to the previous first day of the week. For example, if the date is Tuesday,
 * February 19 and the value of <code>iFirstDayOfWeek</code> is 4 (Thursday), then the date will be adjusted to the previous Thursday, which is February 14.
 * 
 * @param {Date}
 *                The date to be adjusted.
 * @param [iFirstDayOfWeek=1]
 *                The day considered to be the first day of the week. Valid values are 0-6, with 0=Sunday and 6=Saturday.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToStartOfWeek = function(dDate, iFirstDayOfWeek) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {
        if (iFirstDayOfWeek === undefined) {
            iFirstDayOfWeek = 1;
        } else if (isNaN(iFirstDayOfWeek) || !isFinite(iFirstDayOfWeek)) {
            jQuery.sap.log.error("DateUtils iFirstDayOfWeek value ='" + iFirstDayOfWeek + "' is invalid.");
            return;
        }

        dDate.setDate(dDate.getDate() - (dDate.getDay() - iFirstDayOfWeek + 7) % 7);
        sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dDate);
    }
};

/**
 * Adjust the given date to <code>oSettings.iDuration</code> days after the day specified by <code>oSettings.iFirstDayOfWeek</code>. See <code>resetDateToStartOfWeek()</code>
 * for a description of how the date is adjusted to the first day of week.
 * 
 * @param {Object}
 *                oSettings
 * @param [oSettings.iDuration=7]
 *                The number of days in the week with a minimum of 1 and maximum of 7.
 * @param [oSettings.iFirstDayOfWeek=1]
 *                The day considered to be the first day of the week. Valid values are 0-6, with 0=Sunday and 6=Saturday.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToEndOfWeek = function(dDate, oSettings) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {

        var duration;
        if (oSettings && !(oSettings instanceof Object)) {
            jQuery.sap.log.error("DateUtils oSettings is not an object.");
            return;
        }

        if (!oSettings) {
            oSettings = {};
        }

        if (oSettings.iDuration === undefined) {
            duration = 7;
        } else {
            duration = oSettings.iDuration;

            if (isNaN(duration) || !isFinite(duration)) {
                jQuery.sap.log.error("DateUtils duration value ='" + duration + "' is invalid.");
                return;
            }
        }

        sap.suite.ui.commons.util.DateUtils.resetDateToStartOfWeek(dDate, oSettings.iFirstDayOfWeek);
        dDate.setDate(dDate.getDate() + duration - 1);
        sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(dDate);
    }
};

/**
 * Test if the given date is a valid date object. If the date is invalid an error message is logged.
 * 
 * @param {Date}
 *                The date to be validated.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.isValidDate = function(dDate) {

    if (Object.prototype.toString.call(dDate) !== "[object Date]" || isNaN(dDate.getTime())) {
        jQuery.sap.log.error("DateUtils invalid date=" + dDate);
        return false;
    }
    return true;
};

/**
 * Tests to see if two dates have the same year, month, and day. Time is not included in the equality. Invalid dates, such as null or undefined, are never equal.
 * 
 * @param {Date}
 *                dDate1 First date to compare.
 * @param {Date}
 *                dDate2 Second date to compare.
 * @return {boolean} true if two dates have same year, month, and day, otherwise false
 * @public
 */
sap.suite.ui.commons.util.DateUtils.dateDaysEqual = function(dDate1, dDate2) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate1) && sap.suite.ui.commons.util.DateUtils.isValidDate(dDate2)) {

        return (dDate1.getFullYear() === dDate2.getFullYear() && dDate1.getMonth() === dDate2.getMonth() && dDate1.getDate() === dDate2.getDate());

    }
    return false;
};

/**
 * Tests to see if two dates have the same year and month. Time is not included in the equality. Invalid dates, such as null or undefined, are never equal.
 * 
 * @param {Date}
 *                dDate1 First date to compare.
 * @param {Date}
 *                dDate2 Second date to compare.
 * @return {boolean} true if two dates have same year and month, otherwise false
 * @public
 */
sap.suite.ui.commons.util.DateUtils.dateMonthsEqual = function(dDate1, dDate2) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate1) && sap.suite.ui.commons.util.DateUtils.isValidDate(dDate2)) {

        return (dDate1.getFullYear() === dDate2.getFullYear() && dDate1.getMonth() === dDate2.getMonth());
    }
    return false;
};

/**
 * Returns the date that is iIndex days from the dStartDate
 * 
 * @param {Date}
 *                dStartDate Start date.
 * @param {int}
 *                iIndex how many days to move forward or backward from dStartDate.
 * @return {Date} date that is iIndex days from the dStartDate if dStartDate and iIndex are valid, otherwise null.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.incrementDateByIndex = function(dStartDate, iIndex) {

    var dReturnDate = null;
    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dStartDate) && isFinite(iIndex)) {
        dReturnDate = new Date(dStartDate);
        dReturnDate.setDate(dStartDate.getDate() + parseInt(iIndex, 10));
    }
    return dReturnDate;
};

/**
 * Returns the date that is iIndex months from the dStartDate
 * 
 * @param {Date}
 *                dStartDate Start date.
 * @param {int}
 *                iIndex how many months to move forward or backward from dStartDate.
 * @return {Date} date that is iIndex months from the dStartDate if dStartDate and iIndex are valid, otherwise null.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.incrementMonthByIndex = function(dStartDate, iIndex) {

    var dReturnDate = null;
    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dStartDate) && isFinite(iIndex)) {
        dReturnDate = new Date(dStartDate);
        sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(dReturnDate);
        dReturnDate.setMonth(dStartDate.getMonth() + parseInt(iIndex, 10));
    }
    return dReturnDate;
};

/**
 * Returns the number of months two dates are apart
 * 
 * @param {Date}
 *                dStartDate Start date.
 * @param {Date}
 *                dEndDate End date.
 * @return {Number} number of months two dates are apart
 * 
 * @public
 */
sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart = function(dStartDate, dEndDate) {

    dStartDate = new Date(dStartDate);
    dEndDate = new Date(dEndDate);
    sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(dStartDate);
    sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(dEndDate);

    var bForward = dStartDate.getTime() <= dEndDate.getTime();
    var iForward = 0, iBackward = 0, iNumberApart = 0;

    for (iForward = 0, iBackward = 0; 
    !(dStartDate.getDate() === dEndDate.getDate() && dStartDate.getMonth() === dEndDate.getMonth() && dStartDate.getFullYear() === dEndDate.getFullYear());
    iForward++, iBackward--) {
        if (bForward) {
            dStartDate.setMonth(dStartDate.getMonth() + 1);        
        } else {
            dStartDate.setMonth(dStartDate.getMonth() - 1);          
        }
    }    
    
    if(bForward){
        iNumberApart = iForward;
    } else {
        iNumberApart = iBackward;
    }
    return iNumberApart;
};

/**
 * Returns the number of days two dates are apart
 * 
 * @param {Date}
 *                dStartDate Start date.
 * @param {Date}
 *                dEndDate End date.
 * @return {Number} number of days two dates are apart
 * 
 * @public
 */
sap.suite.ui.commons.util.DateUtils.numberOfDaysApart = function(dStartDate, dEndDate) {

    dStartDate = new Date(dStartDate);
    dEndDate = new Date(dEndDate);
    sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dStartDate);
    sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dEndDate);

    var bForward = dStartDate.getTime() <= dEndDate.getTime();   
    var iForward = 0, iBackward = 0, iNumberApart = 0;

    for (iForward = 0, iBackward = 0;  
    !(dStartDate.getDate() === dEndDate.getDate() && dStartDate.getMonth() === dEndDate.getMonth() && dStartDate.getFullYear() === dEndDate.getFullYear());
    iForward++, iBackward--) {
        if (bForward) {
            dStartDate.setDate(dStartDate.getDate() + 1);            
        } else {
            dStartDate.setDate(dStartDate.getDate() - 1);            
        }
    }

    if(bForward){
        iNumberApart = iForward;
    } else {
        iNumberApart = iBackward;
    }
    return iNumberApart;
};

}; // end of sap/suite/ui/commons/util/DateUtils.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.util.FeedAggregator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.util.FeedAggregator");


/**
 * Constructor for FeedAggregator - must not be used. All functions are static, so it is illegal to call this constructor.
 * 
 * @class FeedAggregator is a static class for feed aggregation functions.
 * 
 * @private
 */
sap.suite.ui.commons.util.FeedAggregator = function() {

	throw new Error();
};

/**
 * Filters $xml to include/exclude articles that matches the inclusion/exclusion filter criteria. Filter title by the entire phrase and apply OR operator between different filters.
 * 
 * @param {Object}
 *            $xml jQuery object with XML
 * @param {String[]}
 *            aInclusionFilters array of filtering phrases
 * @param {String[]}
 *            aExclusionFilters array of filtering phrases
 * @private
 */
sap.suite.ui.commons.util.FeedAggregator.filterItems = function($xml, aInclusionFilters, aExclusionFilters) {

	var filter = function(aFilters, inclusive) {

		var $items = $xml.find("rss>channel>item");
		if ($items.length > 0) {
			for ( var i = $items.length - 1; i >= 0; i--) {
				var $item = jQuery($items[i]);
				var $title = $item.find("title");
				var match = false;
				for ( var j = 0; j < aFilters.length; j++) {
					var filter = aFilters[j];
					if (filter) {
						if ($title.text().toLowerCase().indexOf(filter.toLowerCase()) !== -1) {
							match = true;
							break;
						}
					}
				}
				if (match !== inclusive) {
					$item.remove();
				}
			}
		}
	};
	if (aInclusionFilters && aInclusionFilters.length > 0) {
		filter(aInclusionFilters, true);
	}
	if (aExclusionFilters && aExclusionFilters.length > 0) {
		filter(aExclusionFilters, false);
	}
};

/**
 * Performs XHR to the given URLs and trigger fnCompleted function when all requests are completed. If the request is completed with error fnCompleted is still called but then the
 * fnFailed is called.
 * 
 * @param {String[]}
 *            aFeedUrls URLs to get data from
 * @param {String[]}
 *            aInclusionFilters Filters to include articles into result model. Filter title by the entire phrase and apply OR operator between different filters.
 * @param {String[]}
 *            aExclusionFilters Filters to exclude articles from result model. Filter title by the entire phrase and apply OR operator between different filters.
 * @param {function}
 *            fnCompleted callback function to handle data received from URL
 * @param {function}
 *            [fnFailed] callback function to handle failed request
 * @private
 */
sap.suite.ui.commons.util.FeedAggregator.getFeeds = function(aFeedUrls, aInclusionFilters, aExclusionFilters, fnCompleted, fnFailed) {

	var jsResult = {
		items : []
	}; // array of RSS items
	var result = new sap.ui.model.json.JSONModel();
	var feedNumber = aFeedUrls.length;
	var counter = 0;

	var fnCompleteOneFeed = function(oControlEvent) {

		var $xml = jQuery(this.getData());
		sap.suite.ui.commons.util.FeedAggregator.filterItems($xml, aInclusionFilters, aExclusionFilters);
		if ($xml.find("rss>channel>item>title").length > 0) {
			var items = $xml.find("rss>channel>item");
			var source = jQuery($xml.find("rss>channel>title")).text();
			var imageUrl = jQuery($xml.find("rss>channel>image>url")).text();

			for ( var i = 0; i < items.length; i++) {
				var $item = jQuery(items[i]);
				var date = new Date($item.children("pubDate").text());
				var itemImageUrl = $item.children("image").text();

				if (itemImageUrl) {
					imageUrl = itemImageUrl;
				}

				if (!sap.suite.ui.commons.util.DateUtils.isValidDate(date)) {
					date = null;
				}
				jsResult.items.push({
					title : $item.children("title").text(),
					link : $item.children("link").text(),
					description : $item.children("description").text(),
					pubDate : date,
					source : source,
					image : imageUrl
				});
			}
		}
		counter++;
		if (counter === feedNumber) {
			// place fnComplete function in the queue
			result.setData(jsResult);
			if (fnCompleted) {
				fnCompleted();
			}
		}
	};

	for ( var i = 0; i < aFeedUrls.length; i++) {
		var tmpXmlModel = new sap.ui.model.xml.XMLModel();
		tmpXmlModel.attachRequestCompleted(fnCompleteOneFeed);
		tmpXmlModel.loadData(aFeedUrls[i]);
	}

	return result;
};
}; // end of sap/suite/ui/commons/util/FeedAggregator.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.util.FeedItemUtils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.util.FeedItemUtils");



/**
 * Constructor for FeedItemUtils - must not be used. All functions are static, so it is illegal to call this constructor.
 * 
 * @class FeedItemUtils is a static class for feed item utility functions.
 * 
 * @private
 */
sap.suite.ui.commons.util.FeedItemUtils = function() {

	throw new Error();
};

/**
 * This function calculates the age of feed item.
 * 
 * @param {Date}
 *            The publication date of the feed item.
 * @private
 */
sap.suite.ui.commons.util.FeedItemUtils.calculateFeedItemAge = function(dPublicationDate) {

	var sAgo = "";

	if (!sap.suite.ui.commons.util.DateUtils.isValidDate(dPublicationDate)) {
		return sAgo;
	}

	var dNow = new Date();

	// ignore milliseconds
	dPublicationDate.setMilliseconds(0);
	dNow.setMilliseconds(0);

	var oLocale = sap.ui.getCore().getConfiguration().getLanguage();
	var oResBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons", oLocale);

	var nMillisInOneMinute = 60000;
	var nMillisInOneHour = nMillisInOneMinute * 60;
	var nMillisInOneDay = nMillisInOneHour * 24;

	if ((dNow.getTime() - dPublicationDate.getTime()) >= nMillisInOneDay) {

		var nNumberOfDays = parseInt((dNow.getTime() - dPublicationDate.getTime()) / nMillisInOneDay, 10);
		if (nNumberOfDays === 1) {

			sAgo = oResBundle.getText("FEEDTILE_DAY_AGO", [ nNumberOfDays ]);
		} else {

			sAgo = oResBundle.getText("FEEDTILE_DAYS_AGO", [ nNumberOfDays ]);
		}
	} else if ((dNow.getTime() - dPublicationDate.getTime()) >= nMillisInOneHour) {

		var nNumberOfHours = parseInt((dNow.getTime() - dPublicationDate.getTime()) / nMillisInOneHour, 10);

		if (nNumberOfHours === 1) {

			sAgo = oResBundle.getText("FEEDTILE_HOUR_AGO", [ nNumberOfHours ]);
		} else {

			sAgo = oResBundle.getText("FEEDTILE_HOURS_AGO", [ nNumberOfHours ]);
		}
	} else {

		var nNumberOfMins = parseInt((dNow.getTime() - dPublicationDate.getTime()) / nMillisInOneMinute, 10);

		if (nNumberOfMins === 1) {

			sAgo = oResBundle.getText("FEEDTILE_MINUTE_AGO", [ nNumberOfMins ]);
		} else {

			sAgo = oResBundle.getText("FEEDTILE_MINUTES_AGO", [ nNumberOfMins ]);
		}
	}

	return sAgo;
};
}; // end of sap/suite/ui/commons/util/FeedItemUtils.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.util.RenderUtils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.util.RenderUtils");

jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained


sap.suite.ui.commons.util.RenderingHelper = function(oRenderManager) {
    this._rm = oRenderManager;
};
sap.suite.ui.commons.util.RenderingHelper.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);

/**
 * Returns render manager, throw {Error} if undefined.
 */
sap.suite.ui.commons.util.RenderingHelper.prototype._getRenderManager = function() {
    if (!(this._rm)) {
        throw new Error("Render manager not defined");
    }
    return this._rm;
};

/**
 * Writes complete opening tag with name sTagName.
 * @param {String} sTagName The name for the tag.
 * @param {Object} [oTag] Object which contains tag's classes and attributes.
 */
sap.suite.ui.commons.util.RenderingHelper.prototype.writeOpeningTag = function(sTagName, oTag) {
    oTag = oTag || {};

    // Get manager
    var rm = this._getRenderManager();
    var attrName;

    // Write tag name
    rm.write("<");
    rm.writeEscaped(sTagName);

    // Write CSS classes
    if (oTag.classes) {
        for (var i = 0; i < oTag.classes.length; i++) {
            rm.addClass(oTag.classes[i]);
        }
        rm.writeClasses();
    }

    // Write attributes
    if (oTag.attributes) {
        for (attrName in oTag.attributes) {
            rm.writeAttribute(attrName, oTag.attributes[attrName]);
        }
    }

    // Write escaped attributes
    if (oTag.escapedAttributes) {
        for (attrName in oTag.escapedAttributes) {
            rm.writeAttributeEscaped(attrName, oTag.escapedAttributes[attrName]);
        }
    }

    rm.write(">");
};

/**
 * Writes complete opening tag with name sTagName.
 * @param {String} sTagName The name for the tag.
 */
sap.suite.ui.commons.util.RenderingHelper.prototype.writeClosingTag = function(sTagName) {
    // Get manager
    var rm = this._getRenderManager();

    // Write tag name
    rm.write("</");
    rm.writeEscaped(sTagName);
    rm.write(">");
};

}; // end of sap/suite/ui/commons/util/RenderUtils.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.BusinessCard') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.BusinessCard.
jQuery.sap.declare("sap.suite.ui.commons.BusinessCard");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new BusinessCard.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : string</li>
 * <li>{@link #getIconPath iconPath} : sap.ui.core.URI</li>
 * <li>{@link #getSecondTitle secondTitle} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getImageTooltip imageTooltip} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control</li>
 * <li>{@link #getFirstTitle firstTitle} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control allows you to display business card information including an image, first title (either URL link or text), second title, and multiple text lines.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.BusinessCard
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.BusinessCard", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"type" : {type : "string", group : "Misc", defaultValue : null},
		"iconPath" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"secondTitle" : {type : "string", group : "Misc", defaultValue : null},
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"imageTooltip" : {type : "string", group : "Misc", defaultValue : null}
	},
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : false}, 
    	"firstTitle" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.BusinessCard with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.BusinessCard.extend
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Title of the BusinessCard that describes its type.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>type</code>
 * @public
 * @name sap.suite.ui.commons.BusinessCard#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sType  new value for property <code>type</code>
 * @return {sap.suite.ui.commons.BusinessCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BusinessCard#setType
 * @function
 */


/**
 * Getter for property <code>iconPath</code>.
 * A path to the BusinessCard icon.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconPath</code>
 * @public
 * @name sap.suite.ui.commons.BusinessCard#getIconPath
 * @function
 */

/**
 * Setter for property <code>iconPath</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconPath  new value for property <code>iconPath</code>
 * @return {sap.suite.ui.commons.BusinessCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BusinessCard#setIconPath
 * @function
 */


/**
 * Getter for property <code>secondTitle</code>.
 * A short text line that describes this BusinessCard.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>secondTitle</code>
 * @public
 * @name sap.suite.ui.commons.BusinessCard#getSecondTitle
 * @function
 */

/**
 * Setter for property <code>secondTitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSecondTitle  new value for property <code>secondTitle</code>
 * @return {sap.suite.ui.commons.BusinessCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BusinessCard#setSecondTitle
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Width of the BusinessCard. Alternatively, CSS size can be set in %, px, or em.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.suite.ui.commons.BusinessCard#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.suite.ui.commons.BusinessCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BusinessCard#setWidth
 * @function
 */


/**
 * Getter for property <code>imageTooltip</code>.
 * A tooltip that is set for an image.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>imageTooltip</code>
 * @public
 * @name sap.suite.ui.commons.BusinessCard#getImageTooltip
 * @function
 */

/**
 * Setter for property <code>imageTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sImageTooltip  new value for property <code>imageTooltip</code>
 * @return {sap.suite.ui.commons.BusinessCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BusinessCard#setImageTooltip
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content of the BusinessCard body must be provided by the application developer.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.suite.ui.commons.BusinessCard#getContent
 * @function
 */


/**
 * Setter for the aggregated <code>content</code>.
 * @param oContent {sap.ui.core.Control}
 * @return {sap.suite.ui.commons.BusinessCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BusinessCard#setContent
 * @function
 */
	

/**
 * Destroys the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.suite.ui.commons.BusinessCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BusinessCard#destroyContent
 * @function
 */


/**
 * Getter for aggregation <code>firstTitle</code>.<br/>
 * Any control that can display a title. Content of this control appears at the first position in BusinessCard. Recomended controls: sap.ui.commons.Label and sap.ui.commons.Link.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.suite.ui.commons.BusinessCard#getFirstTitle
 * @function
 */


/**
 * Setter for the aggregated <code>firstTitle</code>.
 * @param oFirstTitle {sap.ui.core.Control}
 * @return {sap.suite.ui.commons.BusinessCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BusinessCard#setFirstTitle
 * @function
 */
	

/**
 * Destroys the firstTitle in the aggregation 
 * named <code>firstTitle</code>.
 * @return {sap.suite.ui.commons.BusinessCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.BusinessCard#destroyFirstTitle
 * @function
 */


// Start of sap/suite/ui/commons/BusinessCard.js
///**
// * This file defines behavior for the control,
// */
//sap.suite.ui.commons.BusinessCard.prototype.init = function(){
//};
}; // end of sap/suite/ui/commons/BusinessCard.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.CountingNavigationItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.CountingNavigationItem.
jQuery.sap.declare("sap.suite.ui.commons.CountingNavigationItem");

jQuery.sap.require('sap.ui.ux3.NavigationItem'); // unlisted dependency retained



/**
 * Constructor for a new CountingNavigationItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getQuantity quantity} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.ux3.NavigationItem#constructor sap.ui.ux3.NavigationItem}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control extends the sap.ui.ux3.NavigationItem control. This control can display the quantity of items on a corresponding content area. It also provides a rich tooltip that can appear and disappear after a certain delay.
 * @extends sap.ui.ux3.NavigationItem
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.CountingNavigationItem
 */
sap.ui.ux3.NavigationItem.extend("sap.suite.ui.commons.CountingNavigationItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"quantity" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.CountingNavigationItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.CountingNavigationItem.extend
 * @function
 */


/**
 * Getter for property <code>quantity</code>.
 * Stores the number of content items associated with this navigation item. This number appears in brackets next to the navigation item name. For example, Employes (10000).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>quantity</code>
 * @public
 * @name sap.suite.ui.commons.CountingNavigationItem#getQuantity
 * @function
 */

/**
 * Setter for property <code>quantity</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sQuantity  new value for property <code>quantity</code>
 * @return {sap.suite.ui.commons.CountingNavigationItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.CountingNavigationItem#setQuantity
 * @function
 */


// Start of sap/suite/ui/commons/CountingNavigationItem.js
///**
// * This file defines behavior for the control,
// */
//sap.suite.ui.commons.CountingNavigationItem.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap/suite/ui/commons/CountingNavigationItem.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.DateRangeScroller') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.DateRangeScroller.
jQuery.sap.declare("sap.suite.ui.commons.DateRangeScroller");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new DateRangeScroller.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : string | sap.ui.core.Control</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.DateRangeScroller#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The DateRangeScroller provides a method to scroll through a series of time periods, each of which is represented by a starting date and an ending date, known as the date range. The user may scroll to the previous or next date range. Several predefined ranges are supported such as day, week, work week, month, and year.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.DateRangeScroller", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	associations : {
		"ariaDescribedBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaDescribedBy"}, 
		"ariaLabelledBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaLabelledBy"}
	},
	events : {
		"change" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.DateRangeScroller with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.DateRangeScroller.extend
 * @function
 */

sap.suite.ui.commons.DateRangeScroller.M_EVENTS = {'change':'change'};


/**
 * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
 * 
 * @return {string[]}
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#getAriaDescribedBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaDescribedBy
 *    Id of a ariaDescribedBy which becomes an additional target of this <code>ariaDescribedBy</code> association.
 *    Alternatively, a ariaDescribedBy instance may be given. 
 * @return {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#addAriaDescribedBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to remove or its index or id
 * @return {string} the id of the removed ariaDescribedBy or null
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#removeAriaDescribedBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#removeAllAriaDescribedBy
 * @function
 */

	
/**
 * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
 * 
 * @return {string[]}
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#getAriaLabelledBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaLabelledBy
 *    Id of a ariaLabelledBy which becomes an additional target of this <code>ariaLabelledBy</code> association.
 *    Alternatively, a ariaLabelledBy instance may be given. 
 * @return {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#addAriaLabelledBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to remove or its index or id
 * @return {string} the id of the removed ariaLabelledBy or null
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#removeAriaLabelledBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#removeAllAriaLabelledBy
 * @function
 */

	
/**
 * This event is fired whenever the date range is changed. 
 *
 * @name sap.suite.ui.commons.DateRangeScroller#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {any} oControlEvent.getParameters.dateRange Object containing startDate and endDate Date properties signifying the start and ending dates of the currently selected range.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.suite.ui.commons.DateRangeScroller</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.DateRangeScroller</code>.<br/> itself. 
 *  
 * This event is fired whenever the date range is changed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.DateRangeScroller</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.suite.ui.commons.DateRangeScroller</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'dateRange' of type <code>any</code> Object containing startDate and endDate Date properties signifying the start and ending dates of the currently selected range.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.DateRangeScroller#fireChange
 * @function
 */


// Start of sap/suite/ui/commons/DateRangeScroller.js
jQuery.sap.require('sap.ui.commons.Label'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained



(function() {

    /* Internal values for date range types. */
    var DAY = "d";
    var WEEK = "w";
    var MONTH = "m";
    var YEAR = "y";
    var CUSTOM = "c";

    var iWeekStepSize = 7;


    /**
     * Format start and end date according to default formatting option and current date range
     * 
     * @param {String}
     *                sRangeType defines the date range type for formatting
     * @param {Object}
     *                oDateRange object contains start and end date for current date range
     * @param {Date}
     *                oDateRange.startDate The start date.
     * @param {Date}
     *                oDateRange.endDate The end date.
     * @param {sap.ui.core.format.DateFormat}
     *                oDateFormat The date format to use for formatting
     * @returns Formatted date range as string.
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.getFormattedDate = function(sRangeType, oDateRange, oDateFormat) {

        var oDateFormatter;
        var sFormattedDateRange;

        switch (sRangeType) {
        case (DAY):
            oDateFormatter = oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
                pattern : "MMMM d, YYYY"
            });
            sFormattedDateRange = oDateFormatter.format(oDateRange.startDate, false);
            break;
        case (WEEK):
        case (CUSTOM):
            var oStartDateFormat = oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
                pattern : 'MMMM d'
            });
            var oEndDateFormat = oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
                pattern : 'MMMM d, YYYY'
            });
            if (oDateRange.startDate.getYear() !== oDateRange.endDate.getYear()) {
                oStartDateFormat = oEndDateFormat;
            } else if (oDateRange.startDate.getMonth() === oDateRange.endDate.getMonth()) {
                oEndDateFormat = oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
                    pattern : 'd, YYYY'
                });
            }
            var sStartDate = oStartDateFormat.format(oDateRange.startDate, false);
            var sEndDate = oEndDateFormat.format(oDateRange.endDate, false);
            sFormattedDateRange = sStartDate + " - " + sEndDate;
            break;
        case (MONTH):
            oDateFormatter = oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
                pattern : 'MMMM YYYY'
            });
            sFormattedDateRange = oDateFormatter.format(oDateRange.startDate, false);
            break;
        case (YEAR):
            oDateFormatter = oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
                pattern : 'YYYY'
            });
            sFormattedDateRange = oDateFormatter.format(oDateRange.startDate, false);
            break;
        default:
            sFormattedDateRange = oDateRange.startDate + " - " + oDateRange.endDate;
            break;
        }

        return sFormattedDateRange;
    };

    /**
     * Update the date range value in the label control and rerender.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue = function(sRangeType, oDateRange, oRangeLabel, oDateFormat) {

        oRangeLabel.setText(sap.suite.ui.commons.DateRangeScroller.getFormattedDate(sRangeType, oDateRange, oDateFormat));
        if (oRangeLabel.isActive()) { // Don't rerender if the control is not placed in the DOM
            oRangeLabel.rerender();
        }
    };

    /**
     * Add <code>iStep</code> days to the given date. A negative step value moves the date backward in time.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.adjustDateByStep = function(dDate, iStep) {

        if (iStep === 0) {
            return;
        }
        dDate.setDate(dDate.getDate() + iStep);
    };

    /**
     * Adjust the start/end dates by the given step.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.adjustRangeByStep = function(oRange, iStep) {

        var dStartDate = oRange.startDate;
        var dEndDate = oRange.endDate;
        dStartDate.setDate(dStartDate.getDate() + iStep);
        dEndDate.setDate(dEndDate.getDate() + iStep);
    };

    /**
     * Test if the given duration is a positive, non-infinite integer. The duration must be less than the upper limit if a limit is specified. A duration of undefined returns true.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.isValidDuration = function(iDuration, iUpperLimit) {

        var bValidDuration = false;
        
        if (iDuration === undefined) {
            bValidDuration = true;
        } else if (!isNaN(iDuration) && isFinite(iDuration)) {

            if ((iDuration >= 1) && (!iUpperLimit || iDuration <= iUpperLimit)) {
                bValidDuration = true;
            }
        }
        
        if(!bValidDuration){
            jQuery.sap.log.error("DateRangeScroller duration value ='" + iDuration + "' is invalid.");
        }
       
        return bValidDuration;
    };

    /**
     * Initialize the control.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.init = function() {

        this._sRangeType = DAY;
        this._iCustomDuration = 1;
        this._oDateFormat = null;

        this._oDateRangeLabel = new sap.ui.commons.Label(this.getId() + "-dateRangeLabel", {
            labelFor : this.getId()
        });
        this._oDateRangeLabel.addStyleClass("sapSuiteUiCommonsDateRangeScrollerLabel");

        var dStart = new Date();
        sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dStart);
        var dEnd = new Date();
        sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(dEnd);
        this._oDateRange = {
            startDate : dStart,
            endDate : dEnd
        };
        sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(DAY, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
    };

    /**
     * Set a date range equal to a single day, starting with the given initial date.
     * 
     * @param {Date}
     *                dInitialDate The initial date.
     * @returns {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.setDateRangeDay = function(dInitialDate) {

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dInitialDate)) {
            this._oDateRange.startDate.setTime(dInitialDate.getTime());
            this._oDateRange.endDate.setTime(dInitialDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(this._oDateRange.startDate);
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(DAY, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            this._sRangeType = DAY;
        }
        return this;
    };

    /**
     * Set a date range that steps one week at a time. The starting date is set according to the first day of the week (default is Monday) and the initial date. For example, if the
     * first day of the week is set to Tuesday and the initial date is Wednesday, January 9, 2013, then the starting date will be Tuesday, January 8, 2013.
     * 
     * The last day of the range is calculated by adding (duration - 1) days to the starting date.
     * 
     * @param {Date}
     *                dInitialDate Any date that falls on the desired week. Start/end dates will be adjusted according to the first day of the week.
     * @param {Object}
     *                [oSettings]
     * @param [oSettings.duration=7]
     *                The number of days in the range with a minimum of 1 and maximum of 7.
     * @param [oSettings.iFirstDayOfWeek=1]
     *                The starting day for the range. Valid values are 0-6, with 0=Sunday and 6=Saturday.
     * @returns {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.setDateRangeWeek = function(dInitialDate, oSettings) {

        var iDuration = iWeekStepSize;
        var iFirstDayOfWeek = 1;
        if (oSettings) {
            iDuration = oSettings.duration;
            iFirstDayOfWeek = oSettings.firstDayOfWeek;
        }

        if (iDuration === undefined) {
            iDuration = iWeekStepSize;
        } else if (iDuration && !isNaN(iDuration)) {
            iDuration = parseInt(iDuration, 10);
        }

        if (iFirstDayOfWeek === undefined) {
            iFirstDayOfWeek = 1;
        } else if (iFirstDayOfWeek && !isNaN(iFirstDayOfWeek)) {
            iFirstDayOfWeek = parseInt(iFirstDayOfWeek, 10);
        }

        // If first day of week is specified (defined), but invalid, do not proceed even if the passed start date is valid.
        if ((iFirstDayOfWeek === null) || iFirstDayOfWeek === "" || isNaN(iFirstDayOfWeek) || iFirstDayOfWeek < 0 || iFirstDayOfWeek > 6) {

            jQuery.sap.log.error("DateRangeScroller oSettings.firstDayOfWeek value ='" + oSettings.firstDayOfWeek + "' is invalid.");

        } else if (sap.suite.ui.commons.util.DateUtils.isValidDate(dInitialDate) && sap.suite.ui.commons.DateRangeScroller.isValidDuration(iDuration, iWeekStepSize)) {
            this._oDateRange.startDate.setTime(dInitialDate.getTime());
            this._oDateRange.endDate.setTime(dInitialDate.getTime());

            var duration = iDuration;
            var firstDay = iFirstDayOfWeek;
            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfWeek(this._oDateRange.startDate, iFirstDayOfWeek);
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfWeek(this._oDateRange.endDate, {iDuration: duration, iFirstDayOfWeek: firstDay});
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(WEEK, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);

            this._sRangeType = WEEK;
        }
        return this;
    };

    /**
     * Set a date range that increments/decrements one calendar month at a time. The month date range begins on the first day of the month (beginning of the day) and ends on the
     * last day of the month (end of the day).
     * 
     * @param {Date}
     *                dInitialDate Any date that falls within the desired month.
     * @returns {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.setDateRangeMonth = function(dInitialDate) {

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dInitialDate)) {
            this._oDateRange.startDate.setTime(dInitialDate.getTime());
            this._oDateRange.endDate.setTime(dInitialDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(this._oDateRange.startDate);
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfMonth(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(MONTH, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            this._sRangeType = MONTH;
        }
        return this;
    };

    /**
     * Set a date range that increments/decrements one calendar year at a time. The year date range begins on the first day of the year (beginning of the day) and ends on the last
     * day of the year (end of the day).
     * 
     * @param {Date}
     *                dInitialDate Any date that falls within the desired year.
     * @returns {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.setDateRangeYear = function(dInitialDate) {

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dInitialDate)) {
            this._oDateRange.startDate.setTime(dInitialDate.getTime());
            this._oDateRange.endDate.setTime(dInitialDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfYear(this._oDateRange.startDate);
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfYear(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(YEAR, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            this._sRangeType = YEAR;
        }
        return this;
    };

    /**
     * Set a custom date range beginning with the specified start date that increments/decrements <code>iDuration</code> days at a time.
     * 
     * @param dInitialDate
     *                The initial date for the custom range.
     * @param [iDuration=current
     *                custom duration] The number of days in the custom range, including the start date.
     * @returns {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.setDateRangeCustom = function(dInitialDate, iDuration) {

        if (iDuration === undefined) {
            iDuration = this._iCustomDuration;
        } else if (iDuration && !isNaN(iDuration)) {
            iDuration = parseInt(iDuration, 10);
        }

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dInitialDate) && sap.suite.ui.commons.DateRangeScroller.isValidDuration(iDuration)) {

            this._oDateRange.startDate.setTime(dInitialDate.getTime());
            this._oDateRange.endDate.setTime(dInitialDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(this._oDateRange.startDate);

            sap.suite.ui.commons.DateRangeScroller.adjustDateByStep(this._oDateRange.endDate, iDuration - 1);
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(CUSTOM, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            this._sRangeType = CUSTOM;
            this._iCustomDuration = iDuration;
        }
        return this;
    };

    /**
     * Increment the date range by a time period increment according to the the date range type and fire the dateChange event.
     * 
     * @returns {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.incrementDateRange = function() {

        switch (this._sRangeType) {
        case (DAY):
            sap.suite.ui.commons.DateRangeScroller.adjustRangeByStep(this._oDateRange, 1);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(DAY, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (WEEK):
            sap.suite.ui.commons.DateRangeScroller.adjustRangeByStep(this._oDateRange, iWeekStepSize);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(WEEK, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (CUSTOM):
            sap.suite.ui.commons.DateRangeScroller.adjustRangeByStep(this._oDateRange, this._iCustomDuration);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(CUSTOM, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (MONTH):
            var iStart = this._oDateRange.startDate.getMonth() + 1;
            this._oDateRange.startDate.setMonth(iStart);
            this._oDateRange.endDate.setTime(this._oDateRange.startDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfMonth(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(MONTH, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (YEAR):
            iStart = this._oDateRange.startDate.getFullYear() + 1;
            this._oDateRange.startDate.setFullYear(iStart);
            this._oDateRange.endDate.setTime(this._oDateRange.startDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfYear(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(YEAR, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        }

        var oCopyDateRange = this.getDateRange();
        this.fireChange({
            dateRange : oCopyDateRange
        });
        return this;
    };

    /**
     * Decrement the date range by a time period increment according to the the date range type and fire the dateChange event.
     * 
     * @returns {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.decrementDateRange = function() {

        switch (this._sRangeType) {
        case (DAY):
            sap.suite.ui.commons.DateRangeScroller.adjustRangeByStep(this._oDateRange, -1);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(DAY, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (WEEK):
            sap.suite.ui.commons.DateRangeScroller.adjustRangeByStep(this._oDateRange, -iWeekStepSize);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(WEEK, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (CUSTOM):
            sap.suite.ui.commons.DateRangeScroller.adjustRangeByStep(this._oDateRange, -this._iCustomDuration); // Here the step amount equals the range duration
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(CUSTOM, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (MONTH):
            var iStart = this._oDateRange.startDate.getMonth() - 1;
            this._oDateRange.startDate.setMonth(iStart);
            this._oDateRange.endDate.setTime(this._oDateRange.startDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfMonth(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(MONTH, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (YEAR):
            iStart = this._oDateRange.startDate.getFullYear() - 1;
            this._oDateRange.startDate.setFullYear(iStart);
            this._oDateRange.endDate.setTime(this._oDateRange.startDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfYear(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(YEAR, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        }
        var oCopyDateRange = this.getDateRange();
        this.fireChange({
            dateRange : oCopyDateRange
        });
        return this;
    };

    /**
     * Returns an object containing startDate and endDate set to the current start and end Date objects.
     * 
     * @returns The date range containing start and end Date.
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.getDateRange = function() {

        var oCopyDateRange = {
            startDate : new Date(this._oDateRange.startDate.getTime()),
            endDate : new Date(this._oDateRange.endDate.getTime())
        };
        return oCopyDateRange;
    };

    /**
     * Setter for dateFormat which is used for formating the dates If passed object is null or is of incorrect type, control's default formatting will be used.
     * 
     * @param oDateFormat
     *                {sap.ui.core.format.DateFormat}
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.setDateFormat = function(oDateFormat) {

        if (oDateFormat && oDateFormat instanceof sap.ui.core.format.DateFormat) {
            this._oDateFormat = oDateFormat;
        } else {
            this._oDateFormat = null;
        }
        sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(this._sRangeType, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
    };

    /**
     * Control click handler to trigger increment or decrement of the date range.
     * 
     * @param oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.onclick = function(oEvent) {

        switch (oEvent.target) {
        case jQuery.sap.byId(this.getId() + '-decrementScrollButton')[0]:
            this.decrementDateRange();
            break;
        case jQuery.sap.byId(this.getId() + '-incrementScrollButton')[0]:
            this.incrementDateRange();
            break;
        }

        jQuery.sap.byId(this.getId() + "-labelarea").focus();
    };

    /**
     * Function is called when right arrow is pressed
     * 
     * @param {jQuery.Event}
     *                oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.onsapright = function(oEvent) {

        this.incrementDateRange();

        oEvent.preventDefault();
        oEvent.stopPropagation();
    };

    /**
     * Function is called when left arrow is pressed
     * 
     * @param {jQuery.Event}
     *                oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.onsapleft = function(oEvent) {

        this.decrementDateRange();

        oEvent.preventDefault();
        oEvent.stopPropagation();
    };

    /**
     * Function is called when up arrow is pressed
     * 
     * @param {jQuery.Event}
     *                oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.onsapup = function(oEvent) {

        this.incrementDateRange();

        oEvent.preventDefault();
        oEvent.stopPropagation();
    };

    /**
     * Function is called when DOWN arrow is pressed
     * 
     * @param {jQuery.Event}
     *                oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.onsapdown = function(oEvent) {

        this.decrementDateRange();

        oEvent.preventDefault();
        oEvent.stopPropagation();
    };

}());

}; // end of sap/suite/ui/commons/DateRangeScroller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.DateRangeSlider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.DateRangeSlider.
jQuery.sap.declare("sap.suite.ui.commons.DateRangeSlider");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new DateRangeSlider.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getShowBubbles showBubbles} : boolean (default: true)</li>
 * <li>{@link #getSmallStepWidth smallStepWidth} : float</li>
 * <li>{@link #getTotalUnits totalUnits} : int</li>
 * <li>{@link #getStepLabels stepLabels} : boolean (default: false)</li>
 * <li>{@link #getLabels labels} : string[]</li>
 * <li>{@link #getMin min} : object</li>
 * <li>{@link #getMax max} : object</li>
 * <li>{@link #getValue value} : object</li>
 * <li>{@link #getValue2 value2} : object</li>
 * <li>{@link #getPinGrip pinGrip} : boolean (default: false)</li>
 * <li>{@link #getPinGrip2 pinGrip2} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.DateRangeSlider#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.DateRangeSlider#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Date Range Slider provides the user with a Range Slider control that is optimized for use with Dates.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.DateRangeSlider", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"enabled" : {type : "boolean", group : "Appearance", defaultValue : true},
		"editable" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Misc", defaultValue : true},
		"showBubbles" : {type : "boolean", group : "Misc", defaultValue : true},
		"smallStepWidth" : {type : "float", group : "Appearance", defaultValue : null},
		"totalUnits" : {type : "int", group : "Appearance", defaultValue : null},
		"stepLabels" : {type : "boolean", group : "Misc", defaultValue : false},
		"labels" : {type : "string[]", group : "Misc", defaultValue : null},
		"min" : {type : "object", group : "Behavior", defaultValue : null},
		"max" : {type : "object", group : "Behavior", defaultValue : null},
		"value" : {type : "object", group : "Behavior", defaultValue : null},
		"value2" : {type : "object", group : "Behavior", defaultValue : null},
		"pinGrip" : {type : "boolean", group : "Misc", defaultValue : false},
		"pinGrip2" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	events : {
		"change" : {}, 
		"liveChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.DateRangeSlider with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.DateRangeSlider.extend
 * @function
 */

sap.suite.ui.commons.DateRangeSlider.M_EVENTS = {'change':'change','liveChange':'liveChange'};


/**
 * Getter for property <code>width</code>.
 * Width of the horizontal date range slider.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setWidth
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * This property switches the enabled state of the control. Disabled fields have different colors, and can not be focused.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setEnabled
 * @function
 */


/**
 * Getter for property <code>editable</code>.
 * This property switches the enabled state of the control. Using the date range slider interactively requires this property to be true.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getEditable
 * @function
 */

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setEditable
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * This property switches the visible state of the control. Invisible date range slider are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setVisible
 * @function
 */


/**
 * Getter for property <code>showBubbles</code>.
 * Property to show or hide bubbles. Default is true.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showBubbles</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getShowBubbles
 * @function
 */

/**
 * Setter for property <code>showBubbles</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowBubbles  new value for property <code>showBubbles</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setShowBubbles
 * @function
 */


/**
 * Getter for property <code>smallStepWidth</code>.
 * The grips of the control can only be moved in steps of this width.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {float} the value of property <code>smallStepWidth</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getSmallStepWidth
 * @function
 */

/**
 * Setter for property <code>smallStepWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {float} fSmallStepWidth  new value for property <code>smallStepWidth</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setSmallStepWidth
 * @function
 */


/**
 * Getter for property <code>totalUnits</code>.
 * Number of units between ticks.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>totalUnits</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getTotalUnits
 * @function
 */

/**
 * Setter for property <code>totalUnits</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iTotalUnits  new value for property <code>totalUnits</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setTotalUnits
 * @function
 */


/**
 * Getter for property <code>stepLabels</code>.
 * Display a date label above each tick.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>stepLabels</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getStepLabels
 * @function
 */

/**
 * Setter for property <code>stepLabels</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bStepLabels  new value for property <code>stepLabels</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setStepLabels
 * @function
 */


/**
 * Getter for property <code>labels</code>.
 * Labels to be displayed instead of dates.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string[]} the value of property <code>labels</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getLabels
 * @function
 */

/**
 * Setter for property <code>labels</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string[]} aLabels  new value for property <code>labels</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setLabels
 * @function
 */


/**
 * Getter for property <code>min</code>.
 * Minimum date for the slider.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>min</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getMin
 * @function
 */

/**
 * Setter for property <code>min</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oMin  new value for property <code>min</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setMin
 * @function
 */


/**
 * Getter for property <code>max</code>.
 * Maximum date for the slider.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>max</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getMax
 * @function
 */

/**
 * Setter for property <code>max</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oMax  new value for property <code>max</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setMax
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * Date value of the left grip.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>value</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oValue  new value for property <code>value</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setValue
 * @function
 */


/**
 * Getter for property <code>value2</code>.
 * Date value of the right grip.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>value2</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getValue2
 * @function
 */

/**
 * Setter for property <code>value2</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oValue2  new value for property <code>value2</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setValue2
 * @function
 */


/**
 * Getter for property <code>pinGrip</code>.
 * Pin the left grip so that user cannot move it with the keyboard or mouse.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>pinGrip</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getPinGrip
 * @function
 */

/**
 * Setter for property <code>pinGrip</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bPinGrip  new value for property <code>pinGrip</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setPinGrip
 * @function
 */


/**
 * Getter for property <code>pinGrip2</code>.
 * Pin the right grip so that user cannot move it with the keyboard or mouse.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>pinGrip2</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getPinGrip2
 * @function
 */

/**
 * Setter for property <code>pinGrip2</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bPinGrip2  new value for property <code>pinGrip2</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setPinGrip2
 * @function
 */


/**
 * This event is fired when user changes completes the selection of a new date using a grip. It contains the Date object value of each grip such that the left grip value is held by the value property and the right grip value is held by the value2 property. 
 *
 * @name sap.suite.ui.commons.DateRangeSlider#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/> itself. 
 *  
 * This event is fired when user changes completes the selection of a new date using a grip. It contains the Date object value of each grip such that the left grip value is held by the value property and the right grip value is held by the value2 property. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.DateRangeSlider#fireChange
 * @function
 */


/**
 * This live event is fired as the user slides a grip with the mouse. It contains the Date object value of each grip such that the left grip value is held by the value property and the right grip value is held by the value2 property. 
 *
 * @name sap.suite.ui.commons.DateRangeSlider#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/> itself. 
 *  
 * This live event is fired as the user slides a grip with the mouse. It contains the Date object value of each grip such that the left grip value is held by the value property and the right grip value is held by the value2 property. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#attachLiveChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#detachLiveChange
 * @function
 */

/**
 * Fire event liveChange to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.DateRangeSlider#fireLiveChange
 * @function
 */


// Start of sap/suite/ui/commons/DateRangeSlider.js
jQuery.sap.require('jquery.sap.resources'); // unlisted dependency retained



(function() {

    var DAY = "d";
    var MONTH = "m";

    /**
     * Initialize the DateRangeSlider.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.init = function() {

        this._oDateRangeSliderInternal = new sap.suite.ui.commons.DateRangeSliderInternal({
            id : this.getId() + "-dateRangeSliderInternal"
        });

        sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal(this);

        var oSelf = this;

        this._oDateRangeSliderInternal.attachChange(function(oEvent) {

            oSelf.handleChange(oEvent);
        });

        this._oDateRangeSliderInternal.attachLiveChange(function(oEvent) {

            oSelf.handleLiveChange(oEvent);
        });
    };
    
    /**
     * Validate if dFirstDate and dSecondDate are same day for Granularity=day or if they are same months for Granularity=month
     * 
     * @param {Date}
     *                dFirstDate The first date.
     * @param {Date}
     *                dSecondDate The second date.
     * @param {String}
     *                sGranularity The Granularity - day as "d" or month as "m".
     * @returns true if two dates are same based on Granularity otherwise false
     * @private
     */

    sap.suite.ui.commons.DateRangeSlider.areDaysSameBasedOnGranularity = function(dFirstDate, dSecondDate, sGranularity) {

        var bSame = false;

        switch (sGranularity) {

        case (DAY):
            bSame = sap.suite.ui.commons.util.DateUtils.dateDaysEqual(dFirstDate, dSecondDate);
            break;

        case (MONTH):
            bSame = sap.suite.ui.commons.util.DateUtils.dateMonthsEqual(dFirstDate, dSecondDate);
            break;
        }

        return bSame;
    };

    /**
     * Validate date value min and max. The max date must be after min date: max > min.
     * 
     * @param {Date}
     *                dMin The min date.
     * @param {Date}
     *                dMax The max date.
     * @param {String}
     *                sGranularity The Granularity - day as "d" or month as "m".
     * @returns true if min date is before max date.
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.isMinBeforeMax = function(dMin, dMax, sGranularity) {

        var bMinBfrMax = false;

        if (dMin.getFullYear() < dMax.getFullYear()) {
            bMinBfrMax = true;
        } else if (dMin.getFullYear() === dMax.getFullYear()) {
            if (dMin.getMonth() < dMax.getMonth()) {
                bMinBfrMax = true;
            } else if (dMin.getMonth() === dMax.getMonth() && sGranularity === DAY) {
                if (dMin.getDate() < dMax.getDate()) {
                    bMinBfrMax = true;
                }
            }
        }

        if (!bMinBfrMax) {
            jQuery.sap.log.error("DateRangeSlider: Min Date = " + dMin + " should be before Max Date = " + dMax);
        }

        return bMinBfrMax;
    };

    /**
     * Validate value date >= min date.
     * 
     * @param {Date}
     *                dMin The min date.
     * @param {Date}
     *                dValue The value date.
     * @param {String}
     *                sGranularity The Granularity - day as "d" or month as "m".
     * @returns true if value date is equal or after min date.
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.isValueEqualOrAfterMin = function(dMin, dValue, sGranularity) {

        var bValueEqualOrAfterMin = false;

        if (dMin.getFullYear() < dValue.getFullYear()) {
            bValueEqualOrAfterMin = true;
        } else if (dMin.getFullYear() === dValue.getFullYear()) {
            if (dMin.getMonth() < dValue.getMonth()) {
                bValueEqualOrAfterMin = true;
            } else if (dMin.getMonth() === dValue.getMonth() && sGranularity === MONTH) {
                bValueEqualOrAfterMin = true;
            } else if (dMin.getMonth() === dValue.getMonth() && sGranularity === DAY) {
                if (dMin.getDate() <= dValue.getDate()) {
                    bValueEqualOrAfterMin = true;
                }
            }
        }

        if (!bValueEqualOrAfterMin) {
            jQuery.sap.log.error("DateRangeSlider: Value Date = " + dValue + " should be after or equal to Min Date = " + dMin);
        }

        return bValueEqualOrAfterMin;
    };

    /**
     * Validate value2 date <= max date.
     * 
     * @param {Date}
     *                dValue2 The value2 date.
     * @param {Date}
     *                dMax The max date.
     * @param {String}
     *                sGranularity The Granularity - day as "d" or month as "m".
     * @returns true if value2 date is equal to before max date.
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.isValue2EqualOrBeforeMax = function(dValue2, dMax, sGranularity) {

        var bValue2EqualOrBeforeMax = false;

        if (dValue2.getFullYear() < dMax.getFullYear()) {
            bValue2EqualOrBeforeMax = true;
        } else if (dValue2.getFullYear() === dMax.getFullYear()) {
            if (dValue2.getMonth() < dMax.getMonth()) {
                bValue2EqualOrBeforeMax = true;
            } else if (dValue2.getMonth() === dMax.getMonth() && sGranularity === MONTH) {
                bValue2EqualOrBeforeMax = true;
            } else if (dValue2.getMonth() === dMax.getMonth() && sGranularity === DAY) {
                if (dValue2.getDate() <= dMax.getDate()) {
                    bValue2EqualOrBeforeMax = true;
                }
            }
        }

        if (!bValue2EqualOrBeforeMax) {
            jQuery.sap.log.error("DateRangeSlider: Value2 Date = " + dValue2 + " should be before or equal to Max Date = " + dMax);
        }

        return bValue2EqualOrBeforeMax;
    };

    /**
     * Validate value date <= value2 date.
     * 
     * @param {Date}
     *                dValue The value date.
     * @param {Date}
     *                dValue2 The value2 date.
     * @param {String}
     *                sGranularity The Granularity - day as "d" or month as "m".
     * @returns true if dValue2 date is equal or after value date.
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.isValueBeforeOrEqualValue2 = function(dValue, dValue2, sGranularity) {

        var bValueBeforeOrEqualValue2 = false;

        if (dValue.getFullYear() < dValue2.getFullYear()) {
            bValueBeforeOrEqualValue2 = true;
        } else if (dValue.getFullYear() === dValue2.getFullYear()) {
            if (dValue.getMonth() < dValue2.getMonth()) {
                bValueBeforeOrEqualValue2 = true;
            } else if (dValue.getMonth() === dValue2.getMonth() && sGranularity === MONTH) {
                bValueBeforeOrEqualValue2 = true;
            } else if (dValue.getMonth() === dValue2.getMonth() && sGranularity === DAY) {
                if (dValue.getDate() <= dValue2.getDate()) {
                    bValueBeforeOrEqualValue2 = true;
                }
            }
        }

        if (!bValueBeforeOrEqualValue2) {
            jQuery.sap.log.error("DateRangeSlider: Value Date = " + dValue + " should be before or equal to Value2 Date = " + dValue2);
        }

        return bValueBeforeOrEqualValue2;
    };

    /**
     * Set min property for the DateRangeSlider. This sets the minimum date for the slider.
     * 
     * @param {Date}
     *                dMin
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setMin = function(dMin) {

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dMin) && sap.suite.ui.commons.DateRangeSlider.isMinBeforeMax(dMin, new Date(this.getMax()), this._sGranularity)
                && !sap.suite.ui.commons.DateRangeSlider.areDaysSameBasedOnGranularity(new Date(this.getMin()), dMin, this._sGranularity)) {

            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dMin);
            this._oDateRangeSliderInternal.setMinDate(dMin);
            sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal(this);
        }
    };

    /**
     * Set max property for the DateRangeSlider. This sets the maximum date for the slider.
     * 
     * @param {Date}
     *                dMax
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setMax = function(dMax) {

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dMax) && sap.suite.ui.commons.DateRangeSlider.isMinBeforeMax(new Date(this.getMin()), dMax, this._sGranularity)
                && !sap.suite.ui.commons.DateRangeSlider.areDaysSameBasedOnGranularity(new Date(this.getMax()), dMax, this._sGranularity)) {

            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(dMax);
            this._oDateRangeSliderInternal.setMaxDate(dMax);
            sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal(this);
        }
    };

    /**
     * Set value property for the DateRangeSlider. This sets the value date for the slider.
     * 
     * @param {Date}
     *                dValue
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setValue = function(dValue) {

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dValue)
                && sap.suite.ui.commons.DateRangeSlider.isValueBeforeOrEqualValue2(dValue, new Date(this.getValue2()), this._sGranularity)
                && sap.suite.ui.commons.DateRangeSlider.isValueEqualOrAfterMin(new Date(this.getMin()), dValue, this._sGranularity)
                && !sap.suite.ui.commons.DateRangeSlider.areDaysSameBasedOnGranularity(new Date(this.getValue()), dValue, this._sGranularity)) {

            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dValue);
            this._oDateRangeSliderInternal.setValueDate(dValue);
            sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal(this);
        }
    };
    
    
    /**
     * Get value property for the control.  
     * 
     * @returns Date - date representing position of the grip  
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.getValue = function() {
        
        var dValue = this._oDateRangeSliderInternal.getValueDate();
        return dValue;
    };

    /**
     * Set value2 property for the DateRangeSlider. This sets the value2 date for the slider.
     * 
     * @param {Date}
     *                dValue2
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setValue2 = function(dValue2) {

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dValue2)
                && sap.suite.ui.commons.DateRangeSlider.isValueBeforeOrEqualValue2(new Date(this.getValue()), dValue2, this._sGranularity)
                && !sap.suite.ui.commons.DateRangeSlider.areDaysSameBasedOnGranularity(new Date(this.getValue2()), dValue2, this._sGranularity)
                && sap.suite.ui.commons.DateRangeSlider.isValue2EqualOrBeforeMax(dValue2, new Date(this.getMax()), this._sGranularity)) {

            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dValue2);
            this._oDateRangeSliderInternal.setValue2Date(dValue2);
            sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal(this);
        }
    };
    
    
    /**
     * Get value2 property for the control.  
     * 
     * @returns Date - date representing position of the grip2  
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.getValue2 = function() {
        
        var dValue2 = this._oDateRangeSliderInternal.getValue2Date();
        return dValue2;
    };

    /**
     * Set visible property for the DateRangeSlider
     * 
     * @param {boolean}
     *                bVisible
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setVisible = function(bVisible) {

        this._oDateRangeSliderInternal.setVisible(bVisible);
        this.setProperty("visible", bVisible);
    };

    /**
     * Set enabled property for the DateRangeSlider
     * 
     * @param {boolean}
     *                bEnabled
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setEnabled = function(bEnabled) {

        this._oDateRangeSliderInternal.setEnabled(bEnabled);
        this.setProperty("enabled", bEnabled);
    };

    /**
     * Set labels property for the DateRangeSlider
     * 
     * @param {string[]}
     *                aLabels
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setLabels = function(aLabels) {

        this._oDateRangeSliderInternal.setLabels(aLabels);
        this.setProperty("labels", aLabels);
    };

    /**
     * Set stepLabels property for the DateRangeSlider
     * 
     * @param {boolean}
     *                bStepLabels
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setStepLabels = function(bStepLabels) {

        this._oDateRangeSliderInternal.setStepLabels(bStepLabels);
        this.setProperty("stepLabels", bStepLabels);
    };

    /**
     * Set editable property for the DateRangeSlider
     * 
     * @param {boolean}
     *                bEditable
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setEditable = function(bEditable) {

        this._oDateRangeSliderInternal.setEditable(bEditable);
        this.setProperty("editable", bEditable);
    };

    /**
     * Set width property for the DateRangeSlider
     * 
     * @param {sap.ui.core.CSSSize}
     *                tWidth
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setWidth = function(tWidth) {

        this._oDateRangeSliderInternal.setWidth(tWidth);
        this.setProperty("width", tWidth);
    };

    /**
     * Set showBubbles property for the DateRangeSlider
     * 
     * @param {boolean}
     *                bShowBubbles
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setShowBubbles = function(bShowBubbles) {

        this._oDateRangeSliderInternal.setShowBubbles(bShowBubbles);
        this.setProperty("showBubbles", bShowBubbles);
    };

    /**
     * Set smallStepWidth property for the DateRangeSlider
     * 
     * @param {float}
     *                fSmallStepWidth
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setSmallStepWidth = function(fSmallStepWidth) {

        this._oDateRangeSliderInternal.setSmallStepWidth(fSmallStepWidth);
        this.setProperty("smallStepWidth", fSmallStepWidth);
    };

    /**
     * Set totalUnits property for the DateRangeSlider
     * 
     * @param {int}
     *                iTotalUnits
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setTotalUnits = function(iTotalUnits) {

        this._oDateRangeSliderInternal.setTotalUnits(iTotalUnits);
        this.setProperty("totalUnits", iTotalUnits);
    };

    /**
     * Set 4 base properties min, max, value and value2 for given DateRangeSlider
     * 
     * @param {sap.suite.ui.commons.DateRangeSlider}
     *                oDateRangeSlider
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal = function(oDateRangeSlider) {

        oDateRangeSlider.setProperty("min", oDateRangeSlider._oDateRangeSliderInternal.getMinDate());
        oDateRangeSlider.setProperty("max", oDateRangeSlider._oDateRangeSliderInternal.getMaxDate());
        oDateRangeSlider.setProperty("value", oDateRangeSlider._oDateRangeSliderInternal.getValueDate());
        oDateRangeSlider.setProperty("value2", oDateRangeSlider._oDateRangeSliderInternal.getValue2Date());
        oDateRangeSlider._sGranularity = oDateRangeSlider._oDateRangeSliderInternal._sGranularity;
    };

    /**
     * Set Date Range Slider Granularity to Day
     * 
     * @returns {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setDayGranularity = function() {

        this._oDateRangeSliderInternal.setDayGranularity();
        if (this._oDateRangeSliderInternal.isActive()) {
            this._oDateRangeSliderInternal.rerender();
        }
        sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal(this);
        return this;
    };

    /**
     * Set Date Range Slider Granularity to Month
     * 
     * @returns {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setMonthGranularity = function() {

        var iMonthsApart = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(this.getMin(), this.getMax());
        if (iMonthsApart >= 1) {
            this._oDateRangeSliderInternal.setMonthGranularity();
            if (this._oDateRangeSliderInternal.isActive()) {
                this._oDateRangeSliderInternal.rerender();
            }
            sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal(this);
        } else {
            jQuery.sap.log.error("DateRangeSlider.setMonthGranularity(): Max Date should be 1 month after Min Date.");
        }

        return this;
    };

    /**
     * Setter for dateFormat which is used to format the dates for Labels, bubble texts, and tool tips. If passed object is null or is of incorrect type,
     * _oDateRangeSliderInternal's default formatting will be used.
     * 
     * @param {sap.ui.core.format.DateFormat}
     *                oDateFormat
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setDateFormat = function(oDateFormat) {

        this._oDateRangeSliderInternal.setDateFormat(oDateFormat);
        if (this._oDateRangeSliderInternal.isActive()) {
            this._oDateRangeSliderInternal.rerender();
        }
    };

    /**
     * Set pinGrip property for the DateRangeSlider
     * 
     * @param {boolean}
     *                bPinGrip
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setPinGrip = function(bPinGrip) {

        this._oDateRangeSliderInternal.setPinGrip(bPinGrip);
        this.setProperty("pinGrip", bPinGrip);
    };

    /**
     * Set pinGrip2 property for the DateRangeSlider
     * 
     * @param {boolean}
     *                bPinGrip2
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setPinGrip2 = function(bPinGrip2) {

        this._oDateRangeSliderInternal.setPinGrip2(bPinGrip2);
        this.setProperty("pinGrip2", bPinGrip2);
    };

    /**
     * Cleans up the DateRangeSlider instance before destruction.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.exit = function() {

        this._oDateRangeSliderInternal.destroy();
        this._oDateRangeSliderInternal = null;
    };

    /**
     * Handles the change event of _oDateRangeSliderInternal and fires the change event with start and end date values
     * 
     * @param {sap.ui.base.Event}
     *                oEvent
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.handleChange = function(oEvent) {

        var dValueDate = oEvent.getParameter("value");
        var dValue2Date = oEvent.getParameter("value2");
        this.fireChange({
            value : dValueDate,
            value2 : dValue2Date
        });
    };

    /**
     * Handles the live change event of _oDateRangeSliderInternal and fires the change event with start and end date values
     * 
     * @param {sap.ui.base.Event}
     *                oEvent
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.handleLiveChange = function(oEvent) {

        var dValueDate = oEvent.getParameter("value");
        var dValue2Date = oEvent.getParameter("value2");
        this.fireLiveChange({
            value : dValueDate,
            value2 : dValue2Date
        });
    };

}());

}; // end of sap/suite/ui/commons/DateRangeSlider.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.DateRangeSliderInternal') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.DateRangeSliderInternal.
jQuery.sap.declare("sap.suite.ui.commons.DateRangeSliderInternal");

jQuery.sap.require('sap.ui.commons.RangeSlider'); // unlisted dependency retained



/**
 * Constructor for a new DateRangeSliderInternal.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowBubbles showBubbles} : boolean (default: true)</li>
 * <li>{@link #getPinGrip pinGrip} : boolean (default: false)</li>
 * <li>{@link #getPinGrip2 pinGrip2} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.DateRangeSliderInternal#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.DateRangeSliderInternal#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.commons.RangeSlider#constructor sap.ui.commons.RangeSlider}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Date Range Slider provides the user with a Range Slider control that is optimized for use with Dates.
 * @extends sap.ui.commons.RangeSlider
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal
 */
sap.ui.commons.RangeSlider.extend("sap.suite.ui.commons.DateRangeSliderInternal", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"showBubbles" : {type : "boolean", group : "Misc", defaultValue : true},
		"pinGrip" : {type : "boolean", group : "Misc", defaultValue : false},
		"pinGrip2" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	events : {
		"change" : {}, 
		"liveChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.DateRangeSliderInternal with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.DateRangeSliderInternal.extend
 * @function
 */

sap.suite.ui.commons.DateRangeSliderInternal.M_EVENTS = {'change':'change','liveChange':'liveChange'};


/**
 * Getter for property <code>showBubbles</code>.
 * Property to show or hide bubbles. Default is true.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showBubbles</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#getShowBubbles
 * @function
 */

/**
 * Setter for property <code>showBubbles</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowBubbles  new value for property <code>showBubbles</code>
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#setShowBubbles
 * @function
 */


/**
 * Getter for property <code>pinGrip</code>.
 * Property to pin Grip (left grip) of the slider so that user cannot move it with key or mouse clicks.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>pinGrip</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#getPinGrip
 * @function
 */

/**
 * Setter for property <code>pinGrip</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bPinGrip  new value for property <code>pinGrip</code>
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#setPinGrip
 * @function
 */


/**
 * Getter for property <code>pinGrip2</code>.
 * Property to pin Grip2 (right grip) of the slider so that user cannot move it with key or mouse clicks.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>pinGrip2</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#getPinGrip2
 * @function
 */

/**
 * Setter for property <code>pinGrip2</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bPinGrip2  new value for property <code>pinGrip2</code>
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#setPinGrip2
 * @function
 */


/**
 * This event is fired when user changes the positions of the grips of the control. It contains value as Date object and value2 as Date object which are based on the positions of two grips. 
 *
 * @name sap.suite.ui.commons.DateRangeSliderInternal#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/> itself. 
 *  
 * This event is fired when user changes the positions of the grips of the control. It contains value as Date object and value2 as Date object which are based on the positions of two grips. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.DateRangeSliderInternal#fireChange
 * @function
 */


/**
 * This live event is fired when user changes the positions of the grips of the control. It contains value as Date object and value2 as Date object which are based on the positions of two grips. 
 *
 * @name sap.suite.ui.commons.DateRangeSliderInternal#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/> itself. 
 *  
 * This live event is fired when user changes the positions of the grips of the control. It contains value as Date object and value2 as Date object which are based on the positions of two grips. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#attachLiveChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#detachLiveChange
 * @function
 */

/**
 * Fire event liveChange to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.DateRangeSliderInternal#fireLiveChange
 * @function
 */


// Start of sap/suite/ui/commons/DateRangeSliderInternal.js
jQuery.sap.require('sap.ui.commons.RangeSlider'); // unlisted dependency retained

jQuery.sap.require('jquery.sap.resources'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Label'); // unlisted dependency retained



(function() {

	var DEFAULT_TOTAL_UNITS = 12;
	var DAY = "d";
	var MONTH = "m";

	/**
	 * Initialize the DateRangeSliderInternal.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.init = function() {

		this.setSmallStepWidth(1);
		this._sGranularity = DAY;
		this._oDateFormat = null;

		var dMaxDate = new Date();
		this._dMinDate = sap.suite.ui.commons.util.DateUtils.incrementDateByIndex(dMaxDate, -365);

		if (!this.getTotalUnits()) {
			this.setTotalUnits(DEFAULT_TOTAL_UNITS);
		}

		this.setMin(0);
		this.setMax(365);
		this.setValue(0);
		this.setValue2(365);

		var bTextLabels = (this.getLabels() && this.getLabels().length > 0);
		this._bUsingDefaultLabels = this.getStepLabels() && !bTextLabels;
		if (this._bUsingDefaultLabels) {
			sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
		}

		if (this.getShowBubbles()) {
			this._oBubble = new sap.ui.commons.Label({
				id : this.getId() + '-bubbleTxt'
			});
			this._oBubble2 = new sap.ui.commons.Label({
				id : this.getId() + '-bubbleTxt2'
			});

			this._oBubble.addStyleClass("sapSuiteUiCommonsDateRangeSliderBubbleLblTxt");
			this._oBubble2.addStyleClass("sapSuiteUiCommonsDateRangeSliderBubbleLblTxt");

			this._oBubble.setText(this.getFormattedDate(this.getValueDate()));
			this._oBubble2.setText(this.getFormattedDate(this.getValue2Date()));
		}
	};

	/**
	 * Not yet supported
	 * 
	 * @param {boolean}
	 *            bVertical - if the control is to be displayed as Vertical
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setVertical = function(bVertical) {

		jQuery.sap.log.error("DateRangeSliderInternal.setVertical method is not yet supported!");
	};

	/**
	 * Not yet supported
	 * 
	 * @param {string}
	 *            sHeight - new height of the control
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setHeight = function(sHeight) {

		jQuery.sap.log.error("DateRangeSliderInternal.setHeight method is not yet supported!");
	};

	/**
	 * Creates rail labels.
	 * 
	 * @param oDateRangeSliderInternal -
	 *            The DateRangeSliderInternal object
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels = function(oDateRangeSliderInternal) {

		var aRailLabels = [];
		var iTotalUnits = oDateRangeSliderInternal.getTotalUnits();
		var fStepSize = (oDateRangeSliderInternal.getMax() - oDateRangeSliderInternal.getMin()) / iTotalUnits;

		for ( var i = 0; i <= iTotalUnits; i++) {
			var iDateIndex = Math.round(parseFloat(oDateRangeSliderInternal.getMin() + i * fStepSize));
			if (iDateIndex > oDateRangeSliderInternal.getMax()) {
				iDateIndex = oDateRangeSliderInternal.getMax();
			}

			var dTmpDate = null;
			if (oDateRangeSliderInternal._sGranularity === DAY) {
				dTmpDate = sap.suite.ui.commons.util.DateUtils.incrementDateByIndex(oDateRangeSliderInternal.getMinDate(), iDateIndex);
			} else if (oDateRangeSliderInternal._sGranularity === MONTH) {
				dTmpDate = sap.suite.ui.commons.util.DateUtils.incrementMonthByIndex(oDateRangeSliderInternal.getMinDate(), iDateIndex);
			}
			aRailLabels[i] = oDateRangeSliderInternal.getFormattedDate(dTmpDate);
		}

		oDateRangeSliderInternal.setProperty("labels", aRailLabels);

		return aRailLabels;
	};

	/**
	 * Reposition the bubbles based on grip positions.
	 * 
	 * @param oDateRangeSliderInternal -
	 *            The DateRangeSliderInternal object
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.repositionBubbles = function(oDateRangeSliderInternal) {

		var sGripId = oDateRangeSliderInternal.getId() + '-grip';
		var oGrip = jQuery.sap.domById(sGripId);
		var sLeftpx = oGrip.style.left;
		var sLeftPositionOfGrip = sLeftpx.substring(0, sLeftpx.length - 2);
		var iLeftPositionOfGrip = parseInt(sLeftPositionOfGrip, 10);

		var sGrip2Id = oDateRangeSliderInternal.getId() + '-grip2';
		var oGrip2 = jQuery.sap.domById(sGrip2Id);
		var sLeftpx2 = oGrip2.style.left;
		var sLeftPositionOfGrip2 = sLeftpx2.substring(0, sLeftpx2.length - 2);
		var iLeftPositionOfGrip2 = parseInt(sLeftPositionOfGrip2, 10);

		var sBubbleId = oDateRangeSliderInternal.getId() + '-bubble';
		var oBubble = jQuery.sap.domById(sBubbleId);
		var sBubble2Id = oDateRangeSliderInternal.getId() + '-bubble2';
		var oBubble2 = jQuery.sap.domById(sBubble2Id);

		var sBubbleleft = null, sBubble2left = null;

		var sBubbleleftpx = oBubble.style.left;
		if (sBubbleleftpx) {
			sBubbleleft = sBubbleleftpx.substring(0, sBubbleleftpx.length - 2);
		}
		var sBubble2leftpx = oBubble2.style.left;
		if (sBubble2leftpx) {
			sBubble2left = sBubble2leftpx.substring(0, sBubble2leftpx.length - 2);
		}

		var sWidthOfBubblePx = jQuery(oBubble).css("width");
		var iWidthOfBubble = parseInt(sWidthOfBubblePx, 10);

		var iDiff = 41;

		if (((iLeftPositionOfGrip + iWidthOfBubble) < iLeftPositionOfGrip2) || (!sBubbleleft && !sBubble2left)) {
			oBubble.style.left = (iLeftPositionOfGrip - iDiff) + "px";
			oBubble2.style.left = (iLeftPositionOfGrip2 - iDiff) + "px";
		}
		// CSS 2084810 2013 - Fix for bubble repositioning in RTL mode.
		if (sap.ui.getCore().getConfiguration().getRTL() && ((iLeftPositionOfGrip2 + iWidthOfBubble) < iLeftPositionOfGrip)) {
			oBubble.style.left = (iLeftPositionOfGrip - iDiff) + "px";
			oBubble2.style.left = (iLeftPositionOfGrip2 - iDiff) + "px";
		}

		var sValue = oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getValueDate());
		var sValue2 = oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getValue2Date());

		oDateRangeSliderInternal._oBubble.setText(sValue);
		oDateRangeSliderInternal._oBubble2.setText(sValue2);

		if (oDateRangeSliderInternal.isActive()) {
			oDateRangeSliderInternal._oBubble.rerender();
			oDateRangeSliderInternal._oBubble2.rerender();
		}
	};

	/**
	 * Function is called when grip position shall be changed
	 * 
	 * @param {float}
	 *            fNewValue the new grip value
	 * @param {int}
	 *            iNewPos the new grip position
	 * @param {DOMNode}
	 *            oGrip the changed grip
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.changeGrip = function(fNewValue, iNewPos, oGrip) {

		sap.ui.commons.Slider.prototype.changeGrip.apply(this, arguments);

		if (!isNaN(fNewValue)) {
			var iDateIndex = Math.round(fNewValue);
			var dTmpDate = null;
			if (this._sGranularity === DAY) {
				dTmpDate = sap.suite.ui.commons.util.DateUtils.incrementDateByIndex(this._dMinDate, iDateIndex);
			} else if (this._sGranularity === MONTH) {
				dTmpDate = sap.suite.ui.commons.util.DateUtils.incrementMonthByIndex(this._dMinDate, iDateIndex);
			}

			oGrip.title = this.getFormattedDate(dTmpDate);
		}
	};

	/**
	 * Update ARIA values when a grip moves.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setAriaState = function() {

		var dateVal = this.getFormattedDate(this.getValueDate());
		var date2Val = this.getFormattedDate(this.getValue2Date());

		if (this.oMovingGrip === this.oGrip) {
			this.oMovingGrip.setAttribute('aria-valuetext', dateVal);
			this.oMovingGrip.setAttribute('aria-valuenow', this.getValue());
			this.oGrip2.setAttribute('aria-valuemin', dateVal);
		} else {
			this.oMovingGrip.setAttribute('aria-valuetext', date2Val);
			this.oMovingGrip.setAttribute('aria-valuenow', this.getValue2());
			this.oGrip.setAttribute('aria-valuemax', date2Val);
		}
	};

	/**
	 * Format the given date based on the Granularity and DateFormat.
	 * 
	 * @param {Date}
	 *            dDate The date to be formatted.
	 * 
	 * @Return the formatted date string
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.getFormattedDate = function(dDate) {

		var oFormatter = null;

		switch (this._sGranularity) {

		case (DAY):
			oFormatter = this._oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
				style : "medium"
			});
			break;

		case (MONTH):
			oFormatter = this._oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
				pattern : 'MMM YYYY'
			});
			break;
		}

		return oFormatter.format(dDate);
	};

	/**
	 * Update the Labels, Bubble text and Tool Tip values and re-render DateRangeSliderInternal control.
	 * 
	 * @param oDateRangeSliderInternal
	 *            {sap.suite.ui.commons.DateRangeSliderInternal}
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.updateLabelBubbleToolTipValues = function(oDateRangeSliderInternal) {

		// update Labels based on DateFormat
		if (oDateRangeSliderInternal._bUsingDefaultLabels) {
			sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(oDateRangeSliderInternal);
		}

		// update bubble text based on DateFormat
		if (oDateRangeSliderInternal.getShowBubbles()) {
			var sValue = oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getValueDate());
			var sValue2 = oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getValue2Date());
			oDateRangeSliderInternal._oBubble.setText(sValue);
			oDateRangeSliderInternal._oBubble2.setText(sValue2);
		}
	};

	/**
	 * Getter for dateFormat which is used for formating the dates for Labels, bubble texts, and tool tips.
	 * 
	 * @return oDateFormat {sap.ui.core.format.DateFormat}
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.getDateFormat = function() {

		return this._oDateFormat;
	};

	/**
	 * Setter for dateFormat which is used for formating the dates for Labels, bubble texts, and tool tips. If passed object is null or is of incorrect type, control's default
	 * formatting will be used.
	 * 
	 * @param oDateFormat
	 *            {sap.ui.core.format.DateFormat}
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setDateFormat = function(oDateFormat) {

		if (oDateFormat && oDateFormat instanceof sap.ui.core.format.DateFormat) {
			this._oDateFormat = oDateFormat;
		} else {
			this._oDateFormat = null;
		}
		sap.suite.ui.commons.DateRangeSliderInternal.updateLabelBubbleToolTipValues(this);
	};

	/**
	 * Returns an object containing valueDate and value2Date which are set to the values based on two grips of the DateRangeSliderInternal.
	 * 
	 * @return {Object} The date range object containing valueDate and value2Date Date.
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.getDateRange = function() {

		var dValueDate = this.getValueDate();
		var dValue2Date = this.getValue2Date();

		var oCopy = {
			valueDate : dValueDate,
			value2Date : dValue2Date
		};
		return oCopy;
	};

	/**
	 * Handles the change event fired by the range slider after reseting the date range, fires the change event of DateRangeSliderInternal.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.handleFireChange = function() {

		if (this.getShowBubbles()) {
			sap.suite.ui.commons.DateRangeSliderInternal.repositionBubbles(this);
		}
		var oRange = this.getDateRange();
		this.fireChange({
			value : oRange.valueDate,
			value2 : oRange.value2Date
		});
		this.fireLiveChange({
			value : oRange.valueDate,
			value2 : oRange.value2Date
		});
	};

	/**
	 * fires the change event. The liveEvent is not fired here.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.handleFireChangeWithoutLive = function() {

		if (this.getShowBubbles()) {
			sap.suite.ui.commons.DateRangeSliderInternal.repositionBubbles(this);
		}
		var oRange = this.getDateRange();
		this.fireChange({
			value : oRange.valueDate,
			value2 : oRange.value2Date
		});
	};

	/**
	 * Handles the live change event fired by the range slider after reseting the date range, fires the live change event of DateRangeSliderInternal.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.fireLiveChangeForGrip = function(oGrip, fNewValue, fOldValue) {

		if (this.getShowBubbles() && fOldValue !== fNewValue) {
			sap.suite.ui.commons.DateRangeSliderInternal.repositionBubbles(this);
		}
		var oRange;
		if (oGrip === this.oGrip) {
			if (fOldValue !== fNewValue) {
				// fire event only if value changed
				oRange = this.getDateRange();
				this.fireLiveChange({
					value : oRange.valueDate,
					value2 : oRange.value2Date
				});
			}
		} else if (oGrip === this.oGrip2) {
			if (fOldValue !== fNewValue) {
				// fire event only if value changed
				oRange = this.getDateRange();
				this.fireLiveChange({
					value : oRange.valueDate,
					value2 : oRange.value2Date
				});
			}
		}
	};

	/**
	 * This function is called after the DateRangeSliderInternal is rendered
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.onAfterRendering = function() {

		sap.ui.commons.RangeSlider.prototype.onAfterRendering.apply(this);
		if (this.getShowBubbles()) {
			sap.suite.ui.commons.DateRangeSliderInternal.repositionBubbles(this);
		}
	};

	/**
	 * Function is called when window is resized
	 * 
	 * @param {jQuery.Event}
	 *            oEvent
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.onresize = function(oEvent) {

		sap.ui.commons.RangeSlider.prototype.onresize.apply(this, arguments);
		if (this.getDomRef()) {
			if (this.getShowBubbles()) {
				sap.suite.ui.commons.DateRangeSliderInternal.repositionBubbles(this);
			}
		}
	};

	/**
	 * Sets the stepLabels property
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setStepLabels = function(bStepLabels) {

		this.setProperty("stepLabels", bStepLabels);

		if (bStepLabels === true) {
			var bTextLabels = (this.getLabels() && this.getLabels().length > 0);
			if (!bTextLabels) {
				sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
				this._bUsingDefaultLabels = true;
			}
		}
	};

	/**
	 * Sets the labels property
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setLabels = function(aLabels) {

		this.setProperty("labels", aLabels);

		var bTextLabels = (this.getLabels() && this.getLabels().length > 0);
		if (this.getStepLabels() && !bTextLabels) {
			sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
			this._bUsingDefaultLabels = true;
		}
	};

	/**
	 * Sets the smallStepWidth property
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setSmallStepWidth = function(fSmallStepWidth) {

		this.setProperty("smallStepWidth", Math.round(fSmallStepWidth));
	};

	/**
	 * Sets the totalUnits property
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setTotalUnits = function(iTotalUnits) {

		this.setProperty("totalUnits", iTotalUnits);

		if (this._bUsingDefaultLabels) {
			sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
		}
	};

	/**
	 * Getter to get the max date for the DateRangeSliderInternal.
	 * 
	 * @return {Date} max date
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.getMaxDate = function() {

		var dMax = null;

		switch (this._sGranularity) {

		case (DAY):
			dMax = sap.suite.ui.commons.util.DateUtils.incrementDateByIndex(this._dMinDate, this.getMax());
			sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(dMax);
			break;

		case (MONTH):
			dMax = sap.suite.ui.commons.util.DateUtils.incrementMonthByIndex(this._dMinDate, this.getMax());
			sap.suite.ui.commons.util.DateUtils.resetDateToEndOfMonth(dMax);
			break;
		}

		return dMax;
	};

	/**
	 * Setter to set the max date for the DateRangeSliderInternal.
	 * 
	 * @param {Date}
	 *            max date
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setMaxDate = function(dMax) {

		var dMinOld = this.getMinDate();
		var dValueOld = this.getValueDate();
		var dValue2Old = this.getValue2Date();

		var bFireEvent = false;
		var iNewMax = 0, iNewValue = 0, iNewValue2 = 0;

		switch (this._sGranularity) {

		case (DAY):
			iNewMax = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMinOld, dMax);
			iNewValue = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMinOld, dValueOld);
			iNewValue2 = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMinOld, dValue2Old);
			break;

		case (MONTH):
			iNewMax = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMinOld, dMax);
			iNewValue = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMinOld, dValueOld);
			iNewValue2 = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMinOld, dValue2Old);
			break;
		}

		bFireEvent = iNewValue > iNewMax || iNewValue2 > iNewMax;
		iNewValue = iNewValue > iNewMax ? iNewMax : iNewValue;
		iNewValue2 = iNewValue2 > iNewMax ? iNewMax : iNewValue2;

		this.setProperty('min', 0, true);
		this.setProperty('max', iNewMax, true);
		this.setProperty('value', iNewValue, true);
		this.setProperty('value2', iNewValue2, true);

		if (this._bUsingDefaultLabels) {
			sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
		}

		if (bFireEvent) {
			var oRange = this.getDateRange();

			this.fireChange({
				value : oRange.valueDate,
				value2 : oRange.value2Date
			});
		}
	};

	/**
	 * Getter to get the min date for the DateRangeSliderInternal.
	 * 
	 * @return {Date} min date
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.getMinDate = function() {

		var dMin = new Date(this._dMinDate);

		switch (this._sGranularity) {

		case (DAY):
			sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dMin);
			break;

		case (MONTH):
			sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(dMin);
			break;
		}

		return dMin;
	};

	/**
	 * Setter to set the min date for the DateRangeSliderInternal.
	 * 
	 * @param {Date}
	 *            min date
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setMinDate = function(dMin) {

		var dMaxOld = this.getMaxDate();
		var dValueOld = this.getValueDate();
		var dValue2Old = this.getValue2Date();

		this._dMinDate = new Date(dMin);

		var bFireEvent = false;
		var iNewMax = 0, iNewValue = 0, iNewValue2 = 0;

		switch (this._sGranularity) {

		case (DAY):
			iNewMax = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMin, dMaxOld);
			iNewValue = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMin, dValueOld);
			iNewValue2 = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMin, dValue2Old);
			break;

		case (MONTH):
			iNewMax = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMin, dMaxOld);
			iNewValue = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMin, dValueOld);
			iNewValue2 = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMin, dValue2Old);
			break;
		}

		bFireEvent = iNewValue < 0 || iNewValue2 < 0;
		iNewValue = iNewValue < 0 ? 0 : iNewValue;
		iNewValue2 = iNewValue2 < 0 ? 0 : iNewValue2;

		this.setProperty('min', 0, true);
		this.setProperty('max', iNewMax, true);
		this.setProperty('value', iNewValue, true);
		this.setProperty('value2', iNewValue2, true);

		if (this._bUsingDefaultLabels) {
			sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
		}

		if (bFireEvent) {
			var oRange = this.getDateRange();

			this.fireChange({
				value : oRange.valueDate,
				value2 : oRange.value2Date
			});
		}
	};

	/**
	 * Getter to get the value2 date for the DateRangeSliderInternal.
	 * 
	 * @return {Date} value2 date
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.getValue2Date = function() {

		var dValue2 = null;

		switch (this._sGranularity) {

		case (DAY):
			dValue2 = sap.suite.ui.commons.util.DateUtils.incrementDateByIndex(this._dMinDate, this.getValue2());
			sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(dValue2);
			break;

		case (MONTH):
			dValue2 = sap.suite.ui.commons.util.DateUtils.incrementMonthByIndex(this._dMinDate, this.getValue2());
			sap.suite.ui.commons.util.DateUtils.resetDateToEndOfMonth(dValue2);
			break;
		}

		return dValue2;
	};

	/**
	 * Setter to set the value2 date for the DateRangeSliderInternal.
	 * 
	 * @param {Date}
	 *            dValue2 date
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setValue2Date = function(dValue2) {

		var iNewValue2 = 0;

		switch (this._sGranularity) {

		case (DAY):
			iNewValue2 = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(this._dMinDate, dValue2);
			break;

		case (MONTH):
			iNewValue2 = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(this._dMinDate, dValue2);
			break;
		}

		this.setProperty('value2', iNewValue2, true);

		var oRange = this.getDateRange();

		this.fireChange({
			value : oRange.valueDate,
			value2 : oRange.value2Date
		});
	};

	/**
	 * Getter to get the value date for the DateRangeSliderInternal.
	 * 
	 * @return {Date} value date
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.getValueDate = function() {

		var dValue = null;

		switch (this._sGranularity) {

		case (DAY):
			dValue = sap.suite.ui.commons.util.DateUtils.incrementDateByIndex(this._dMinDate, this.getValue());
			sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dValue);
			break;

		case (MONTH):
			dValue = sap.suite.ui.commons.util.DateUtils.incrementMonthByIndex(this._dMinDate, this.getValue());
			sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(dValue);
			break;
		}

		return dValue;
	};

	/**
	 * Setter to set the value date for the DateRangeSliderInternal.
	 * 
	 * @param {Date}
	 *            dValue date
	 * @private
	 */

	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setValueDate = function(dValue) {

		var iNewValue = 0;

		switch (this._sGranularity) {

		case (DAY):
			iNewValue = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(this._dMinDate, dValue);
			break;

		case (MONTH):
			iNewValue = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(this._dMinDate, dValue);
			break;
		}

		this.setProperty('value', iNewValue, true);

		var oRange = this.getDateRange();

		this.fireChange({
			value : oRange.valueDate,
			value2 : oRange.value2Date
		});
	};

	/**
	 * Setter to set the Granularity to DAY
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setDayGranularity = function() {

		var dMinDate = this.getMinDate();
		var dValueDate = this.getValueDate();
		var dValue2Date = this.getValue2Date();
		var dMaxDate = this.getMaxDate();

		var iNoOfDaysValueDateApartFromMinDate = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMinDate, dValueDate);
		var iNoOfDaysValue2DateApartFromMinDate = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMinDate, dValue2Date);
		var iNoOfDaysMaxDateApartFromMinDate = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMinDate, dMaxDate);

		this.setProperty('min', 0, true);
		this.setProperty('value', iNoOfDaysValueDateApartFromMinDate, true);
		this.setProperty('value2', iNoOfDaysValue2DateApartFromMinDate, true);
		this.setProperty('max', iNoOfDaysMaxDateApartFromMinDate, true);

		this._sGranularity = DAY;

		if (this._bUsingDefaultLabels) {
			sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
		}

		var oRange = this.getDateRange();

		this.fireChange({
			value : oRange.valueDate,
			value2 : oRange.value2Date
		});
	};

	/**
	 * Setter to set the Granularity to MONTH
	 * 
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.setMonthGranularity = function() {

		var dMinDate = this.getMinDate();
		var dValueDate = this.getValueDate();
		var dValue2Date = this.getValue2Date();
		var dMaxDate = this.getMaxDate();

		var iNoOfMonthsValueDateApartFromMinDate = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMinDate, dValueDate);
		var iNoOfMonthsValue2DateApartFromMinDate = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMinDate, dValue2Date);
		var iNoOfMonthsMaxDateApartFromMinDate = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMinDate, dMaxDate);

		this.setProperty('min', 0, true);
		this.setProperty('value', iNoOfMonthsValueDateApartFromMinDate, true);
		this.setProperty('value2', iNoOfMonthsValue2DateApartFromMinDate, true);
		this.setProperty('max', iNoOfMonthsMaxDateApartFromMinDate, true);

		this._sGranularity = MONTH;

		sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(this._dMinDate);

		if (this._bUsingDefaultLabels) {
			sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
		}

		var oRange = this.getDateRange();

		this.fireChange({
			value : oRange.valueDate,
			value2 : oRange.value2Date
		});
	};

	/**
	 * Function is called when DateRangeSliderInternal grip or grip2 is moved, over-write base RangeSlider function based on pinGrip and pinGrip2
	 * 
	 * @param {DOM.Event}
	 *            oEvent
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.handleMove = function(oEvent) {

		if ((this.oMovingGrip === this.oGrip2 && !this.getPinGrip2()) || (this.oMovingGrip === this.oGrip && !this.getPinGrip())) {

			sap.ui.commons.RangeSlider.prototype.handleMove.apply(this, [ oEvent ]);
		}
	};

	/**
	 * Function is called when End key pressed, over-write base RangeSlider function based on pinGrip and pinGrip2
	 * 
	 * @param {jQuery.Event}
	 *            oEvent
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.onsapend = function(oEvent) {

		if ((this.oMovingGrip === this.oGrip2 && !this.getPinGrip2()) || (this.oMovingGrip === this.oGrip && !this.getPinGrip())) {

			sap.ui.commons.RangeSlider.prototype.onsapend.apply(this, [ oEvent ]);
		}

	};

	/**
	 * Function is called when Home key pressed, over-write base RangeSlider function based on pinGrip and pinGrip2
	 * 
	 * @param {jQuery.Event}
	 *            oEvent
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.onsaphome = function(oEvent) {

		if ((this.oMovingGrip === this.oGrip2 && !this.getPinGrip2()) || (this.oMovingGrip === this.oGrip && !this.getPinGrip())) {

			sap.ui.commons.RangeSlider.prototype.onsaphome.apply(this, [ oEvent ]);
		}

	};

	/**
	 * Function is called when Ctrl+right key pressed, over-write base RangeSlider function based on pinGrip and pinGrip2
	 * 
	 * @param {jQuery.Event}
	 *            oEvent
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.onsaprightmodifiers = function(oEvent) {

		if ((this.oMovingGrip === this.oGrip2 && !this.getPinGrip2()) || (this.oMovingGrip === this.oGrip && !this.getPinGrip())) {

			sap.ui.commons.RangeSlider.prototype.onsaprightmodifiers.apply(this, [ oEvent ]);
		}

	};

	/**
	 * Function is called when Ctrl+left key pressed, over-write base RangeSlider function based on pinGrip and pinGrip2
	 * 
	 * @param {jQuery.Event}
	 *            oEvent
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.onsapleftmodifiers = function(oEvent) {

		if ((this.oMovingGrip === this.oGrip2 && !this.getPinGrip2()) || (this.oMovingGrip === this.oGrip && !this.getPinGrip())) {

			sap.ui.commons.RangeSlider.prototype.onsapleftmodifiers.apply(this, [ oEvent ]);
		}

	};

	/**
	 * Function is called when right key pressed, over-write base RangeSlider function based on pinGrip and pinGrip2
	 * 
	 * @param {jQuery.Event}
	 *            oEvent
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.onsapright = function(oEvent) {

		if ((this.oMovingGrip === this.oGrip2 && !this.getPinGrip2()) || (this.oMovingGrip === this.oGrip && !this.getPinGrip())) {

			sap.ui.commons.RangeSlider.prototype.onsapright.apply(this, [ oEvent ]);
		}

	};

	/**
	 * Function is called when left key pressed, over-write base RangeSlider function based on pinGrip and pinGrip2
	 * 
	 * @param {jQuery.Event}
	 *            oEvent
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.onsapleft = function(oEvent) {

		if ((this.oMovingGrip === this.oGrip2 && !this.getPinGrip2()) || (this.oMovingGrip === this.oGrip && !this.getPinGrip())) {

			sap.ui.commons.RangeSlider.prototype.onsapleft.apply(this, [ oEvent ]);
		}

	};

	/**
	 * Function is called when DateRangeSliderInternal is clicked. over-write base Slider function based on pinGrip and pinGrip2
	 * 
	 * @param {jQuery.Event}
	 *            oEvent
	 * @private
	 */
	sap.suite.ui.commons.DateRangeSliderInternal.prototype.onclick = function(oEvent) {

		var oMovingGrip = this.oMovingGrip;

		if (this.getEditable() && this.getEnabled()) {

			var fMultiplicator;

			// Check for ID where the behavior depends on the clicked area.
			var sMyTargetId = oEvent.target.getAttribute('ID');

			var fNewValue = this.getValue();
			var iNewPos = this.getOffsetLeft(this.oGrip) + this.iShiftGrip;

			switch (sMyTargetId) {
			case (this.oBar.id):
			case (this.oHiLi.id):
				// Click on slide bar
				if (this.getVertical()) {
					fMultiplicator = this.getBarWidth() - this.getOffsetX(oEvent);
				} else {
					fMultiplicator = this.getOffsetX(oEvent);
				}
				if (sMyTargetId === this.oHiLi.id) {
					if (this.getVertical()) {
						fMultiplicator -= this.getOffsetLeft(this.oHiLi);
					} else {
						fMultiplicator += this.getOffsetLeft(this.oHiLi);
					}
				}
				fNewValue = this.convertRtlValue(this.getMin() + (((this.getMax() - this.getMin()) / this.getBarWidth()) * fMultiplicator));
				iNewPos = this.getOffsetX(oEvent);
				if (sMyTargetId === this.oHiLi.id) {
					iNewPos += this.getOffsetLeft(this.oHiLi);
				}
				if (this.oStartTarget && this.targetIsGrip(this.oStartTarget.id)) {
					oMovingGrip = this.oStartTarget;
				} else if (this.targetIsGrip(sMyTargetId)) {
					oMovingGrip = oEvent.target;
				} else {
					oMovingGrip = this.getNearestGrip(iNewPos);
				}
				break;
			case (this.getId() + '-left'):
				// Click on left end
				iNewPos = 0;
				if (this.getVertical()) {
					fNewValue = this.getMax();
					oMovingGrip = this.getRightGrip();
				} else {
					fNewValue = this.getMin();
					oMovingGrip = this.getLeftGrip();
				}
				break;
			case (this.getId() + '-right'):
				// Click on right end
				iNewPos = this.getBarWidth();
				if (!this.getVertical()) {
					fNewValue = this.getMax();
					oMovingGrip = this.getRightGrip();
				} else {
					fNewValue = this.getMin();
					oMovingGrip = this.getLeftGrip();
				}
				break;
			default:
				// If target is grip return
				// Not implemented as case because RangeSlider has multiple grips, for which cases cannot be inserted afterwards
				if (this.targetIsGrip(sMyTargetId)) {
					return;
				}
				// Check whether tick is clicked
				var iTickPos = sMyTargetId.search('-tick');
				if (iTickPos >= 0) {
					var iTickNum = parseInt(sMyTargetId.slice(this.getId().length + 5), 10);
					iNewPos = this.fTickDist * iTickNum;
					fNewValue = this.convertRtlValue(this.getMin() + (((this.getMax() - this.getMin()) / this.getTotalUnits()) * iTickNum));
					if (this.oStartTarget && this.targetIsGrip(this.oStartTarget.id)) {
						oMovingGrip = this.oStartTarget;
					} else if (this.targetIsGrip(sMyTargetId)) {
						oMovingGrip = oEvent.target;
					} else {
						oMovingGrip = this.getNearestGrip(iNewPos);
					}
					break;
				}

				// Outer DIV clicked -> ID given by caller. This is the case if all other DIVs are smaller,
				// or if tick text is clicked
				var iOffsetBar = jQuery(this.oBar).offset();
				var iOffsetMe = jQuery(oEvent.target).offset();
				if (this.getVertical()) {
					iNewPos = this.getOffsetX(oEvent) - (iOffsetBar.top - iOffsetMe.top);
				} else {
					iNewPos = this.getOffsetX(oEvent) - (iOffsetBar.left - iOffsetMe.left);
				}
				if (iNewPos <= 0) {
					iNewPos = 0;
					if (this.getVertical()) {
						fNewValue = this.getMax();
					} else {
						fNewValue = this.getMin();
					}
				} else {
					if (iNewPos >= this.getBarWidth()) {
						iNewPos = this.getBarWidth();
						if (this.getVertical()) {
							fNewValue = this.getMin();
						} else {
							fNewValue = this.getMax();
						}
					} else {
						if (this.getVertical()) {
							fMultiplicator = this.getBarWidth() - iNewPos;
						} else {
							fMultiplicator = iNewPos;
						}
						fNewValue = this.getMin() + (((this.getMax() - this.getMin()) / this.getBarWidth()) * fMultiplicator);
					}
				}
				fNewValue = this.convertRtlValue(fNewValue);
				if (this.oStartTarget && this.targetIsGrip(this.oStartTarget.id)) {
					oMovingGrip = this.oStartTarget;
				} else if (this.targetIsGrip(sMyTargetId)) {
					oMovingGrip = oEvent.target;
				} else {
					oMovingGrip = this.getNearestGrip(iNewPos);
				}
				break;
			}

			if ((oMovingGrip === this.oGrip2 && this.getPinGrip2()) || (oMovingGrip === this.oGrip && this.getPinGrip())) {
				return;
			}

			var validation = this.validateNewPosition(fNewValue, iNewPos, oMovingGrip, (this.getValueForGrip(oMovingGrip) > fNewValue));
			fNewValue = validation.fNewValue;
			iNewPos = validation.iNewPos;

			this.changeGrip(fNewValue, iNewPos, oMovingGrip);
			this.handleFireChange();

		}

		// Set focus to grip
		oMovingGrip.focus();
		this.oMovingGrip = oMovingGrip;
		this.oStartTarget = null;

	};

}());

}; // end of sap/suite/ui/commons/DateRangeSliderInternal.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.FacetOverview') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.FacetOverview.
jQuery.sap.declare("sap.suite.ui.commons.FacetOverview");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new FacetOverview.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getQuantity quantity} : int (default: -1)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 'auto')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '10rem')</li>
 * <li>{@link #getRowSpan rowSpan} : int (default: 1)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.FacetOverview#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control is used in UnifiedThingInspector to display the preview of the facet content.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.FacetOverview
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.FacetOverview", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"quantity" : {type : "int", group : "Misc", defaultValue : -1},
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : 'auto'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '10rem'},
		"rowSpan" : {type : "int", group : "Misc", defaultValue : 1}
	},
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.FacetOverview with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.FacetOverview.extend
 * @function
 */

sap.suite.ui.commons.FacetOverview.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>title</code>.
 * This property is shown in the upper left part of control.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.FacetOverview#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FacetOverview#setTitle
 * @function
 */


/**
 * Getter for property <code>quantity</code>.
 * Displays a label with the number of items in the right part of the control.
 *
 * Default value is <code>-1</code>
 *
 * @return {int} the value of property <code>quantity</code>
 * @public
 * @name sap.suite.ui.commons.FacetOverview#getQuantity
 * @function
 */

/**
 * Setter for property <code>quantity</code>.
 *
 * Default value is <code>-1</code> 
 *
 * @param {int} iQuantity  new value for property <code>quantity</code>
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FacetOverview#setQuantity
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Defines the width of the control. By default, the value is empty and the control inhertis the size from its content.
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.suite.ui.commons.FacetOverview#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FacetOverview#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Defines the height of the control. The default value is empty.
 *
 * Default value is <code>10rem</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.suite.ui.commons.FacetOverview#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>10rem</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FacetOverview#setHeight
 * @function
 */


/**
 * Getter for property <code>rowSpan</code>.
 * Defines the number of rows which the control represents in an external layout.
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>rowSpan</code>
 * @public
 * @name sap.suite.ui.commons.FacetOverview#getRowSpan
 * @function
 */

/**
 * Setter for property <code>rowSpan</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iRowSpan  new value for property <code>rowSpan</code>
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FacetOverview#setRowSpan
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content that appears in the left part of the control.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.suite.ui.commons.FacetOverview#getContent
 * @function
 */


/**
 * Setter for the aggregated <code>content</code>.
 * @param oContent {sap.ui.core.Control}
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FacetOverview#setContent
 * @function
 */
	

/**
 * Destroys the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FacetOverview#destroyContent
 * @function
 */


/**
 * The event is fired when the user chooses the control. Provides an event with parameter id, the ID of the chosen control. 
 *
 * @name sap.suite.ui.commons.FacetOverview#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id The control ID.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.suite.ui.commons.FacetOverview</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.FacetOverview</code>.<br/> itself. 
 *  
 * The event is fired when the user chooses the control. Provides an event with parameter id, the ID of the chosen control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.FacetOverview</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FacetOverview#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.suite.ui.commons.FacetOverview</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FacetOverview#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> The control ID.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.FacetOverview} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.FacetOverview#firePress
 * @function
 */


// Start of sap/suite/ui/commons/FacetOverview.js
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


/**
 * This file defines behavior for the control,
 */
sap.suite.ui.commons.FacetOverview.prototype.init = function(){
	
	this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
	
	if (jQuery.device.is.desktop) {
		this._oHoverIcon = sap.ui.core.IconPool.createControlByURI({
			id: this.getId() + "-hover-icon",
			src: "sap-icon://slim-arrow-right"
		}, sap.m.Image);
	}
	
	this._oNoDataLabel = new sap.m.Label(this.getId() + "-no-content",{
		text : this._rb.getText("FACETOVERVIEW_NO_CONTENT_TEXT")
	}).addStyleClass("sapSuiteFovNoContent");	
};

sap.suite.ui.commons.FacetOverview.prototype.exit = function(){
	if (this._oHoverIcon) {
		this._oHoverIcon.destroy();
	}
	
	sap.ui.core.ResizeHandler.deregister(this._sTitleResizeHandlerId);
	
	this._oNoDataLabel.destroy();
};

sap.suite.ui.commons.FacetOverview.prototype._handleTitleResize = function() {
	var iTitleWidth = jQuery.sap.byId(this.getId() +  "-title").width();
	if (this._iTitleWidth != iTitleWidth) {
		var iTitleTextMaxWidth = iTitleWidth 
			- jQuery.sap.byId(this.getId() +  "-qty").outerWidth() 
			- jQuery.sap.byId(this.getId() +  "-hover-icon").outerWidth();
		
		jQuery.sap.byId(this.getId() +  "-title-text").css("max-width", iTitleTextMaxWidth);
		this._iTitleWidth = iTitleWidth;
	}
};

sap.suite.ui.commons.FacetOverview.prototype.onAfterRendering = function () {
	if (this._sTitleResizeHandlerId) {
		sap.ui.core.ResizeHandler.deregister(this._sTitleResizeHandlerId);
	}
	
	var oTitle = jQuery.sap.domById(this.getId() + "-title");
	this._sTitleResizeHandlerId = sap.ui.core.ResizeHandler.register(oTitle,  jQuery.proxy(this._handleTitleResize, this));
	
	this._handleTitleResize();
};

sap.suite.ui.commons.FacetOverview.prototype.onclick = function(oEvent) {
    if (oEvent.srcControl.getMetadata().getName() != "sap.m.Link") {
		this.firePress({
			id: this.getId()
		});
    }
};

sap.suite.ui.commons.FacetOverview.prototype.onkeydown = function(oEvent) {
	if (oEvent.which == jQuery.sap.KeyCodes.ENTER) {
		this.onclick(oEvent);
	}
};

sap.suite.ui.commons.FacetOverview.prototype.onsaptouchstart = function (oEvent) {
    if (this.hasListeners("press")) {
        if (oEvent.srcControl.getMetadata().getName() != "sap.m.Link") {
            this.addStyleClass("sapSuiteFovSelected");
        }
    }
};

sap.suite.ui.commons.FacetOverview.prototype.onsaptouchend = function (oEvent) {
    if (this.hasListeners("press")) {
    	this.removeStyleClass("sapSuiteFovSelected");
    }
};

//ontouchstart/ontouchend are generated on iOS devices. onsaptouchstart/end is not fired on them.
sap.suite.ui.commons.FacetOverview.prototype.ontouchstart = function (oEvent) {
    if (this.hasListeners("press")) {
        if (oEvent.srcControl.getMetadata().getName() != "sap.m.Link") {
            this.addStyleClass("sapSuiteFovSelected");
        }
    }
};

sap.suite.ui.commons.FacetOverview.prototype.ontouchend = function (oEvent) {
    if (this.hasListeners("press")) {
    	this.removeStyleClass("sapSuiteFovSelected");
    }
};

}; // end of sap/suite/ui/commons/FacetOverview.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.FeedItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.FeedItem.
jQuery.sap.declare("sap.suite.ui.commons.FeedItem");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new FeedItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getImage image} : sap.ui.core.URI</li>
 * <li>{@link #getLink link} : sap.ui.core.URI</li>
 * <li>{@link #getSource source} : string</li>
 * <li>{@link #getPublicationDate publicationDate} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This element represents a news feed item.
 * @extends sap.ui.core.Element
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.FeedItem
 */
sap.ui.core.Element.extend("sap.suite.ui.commons.FeedItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"image" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"link" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"source" : {type : "string", group : "Misc", defaultValue : null},
		"publicationDate" : {type : "object", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.FeedItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.FeedItem.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * The title of the feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.FeedItem#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.FeedItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItem#setTitle
 * @function
 */


/**
 * Getter for property <code>image</code>.
 * The background image for the feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>image</code>
 * @public
 * @name sap.suite.ui.commons.FeedItem#getImage
 * @function
 */

/**
 * Setter for property <code>image</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sImage  new value for property <code>image</code>
 * @return {sap.suite.ui.commons.FeedItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItem#setImage
 * @function
 */


/**
 * Getter for property <code>link</code>.
 * The target location of the feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>link</code>
 * @public
 * @name sap.suite.ui.commons.FeedItem#getLink
 * @function
 */

/**
 * Setter for property <code>link</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sLink  new value for property <code>link</code>
 * @return {sap.suite.ui.commons.FeedItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItem#setLink
 * @function
 */


/**
 * Getter for property <code>source</code>.
 * The source of the feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>source</code>
 * @public
 * @name sap.suite.ui.commons.FeedItem#getSource
 * @function
 */

/**
 * Setter for property <code>source</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSource  new value for property <code>source</code>
 * @return {sap.suite.ui.commons.FeedItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItem#setSource
 * @function
 */


/**
 * Getter for property <code>publicationDate</code>.
 * The date the feed was published.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>publicationDate</code>
 * @public
 * @name sap.suite.ui.commons.FeedItem#getPublicationDate
 * @function
 */

/**
 * Setter for property <code>publicationDate</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oPublicationDate  new value for property <code>publicationDate</code>
 * @return {sap.suite.ui.commons.FeedItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItem#setPublicationDate
 * @function
 */


// Start of sap/suite/ui/commons/FeedItem.js
/**
 * validate the url first and then set the image property
 * 
 * @param oImage
 *                {object}
 * @public
 */
sap.suite.ui.commons.FeedItem.prototype.setImage = function(oImage) {

    if (oImage) {
        var validUrl = jQuery.sap.validateUrl(oImage);
        if (validUrl) {
            this.setProperty("image", oImage);
        } else {
            jQuery.sap.log.error("Invalid Url:'" + oImage
                    + "'. Property 'image' of FeedItem not set");
        }
    }
};

/**
 * validate the url first and then set the link property
 * 
 * @param sLink
 *                {string}
 * @public
 */
sap.suite.ui.commons.FeedItem.prototype.setLink = function(sLink) {

    if (sLink) {
        var validUrl = jQuery.sap.validateUrl(sLink);
        if (validUrl) {
            this.setProperty("link", sLink);
        } else {
            jQuery.sap.log.error("Invalid Url:'" + sLink
                    + "'. Property 'link' of FeedItem not set");
        }
    }
};
}; // end of sap/suite/ui/commons/FeedItem.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.FeedItemHeader') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.FeedItemHeader.
jQuery.sap.declare("sap.suite.ui.commons.FeedItemHeader");

jQuery.sap.require('sap.m.ListItemBase'); // unlisted dependency retained



/**
 * Constructor for a new FeedItemHeader.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getImage image} : sap.ui.core.URI</li>
 * <li>{@link #getLink link} : sap.ui.core.URI</li>
 * <li>{@link #getSource source} : string</li>
 * <li>{@link #getPublicationDate publicationDate} : object</li>
 * <li>{@link #getDescription description} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control displays feed item header information.
 * @extends sap.m.ListItemBase
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader
 */
sap.m.ListItemBase.extend("sap.suite.ui.commons.FeedItemHeader", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"image" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"link" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"source" : {type : "string", group : "Misc", defaultValue : null},
		"publicationDate" : {type : "object", group : "Misc", defaultValue : null},
		"description" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.FeedItemHeader with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.FeedItemHeader.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * The title of the feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.FeedItemHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#setTitle
 * @function
 */


/**
 * Getter for property <code>image</code>.
 * The image associated with the feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>image</code>
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#getImage
 * @function
 */

/**
 * Setter for property <code>image</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sImage  new value for property <code>image</code>
 * @return {sap.suite.ui.commons.FeedItemHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#setImage
 * @function
 */


/**
 * Getter for property <code>link</code>.
 * The target location of the feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>link</code>
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#getLink
 * @function
 */

/**
 * Setter for property <code>link</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sLink  new value for property <code>link</code>
 * @return {sap.suite.ui.commons.FeedItemHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#setLink
 * @function
 */


/**
 * Getter for property <code>source</code>.
 * The source of the feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>source</code>
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#getSource
 * @function
 */

/**
 * Setter for property <code>source</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSource  new value for property <code>source</code>
 * @return {sap.suite.ui.commons.FeedItemHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#setSource
 * @function
 */


/**
 * Getter for property <code>publicationDate</code>.
 * The date the feed item was published.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>publicationDate</code>
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#getPublicationDate
 * @function
 */

/**
 * Setter for property <code>publicationDate</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oPublicationDate  new value for property <code>publicationDate</code>
 * @return {sap.suite.ui.commons.FeedItemHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#setPublicationDate
 * @function
 */


/**
 * Getter for property <code>description</code>.
 * The description of the feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>description</code>
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#getDescription
 * @function
 */

/**
 * Setter for property <code>description</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDescription  new value for property <code>description</code>
 * @return {sap.suite.ui.commons.FeedItemHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedItemHeader#setDescription
 * @function
 */


// Start of sap/suite/ui/commons/FeedItemHeader.js
///**
// * This file defines behavior for the control,
// */
//sap.suite.ui.commons.FeedItemHeader.prototype.init = function(){
//   // do something for initialization...
//};


sap.suite.ui.commons.FeedItemHeader.prototype.exit = function(oEvent) {

	if (this._htmlControl) {
		this._htmlControl.destroy();
	}
	
	sap.m.ListItemBase.prototype.exit.apply(this);
};

/**
 * Sets the specified image URI if it is valid, otherwise an error messsage is logged.
 * 
 * @param sImageUri {String}
 * @public
 */
sap.suite.ui.commons.FeedItemHeader.prototype.setImage = function(sImageUri) {

    if (sImageUri) {
        var validUrl = jQuery.sap.validateUrl(sImageUri);
        if (validUrl) {
            this.setProperty("image", sImageUri);
        } else {
            jQuery.sap.log.error("Invalid Url:'" + sImageUri
                    + "'. Property 'image' of FeedItemHeader not set");
        }
    }
};

/**
 * Sets the specified link URL if it is valid, otherwise an error messsage is logged.
 * 
 * @param sLinkUri {String}
 * @public
 */
sap.suite.ui.commons.FeedItemHeader.prototype.setLink = function(sLinkUri) {

    if (sLinkUri) {
        var validUrl = jQuery.sap.validateUrl(sLinkUri);
        if (validUrl) {
            this.setProperty("link", sLinkUri);
        } else {
            jQuery.sap.log.error("Invalid Url:'" + sLinkUri
                    + "'. Property 'link' of FeedItemHeader not set");
        }
    }
};

/**
 * Fire press event.
 * 
 * @private
 */
sap.suite.ui.commons.FeedItemHeader.prototype.onclick = function(oEvent) {

    this.firePress({
        link : this.getLink()
    });

    // Prevent the browser from acting on events triggered by clicking on html markup inside of the description (like anchors)
    oEvent.preventDefault();
};	

/**
 * Get the HTML control used to render description content that may contain HTML markup.
 * @private
 * @returns HTML control
 */
sap.suite.ui.commons.FeedItemHeader.prototype._getHtmlControl = function() {
	if(!this._htmlControl) {
		this._htmlControl = new sap.ui.core.HTML({
			id: this.getId() + "-feedItemHeaderDescription",
			sanitizeContent: true
		});		
	}
	return this._htmlControl;
};	


}; // end of sap/suite/ui/commons/FeedItemHeader.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.FeedItemHeaderRenderer') ) {
// @copyright 

jQuery.sap.declare("sap.suite.ui.commons.FeedItemHeaderRenderer");

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.m.ListItemBaseRenderer'); // unlisted dependency retained



/**
 * @class FeedItemHeader renderer.
 * @static
 */
sap.suite.ui.commons.FeedItemHeaderRenderer = sap.ui.core.Renderer
        .extend(sap.m.ListItemBaseRenderer);

/**
 * Overrides the List Content Rendering to suit FeedItemHeader style
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control}
 *                oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.FeedItemHeaderRenderer.renderLIContent = function(oRm,
        oFeedItemHeader) {
        
    // Change to display multiple columns on FeedItem.
    // Multi-column display for <div> elements is supported in Chrome, Safari and Firefox. Not supported in I.E 9 and lower versions. The current 
    // style will apply in those browsers.

    var multiColumnSupported = true;    
    if (jQuery.browser.msie && jQuery.browser.version.substring(0,2) < 10) {
    	multiColumnSupported = false;
    }

    // write the HTML into the render manager
    oRm.write("<div");
    oRm.writeControlData(oFeedItemHeader);
    oRm.addClass("sapSuiteUiCommonsFeedItemHeader");
    oRm.addClass("sapSuiteUiCommonsPointer");
    oRm.writeClasses();
    oRm.write(">");

	    oRm.write('<div id="' + oFeedItemHeader.getId() + '-feedItemHeaderImage"');
	    oRm.write(" style='background-image:url(");
	    oRm.writeEscaped(oFeedItemHeader.getImage());
	    oRm.write(");'");
	    oRm.addClass("sapSuiteUiCommonsFeedItemHeaderImage");
	    oRm.writeClasses();
	    oRm.write(">");
		       oRm.write("<div");
			    oRm.addClass("sapSuiteUiCommonsFeedItemHeaderLowerText");
			    oRm.writeClasses();
			    oRm.write(">");
				    oRm.write('<div id="' + oFeedItemHeader.getId() + '-feedItemHeaderSource"');
				    oRm.addClass("sapSuiteUiCommonsFeedItemHeaderSource");
				    oRm.writeClasses();
				    oRm.write(">");
				    oRm.writeEscaped(oFeedItemHeader.getSource());
				    oRm.write("</div>");
				    
				    oRm.write('<div id="' + oFeedItemHeader.getId() + '-feedItemHeaderAge"');
				    oRm.addClass("sapSuiteUiCommonsFeedItemHeaderAge");
				    oRm.writeClasses();
				    oRm.write(">");
				    oRm.writeEscaped(sap.suite.ui.commons.util.FeedItemUtils
				            .calculateFeedItemAge(oFeedItemHeader.getPublicationDate()));
				    oRm.write("</div>");
				oRm.write("</div>");
		oRm.write("</div>");

	    oRm.write("<div");
	    oRm.addClass("sapSuiteUiCommonsFeedItemHeaderText");
	    oRm.writeClasses();
	    oRm.write(">");    

		    oRm.write('<div id="' + oFeedItemHeader.getId() + '-feedItemHeaderTitleAndDesc"');
		    oRm.addClass("sapSuiteUiCommonsFeedItemHeaderDescription");
		    if (multiColumnSupported) {
		    	oRm.addClass("sapSuiteUiCommonsFeedItemHeaderDescriptionMultiCol");
		    }
		    oRm.writeClasses();
		    oRm.write(">");
    
			    oRm.write('<div id="' + oFeedItemHeader.getId() + '-feedItemHeaderTitle"');
			    oRm.addClass("sapSuiteUiCommonsFeedItemHeaderTitle");
			    if (multiColumnSupported) {
			    	oRm.addClass("sapSuiteUiCommonsFeedItemHeaderTitleMultiCol");
			    }
			    oRm.writeClasses();
			    oRm.write(">");
			    oRm.writeEscaped(oFeedItemHeader.getTitle());
			    oRm.write("</div>");
			    
			    oRm.write('<div id="' + oFeedItemHeader.getId() + '-feedItemHeaderDesc"');
				    oRm.addClass("sapSuiteUiCommonsFeedItemHeaderHeight");
				    oRm.writeClasses();
				    oRm.write(">");
				    var htmlControl = oFeedItemHeader._getHtmlControl();
					//The HTML control will only render content inside of html tags, so you can't just set plain text for the content without
					//wrapping in an html tag.	
				    htmlControl.setContent('<div>' + oFeedItemHeader.getDescription() +  '</div>');
				    oRm.renderControl(htmlControl);
			    oRm.write("</div>");
		oRm.write("</div>");
 
    oRm.write("</div>"); // FeedItemHeader control
};

}; // end of sap/suite/ui/commons/FeedItemHeaderRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.FeedTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.FeedTile.
jQuery.sap.declare("sap.suite.ui.commons.FeedTile");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new FeedTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDisplayDuration displayDuration} : int (default: 5)</li>
 * <li>{@link #getDisplayArticleImage displayArticleImage} : boolean (default: true)</li>
 * <li>{@link #getSource source} : string</li>
 * <li>{@link #getDefaultImages defaultImages} : sap.ui.core.URI[]</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.suite.ui.commons.FeedItem[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.FeedTile#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control displays news feeds.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.FeedTile
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.FeedTile", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"displayDuration" : {type : "int", group : "Misc", defaultValue : 5},
		"displayArticleImage" : {type : "boolean", group : "Behavior", defaultValue : true},
		"source" : {type : "string", group : "Misc", defaultValue : null},
		"defaultImages" : {type : "sap.ui.core.URI[]", group : "Misc", defaultValue : null}
	},
	aggregations : {
    	"items" : {type : "sap.suite.ui.commons.FeedItem", multiple : true, singularName : "item"}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.FeedTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.FeedTile.extend
 * @function
 */

sap.suite.ui.commons.FeedTile.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>displayDuration</code>.
 * The length of time in seconds the control displays each feed item. Default value is 5 seconds.
 *
 * Default value is <code>5</code>
 *
 * @return {int} the value of property <code>displayDuration</code>
 * @public
 * @name sap.suite.ui.commons.FeedTile#getDisplayDuration
 * @function
 */

/**
 * Setter for property <code>displayDuration</code>.
 *
 * Default value is <code>5</code> 
 *
 * @param {int} iDisplayDuration  new value for property <code>displayDuration</code>
 * @return {sap.suite.ui.commons.FeedTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedTile#setDisplayDuration
 * @function
 */


/**
 * Getter for property <code>displayArticleImage</code>.
 * To display article Image or not. If it is true, the article Image will be displayed based on precedence. If it is false, the default image will be displayed.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>displayArticleImage</code>
 * @public
 * @name sap.suite.ui.commons.FeedTile#getDisplayArticleImage
 * @function
 */

/**
 * Setter for property <code>displayArticleImage</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDisplayArticleImage  new value for property <code>displayArticleImage</code>
 * @return {sap.suite.ui.commons.FeedTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedTile#setDisplayArticleImage
 * @function
 */


/**
 * Getter for property <code>source</code>.
 * The source of the feed item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>source</code>
 * @public
 * @name sap.suite.ui.commons.FeedTile#getSource
 * @function
 */

/**
 * Setter for property <code>source</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSource  new value for property <code>source</code>
 * @return {sap.suite.ui.commons.FeedTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedTile#setSource
 * @function
 */


/**
 * Getter for property <code>defaultImages</code>.
 * A list of default images that is cycled by the control when no image is available for a feed item or when no feed items exist. After a random image is displayed first time, control cycles through this list of images.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI[]} the value of property <code>defaultImages</code>
 * @public
 * @name sap.suite.ui.commons.FeedTile#getDefaultImages
 * @function
 */

/**
 * Setter for property <code>defaultImages</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI[]} aDefaultImages  new value for property <code>defaultImages</code>
 * @return {sap.suite.ui.commons.FeedTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedTile#setDefaultImages
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * The feed items the control cycles through.
 * 
 * @return {sap.suite.ui.commons.FeedItem[]}
 * @public
 * @name sap.suite.ui.commons.FeedTile#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.suite.ui.commons.FeedItem}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.FeedTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedTile#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.suite.ui.commons.FeedItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.FeedTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedTile#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.suite.ui.commons.FeedItem} vItem the item to remove or its index or id
 * @return {sap.suite.ui.commons.FeedItem} the removed item or null
 * @public
 * @name sap.suite.ui.commons.FeedTile#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.FeedItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.FeedTile#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.FeedItem</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.FeedItem}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.FeedTile#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.suite.ui.commons.FeedTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedTile#destroyItems
 * @function
 */


/**
 * The event fired when the user clicks on the control. 
 *
 * @name sap.suite.ui.commons.FeedTile#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.suite.ui.commons.FeedTile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.FeedTile</code>.<br/> itself. 
 *  
 * The event fired when the user clicks on the control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.FeedTile</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.FeedTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedTile#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.suite.ui.commons.FeedTile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.FeedTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.FeedTile#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.FeedTile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.FeedTile#firePress
 * @function
 */


// Start of sap/suite/ui/commons/FeedTile.js
///**
// * This file defines behavior for the control,
// */

(function() {

	/**
	 * Initialize the control.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.FeedTile.prototype.init = function() {

		this._currentItemIndex = 0;
		this._stagedModel = null;
		this._defaultImageIndex = -1;
	};

	/**
	 * This function is called when displayDuration expires to cycle to the next FeedItem in the list.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.FeedTile.prototype.cycle = function() {

		// If the staged model is not null then update the control with the new model
		// and adjust the current item index if necessary.
		if (this._stagedModel) {
			jQuery.sap.log.debug("FeedTile: Updating news tile with new model");
			this.setModel(this._stagedModel);
			this._stagedModel = null;

			var numItems = this.getItems().length;
			if (this._currentItemIndex >= numItems) {
				this._currentItemIndex = 0;
			}
			return;
		}

		var items = this.getItems();
		this._currentItemIndex = (this._currentItemIndex + 1) % items.length;

		var $oToFeed = jQuery("#" + this.getId() + "-next-feedTileImage");
		var $oFromFeed = jQuery("#" + this.getId() + "-feedTileImage");

		var oFeedTile = this;
		if (jQuery.support.cssTransitions) {
			$oToFeed.addClass("sapSuiteFTItemRight").removeClass('sapSuiteFTItemHidden');
			$oFromFeed.addClass('sapSuiteFTItemCenter');
			setTimeout(function() {

				var bOneTransitionFinished = false;
				var fAfterTransition = null; // make Eclipse aware that this variable is defined
				fAfterTransition = function() {

					jQuery(this).unbind("webkitTransitionEnd transitionend");
					if (!bOneTransitionFinished) {
						// the first one of both transitions finished
						bOneTransitionFinished = true;
					} else {
						// the second transition now also finished => clean up the style classes
						$oToFeed.removeClass("sapSuiteFTItemSliding");
						$oFromFeed.removeClass("sapSuiteFTItemSliding").addClass("sapSuiteFTItemHidden").removeClass("sapSuiteFTItemLeft").addClass("sapSuiteFTItemRight");

						$oFromFeed.detach();
						$oToFeed.after($oFromFeed);

						oFeedTile.flipIds($oToFeed, $oFromFeed);

						setTimeout(function() {

							oFeedTile.setNextItemValues(oFeedTile);
						}, 100);
						oFeedTile._timeoutId = setTimeout(function() {

							oFeedTile.cycle();
						}, oFeedTile.getDisplayDuration() * 1000);
					}
				};

				$oFromFeed.bind("webkitTransitionEnd transitionend", fAfterTransition);
				$oToFeed.bind("webkitTransitionEnd transitionend", fAfterTransition);

				$oFromFeed.addClass('sapSuiteFTItemSliding').removeClass('sapSuiteFTItemCenter').addClass('sapSuiteFTItemLeft');
				$oToFeed.addClass('sapSuiteFTItemSliding').removeClass('sapSuiteFTItemRight').addClass('sapSuiteFTItemCenter');
			}, 60); // this value has been found by testing on actual devices; with "10" there are frequent "no-animation" issues, with "100" there are none, with "50" there are
					// very few
		} else {
			$oToFeed.css("left", "100%");
			$oToFeed.removeClass("sapSuiteFTItemHidden");

			$oToFeed.animate({
				left : "0%"
			}, 400);

			$oFromFeed.animate({
				left : "-100%"
			}, 400, function() {

				$oFromFeed.addClass("sapSuiteFTItemHidden");
				$oFromFeed.css("left", "0");
				oFeedTile.flipIds($oToFeed, $oFromFeed);

				setTimeout(function() {

					oFeedTile.setNextItemValues(oFeedTile);
				}, 100);
				oFeedTile._timeoutId = setTimeout(function() {

					oFeedTile.cycle();
				}, oFeedTile.getDisplayDuration() * 1000);
			});
		}

	};

	/**
	 * This function is called after the FeedTile is rendered
	 * 
	 * @private
	 */
	sap.suite.ui.commons.FeedTile.prototype.onAfterRendering = function() {

		var displayDuration = this.getDisplayDuration() * 1000;
		var that = this;

		if (this.getItems().length > 1) {
			if (typeof this._timeoutId === "number") {
				clearTimeout(this._timeoutId);
				delete this._timeoutId;
			}
			this._timeoutId = setTimeout(function() {

				that.cycle();
			}, displayDuration);
		}

	};

	/**
	 * Fire press event.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.FeedTile.prototype.onclick = function(oEvent) {

		//always fire the event
		var currentItem = this.getCurrentItem();
		var id = "";
		
		if (currentItem && currentItem.getId()) {
			id = currentItem.getId();
		}
		
		this.firePress({
			itemId : id
		});
		
	};

	/**
	 * Get the currently rendered FeedItem.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.FeedTile.prototype.getCurrentItem = function() {

		var items = this.getItems();
		if (items.length) {
			return items[this._currentItemIndex];
		}
	};

	/**
	 * Get the next rendered FeedItem.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.FeedTile.prototype.getNextItem = function() {

		var items = this.getItems();
		if (items.length && items.length > 1) {
			return items[(this._currentItemIndex + 1) % items.length];
		}
	};

	/**
	 * Get the next rendered FeedItem.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.FeedTile.prototype.setNextItemValues = function() {

		var oNextItem = this.getNextItem();
		var id = this.getId();

		var oBackgroundImage = oNextItem.getImage();
		if (!oBackgroundImage || !this.getDisplayArticleImage()) {
			oBackgroundImage = this.getDefaultImage();
		}

		jQuery("#" + id + "-next-feedTileImage").css("background-image", "url(" + jQuery.sap.encodeCSS(oBackgroundImage) + ")");
		jQuery("#" + id + "-next-feedTileTitle").html(jQuery.sap.encodeHTML(oNextItem.getTitle()));
		jQuery("#" + id + "-next-feedTileSource").html(jQuery.sap.encodeHTML(oNextItem.getSource()));
		jQuery("#" + id + "-next-feedTileAge").html(jQuery.sap.encodeHTML(sap.suite.ui.commons.util.FeedItemUtils.calculateFeedItemAge(oNextItem.getPublicationDate())));
	};

	/**
	 * Flip ids of feedTileImage, feedTileText, feedTileTitle, feedTileSource, feedTileAge.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.FeedTile.prototype.flipIds = function($oToFeed, $oFromFeed) {

		var id = this.getId();
		$oFromFeed.attr("id", id + "-next-feedTileImage");
		$oFromFeed.find("#" + id + "-feedTileText").attr("id", id + "-next-feedTileText");
		$oFromFeed.find("#" + id + "-feedTileTitle").attr("id", id + "-next-feedTileTitle");
		$oFromFeed.find("#" + id + "-feedTileSource").attr("id", id + "-next-feedTileSource");
		$oFromFeed.find("#" + id + "-feedTileAge").attr("id", id + "-next-feedTileAge");

		$oToFeed.attr("id", id + "-feedTileImage");
		$oToFeed.find("#" + id + "-next-feedTileText").attr("id", id + "-feedTileText");
		$oToFeed.find("#" + id + "-next-feedTileTitle").attr("id", id + "-feedTileTitle");
		$oToFeed.find("#" + id + "-next-feedTileSource").attr("id", id + "-feedTileSource");
		$oToFeed.find("#" + id + "-next-feedTileAge").attr("id", id + "-feedTileAge");
	};

	/**
	 * Set displayDuration property for the control
	 * 
	 * @param iDisplayDuration
	 *            {int}
	 * @public
	 */
	sap.suite.ui.commons.FeedTile.prototype.setDisplayDuration = function(iDisplayDuration) {

		if (iDisplayDuration < 3) {

			iDisplayDuration = 3;
			jQuery.sap.log.error("FeedTile: displayDuration should be equal or more than 3 seconds.");
		}
		this.setProperty("displayDuration", iDisplayDuration);
	};


	/**
	 * Set a new model of feed items, such as when a feed aggregator has collected the latest feed items. This model is staged (not immediately set on the control) to avoid
	 * re-rendering before the currently displayed article is faded out. Therefore a smooth transition between the display of feed items is always maintained.
	 * 
	 * @param oModel
	 *            Model of new feed items.
	 * @public
	 */
	sap.suite.ui.commons.FeedTile.prototype.stageModel = function(oModel) {

		this._stagedModel = oModel;
	};
	
	/**
	 * This function gets the image to display from the list of default images. If it is the first time, it gets a random image. Next times, it cycles through
	 * the list.
	 * 
	 * @private
	 */
	sap.suite.ui.commons.FeedTile.prototype.getDefaultImage = function() {

		var oDefaultImage = "";
		var oDefaultImages = this.getDefaultImages();
 
		if (oDefaultImages && oDefaultImages.length > 0) {
			var iLength = oDefaultImages.length;
			if (this._defaultImageIndex === -1) { //this is first time, select random image
		
				var iRandom = Math.floor(Math.random() * iLength); 
				this._defaultImageIndex = iRandom;
				oDefaultImage = oDefaultImages[iRandom];
			} else { //this is not the first time, get the next image from list
				var iIndex = (this._defaultImageIndex + 1) >= iLength ? 0 : this._defaultImageIndex + 1;
				this._defaultImageIndex = iIndex;
				oDefaultImage = oDefaultImages[iIndex];
			} 
		}
		
		return oDefaultImage; 
	};
	
	/**
	 * Validate the array of URI first and then set the defaultImages property
	 * 
	 * @param oDefaultImages
	 *            {object[]}
	 * @public
	 */
	sap.suite.ui.commons.FeedTile.prototype.setDefaultImages = function(oDefaultImages) {

		if (oDefaultImages && oDefaultImages.length > 0) {
		
			var oValidDefaultImages = [];
			var oDefaultImage = null;
			for (var i = 0; i < oDefaultImages.length; i++) {
				oDefaultImage = oDefaultImages[i];
				var validUrl = jQuery.sap.validateUrl(oDefaultImage);
				 
				if (validUrl) {
					oValidDefaultImages.push(oDefaultImage);
				} else {
					jQuery.sap.log.error("Invalid Url:'" + oDefaultImage);
				}
			}
				
			if (oValidDefaultImages.length <= 0) {
				jQuery.sap.log.error("Default Images are not set because supplied Urls are invalid");
			} else {
				this.setProperty("defaultImages", oValidDefaultImages);
			}
		}
	};

}());

}; // end of sap/suite/ui/commons/FeedTile.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.FeedTileRenderer') ) {
// @copyright 

jQuery.sap.declare("sap.suite.ui.commons.FeedTileRenderer");



/**
 * @class FeedTile renderer.
 * @static
 */
sap.suite.ui.commons.FeedTileRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control}
 *            oFeedTile an object representation of the control that should be rendered
 */
sap.suite.ui.commons.FeedTileRenderer.render = function(oRm, oFeedTile) {

	var oLocale = sap.ui.getCore().getConfiguration().getLanguage();
	var oResBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons", oLocale);

	var oCurrentItem = oFeedTile.getCurrentItem();		

	oRm.write("<div");
	oRm.writeControlData(oFeedTile);
	oRm.writeAttribute("tabindex", "0");
	oRm.addClass("sapSuiteUiCommonsFeedTile");
	oRm.addClass("sapSuiteUiCommonsPointer");
	oRm.writeClasses();

	var sFeedTileTitle = "";
	if (oFeedTile.getTooltip_AsString()) {
		oRm.writeAttributeEscaped("title", oFeedTile.getTooltip_AsString());
		sFeedTileTitle = oFeedTile.getTooltip_AsString();
	}
	
	var sNewsItemTitle = "";
	if(oCurrentItem){
		sNewsItemTitle = oCurrentItem.getTitle();
	}
	
	oRm.writeAccessibilityState(oFeedTile, {
		role : 'link',		
		label : sFeedTileTitle + " " + sNewsItemTitle	
	});

	oRm.write(">");

	if (oCurrentItem) {
		sap.suite.ui.commons.FeedTileRenderer.renderFeedItem(oRm, oFeedTile, oCurrentItem, oFeedTile.getId());
		var oNextItem = oFeedTile.getNextItem();
		if (oNextItem) {
			sap.suite.ui.commons.FeedTileRenderer.renderFeedItem(oRm, oFeedTile, oNextItem, oFeedTile.getId() + '-next', true);
		}
	} else { // This is a condition when no feed items exist. Add a title that displays the condition & also render the defaultImage

		var oBackgroundImage = oFeedTile.getDefaultImage();

		if (oBackgroundImage) {
			oRm.write('<div id="' + oFeedTile.getId() + '-feedTileImage"');
			oRm.write(" style='background-image:url(");
			oRm.writeEscaped(oBackgroundImage);
			oRm.write(");'");
			oRm.addClass("sapSuiteUiCommonsFeedTileBackground");
			oRm.writeClasses();
			oRm.write(">");
		}

		var sTitle = oResBundle.getText("FEEDTILE_NOARTICLE_TITLE"); // "No articles to display";

		oRm.write('<div id="' + oFeedTile.getId() + '-feedTileText"');
		oRm.addClass("sapSuiteUiCommonsFeedTileText");
		oRm.writeClasses();
		oRm.write(">");
		oRm.write('<div id="' + oFeedTile.getId() + '-feedTileTitle"');
		oRm.addClass("sapSuiteUiCommonsFeedTileTitle");
		oRm.writeClasses();
		oRm.write(">");
		oRm.writeEscaped(sTitle);
		oRm.write("</div>");
		oRm.write("</div>"); // sapSuiteUiCommonsFeedTileText
		if (oBackgroundImage) {
			oRm.write("</div>"); // sapSuiteUiCommonsFeedTileBackground
		}
	}

	oRm.write("</div>"); // sapSuiteUiCommonsFeedTile
};

sap.suite.ui.commons.FeedTileRenderer.renderFeedItem = function(oRm, oFeedTile, oFeedItem, itemId, hidden) {

	var oBackgroundImage = oFeedItem.getImage();
	if (!oBackgroundImage || !oFeedTile.getDisplayArticleImage()) {
		oBackgroundImage = oFeedTile.getDefaultImage();
	}

	if (oBackgroundImage) {
		oRm.write('<div id="' + itemId + '-feedTileImage"');
		oRm.write(" style='background-image:url(");
		oRm.writeEscaped(oBackgroundImage);
		oRm.write(");'");
		oRm.addClass("sapSuiteUiCommonsFeedTileBackground");
		if (hidden) {
			oRm.addClass("sapSuiteFTItemHidden");
		}
		oRm.writeClasses();
		oRm.write(">");
	}

	oRm.write('<div id="' + itemId + '-feedTileText"');
	oRm.addClass("sapSuiteUiCommonsFeedTileText");
	oRm.writeClasses();
	oRm.write(">");

	var sTitle = oFeedItem.getTitle();
	if (sTitle) {
		oRm.write('<div id="' + itemId + '-feedTileTitle"');		
		oRm.addClass("sapSuiteUiCommonsFeedTileTitle");
		oRm.writeClasses();
		oRm.write(">");
		oRm.writeEscaped(sTitle);
		oRm.write("</div>");

		oRm.write("<div");
		oRm.addClass("sapSuiteUiCommonsFeedTileLowerText");
		oRm.writeClasses();
		oRm.write(">");

		oRm.write('<div id="' + itemId + '-feedTileSource"');
		oRm.addClass("sapSuiteUiCommonsFeedTileSource");
		oRm.writeClasses();
		oRm.write(">");
		oRm.writeEscaped(oFeedItem.getSource());
		oRm.write("</div>");

		oRm.write('<div id="' + itemId + '-feedTileAge"');
		oRm.addClass("sapSuiteUiCommonsFeedTileAge");
		oRm.writeClasses();
		oRm.write(">");
		oRm.writeEscaped(sap.suite.ui.commons.util.FeedItemUtils.calculateFeedItemAge(oFeedItem.getPublicationDate()));
		oRm.write("</div>");
		oRm.write("</div>");
	}
	oRm.write("</div>"); // sapSuiteUiCommonsFeedTileText
	oRm.write("</div>"); // sapSuiteUiCommonsFeedTileBackground

};

}; // end of sap/suite/ui/commons/FeedTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.KpiTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.KpiTile.
jQuery.sap.declare("sap.suite.ui.commons.KpiTile");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new KpiTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getDoubleFontSize doubleFontSize} : boolean (default: true)</li>
 * <li>{@link #getValueUnit valueUnit} : string</li>
 * <li>{@link #getValueScale valueScale} : string</li>
 * <li>{@link #getValueStatus valueStatus} : sap.suite.ui.commons.ValueStatus (default: sap.suite.ui.commons.ValueStatus.Neutral)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control is used in UnifiedThingInspector to display object-related KPIs in a factsheet.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.KpiTile
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.KpiTile", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"value" : {type : "string", group : "Misc", defaultValue : null},
		"description" : {type : "string", group : "Misc", defaultValue : null},
		"doubleFontSize" : {type : "boolean", group : "Misc", defaultValue : true},
		"valueUnit" : {type : "string", group : "Misc", defaultValue : null},
		"valueScale" : {type : "string", group : "Misc", defaultValue : null},
		"valueStatus" : {type : "sap.suite.ui.commons.ValueStatus", group : "Misc", defaultValue : sap.suite.ui.commons.ValueStatus.Neutral}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.KpiTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.KpiTile.extend
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * The Value field.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * @name sap.suite.ui.commons.KpiTile#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.suite.ui.commons.KpiTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.KpiTile#setValue
 * @function
 */


/**
 * Getter for property <code>description</code>.
 * The Description field.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>description</code>
 * @public
 * @name sap.suite.ui.commons.KpiTile#getDescription
 * @function
 */

/**
 * Setter for property <code>description</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDescription  new value for property <code>description</code>
 * @return {sap.suite.ui.commons.KpiTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.KpiTile#setDescription
 * @function
 */


/**
 * Getter for property <code>doubleFontSize</code>.
 * If true, the value text will have 2 rem, if false - 1 rem.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>doubleFontSize</code>
 * @public
 * @name sap.suite.ui.commons.KpiTile#getDoubleFontSize
 * @function
 */

/**
 * Setter for property <code>doubleFontSize</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDoubleFontSize  new value for property <code>doubleFontSize</code>
 * @return {sap.suite.ui.commons.KpiTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.KpiTile#setDoubleFontSize
 * @function
 */


/**
 * Getter for property <code>valueUnit</code>.
 * The percent sign, currency symbol or unit for a value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>valueUnit</code>
 * @public
 * @name sap.suite.ui.commons.KpiTile#getValueUnit
 * @function
 */

/**
 * Setter for property <code>valueUnit</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValueUnit  new value for property <code>valueUnit</code>
 * @return {sap.suite.ui.commons.KpiTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.KpiTile#setValueUnit
 * @function
 */


/**
 * Getter for property <code>valueScale</code>.
 * The scale of a value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>valueScale</code>
 * @public
 * @name sap.suite.ui.commons.KpiTile#getValueScale
 * @function
 */

/**
 * Setter for property <code>valueScale</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValueScale  new value for property <code>valueScale</code>
 * @return {sap.suite.ui.commons.KpiTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.KpiTile#setValueScale
 * @function
 */


/**
 * Getter for property <code>valueStatus</code>.
 * The status color of the value. Depending on the status the tile is displayed in different colors.
 *
 * Default value is <code>Neutral</code>
 *
 * @return {sap.suite.ui.commons.ValueStatus} the value of property <code>valueStatus</code>
 * @public
 * @name sap.suite.ui.commons.KpiTile#getValueStatus
 * @function
 */

/**
 * Setter for property <code>valueStatus</code>.
 *
 * Default value is <code>Neutral</code> 
 *
 * @param {sap.suite.ui.commons.ValueStatus} oValueStatus  new value for property <code>valueStatus</code>
 * @return {sap.suite.ui.commons.KpiTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.KpiTile#setValueStatus
 * @function
 */


// Start of sap/suite/ui/commons/KpiTile.js
///**
// * This file defines behavior for the control,
// */
//sap.suite.ui.commons.KpiTile.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap/suite/ui/commons/KpiTile.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.LaunchTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.LaunchTile.
jQuery.sap.declare("sap.suite.ui.commons.LaunchTile");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new LaunchTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getLink link} : sap.ui.core.URI</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.LaunchTile#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control launches a URL.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @experimental Since version 1.14. 
 * API is not yet finished and might change completely
 * @name sap.suite.ui.commons.LaunchTile
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.LaunchTile", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"link" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.LaunchTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.LaunchTile.extend
 * @function
 */

sap.suite.ui.commons.LaunchTile.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>title</code>.
 * Descriptive title of the launch destination.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.LaunchTile#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.LaunchTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.LaunchTile#setTitle
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Icon associated with the launch destination.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.suite.ui.commons.LaunchTile#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.suite.ui.commons.LaunchTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.LaunchTile#setIcon
 * @function
 */


/**
 * Getter for property <code>link</code>.
 * The launch destination.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>link</code>
 * @public
 * @name sap.suite.ui.commons.LaunchTile#getLink
 * @function
 */

/**
 * Setter for property <code>link</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sLink  new value for property <code>link</code>
 * @return {sap.suite.ui.commons.LaunchTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.LaunchTile#setLink
 * @function
 */


/**
 * The event fired when the user clicks on the control. 
 *
 * @name sap.suite.ui.commons.LaunchTile#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.suite.ui.commons.LaunchTile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.LaunchTile</code>.<br/> itself. 
 *  
 * The event fired when the user clicks on the control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.LaunchTile</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.LaunchTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.LaunchTile#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.suite.ui.commons.LaunchTile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.LaunchTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.LaunchTile#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.LaunchTile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.LaunchTile#firePress
 * @function
 */


// Start of sap/suite/ui/commons/LaunchTile.js
///**
// * This file defines behavior for the control,
// */
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained



// sap.suite.ui.commons.LaunchTile.prototype.init = function() {

// do something for initialization...
// };

/**
 * Called when the control is destroyed.
 * 
 * @private
 */
sap.suite.ui.commons.LaunchTile.prototype.exit = function() {

    if (this._iconImage) {
        this._iconImage.destroy();
        this._iconImage = undefined;
    }

};

/**
 * Sets the launch tile's image.
 * 
 */
sap.suite.ui.commons.LaunchTile.prototype.setIcon = function(sURI) {

    this.setProperty("icon", sURI, true);

    var sImgId = this.getId() + "-img";
	var sSize = "72px";
	
	var mProperties = { 
		src : sURI,
		height : sSize,
		width : sSize,
		size: sSize		
	};
	
	this._iconImage = sap.m.ImageHelper.getImageControl(sImgId, this._iconImage, this, mProperties);
    
    return this;
};

/**
 * Fire press event.
 * 
 * @private
 */
sap.suite.ui.commons.LaunchTile.prototype.onclick = function(oEvent) {

    this.firePress({
        title : this.getTitle(),
        link : this.getLink()
    });

};
}; // end of sap/suite/ui/commons/LaunchTile.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.LinkActionSheet') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.LinkActionSheet.
jQuery.sap.declare("sap.suite.ui.commons.LinkActionSheet");

jQuery.sap.require('sap.m.ActionSheet'); // unlisted dependency retained



/**
 * Constructor for a new LinkActionSheet.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.LinkActionSheet#event:itemPress itemPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ActionSheet#constructor sap.m.ActionSheet}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control contains one or more sap.m.Button controls or sap.ui.commons.Link controls. The LinkActionSheet control is closed if the user chooses one of the buttons or links. It looks similar to sap.m.Dialog in iPhone and Android, and to sap.m.Popover in iPad.
 * @extends sap.m.ActionSheet
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.LinkActionSheet
 */
sap.m.ActionSheet.extend("sap.suite.ui.commons.LinkActionSheet", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	aggregations : {
    	"items" : {type : "sap.ui.core.Control", multiple : true, singularName : "item"}
	},
	events : {
		"itemPress" : {allowPreventDefault : true}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.LinkActionSheet with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.LinkActionSheet.extend
 * @function
 */

sap.suite.ui.commons.LinkActionSheet.M_EVENTS = {'itemPress':'itemPress'};


/**
 * Getter for aggregation <code>items</code>.<br/>
 * These buttons or links are added to the content area in the LinkActionSheet control. If the user chooses a button or a link, the LinkActionSheet is closed before the event listener is called.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.suite.ui.commons.LinkActionSheet#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Control}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.LinkActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.LinkActionSheet#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Control}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.LinkActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.LinkActionSheet#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.core.Control} vItem the item to remove or its index or id
 * @return {sap.ui.core.Control} the removed item or null
 * @public
 * @name sap.suite.ui.commons.LinkActionSheet#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.LinkActionSheet#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.LinkActionSheet#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.suite.ui.commons.LinkActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.LinkActionSheet#destroyItems
 * @function
 */


/**
 * The event is fired when the user chooses any item. 
 *
 * @name sap.suite.ui.commons.LinkActionSheet#itemPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.item Object that initiated event.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'itemPress' event of this <code>sap.suite.ui.commons.LinkActionSheet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.LinkActionSheet</code>.<br/> itself. 
 *  
 * The event is fired when the user chooses any item. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.LinkActionSheet</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.LinkActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.LinkActionSheet#attachItemPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'itemPress' event of this <code>sap.suite.ui.commons.LinkActionSheet</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.LinkActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.LinkActionSheet#detachItemPress
 * @function
 */

/**
 * Fire event itemPress to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * * 
 * Expects following event parameters:
 * <ul>
 * <li>'item' of type <code>sap.ui.core.Control</code> Object that initiated event.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.suite.ui.commons.LinkActionSheet#fireItemPress
 * @function
 */


// Start of sap/suite/ui/commons/LinkActionSheet.js
///**
// * This file defines behavior for the control,
// */

sap.suite.ui.commons.LinkActionSheet.prototype.init = function() {
	sap.m.ActionSheet.prototype.init.apply(this);
	this.getButtons = this.getItems;
};

sap.suite.ui.commons.LinkActionSheet.prototype._preProcessActionItem = function(oItem){
	if(sap.m.Dialog._bOneDesign){
		if( oItem.getType  &&  oItem.getType() !== sap.m.ButtonType.Accept &&  oItem.getType() !== sap.m.ButtonType.Reject){
			oItem.setType(sap.m.ButtonType.Transparent);
			oItem.addStyleClass("sapMBtnInverted"); // dark background
		}
	}
	oItem.onsapenter = function() {
		this._bEnterWasPressed = true;
	};

	return this;
};

sap.suite.ui.commons.LinkActionSheet.prototype._itemSelected = function(event){
	var oItem = event.getSource();
	
	if (this.fireItemPress({item: oItem})) {
		if(!(jQuery.device.is.ipad || (sap.m.Dialog._bOneDesign && !jQuery.device.is.phone)) && this._parent){
			this._parent._oCloseTrigger = this;
		}
		this.close();
	}
	oItem._bEnterWasPressed = undefined;
};

/* Override API methods */
sap.suite.ui.commons.LinkActionSheet.prototype.addItem = function(oItem) {
	this.addAggregation("items",oItem, false);
	this._preProcessActionItem(oItem);
	oItem.attachPress(this._itemSelected, this);
	return this;
};
sap.suite.ui.commons.LinkActionSheet.prototype.insertItem = function(oItem, iIndex) {
	this.insertAggregation("items",oItem, iIndex, false);
	this._preProcessActionItem(oItem);
	oItem.attachPress(this._itemSelected, this);
	return this;
};
sap.suite.ui.commons.LinkActionSheet.prototype.removeItem = function(oItem) {
	var result = this.removeAggregation("items",oItem, false);
	if (result) {
		result.detachPress(this._itemSelected, this);
		oItem.onsapenter = undefined;
	}
	return result;
};
sap.suite.ui.commons.LinkActionSheet.prototype.removeAllItems = function() {
	var result = this.removeAllAggregation("items", false);
	var that=this;
	jQuery.each(result, function(i, oItem) {
		oItem.detachPress(that._itemSelected, that);
		oItem.onsapenter = undefined;
	});
	return result;
};
sap.suite.ui.commons.LinkActionSheet.prototype.clone = function() {
	var aItems = this.getItems();
	for ( var i = 0; i < aItems.length; i++) {
		var oItem = aItems[i];
		oItem.detachPress(this._itemSelected, this);
	}

	var oClone = sap.ui.core.Control.prototype.clone.apply(this, arguments);

	for ( var i = 0; i < aItems.length; i++) {
		var oItem = aItems[i];
		oItem.attachPress(this._itemSelected, this);
	}

	return oClone;
};
}; // end of sap/suite/ui/commons/LinkActionSheet.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NoteTaker') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.NoteTaker.
jQuery.sap.declare("sap.suite.ui.commons.NoteTaker");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new NoteTaker.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisibleNotes visibleNotes} : int (default: 2)</li>
 * <li>{@link #getCardViewAllTrigger cardViewAllTrigger} : int (default: 1800)</li>
 * <li>{@link #getFilterCriteria filterCriteria} : object</li>
 * <li>{@link #getAttachmentUploadUrl attachmentUploadUrl} : string</li>
 * <li>{@link #getAttachmentName attachmentName} : string (default: 'attachment')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCards cards} : sap.suite.ui.commons.NoteTakerCard[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.NoteTaker#event:addCard addCard} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTaker#event:deleteCard deleteCard} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTaker#event:editCard editCard} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTaker#event:attachmentSelect attachmentSelect} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTaker#event:attachmentUploadComplete attachmentUploadComplete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTaker#event:attachmentDelete attachmentDelete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTaker#event:attachmentClick attachmentClick} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control allows you to create and store your notes for further reference.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.NoteTaker
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.NoteTaker", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"getAllTags", "setNextCardUid", "uploadAttachment", "setAttachmentData", "handleAttachmentUploadFail", "setNextCardAttachmentUrl"
	],

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"visibleNotes" : {type : "int", group : "Misc", defaultValue : 2},
		"cardViewAllTrigger" : {type : "int", group : "Misc", defaultValue : 1800},
		"filterCriteria" : {type : "object", group : "Misc", defaultValue : null},
		"attachmentUploadUrl" : {type : "string", group : "Misc", defaultValue : null},
		"attachmentName" : {type : "string", group : "Misc", defaultValue : 'attachment'}
	},
	aggregations : {
    	"cards" : {type : "sap.suite.ui.commons.NoteTakerCard", multiple : true, singularName : "card"}, 
    	"carousel" : {type : "sap.ui.commons.Carousel", multiple : false, visibility : "hidden"}
	},
	events : {
		"addCard" : {}, 
		"deleteCard" : {}, 
		"editCard" : {}, 
		"attachmentSelect" : {}, 
		"attachmentUploadComplete" : {}, 
		"attachmentDelete" : {}, 
		"attachmentClick" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.NoteTaker with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.NoteTaker.extend
 * @function
 */

sap.suite.ui.commons.NoteTaker.M_EVENTS = {'addCard':'addCard','deleteCard':'deleteCard','editCard':'editCard','attachmentSelect':'attachmentSelect','attachmentUploadComplete':'attachmentUploadComplete','attachmentDelete':'attachmentDelete','attachmentClick':'attachmentClick'};


/**
 * Getter for property <code>visibleNotes</code>.
 * Number of notes to display.
 *
 * Default value is <code>2</code>
 *
 * @return {int} the value of property <code>visibleNotes</code>
 * @public
 * @name sap.suite.ui.commons.NoteTaker#getVisibleNotes
 * @function
 */

/**
 * Setter for property <code>visibleNotes</code>.
 *
 * Default value is <code>2</code> 
 *
 * @param {int} iVisibleNotes  new value for property <code>visibleNotes</code>
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#setVisibleNotes
 * @function
 */


/**
 * Getter for property <code>cardViewAllTrigger</code>.
 * The View All link appears in the Note Taker card when length of a card body text exceeds the specified value. The updated value of this property is not applied to the existing cards.
 *
 * Default value is <code>1800</code>
 *
 * @return {int} the value of property <code>cardViewAllTrigger</code>
 * @public
 * @name sap.suite.ui.commons.NoteTaker#getCardViewAllTrigger
 * @function
 */

/**
 * Setter for property <code>cardViewAllTrigger</code>.
 *
 * Default value is <code>1800</code> 
 *
 * @param {int} iCardViewAllTrigger  new value for property <code>cardViewAllTrigger</code>
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#setCardViewAllTrigger
 * @function
 */


/**
 * Getter for property <code>filterCriteria</code>.
 * A composite object containing criteria for filtering cards in the Note Taker.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>filterCriteria</code>
 * @public
 * @name sap.suite.ui.commons.NoteTaker#getFilterCriteria
 * @function
 */

/**
 * Setter for property <code>filterCriteria</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oFilterCriteria  new value for property <code>filterCriteria</code>
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#setFilterCriteria
 * @function
 */


/**
 * Getter for property <code>attachmentUploadUrl</code>.
 * Defines a path on the server where the attached files are uploaded.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>attachmentUploadUrl</code>
 * @public
 * @name sap.suite.ui.commons.NoteTaker#getAttachmentUploadUrl
 * @function
 */

/**
 * Setter for property <code>attachmentUploadUrl</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAttachmentUploadUrl  new value for property <code>attachmentUploadUrl</code>
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#setAttachmentUploadUrl
 * @function
 */


/**
 * Getter for property <code>attachmentName</code>.
 * The attachment property name for identification on the server side after sending data to the server.
 *
 * Default value is <code>attachment</code>
 *
 * @return {string} the value of property <code>attachmentName</code>
 * @public
 * @name sap.suite.ui.commons.NoteTaker#getAttachmentName
 * @function
 */

/**
 * Setter for property <code>attachmentName</code>.
 *
 * Default value is <code>attachment</code> 
 *
 * @param {string} sAttachmentName  new value for property <code>attachmentName</code>
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#setAttachmentName
 * @function
 */


/**
 * Getter for aggregation <code>cards</code>.<br/>
 * This aggregation allows you to add note cards to the Note Taker and remove them from the Note Taker.
 * 
 * @return {sap.suite.ui.commons.NoteTakerCard[]}
 * @public
 * @name sap.suite.ui.commons.NoteTaker#getCards
 * @function
 */


/**
 * Inserts a card into the aggregation named <code>cards</code>.
 *
 * @param {sap.suite.ui.commons.NoteTakerCard}
 *          oCard the card to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the card should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the card is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the card is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#insertCard
 * @function
 */

/**
 * Adds some card <code>oCard</code> 
 * to the aggregation named <code>cards</code>.
 *
 * @param {sap.suite.ui.commons.NoteTakerCard}
 *            oCard the card to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#addCard
 * @function
 */

/**
 * Removes an card from the aggregation named <code>cards</code>.
 *
 * @param {int | string | sap.suite.ui.commons.NoteTakerCard} vCard the card to remove or its index or id
 * @return {sap.suite.ui.commons.NoteTakerCard} the removed card or null
 * @public
 * @name sap.suite.ui.commons.NoteTaker#removeCard
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>cards</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.NoteTakerCard[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.NoteTaker#removeAllCards
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.NoteTakerCard</code> in the aggregation named <code>cards</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.NoteTakerCard}
 *            oCard the card whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.NoteTaker#indexOfCard
 * @function
 */
	

/**
 * Destroys all the cards in the aggregation 
 * named <code>cards</code>.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#destroyCards
 * @function
 */


/**
 * The event is fired when a new card is added if no data binding is available.
 * If data binding is available, the event is fired to notify a developer to add an element to the model. 
 *
 * @name sap.suite.ui.commons.NoteTaker#addCard
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.title The title of the note to be added.
 * @param {string} oControlEvent.getParameters.body The text of the note to be added.
 * @param {object} oControlEvent.getParameters.timestamp The timestamp of the note to be added.
 * @param {int} oControlEvent.getParameters.viewAllTrigger The View All link appears in the Note Taker card when length of a body text exceeds the specified value.
 * @param {boolean} oControlEvent.getParameters.thumbUp Indicates positive information for a new card.
 * @param {boolean} oControlEvent.getParameters.thumbDown Indicates negative information for a new card.
 * @param {string} oControlEvent.getParameters.attachmentFilename Stores the name of the file attached to the card.
 * @param {string} oControlEvent.getParameters.uid The unique ID if available.
 * @param {string} oControlEvent.getParameters.attachmentUrl Stores the URL of the file attached to the card.
 * @param {sap.suite.ui.commons.NoteTakerCard} oControlEvent.getParameters.card A newly created card if no data binding is available. If data binding is available, this parameter is empty.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'addCard' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself. 
 *  
 * The event is fired when a new card is added if no data binding is available.
 * If data binding is available, the event is fired to notify a developer to add an element to the model. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#attachAddCard
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'addCard' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#detachAddCard
 * @function
 */

/**
 * Fire event addCard to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'title' of type <code>string</code> The title of the note to be added.</li>
 * <li>'body' of type <code>string</code> The text of the note to be added.</li>
 * <li>'timestamp' of type <code>object</code> The timestamp of the note to be added.</li>
 * <li>'viewAllTrigger' of type <code>int</code> The View All link appears in the Note Taker card when length of a body text exceeds the specified value.</li>
 * <li>'thumbUp' of type <code>boolean</code> Indicates positive information for a new card.</li>
 * <li>'thumbDown' of type <code>boolean</code> Indicates negative information for a new card.</li>
 * <li>'attachmentFilename' of type <code>string</code> Stores the name of the file attached to the card.</li>
 * <li>'uid' of type <code>string</code> The unique ID if available.</li>
 * <li>'attachmentUrl' of type <code>string</code> Stores the URL of the file attached to the card.</li>
 * <li>'card' of type <code>sap.suite.ui.commons.NoteTakerCard</code> A newly created card if no data binding is available. If data binding is available, this parameter is empty.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTaker#fireAddCard
 * @function
 */


/**
 * The event is fired when a new card is deleted if no data binding is available.
 * If data binding is available, the event is fired to notify a developer to delete the element from the model. 
 *
 * @name sap.suite.ui.commons.NoteTaker#deleteCard
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.title The title of the card to be deleted.
 * @param {string} oControlEvent.getParameters.body The text of the card to be deleted.
 * @param {string} oControlEvent.getParameters.timestamp The timestamp of the card to be deleted.
 * @param {string} oControlEvent.getParameters.uid The unique ID that was set by an application developer.
 * @param {boolean} oControlEvent.getParameters.thumbUp Indicates positive information for the deleted card.
 * @param {boolean} oControlEvent.getParameters.thumbDown Indicates negative information for the deleted card.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deleteCard' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself. 
 *  
 * The event is fired when a new card is deleted if no data binding is available.
 * If data binding is available, the event is fired to notify a developer to delete the element from the model. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#attachDeleteCard
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deleteCard' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#detachDeleteCard
 * @function
 */

/**
 * Fire event deleteCard to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'title' of type <code>string</code> The title of the card to be deleted.</li>
 * <li>'body' of type <code>string</code> The text of the card to be deleted.</li>
 * <li>'timestamp' of type <code>string</code> The timestamp of the card to be deleted.</li>
 * <li>'uid' of type <code>string</code> The unique ID that was set by an application developer.</li>
 * <li>'thumbUp' of type <code>boolean</code> Indicates positive information for the deleted card.</li>
 * <li>'thumbDown' of type <code>boolean</code> Indicates negative information for the deleted card.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTaker#fireDeleteCard
 * @function
 */


/**
 * The event is fired when a new card has been edited. 
 *
 * @name sap.suite.ui.commons.NoteTaker#editCard
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.title The title of the edited card.
 * @param {string} oControlEvent.getParameters.body A new text of the edited card.
 * @param {string} oControlEvent.getParameters.timestamp A new timestamp of the edited card.
 * @param {string} oControlEvent.getParameters.uid A unique ID that was set by an application developer.
 * @param {boolean} oControlEvent.getParameters.thumbUp Indicates positive information for the edited card.
 * @param {boolean} oControlEvent.getParameters.thumbDown Indicates negative information for the edited card.
 * @param {object} oControlEvent.getParameters.tags Updated array of the String type tags applied to the card during editing.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'editCard' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself. 
 *  
 * The event is fired when a new card has been edited. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#attachEditCard
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'editCard' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#detachEditCard
 * @function
 */

/**
 * Fire event editCard to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'title' of type <code>string</code> The title of the edited card.</li>
 * <li>'body' of type <code>string</code> A new text of the edited card.</li>
 * <li>'timestamp' of type <code>string</code> A new timestamp of the edited card.</li>
 * <li>'uid' of type <code>string</code> A unique ID that was set by an application developer.</li>
 * <li>'thumbUp' of type <code>boolean</code> Indicates positive information for the edited card.</li>
 * <li>'thumbDown' of type <code>boolean</code> Indicates negative information for the edited card.</li>
 * <li>'tags' of type <code>object</code> Updated array of the String type tags applied to the card during editing.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTaker#fireEditCard
 * @function
 */


/**
 * The event is fired when the value of attached file has been changed. 
 *
 * @name sap.suite.ui.commons.NoteTaker#attachmentSelect
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.filename A name of the attached file.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentSelect' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself. 
 *  
 * The event is fired when the value of attached file has been changed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#attachAttachmentSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentSelect' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#detachAttachmentSelect
 * @function
 */

/**
 * Fire event attachmentSelect to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'filename' of type <code>string</code> A name of the attached file.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTaker#fireAttachmentSelect
 * @function
 */


/**
 * Fire event uploadComplete to attached listeners. 
 *
 * @name sap.suite.ui.commons.NoteTaker#attachmentUploadComplete
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.response The response message of the String type  that comes from the server. On the server side this response has to be put within the "body" tags of the response document of the iFrame. It can consist of a return code and an optional message. This does not work in cross-domain scenarios.
 * @param {string} oControlEvent.getParameters.uid The unique ID of the card.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentUploadComplete' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself. 
 *  
 * Fire event uploadComplete to attached listeners. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#attachAttachmentUploadComplete
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentUploadComplete' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#detachAttachmentUploadComplete
 * @function
 */

/**
 * Fire event attachmentUploadComplete to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'response' of type <code>string</code> The response message of the String type  that comes from the server. On the server side this response has to be put within the "body" tags of the response document of the iFrame. It can consist of a return code and an optional message. This does not work in cross-domain scenarios.</li>
 * <li>'uid' of type <code>string</code> The unique ID of the card.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTaker#fireAttachmentUploadComplete
 * @function
 */


/**
 * The event is fired, when user deletes the attached file. 
 *
 * @name sap.suite.ui.commons.NoteTaker#attachmentDelete
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.filename A name of the attached file.
 * @param {string} oControlEvent.getParameters.uid The unique ID of the card.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentDelete' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself. 
 *  
 * The event is fired, when user deletes the attached file. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#attachAttachmentDelete
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentDelete' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#detachAttachmentDelete
 * @function
 */

/**
 * Fire event attachmentDelete to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'filename' of type <code>string</code> A name of the attached file.</li>
 * <li>'uid' of type <code>string</code> The unique ID of the card.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTaker#fireAttachmentDelete
 * @function
 */


/**
 * The event is fired when a user presses the attachment link. 
 *
 * @name sap.suite.ui.commons.NoteTaker#attachmentClick
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.uid The unique ID of the card.
 * @param {string} oControlEvent.getParameters.isCardAttachment If true, a user chooses the attachment in the Note card. If false, a user chooses the attachment in the Feeder card.
 * @param {string} oControlEvent.getParameters.filename A name of the attached file.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentClick' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself. 
 *  
 * The event is fired when a user presses the attachment link. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#attachAttachmentClick
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentClick' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#detachAttachmentClick
 * @function
 */

/**
 * Fire event attachmentClick to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'uid' of type <code>string</code> The unique ID of the card.</li>
 * <li>'isCardAttachment' of type <code>string</code> If true, a user chooses the attachment in the Note card. If false, a user chooses the attachment in the Feeder card.</li>
 * <li>'filename' of type <code>string</code> A name of the attached file.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTaker#fireAttachmentClick
 * @function
 */


/**
 * Returns tags from all cards in the control.
 *
 * @name sap.suite.ui.commons.NoteTaker.prototype.getAllTags
 * @function

 * @type object
 * @public
 */


/**
 * Sets a iunique ID of the next card.
 *
 * @name sap.suite.ui.commons.NoteTaker.prototype.setNextCardUid
 * @function
 * @param {string} 
 *         sSUid
 *         

 * @type void
 * @public
 */


/**
 * Uploads the attached file to the server. Exposed from the FileUploader control.
 *
 * @name sap.suite.ui.commons.NoteTaker.prototype.uploadAttachment
 * @function

 * @type void
 * @public
 */


/**
 * Additional data that is sent to the back end service. Data will be transmitted as a value of a hidden input where the name is derived from the name property with suffix -data. Exposed from the FileUploader control.
 *
 * @name sap.suite.ui.commons.NoteTaker.prototype.setAttachmentData
 * @function
 * @param {string} 
 *         sAdditionalData
 *         Actual additional data.

 * @type void
 * @public
 */


/**
 * Must be called when the file upload to the server fail and it is needed to remove the attachment panel from the Feeder card.
 *
 * @name sap.suite.ui.commons.NoteTaker.prototype.handleAttachmentUploadFail
 * @function

 * @type void
 * @public
 */


/**
 * Sets a URL for downloading the attachment. It must be called in the attachmentUploadComplete event handler.
 *
 * @name sap.suite.ui.commons.NoteTaker.prototype.setNextCardAttachmentUrl
 * @function
 * @param {string} 
 *         sSUrl
 *         The download URL of attachment for a card that will be added when a user chooses the Add button.

 * @type void
 * @public
 */


// Start of sap/suite/ui/commons/NoteTaker.js
jQuery.sap.require('sap.ui.commons.Carousel'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.SearchField'); // unlisted dependency retained


(function() {

   /**
    * The NoteTaker initialization hook.
    * Creates a carousel control initializing it with required parameters.
    * Adds NoteTakerFeeder to the created carousel control.
    * 
    * @private
    */ 
    sap.suite.ui.commons.NoteTaker.prototype.init = function() {
        this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
        this._bFilterTagPopupOpen = false;
        this._bSearchPopupOpen = false;
        var that = this;

        this._carousel = new sap.ui.commons.Carousel({
            id: this.getId() + "-carousel",
            height: "540px"
        });

        this.setAggregation("carousel", this._carousel);

        this._carousel.addContent(this._createFeederAndAddToThis());

        this._notFilteredCards = [];

        this._oHomeButton = new sap.ui.commons.Button({
            id: this.getId() + "-home-button",
            tooltip: this._rb.getText("NOTETAKER_BUTTON_HOME_TOOLTIP"),
            press: function() {
                that._handleHomeButton();
            }
        });
        this._oHomeButton.addStyleClass("sapSuiteUiCommonsNoteTakerHomeButton");

        this._oFilterTagButton = new sap.ui.commons.Button({
            id: this.getId() + "-filterTag-button",
            tooltip: this._rb.getText("NOTETAKER_BUTTON_FILTER_TAG_TOOLTIP"),
            press : function() {
                that._toggleFilterTagPopup();
            }
        });
        this._oFilterTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterTagButton");

        this._oFilterThumbUpButton = new sap.ui.commons.Button({
            id: this.getId() + "-filter-thumb-up-button",
            tooltip : this._rb.getText("NOTETAKER_BUTTON_FILTER_THUMB_UP_TOOLTIP"),
            press: function() {
                that._handleFilteringByThumbUp();
            }
        });
        this._oFilterThumbUpButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterThumbUpButton");

        this._oFilterThumbDownButton = new sap.ui.commons.Button({
            id: this.getId() + "-filter-thumb-down-button",
            tooltip : this._rb.getText("NOTETAKER_BUTTON_FILTER_THUMB_DOWN_TOOLTIP"),
            press: function() {
                that._handleFilteringByThumbDown();
            }
        });
        this._oFilterThumbDownButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterThumbDownButton");

        this._oFilterAllButton = new sap.ui.commons.Button({
            id: this.getId() + "-filterAll-button",
            text: this._rb.getText("NOTETAKER_BUTTON_FILTER_ALL_TEXT"),
            tooltip: this._rb.getText("NOTETAKER_BUTTON_FILTER_ALL_TOOLTIP"),
            press: function() {
                that._handleResetFilters();
            }
        });
        this._oFilterAllButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterAllButton");

        this._oSearchButton = new sap.ui.commons.Button({
            id: this.getId() + "-filter-search-button",
            tooltip: this._rb.getText("NOTETAKER_BUTTON_SEARCH_TOOLTIP"),
            press: function() {
                that._handleSearchPopup();
            }
        });
        this._oSearchButton.addStyleClass("sapSuiteUiCommonsNoteTakerSearchBtn");
        
        this._oFilterSearchField = new sap.ui.commons.SearchField({
            id: this.getId() + "-filter-searchField",
            tooltip: this._rb.getText("NOTETAKER_BUTTON_SEARCH_TOOLTIP"),
            showListExpander: false,
            enableFilterMode: true,
            enableListSuggest: false,
            search: function(oEvent) {
                that._handleSearchingByText(oEvent.getParameter("query"));
            }
        });
        this._oFilterSearchField.addStyleClass("suiteUiNtFilterSearchField");

        this._oFilterTagList = new sap.ui.commons.ListBox({
            id: this.getId() + "-filterTag-listBox",
            allowMultiSelect: true,
            visibleItems: 10,
            width: "100%",
            height: "194px"
        });

        this._oCancelFilterTagButton = new sap.ui.commons.Button({
            id: this.getId() + "-cancel-filterTags-button",
            text: this._rb.getText("NOTETAKERFEEDER_BUTTON_CANCEL_TAGS"),
            tooltip: this._rb.getText("NOTETAKERFEEDER_BUTTON_CANCEL_TAGS_TOOLTIP"),
            press: function() {
                that._toggleFilterTagPopup();
            }
        });
        this._oCancelFilterTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerCancelFilterTagButton");

        this._oApplyFilterTagButton = new sap.ui.commons.Button({
            id: this.getId() + "-apply-filterTags-button",
            text: this._rb.getText("NOTETAKER_BUTTON_FILTER_TAG_APPLY_TEXT"),
            tooltip: this._rb.getText("NOTETAKER_BUTTON_FILTER_TAG_APPLY_TOOLTIP"),
            press: function() {
                that._toggleFilterTagPopup();
                setTimeout( function() {
                    that._handleFilteringByTags();
                }, 400);
            }
        });
    };

    /**
     * Required adaptations before rendering.
     * 
     * @private
     */
    sap.suite.ui.commons.NoteTaker.prototype.onBeforeRendering = function() {
        this._carousel.setVisibleItems(this.getVisibleNotes());
        this._adjustFilteringButtonsStyle();
        this._feeder.setAttachmentName(this.getAttachmentName());
    };

    /**
     * Required adaptations after rendering.
     *
     * @private
     */
    sap.suite.ui.commons.NoteTaker.prototype.onAfterRendering = function() {
        this._adjustPopupState();
        if(!this.getAttachmentUploadUrl()) {
            jQuery.sap.byId(this._feeder._oAddAttachButton.getId()).hide();
        };
        
        jQuery.sap.byId(this._oFilterThumbUpButton.getId()).attr("aria-pressed", this.getFilterCriteria() && this.getFilterCriteria().thumbUp);
        jQuery.sap.byId(this._oFilterThumbDownButton.getId()).attr("aria-pressed", this.getFilterCriteria() && this.getFilterCriteria().thumbDown);
    };

    /**
     * Destroys this instance of NoteTaker.
     * 
     * @private
     */
    sap.suite.ui.commons.NoteTaker.prototype.exit = function() {
        this.destroyAggregation("carousel", true);
        this._carousel = null;
        this._oHomeButton.destroy();
        this._oHomeButton = null;
        this._oFilterTagButton.destroy();
        this._oFilterTagButton = null;
        this._oFilterThumbUpButton.destroy();
        this._oFilterThumbUpButton = null;
        this._oFilterThumbDownButton.destroy();
        this._oFilterThumbDownButton = null;
        this._oFilterAllButton.destroy();
        this._oFilterAllButton = null;
        this._oFilterTagList.destroy();
        this._oFilterTagList = null;
        this._oCancelFilterTagButton.destroy();
        this._oCancelFilterTagButton = null;
        this._oApplyFilterTagButton.destroy();
        this._oApplyFilterTagButton = null;
        this._oFilterSearchField.destroy();
        this._oFilterSearchField = null;
        this._oSearchButton.destroy();
        this._oSearchButton = null;
    };
    
    /**
    * Handles the Add button press event generated by NoteTakerFeeder.
    *
    * @param {jQuery.EventObject} oEvent The event object
    *
    * @private
    */    
    sap.suite.ui.commons.NoteTaker.prototype._handleAddNote = function(oEvent) {
        var title = oEvent.getParameter("title");
        var body = oEvent.getParameter("body");
        var timestamp = oEvent.getParameter("timestamp");
        var tags = oEvent.getParameter("tags");
        var thumbUp = oEvent.getParameter("thumbUp");
        var thumbDown = oEvent.getParameter("thumbDown");
        var attachmentFilename = oEvent.getParameter("attachmentFilename");
        
        var eData = {};
        eData.title = title;
        eData.body = body;
        eData.timestamp = timestamp;
        eData.viewAllTrigger = this.getCardViewAllTrigger();
        eData.tags = tags;
        eData.thumbUp = thumbUp;
        eData.thumbDown = thumbDown;
        eData.attachmentFilename = attachmentFilename;
        eData.uid = this._nextCardUid;
        eData.attachmentUrl = this._nextCardAttachmentUrl;

        var oBinding = this.getBinding("cards");
        if (oBinding) {
            //in case of data binding model has to be updated
            this.fireAddCard(eData);
            //sorting should happen when model is updated
            var oTimestampSorter = new sap.ui.model.Sorter("timestamp", true);
            oBinding.sort(oTimestampSorter);
        } else {
            var oNoteCard = new sap.suite.ui.commons.NoteTakerCard();
            oNoteCard.setBody(body);
            oNoteCard.setHeader(title);
            oNoteCard.setTimestamp(timestamp);
            oNoteCard.setViewAllTrigger(this.getCardViewAllTrigger());
            oNoteCard.setTags(tags);
            oNoteCard.setThumbUp(thumbUp);
            oNoteCard.setThumbDown(thumbDown);
            oNoteCard.setAttachmentFilename(attachmentFilename);
            oNoteCard.setUid(this._nextCardUid);
            oNoteCard.setAttachmentUrl(this._nextCardAttachmentUrl);

            this.insertCard(oNoteCard, 0);

            eData.card = oNoteCard;
            this.fireAddCard(eData);
        }
        
        this._nextCardUid = null;
        this._nextCardAttachmentUrl = null;
        
        this._filter();
    };
    
    /**
     * Adds a note card to the cards aggregation.
     * 
     * @param {NoteTakerCard} oCard. The object which is added to the cards aggregation.
     */
    sap.suite.ui.commons.NoteTaker.prototype.addCard = function(oCard) {
        this._addDeleteDelegate(oCard);
        this._addEditDelegate(oCard);
        this._addAttachmentDelegate(oCard);
        this.getNotFilteredCards().push(oCard);
        var result = this._carousel.addContent(oCard);
        this._sortIfNeeded();
        this._spreadTagList();
        return result;
    };
    
    /**
     * Gets a list of the note cards. It does not return NoteTakerFeeder to the list.
     */
    sap.suite.ui.commons.NoteTaker.prototype.getCards = function() {
        return this._carousel.getContent().slice(1);
    };
    
    /**
     * Inserts a note card in the specified position.
     * @param {NoteTakerCard} oCard. The object which is added to the cards aggregation.
     * @param {int} iIndex. The position of the object it is inserted into.
     */
    sap.suite.ui.commons.NoteTaker.prototype.insertCard = function(oCard, iIndex) {
        this._addDeleteDelegate(oCard);
        this._addEditDelegate(oCard);
        this._addAttachmentDelegate(oCard);
        this.getNotFilteredCards().push(oCard);
        var result = this._carousel.insertContent(oCard, ++iIndex);
        this._spreadTagList();
        return result;
    };

    /**
     * Removes a specified note card from the cards aggregation.
     * @param {NoteTakerCard} oCard. Object which will be removed.
     * 
     */
    sap.suite.ui.commons.NoteTaker.prototype.removeCard = function(oCard) {
        this._spreadTagList();
        return this._carousel.removeContent(oCard);
    };
    
    /**
     * Removes all the note cards from the cards aggregation. 
     */
    sap.suite.ui.commons.NoteTaker.prototype.removeAllCards = function() {
        var aContent = this._carousel.removeAllContent();
        this._feeder.setTags([]);
        this._carousel.addContent(this._feeder);
        return aContent.slice(1);
    };
    
    /**
     * Returns a position of the note card in the cards aggregation.
     * @param {NoteTakerCard} oCard. Object which position is returned.
     */
    sap.suite.ui.commons.NoteTaker.prototype.indexOfCard = function(oCard) {
        var iIndex = this._carousel.indexOfContent(oCard);
        return (iIndex > 0) ? --iIndex : -1;
    };

    /**
     * Destroys the cards aggregation. After the cards aggregation is destroyed a new instance of NoteTakerFeeder is added to the cards aggregation.
     */
    sap.suite.ui.commons.NoteTaker.prototype.destroyCards = function() {
        this._carousel.destroyContent();
        this._carousel.addContent(this._createFeederAndAddToThis());
        return this;
    };

    /**
     * The utility method which creates NoteTakerFeeder. 
     * Minimizes code duplication.
     * 
     * @private
     */
    sap.suite.ui.commons.NoteTaker.prototype._createFeederAndAddToThis = function() {
        var that = this;
        this._feeder = new sap.suite.ui.commons.NoteTakerFeeder({
            id : this.getId() + "-feeder",
            attachmentName : that.getAttachmentName(),
            addNote: function(e){
                that._handleAddNote(e);
            },
            attachmentUploadUrl: that.getAttachmentUploadUrl(),
            attachmentSelect : function(e){
                var eData = {filename : e.getParameter("filename")};
                that.fireAttachmentSelect(eData);
            },
            attachmentUploadComplete : function(e) {
                var eData = {
                        response: e.getParameter("response"),
                        uid : that._nextCardUid
                };
                that.fireAttachmentUploadComplete(eData);
                this._oAttachmentLink.setHref(that._nextCardAttachmentUrl);
                this._oAttachmentLink.rerender();
            },
            attachmentDelete : function(e) {
                var eData = {
                        filename : e.getParameter("filename"),
                        uid : that._nextCardUid
                };
                
                that.fireAttachmentDelete(eData);
            },
            attachmentClick : function(e) {
                var eData = {
                        filename : e.getParameter("filename"),
                        uid : that._nextCardUid,
                        isCardAttachment : false
                };
                
                that.fireAttachmentClick(eData);
            }
        });
        this._spreadTagList();
        return this._feeder;
    };

    /**
     * Method for sorting cards inside NoteTaker. 
     * It is called only when databinding is undefined.
     * 
     * @private
     */
    sap.suite.ui.commons.NoteTaker.prototype._sortIfNeeded = function() {
        var oBinding = this.getBinding();
        if(oBinding == undefined) {
            var aCards = this.getCards();
            aCards.sort(function(oCard1, oCard2) {
                // descending sort
                return oCard2.getTimestamp().getTime() - oCard1.getTimestamp().getTime();
            });
            
            this.removeAllCards();
            
            for(var i = 0; i<aCards.length; i++) {
                this._carousel.addContent(aCards[i]); 
            }
        }
    };

    sap.suite.ui.commons.NoteTaker.prototype.getAllTags = function() {
        var oBinding = this.getBinding("cards");
        var aCards = oBinding ? this.getCards() : this.getNotFilteredCards();
        var oTagSet = {};
        var aResult = [];
        for (var i = 0; i<aCards.length; i++) {
            var aTags = aCards[i].getTags();
            for (var j = 0; j<aTags.length; j++) {
                if (aTags[j] != "") {
                    oTagSet[aTags[j]] = true;
                }
            }
        }

        for (var tag in oTagSet) {
            aResult.push(tag);
        }

        return aResult.sort();
    };
    
    sap.suite.ui.commons.NoteTaker.prototype._handleDeleteNote = function(oEvent) {
        var oBinding = this.getBinding("cards");
        var eData = {};
        eData.title = oEvent.getParameter("title");
        eData.timestamp = oEvent.getParameter("timestamp");
        eData.body = oEvent.getParameter("body");
        eData.uid = oEvent.getParameter("uid");
        eData.thumbUp = oEvent.getParameter("thumbUp");
        eData.thumbDown = oEvent.getParameter("thumbDown");
        
        if(oBinding) {
            this.fireDeleteCard(eData);
        } else {
            var card2Delete = oEvent.getParameter("cardId");
            var allCards = this.getNotFilteredCards();
            for (var i=0; i<allCards.length; i++) {
                if (allCards[i].getId() == card2Delete) {
                    allCards.splice(i, 1);
                }
            }
            this.removeCard(card2Delete);
            this.fireDeleteCard(eData);
        }
    };
    
    sap.suite.ui.commons.NoteTaker.prototype._handleEditNote = function(oEvent) {
        var eData = {};
        eData.title = oEvent.getParameter("title");
        eData.timestamp = oEvent.getParameter("timestamp");
        eData.body = oEvent.getParameter("body");
        eData.uid = oEvent.getParameter("uid");
        eData.thumbUp = oEvent.getParameter("thumbUp");
        eData.thumbDown = oEvent.getParameter("thumbDown");
        eData.tags = oEvent.getParameter("tags");
        
        this.fireEditCard(eData);
        
        this._sortIfNeeded();

        this._spreadTagList();
    };
    
    sap.suite.ui.commons.NoteTaker.prototype._addDeleteDelegate = function(oCard) {
        var that = this;
        oCard.attachDeleteNote(function(oEvent) { 
            that._handleDeleteNote(oEvent);
        });
    };
    
    sap.suite.ui.commons.NoteTaker.prototype._addEditDelegate = function(oCard) {
        var that = this;
        oCard.attachEditNote(function(oEvent) { 
            that._handleEditNote(oEvent);
        });
    };

    /**
     * Handles home button click. Scrolls carousel to its first element that is a feeder.
     */
    sap.suite.ui.commons.NoteTaker.prototype._handleHomeButton = function() {
        this._carousel.setFirstVisibleIndex(0);
        this._feeder._focusDefaultControl();
    };

    /*
     * Override to automatically apply filter
     */
    sap.suite.ui.commons.NoteTaker.prototype.setFilterCriteria = function(oFilterCriteria) {
        this.setProperty("filterCriteria", oFilterCriteria);
        this._filter();
    };

    sap.suite.ui.commons.NoteTaker.prototype._toggleFilterTagPopup = function() {
        if (this._bFilterTagPopupOpen) {
            jQuery.sap.byId(this.getId() + "-filterTag-panel").slideToggle();
            this._bFilterTagPopupOpen = false;
        } else {
            this._addTagsToFilterListBox(this.getAllTags());
            jQuery.sap.byId(this.getId() + "-filterTag-panel").slideToggle();
            this._oFilterTagList.focus();
            this._bFilterTagPopupOpen = true;
        }
    };

    sap.suite.ui.commons.NoteTaker.prototype._addTagsToFilterListBox = function(aTags) {
        var aSelectedItems = [];
        var aFilterTags = this._getFilterTags();
        var aListItems = jQuery.map(aTags, function(v, i) {

            // The Array.indexOf() method is not supported in Internet Explorer 8
            if (aFilterTags.indexOf) {
                if (aFilterTags.indexOf(v) >= 0) {
                    aSelectedItems.push(i);
                }
            } else {
                for (var k in aFilterTags) {
                    if (aFilterTags[k] == v) {
                        aSelectedItems.push(i);
                        break;
                    }
                }
            }

            return new sap.ui.core.ListItem({text: v});
        });

        this._oFilterTagList.setItems(aListItems, true);
        this._oFilterTagList.setSelectedIndices(aSelectedItems);
        this._oFilterTagList.rerender();
    };

    sap.suite.ui.commons.NoteTaker.prototype._cloneFilterCriteria = function() {
        var oFilterCriteria = this.getFilterCriteria();
        var oNewCriteria = {};

        if (oFilterCriteria) {
            for (var pName in oFilterCriteria) {
                oNewCriteria[pName] = oFilterCriteria[pName];
            }
        }

        return oNewCriteria;
    };

    sap.suite.ui.commons.NoteTaker.prototype._handleFilteringByTags = function() {
        var oFilterCriteria = this._cloneFilterCriteria();
        var aSelectedItems = this._oFilterTagList.getSelectedItems();
        var aTags = [];

        for (var i in aSelectedItems) {
            aTags.push(aSelectedItems[i].getText());
        }

        oFilterCriteria.tags = aTags;
        this.setFilterCriteria(oFilterCriteria);
    };

    sap.suite.ui.commons.NoteTaker.prototype._handleFilteringByThumbUp = function() {
        var oFilterCriteria = this._cloneFilterCriteria();
        oFilterCriteria.thumbUp = !oFilterCriteria.thumbUp;
        this.setFilterCriteria(oFilterCriteria);
    };

    sap.suite.ui.commons.NoteTaker.prototype._handleFilteringByThumbDown = function() {
        var oFilterCriteria = this._cloneFilterCriteria();
        oFilterCriteria.thumbDown = !oFilterCriteria.thumbDown;
        this.setFilterCriteria(oFilterCriteria);
    };

    sap.suite.ui.commons.NoteTaker.prototype._handleResetFilters = function() {
        var oFilterCriteria = this.getFilterCriteria();
        var oNewCriteria = null;

        if (oFilterCriteria && oFilterCriteria.search && oFilterCriteria.search.length > 0) {
            oNewCriteria = {};
            oNewCriteria.search = oFilterCriteria.search;
        }

        this.setFilterCriteria(oNewCriteria);
    };

    sap.suite.ui.commons.NoteTaker.prototype._handleSearchingByText = function(sSearchText) {
        var oFilterCriteria = this._cloneFilterCriteria();
        var aSearchWords = [];
        var aNewWords = sSearchText.split(new RegExp("\\s+"));

        for (var i = 0; i < aNewWords.length; i++) {
            if (aNewWords[i].length > 0) {
                aSearchWords.push(aNewWords[i]);
            }
        }

        oFilterCriteria.search = aSearchWords;

        this.setFilterCriteria(oFilterCriteria);
    };

    sap.suite.ui.commons.NoteTaker.prototype._adjustFilterTagButton = function() {
        var aFilterTags = this._getFilterTags();

        if (aFilterTags.length) {
            this._oFilterTagButton.setTooltip(this._rb.getText("NOTETAKER_BUTTON_FILTER_TAG_APPLY_SELECTED_TOOLTIP") + ": " + aFilterTags.join(" "));
            this._oFilterTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
        } else {
            this._oFilterTagButton.setTooltip(this._rb.getText("NOTETAKER_BUTTON_FILTER_TAG_TOOLTIP"));
            this._oFilterTagButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
        }
    };
    
    sap.suite.ui.commons.NoteTaker.prototype._handleSearchPopup = function() {
        if (this._bSearchPopupOpen) {
            jQuery.sap.byId(this.getId() + "-search-panel").slideToggle();
            this._bSearchPopupOpen = false;
        } else {
            var oPosition = jQuery.sap.byId(this.getId() + "-filter-search-button").position();
            jQuery.sap.byId(this.getId() + "-search-panel").css("right", oPosition.right - 20).slideToggle();
            this._oFilterSearchField.focus();
            this._bSearchPopupOpen = true;
        }
    };

    sap.suite.ui.commons.NoteTaker.prototype._adjustSearchButton = function() {
        var sSearchText = this._oFilterSearchField.getValue();

        if (sSearchText.length) {
            this._oSearchButton.setTooltip(this._rb.getText("NOTETAKER_BUTTON_SEARCHED_BY_TOOLTIP") + ": " + sSearchText);
            this._oFilterSearchField.setTooltip(this._rb.getText("NOTETAKER_BUTTON_SEARCHED_BY_TOOLTIP") + ": " + sSearchText);
            this._oSearchButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
        } else {
            this._oSearchButton.setTooltip(this._rb.getText("NOTETAKER_BUTTON_SEARCH_TOOLTIP"));
            this._oFilterSearchField.setTooltip(this._rb.getText("NOTETAKER_BUTTON_SEARCH_TOOLTIP"));
            this._oSearchButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
        }
    };

    /**
     * Extracts array of filtering tags from a filtering criteria object
     */
    sap.suite.ui.commons.NoteTaker.prototype._getFilterTags = function() {
        var oFilterCriteria = this.getFilterCriteria();

        if (oFilterCriteria && oFilterCriteria.tags && oFilterCriteria.tags.length) {
            return oFilterCriteria.tags;
        } else {
            return [];
        }
    };

    sap.suite.ui.commons.NoteTaker.prototype._adjustPopupState = function() {
        var oTagPosition = jQuery.sap.byId(this.getId() + "-filterTag-button").position();
        jQuery.sap.byId(this.getId() + "-filterTag-panel").css("left", oTagPosition.left - 20);
        if (this._bFilterTagPopupOpen) {
            jQuery.sap.byId(this.getId() + "-filterTag-panel").show();
        }
        if (this._bSearchPopupOpen) {
            jQuery.sap.byId(this.getId() + "-search-panel").show();
        }
    };

    sap.suite.ui.commons.NoteTaker.prototype._adjustFilteringButtonsStyle = function() {
        this._adjustFilterTagButton();
        this._adjustFilteringByThumbUpButtonStyle();
        this._adjustFilteringByThumbDownButtonStyle();
        this._adjustSearchButton();
    };

    sap.suite.ui.commons.NoteTaker.prototype._adjustFilteringByThumbUpButtonStyle = function() {
        if (this.getFilterCriteria() && this.getFilterCriteria().thumbUp) {
            this._oFilterThumbUpButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
            
        } else {
            this._oFilterThumbUpButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
        }
    };

    sap.suite.ui.commons.NoteTaker.prototype._adjustFilteringByThumbDownButtonStyle = function() {
        if (this.getFilterCriteria() && this.getFilterCriteria().thumbDown) {
            this._oFilterThumbDownButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
        } else {
            this._oFilterThumbDownButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
        }
    };

    sap.suite.ui.commons.NoteTaker.prototype.getNotFilteredCards = function() {
        if(!this._notFilteredCards) {
            this._notFilteredCards = [];
        }
      return this._notFilteredCards;
    };

    // Update all cards including feeder with new list of tags available to choose.
    sap.suite.ui.commons.NoteTaker.prototype._spreadTagList = function() {
        var aAllTags = this.getAllTags();
        this._feeder.setTags(aAllTags);
        var aCards = this.getCards();
        for (var i=0; i<aCards.length; i++) {
            aCards[i].setAllTags(aAllTags);
        }
    };

    /**
     * Filters note taker cards using filterCriteria property. Two different filtering methods implemented for control
     * with and without binding.
     */
    sap.suite.ui.commons.NoteTaker.prototype._filter = function() {
        var oBinding = this.getBinding("cards");
        var oCard;
        var i;

        if (oBinding) {
            var aModelCards = this.getModel().oData['cards'];

            for (i = 0; i < aModelCards.length; i++) {
                oCard = aModelCards[i];
                oCard.isFiltered = this._applyFilters(oCard);
            }

            this.getModel().updateBindings();
            oBinding.filter([new sap.ui.model.Filter("isFiltered", sap.ui.model.FilterOperator.EQ, false)]);
        } else {
            var aNotFilteredCards = this.getNotFilteredCards();
            var aVisibleCards = this.getCards();

            //for newly created taker notFilteredCards may not be set
            if (aNotFilteredCards.length == 0 && aVisibleCards.length > 0) {
                this.setNotFilteredCards(aVisibleCards);
                aNotFilteredCards = aVisibleCards;
            }

            for (i = 0; i < aNotFilteredCards.length; i++) {
                oCard = aNotFilteredCards[i];
                oCard.setIsFiltered(this._applyFilters(oCard));

                if (oCard.getIsFiltered()) {
                    this.removeCard(oCard);
                } else if (this.indexOfCard(oCard) < 0) {
                    this.addCard(oCard);
                }
            }
        }
    };

    /**
     * Iterates through the list of filtering criteria and checks if given card should be filtered out and thus
     * should be hidden from a user in the note taker.
     */
    sap.suite.ui.commons.NoteTaker.prototype._applyFilters = function(oCard) {
        var bFilterPassed = true;

        if (this.getFilterCriteria()) {
            for (var i = 0; (i < this._filters.length) && bFilterPassed; i++) {
                var fnFilter = this._filters[i];
                bFilterPassed = fnFilter.call(this, oCard);
            }
        }

        return !bFilterPassed;    // filter not passed means card is filtered out
    };

    /**
     * Validates whether given card passes filter by thumbs.
     * @param oCard validated card could be NoteTakerCard instance or json object.
     */
    sap.suite.ui.commons.NoteTaker.prototype._validateCardByThumbsFilter = function(oCard) {
        if (oCard.getThumbUp && oCard.getThumbDown) {
            return this._applyThumbsFilter(oCard.getThumbUp(), oCard.getThumbDown());
        } else {
            return this._applyThumbsFilter(oCard.thumbUp, oCard.thumbDown);
        }
    };

    /**
     * Validates whether given card passes filter by tags.
     * @param oCard validated card could be NoteTakerCard instance or json object.
     */
    sap.suite.ui.commons.NoteTaker.prototype._validateCardByTagsFilter = function(oCard) {
        if (oCard.getTags) {
            return this._applyTagsFilter(oCard.getTags());
        } else {
            return this._applyTagsFilter(oCard.tags);
        }
    };

    /**
     * Validates whether given card passes search by text.
     * @param oCard validated card could be NoteTakerCard instance or json object.
     */
    sap.suite.ui.commons.NoteTaker.prototype._validateCardByTextSearch = function(oCard) {
        if (oCard.getBody) {
            return this._applyTextSearch(oCard.getBody(), oCard.getHeader());
        } else {
            return this._applyTextSearch(oCard.body, oCard.header);
        }
    };

    /**
     * Implements filtering criteria by thumbs. Validates whether given parameters conform to filtering criteria.
     */
    sap.suite.ui.commons.NoteTaker.prototype._applyThumbsFilter = function(bThumbUp, bThumbDown) {
        var bResult = true;
        var oFilterCriteria = this.getFilterCriteria();

        if (oFilterCriteria.thumbUp && oFilterCriteria.thumbDown) {
            bResult = bThumbUp || bThumbDown;
        } else if (oFilterCriteria.thumbUp) {
            bResult = bThumbUp;
        } else if (oFilterCriteria.thumbDown) {
            bResult = bThumbDown;
        }

        return bResult;
    };

    /**
     * Implements filtering criteria by tags. Validates whether given parameter conforms to filtering criteria.
     */
    sap.suite.ui.commons.NoteTaker.prototype._applyTagsFilter = function(aTags) {
        var bResult = true;
        var oFilterCriteria = this.getFilterCriteria();

        if (oFilterCriteria.tags && oFilterCriteria.tags.length > 0) {
            var i, j;
            var aTagCriteria = oFilterCriteria.tags;

            bResult = false;     //  assume initially no tag matches

            //iterate since IE8 doesn't support Array.indexOf() method.
            for (i = 0; i < aTagCriteria.length && !bResult; i++) {
                for (j = 0; aTags && (j < aTags.length); j++) {
                    if (aTagCriteria[i] == aTags[j]) {
                        bResult = true;
                        break;
                    }
                }
            }
        }

        return bResult;
    };

    /**
     * Implements searching by text. Validates whether given strings contain text given in filtering criteria.
     */
    sap.suite.ui.commons.NoteTaker.prototype._applyTextSearch = function(sBody, sHeader) {
        var bResult = true;
        var oFilterCriteria = this.getFilterCriteria();

        if (oFilterCriteria.search && oFilterCriteria.search.length > 0) {
            var aSearchCriteria = oFilterCriteria.search;

            bResult = false;     // assume initially search found nothing
            sBody = sBody.toLowerCase();
            sHeader = sHeader ? sHeader.toLowerCase() : null;

            for (var i = 0; i < aSearchCriteria.length; i++) {
                var sWord = aSearchCriteria[i].toLowerCase();
                if ((sBody.indexOf(sWord) >= 0) || (sHeader && sHeader.indexOf(sWord) >= 0)) {
                    bResult = true;
                    break;
                }
            }
        }

        return bResult;
    };
    
    sap.suite.ui.commons.NoteTaker.prototype.setAttachmentUploadUrl = function(sUrl) {
        this.setProperty("attachmentUploadUrl", sUrl, true);
        this._feeder.setAttachmentUploadUrl(sUrl);
    };

    /**
     * Array of methods that implements validation by filtering criteria.
     */
    sap.suite.ui.commons.NoteTaker.prototype._filters = [
        sap.suite.ui.commons.NoteTaker.prototype._validateCardByThumbsFilter,
        sap.suite.ui.commons.NoteTaker.prototype._validateCardByTagsFilter,
        sap.suite.ui.commons.NoteTaker.prototype._validateCardByTextSearch
    ];
    
    //TODO: add jsdocs
    sap.suite.ui.commons.NoteTaker.prototype.setNextCardUid = function(sUid) {
        this._nextCardUid = sUid;
    };
    
    sap.suite.ui.commons.NoteTaker.prototype._addAttachmentDelegate = function(oCard) {
        var that = this;
        oCard.attachAttachmentClick(function(oEvent) { 
            that._handleCardAttachmentClick(oEvent);
        });
    };
    
    sap.suite.ui.commons.NoteTaker.prototype._handleCardAttachmentClick = function(oEvent) {
        var eData = {
                filename : oEvent.getParameter("filename"),
                uid :  oEvent.getParameter("uid"),
                isCardAttachment : true
        };
        
        this.fireAttachmentClick(eData);
    };
    
    sap.suite.ui.commons.NoteTaker.prototype.uploadAttachment = function() {
        this._feeder._oFileUploader.upload();
    };
    
    sap.suite.ui.commons.NoteTaker.prototype.setAttachmentData = function(sAdditionalData) {
        this._feeder._oFileUploader.setAdditionalData(sAdditionalData);
    };
    
    sap.suite.ui.commons.NoteTaker.prototype.handleAttachmentUploadFail = function() {
        this._feeder._handleDeleteAttachUI();    
    };
    
    sap.suite.ui.commons.NoteTaker.prototype.setNextCardAttachmentUrl = function(sUrl) {
        this._nextCardAttachmentUrl = sUrl;
    };
}());

}; // end of sap/suite/ui/commons/NoteTaker.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NoteTakerCard') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.NoteTakerCard.
jQuery.sap.declare("sap.suite.ui.commons.NoteTakerCard");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new NoteTakerCard.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeader header} : string</li>
 * <li>{@link #getBody body} : string</li>
 * <li>{@link #getTimestamp timestamp} : object (default: new Date())</li>
 * <li>{@link #getTags tags} : object (default: [])</li>
 * <li>{@link #getViewAllTrigger viewAllTrigger} : int (default: 1800)</li>
 * <li>{@link #getUid uid} : string</li>
 * <li>{@link #getIsFiltered isFiltered} : boolean (default: false)</li>
 * <li>{@link #getThumbUp thumbUp} : boolean</li>
 * <li>{@link #getThumbDown thumbDown} : boolean</li>
 * <li>{@link #getAllTags allTags} : object (default: [])</li>
 * <li>{@link #getAttachmentFilename attachmentFilename} : string</li>
 * <li>{@link #getAttachmentUrl attachmentUrl} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.NoteTakerCard#event:editNote editNote} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTakerCard#event:deleteNote deleteNote} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTakerCard#event:attachmentClick attachmentClick} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control allows you to store Note Taker card header and body text.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.NoteTakerCard", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"header" : {type : "string", group : "Misc", defaultValue : null},
		"body" : {type : "string", group : "Misc", defaultValue : null},
		"timestamp" : {type : "object", group : "Misc", defaultValue : new Date()},
		"tags" : {type : "object", group : "Misc", defaultValue : []},
		"viewAllTrigger" : {type : "int", group : "Misc", defaultValue : 1800},
		"uid" : {type : "string", group : "Misc", defaultValue : null},
		"isFiltered" : {type : "boolean", group : "Misc", defaultValue : false},
		"thumbUp" : {type : "boolean", group : "Misc", defaultValue : null},
		"thumbDown" : {type : "boolean", group : "Misc", defaultValue : null},
		"allTags" : {type : "object", group : "Misc", defaultValue : []},
		"attachmentFilename" : {type : "string", group : "Misc", defaultValue : null},
		"attachmentUrl" : {type : "string", group : "Misc", defaultValue : null}
	},
	events : {
		"editNote" : {}, 
		"deleteNote" : {}, 
		"attachmentClick" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.NoteTakerCard with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.NoteTakerCard.extend
 * @function
 */

sap.suite.ui.commons.NoteTakerCard.M_EVENTS = {'editNote':'editNote','deleteNote':'deleteNote','attachmentClick':'attachmentClick'};


/**
 * Getter for property <code>header</code>.
 * Stores the Note Taker card header.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>header</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getHeader
 * @function
 */

/**
 * Setter for property <code>header</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeader  new value for property <code>header</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setHeader
 * @function
 */


/**
 * Getter for property <code>body</code>.
 * Stores the Note Taker card body text.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>body</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getBody
 * @function
 */

/**
 * Setter for property <code>body</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sBody  new value for property <code>body</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setBody
 * @function
 */


/**
 * Getter for property <code>timestamp</code>.
 * Stores a timestamp of the Note Taker card.
 *
 * Default value is <code>new Date()</code>
 *
 * @return {object} the value of property <code>timestamp</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getTimestamp
 * @function
 */

/**
 * Setter for property <code>timestamp</code>.
 *
 * Default value is <code>new Date()</code> 
 *
 * @param {object} oTimestamp  new value for property <code>timestamp</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setTimestamp
 * @function
 */


/**
 * Getter for property <code>tags</code>.
 * Contains an array of the String type tags applied to the current card.
 *
 * Default value is <code>[]</code>
 *
 * @return {object} the value of property <code>tags</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getTags
 * @function
 */

/**
 * Setter for property <code>tags</code>.
 *
 * Default value is <code>[]</code> 
 *
 * @param {object} oTags  new value for property <code>tags</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setTags
 * @function
 */


/**
 * Getter for property <code>viewAllTrigger</code>.
 * The View All link appears in the Note Taker card if a body text length exceeds the specified value.
 *
 * Default value is <code>1800</code>
 *
 * @return {int} the value of property <code>viewAllTrigger</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getViewAllTrigger
 * @function
 */

/**
 * Setter for property <code>viewAllTrigger</code>.
 *
 * Default value is <code>1800</code> 
 *
 * @param {int} iViewAllTrigger  new value for property <code>viewAllTrigger</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setViewAllTrigger
 * @function
 */


/**
 * Getter for property <code>uid</code>.
 * The card ID. This property should be set by an application developer.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>uid</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getUid
 * @function
 */

/**
 * Setter for property <code>uid</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUid  new value for property <code>uid</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setUid
 * @function
 */


/**
 * Getter for property <code>isFiltered</code>.
 * Shows whether the note card is hidden by the applied filter.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isFiltered</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getIsFiltered
 * @function
 */

/**
 * Setter for property <code>isFiltered</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsFiltered  new value for property <code>isFiltered</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setIsFiltered
 * @function
 */


/**
 * Getter for property <code>thumbUp</code>.
 * Indicates positive information for the card.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>thumbUp</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getThumbUp
 * @function
 */

/**
 * Setter for property <code>thumbUp</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bThumbUp  new value for property <code>thumbUp</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setThumbUp
 * @function
 */


/**
 * Getter for property <code>thumbDown</code>.
 * Indicates negative information for the card.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>thumbDown</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getThumbDown
 * @function
 */

/**
 * Setter for property <code>thumbDown</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bThumbDown  new value for property <code>thumbDown</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setThumbDown
 * @function
 */


/**
 * Getter for property <code>allTags</code>.
 * Contains an array of the String type tags available for selection during the card update.
 *
 * Default value is <code>[]</code>
 *
 * @return {object} the value of property <code>allTags</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getAllTags
 * @function
 */

/**
 * Setter for property <code>allTags</code>.
 *
 * Default value is <code>[]</code> 
 *
 * @param {object} oAllTags  new value for property <code>allTags</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setAllTags
 * @function
 */


/**
 * Getter for property <code>attachmentFilename</code>.
 * Stores the name of the file attached to the card.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>attachmentFilename</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getAttachmentFilename
 * @function
 */

/**
 * Setter for property <code>attachmentFilename</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAttachmentFilename  new value for property <code>attachmentFilename</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setAttachmentFilename
 * @function
 */


/**
 * Getter for property <code>attachmentUrl</code>.
 * Stores the address of the file attached to the card.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>attachmentUrl</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getAttachmentUrl
 * @function
 */

/**
 * Setter for property <code>attachmentUrl</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAttachmentUrl  new value for property <code>attachmentUrl</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setAttachmentUrl
 * @function
 */


/**
 * The event is fired when a user chooses the Edit button in the note card. 
 *
 * @name sap.suite.ui.commons.NoteTakerCard#editNote
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.title The title of edited card.
 * @param {string} oControlEvent.getParameters.body A new text of the edited card.
 * @param {string} oControlEvent.getParameters.timestamp A new timestamp of the edited card.
 * @param {string} oControlEvent.getParameters.uid A unique ID that was set by an application developer.
 * @param {boolean} oControlEvent.getParameters.thumbUp Indicates positive information for the edited card.
 * @param {boolean} oControlEvent.getParameters.thumbDown Indicates negative information for the edited card.
 * @param {object} oControlEvent.getParameters.tags Updated array of the String type tags applied to the card during editing.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'editNote' event of this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/> itself. 
 *  
 * The event is fired when a user chooses the Edit button in the note card. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#attachEditNote
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'editNote' event of this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#detachEditNote
 * @function
 */

/**
 * Fire event editNote to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'title' of type <code>string</code> The title of edited card.</li>
 * <li>'body' of type <code>string</code> A new text of the edited card.</li>
 * <li>'timestamp' of type <code>string</code> A new timestamp of the edited card.</li>
 * <li>'uid' of type <code>string</code> A unique ID that was set by an application developer.</li>
 * <li>'thumbUp' of type <code>boolean</code> Indicates positive information for the edited card.</li>
 * <li>'thumbDown' of type <code>boolean</code> Indicates negative information for the edited card.</li>
 * <li>'tags' of type <code>object</code> Updated array of the String type tags applied to the card during editing.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerCard#fireEditNote
 * @function
 */


/**
 * The event is fired when a card needs to be deleted. This event is needed for the Note Taker control. 
 *
 * @name sap.suite.ui.commons.NoteTakerCard#deleteNote
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.cardId The HTML ID of a card that needs to be deleted.
 * @param {string} oControlEvent.getParameters.title The title of the card to be deleted.
 * @param {string} oControlEvent.getParameters.body The text of the card to be deleted.
 * @param {string} oControlEvent.getParameters.timestamp The timestamp of the card to be deleted.
 * @param {string} oControlEvent.getParameters.uid A unique ID that was set by an application developer.
 * @param {boolean} oControlEvent.getParameters.thumbUp Indicates positive information for the deleted card.
 * @param {boolean} oControlEvent.getParameters.thumbDown Indicates negative information for the deleted card.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deleteNote' event of this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/> itself. 
 *  
 * The event is fired when a card needs to be deleted. This event is needed for the Note Taker control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#attachDeleteNote
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deleteNote' event of this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#detachDeleteNote
 * @function
 */

/**
 * Fire event deleteNote to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'cardId' of type <code>string</code> The HTML ID of a card that needs to be deleted.</li>
 * <li>'title' of type <code>string</code> The title of the card to be deleted.</li>
 * <li>'body' of type <code>string</code> The text of the card to be deleted.</li>
 * <li>'timestamp' of type <code>string</code> The timestamp of the card to be deleted.</li>
 * <li>'uid' of type <code>string</code> A unique ID that was set by an application developer.</li>
 * <li>'thumbUp' of type <code>boolean</code> Indicates positive information for the deleted card.</li>
 * <li>'thumbDown' of type <code>boolean</code> Indicates negative information for the deleted card.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerCard#fireDeleteNote
 * @function
 */


/**
 * The event is fired when a user chooses the attachment download link. 
 *
 * @name sap.suite.ui.commons.NoteTakerCard#attachmentClick
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.uid A unique ID that was set by an application developer.
 * @param {string} oControlEvent.getParameters.url The address of the file attached to the card.
 * @param {string} oControlEvent.getParameters.filename The name of the file attached to the card.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentClick' event of this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/> itself. 
 *  
 * The event is fired when a user chooses the attachment download link. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#attachAttachmentClick
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentClick' event of this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#detachAttachmentClick
 * @function
 */

/**
 * Fire event attachmentClick to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'uid' of type <code>string</code> A unique ID that was set by an application developer.</li>
 * <li>'url' of type <code>string</code> The address of the file attached to the card.</li>
 * <li>'filename' of type <code>string</code> The name of the file attached to the card.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerCard#fireAttachmentClick
 * @function
 */


// Start of sap/suite/ui/commons/NoteTakerCard.js
jQuery.sap.require('sap.ui.core.Locale'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained

jQuery.sap.require('sap.ui.ux3.OverlayContainer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Link'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.MessageBox'); // unlisted dependency retained


///**
// * This file defines behavior for the control,
// */
sap.suite.ui.commons.NoteTakerCard.prototype.init = function(){
    this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");

    var that = this;
    this._oEditButton = new sap.ui.commons.Button({
        id: this.getId() + "-edit-button",
        press: function(e){
            that._handleEdit();
        },
        tooltip : this._rb.getText("NOTETAKERCARD_BUTTON_OPEN_EDIT_TOOLTIP")
    });
    this._oEditButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardEditButton");

    this._oDeleteButton = new sap.ui.commons.Button({
        id: this.getId() + "-delete-button",
        tooltip : this._rb.getText("NOTETAKERCARD_BUTTON_DELETE_TOOLTIP"),
        press: function() {
            that._handleDelete();
        }
    });
    this._oDeleteButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardDeleteButton");

    this._oViewAllLink = new sap.ui.commons.Link({
    	id: this.getId() + "-viewAll-link",
    	text: this._rb.getText("NOTETAKERCARD_LINK_VIEW_ALL_TEXT"),
    	tooltip: this._rb.getText("NOTETAKERCARD_LINK_VIEW_ALL_TOOLTIP"),
    	press: function() {
			that._openOverlay();
		}
	});
    
    this._oOverlayCard = new sap.ui.ux3.OverlayContainer(this.getId() + "-overlay", {
        openButtonVisible: false,
        close: function(oEvent) {
            that._handleOverlayCloseEvent(oEvent.getSource());
            oEvent.preventDefault();    // close overlay functionality already handled so prevent default close
        }
    });
    
    this._oOverlayCard.addDelegate({onAfterRendering:function(){
        var oOvrlTmpst = jQuery.sap.byId(that.getId() + "-overlayTimestamp");
        if(oOvrlTmpst) {
            oOvrlTmpst.html(that.getFormattedTimestamp());
        }
    }});
    
    // fixed unwanted scrolling of underlying content
    this._oOverlayCard._superOnsapselect = this._oOverlayCard.onsapselect;
    this._oOverlayCard.onsapselect = function(oEvent) {
        var controlId = oEvent.srcControl.getId();

        if (controlId.indexOf("-overlayBody") < 0 && controlId.indexOf("-inputTag") < 0 && controlId.indexOf("-overlayCardTitle") < 0) {
            oEvent.stopPropagation();
            oEvent.preventDefault();
        }

        //this is needed for Firefox
        setTimeout( function() {
            that._oOverlayCard._superOnsapselect(oEvent);
        }, 10);
    };
    
    this._oOverlayCard.addStyleClass("sapSuiteCommonsNoteTakerCardOverlayWindow");
    this._oOverlayCard._tagControls = {};
};

sap.suite.ui.commons.NoteTakerCard.prototype.exit = function() {
	this._oDeleteButton.destroy();
	this._oDeleteButton = null;
	
	this._oEditButton.destroy();
    this._oEditButton = null;

    this._oViewAllLink.destroy();
    this._oViewAllLink = null;
    
    this._oOverlayCard.destroy();
    this._oOverlayCard = null;
};

/**
 * Formats timestamp using medium format style and current locale.
 */
sap.suite.ui.commons.NoteTakerCard.prototype.getFormattedTimestamp = function() {
    var oLocale = sap.ui.getCore().getConfiguration().getLocale();
    var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({style: "medium"}, oLocale);

    return oDateFormat.format(this.getTimestamp());
};

/**
 * Closes overlay. If overlay is in edit mode then shows confirmation dialog before closing.
 */
sap.suite.ui.commons.NoteTakerCard.prototype._handleOverlayCloseEvent = function(oControl) {
    if (oControl.bEditMode) {
        var that = this;
        sap.ui.commons.MessageBox.show(this._rb.getText("NOTETAKERCARD_CONFIRMATION_CANCEL_EDIT_MESSAGE"),
                                       sap.ui.commons.MessageBox.Icon.QUESTION,
                                       this._rb.getText("NOTETAKERCARD_CONFIRMATION_CANCEL_EDIT_TITLE"),
                                       [sap.ui.commons.MessageBox.Action.YES, sap.ui.commons.MessageBox.Action.NO],
                                       function(sResult) {
                                           if (sResult == sap.ui.commons.MessageBox.Action.YES) {
                                               that._closeOverlay();
                                               that._oEditButton.focus();
                                           } else {
                                               jQuery.sap.focus(jQuery.sap.domById(that.getId() + "-overlayBody"));
                                           }
                                       },
                                       sap.ui.commons.MessageBox.Action.NO);
    } else {
        this._closeOverlay();
    }
};

/**
 * Destroys overlay content and closes overlay
 */
sap.suite.ui.commons.NoteTakerCard.prototype._closeOverlay = function() {
    this._destroyTagControls();
    this._oOverlayCard.bEditMode = false;
    this._oOverlayCard.destroyContent();
    this._oOverlayCard.close();
};

sap.suite.ui.commons.NoteTakerCard.prototype._openOverlay = function(bEditMode) {
    var sInitiallyFocusedId;

    if (!this._oOverlayCard.isOpen()) {

        this._oOverlayCard.bThumbUp = this.getThumbUp();
        this._oOverlayCard.bThumbDown = this.getThumbDown();

        this._prepareOverlayLayouts();
        this._prepareOverlayToolbar(bEditMode);
        this._prepareOverlayHeaderBtns(bEditMode);
        this._prepareOverlayBody();
        this._prepareOverlayButtons(bEditMode);

        if (bEditMode) {
            sInitiallyFocusedId = this.getId() + "-overlayBody";
        } else {
            sInitiallyFocusedId = this.getId() + "-overlay-close";
        }

        this._oOverlayCard.open(sInitiallyFocusedId);
        
        jQuery.sap.byId(this.getId() + "-overlay-thumb-down-button").attr("aria-pressed", this.getThumbDown());
        jQuery.sap.byId(this.getId() + "-overlay-thumb-up-button").attr("aria-pressed", this.getThumbUp());
    }
};

sap.suite.ui.commons.NoteTakerCard.prototype._getFormattedBody = function() {
    var aBuffer = [];
    var sText = this.getBody();
    do {
        var iPos = sText.search(/[\s<>]/); //search for whitespace character
        var sSpace = "",
            sWord = "";

        if (iPos < 0) {
            // only 1 word
            sWord = sText;
        } else {
            sWord = sText.slice(0, iPos);
            sSpace = sText.slice(iPos, iPos + 1);
            sText = sText.slice(iPos + 1);
        }

        // check for special strings
        switch (true) {
            case (this._isFullUrl(sWord)) :
                this.wrapFullUrl(aBuffer, sWord, sSpace);
                break;

            case (this._isShortUrl(sWord)) :
                this._wrapShortUrl(aBuffer, sWord, sSpace);
                break;

            case (this._isEmail(sWord)) :
                this._wrapEmail(aBuffer, sWord, sSpace);
                break;

            default :
                // regular word
                //rm.writeEscaped(sWord + sSpace, true);
                aBuffer.push(jQuery.sap.encodeHTML(sWord + sSpace));
        }
    } while(iPos >= 0);
    
    return aBuffer.join("");
};

/**
 * Verifies if the given word is a valid URL address starting with HTTP, HTTPS or FTP protocol.
 * The check is case-insensitive.
 * @param sWord - Word to check.
 * @return {Boolean} - true if the word starts with http, https or ftp and is a valid URL.
 */
sap.suite.ui.commons.NoteTakerCard.prototype._isFullUrl = function(sWord) {
    return /^(https?|ftp):\/\//i.test(sWord) && jQuery.sap.validateUrl(sWord);
};

/**
 * Verifies if the given word is a valid URL address starting with WWW.
 * The check is case-insensitive.
 * @param sWord - Word to check.
 * @return {Boolean} - true if the word starts with www and is a valid URL for http request.
 */
sap.suite.ui.commons.NoteTakerCard.prototype._isShortUrl = function (sWord) {
    return /^(www\.)/i.test(sWord) && jQuery.sap.validateUrl("http://" + sWord);
};

/**
 * Verifies if the given word is a valid e-mail address.
 * The check is case-insensitive. E-mail address is valid if contains @-sign, and 2-6 chars long domain extension.
 * @param sWord - Word to check.
 * @return {Boolean} - true if the word is a valid e-mail address.
 */
sap.suite.ui.commons.NoteTakerCard.prototype._isEmail = function (sWord) {
    return /^[\w\.=-]+@[\w\.-]+\.[\w]{2,5}$/.test(sWord);
};

/*
 * Renders full URL (with protocol specified) as clickable link.
 * @param aBuffer - string array.
 * @param sWord - Parsed word to render as URL.
 * @param sSpace - Whitespace character(s) to render after the link.
 */
sap.suite.ui.commons.NoteTakerCard.prototype.wrapFullUrl = function(aBuffer, sWord, sSpace) {
    aBuffer.push('<a class="sapUiLnk" ');
    aBuffer.push('href = ' + '"' + jQuery.sap.encodeHTML(sWord) + '"');
    aBuffer.push(' target = "_blank"');
    aBuffer.push('>');
    aBuffer.push(jQuery.sap.encodeHTML(sWord));
    aBuffer.push('</a>' + sSpace);
};

/*
 * Renders short URL (without protocol specified) as clickable link.
 * @param aBuffer - string array.
 * @param sWord - Parsed word to render as URL.
 * @param sSpace - Whitespace character(s) to render after the link.
 */
sap.suite.ui.commons.NoteTakerCard.prototype._wrapShortUrl = function(aBuffer, sWord, sSpace) {
    aBuffer.push('<a class="sapUiLnk" ');
    aBuffer.push('href = ' + '"' + jQuery.sap.encodeHTML("http://" + sWord) + '"');
    aBuffer.push(' target = "_blank"');
    aBuffer.push('>');
    aBuffer.push(jQuery.sap.encodeHTML(sWord));
    aBuffer.push('</a>' + sSpace);
};

/*
 * Renders Email (with protocol specified) as clickable link.
 * @param aBuffer - string array.
 * @param sWord - Parsed word to render as email address.
 * @param sSpace - Whitespace character(s) to render after the link.
 */
sap.suite.ui.commons.NoteTakerCard.prototype._wrapEmail = function(aBuffer, sWord, sSpace) {
    aBuffer.push('<a class="sapUiLnk" ');
    aBuffer.push('href = "mailto:' + jQuery.sap.encodeHTML(sWord) + '"');
    aBuffer.push('>');
    aBuffer.push(jQuery.sap.encodeHTML(sWord));
    aBuffer.push('</a>' + sSpace);
};

sap.suite.ui.commons.NoteTakerCard.prototype._wrapBodyToDiv = function(sText) {
    return "<div class='sapSuiteUiCommonsNoteTakerCardBody'>" + sText + "</div>";
};

sap.suite.ui.commons.NoteTakerCard.prototype._wrapTagPanelToDiv = function(sText, bEditMode) {
    if(bEditMode) {
        return "<div class='suiteUiNtcOverlayTagPanelEditMode'>" + sText + "</div>";
    }
    else {
        return "<div class='suiteUiNtcOverlayTagPanelViewMode'>" + sText + "</div>";
    }
};

sap.suite.ui.commons.NoteTakerCard.prototype._handleEdit = function() {
    this._openOverlay(true);
};

/*
 * Prepares tag list as HTML code for rendering.
 */
sap.suite.ui.commons.NoteTakerCard.prototype._getFormattedTags = function() {
    var aBuffer = [];
    var aTags;

    if (this._oOverlayCard.isOpen()) {
        aTags = this._oOverlayCard._selectedTags;
    } else {
        aTags = this.getTags();
    }

    aBuffer.push("<div id='" + this.getId() + "-tag-list' class='sapSuiteUiCommonsNoteTakerCardTagList'>");

    if (aTags.length==0) {
        aBuffer.push(this._rb.getText("NOTETAKERCARD_LABEL_TAGS_EMPTY"));
    } else {
        aBuffer.push(this._rb.getText("NOTETAKERCARD_LABEL_TAGS_FULL") + ": ");
        var sTags = jQuery.sap.encodeHTML(aTags.sort().join(" "));
        aBuffer.push("<span title='" + sTags + "'>");
        aBuffer.push(sTags);
        aBuffer.push("</span>");
    }
    aBuffer.push("</div>");
    return aBuffer.join("");
};

sap.suite.ui.commons.NoteTakerCard.prototype._handleDelete = function(bCloseOverlay) {
    var that = this;
    sap.ui.commons.MessageBox.show(
            this._rb.getText("NOTETAKERCARD_CONFIRMATION_DELETE_MESSAGE"),
            sap.ui.commons.MessageBox.Icon.QUESTION,
            this._rb.getText("NOTETAKERCARD_CONFIRMATION_DELETE_TITLE"),
            [sap.ui.commons.MessageBox.Action.YES, sap.ui.commons.MessageBox.Action.NO],
            function(sResult) {
                if (sResult == sap.ui.commons.MessageBox.Action.YES) {
                    if (bCloseOverlay) {
                        that._closeOverlay();
                    }
                    that._handleDeleteClick();
                }
            },
            sap.ui.commons.MessageBox.Action.NO
    );
};

sap.suite.ui.commons.NoteTakerCard.prototype._handleDeleteClick = function() {
    var eData = {};
    eData.uid = this.getUid();
    eData.cardId = this.getId();
    eData.title = this.getHeader();
    eData.timestamp = this.getTimestamp();
    eData.body = this.getBody();
    eData.thumbUp = this.getThumbUp();
    eData.thumbDown = this.getThumbDown();

    this.fireDeleteNote(eData);
};

sap.suite.ui.commons.NoteTakerCard.prototype.setUid = function(sUid) {
    this.setProperty("uid", sUid, true); // no automatic rerendering
};

sap.suite.ui.commons.NoteTakerCard.prototype._wrapThumbToDiv = function(sId) {
	var sClassName = null;
	var sTooltip = null;
	
	if (this.getThumbUp() && !this.getThumbDown()) {
		sClassName = "sapSuiteUiCommonsNoteTakerCardThumbUp";
		sTooltip = this._rb.getText("NOTETAKERCARD_ICON_THUMB_UP_TOOLTIP");
        this._oOverlayCard.removeStyleClass("suiteUiNtcNegativeCard");
        this._oOverlayCard.addStyleClass("suiteUiNtcPositiveCard");
	} else if (!this.getThumbUp() && this.getThumbDown()) {
		sClassName = "sapSuiteUiCommonsNoteTakerCardThumbDown";
		sTooltip = this._rb.getText("NOTETAKERCARD_ICON_THUMB_DOWN_TOOLTIP");
        this._oOverlayCard.removeStyleClass("suiteUiNtcPositiveCard");
        this._oOverlayCard.addStyleClass("suiteUiNtcNegativeCard");
	} else {
        this._oOverlayCard.removeStyleClass("suiteUiNtcPositiveCard");
        this._oOverlayCard.removeStyleClass("suiteUiNtcNegativeCard");
    }
	var aBuffer = [];
	aBuffer.push("<div");
	if (sId) {
		aBuffer.push(" id='");
		aBuffer.push(sId);
		aBuffer.push("'");
	}
	if (sClassName) {
		aBuffer.push(" class='");
		aBuffer.push(sClassName);
		aBuffer.push("'");

		aBuffer.push(" title='");
		aBuffer.push(sTooltip);
		aBuffer.push("'");
	}
	
	aBuffer.push("></div>");
	
	return aBuffer.join("");
};

sap.suite.ui.commons.NoteTakerCard.prototype._handleAddTag = function(sTag) {
    this._oOverlayCard._selectedTags = [];
    var aNewTags = sTag.split(new RegExp("\\s+"));

    var oTemp = {};

    for (var i = 0; i < aNewTags.length; i++) {
        if (aNewTags[i].length != 0) {
            oTemp[aNewTags[i]] = 0;
        }
    }

    for (var field in oTemp) {
        this._oOverlayCard._selectedTags.push(field);
    }

    // Update tag panel with new values
    var oTagPanel = sap.ui.getCore().byId(this.getId() + '-overlayTagPanel');
    oTagPanel.setContent(this._wrapTagPanelToDiv(this._getFormattedTags(), true));
    this._adjustTagButton();
};

sap.suite.ui.commons.NoteTakerCard.prototype._adjustTagButton = function() {
    var oTagButton = this._oOverlayCard._tagControls.tagButton;
    if (this._oOverlayCard._selectedTags.length) {
        oTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    } else {
        oTagButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    }
};

sap.suite.ui.commons.NoteTakerCard.prototype._toggleTagPopup = function() {
    var aSelectedTags = this._oOverlayCard._selectedTags;

    if (this._bTagPopupOpen) {
    	jQuery.sap.byId(this.getId() + "-selectTag-panel").slideToggle();
        this._focusDefaultControl();
        this._bTagPopupOpen = false;
    } else {
        this._addTagsToListBox(this.getAllTags());
        jQuery.sap.byId(this.getId() + "-selectTag-panel").slideToggle();
        jQuery.sap.byId(this.getId() + "-inputTag").val(aSelectedTags.length == 0 ? "" : aSelectedTags.join(" ") + " ");
        this._oOverlayCard._tagControls.tagInput.focus();
        this._bTagPopupOpen = true;
    }
};

sap.suite.ui.commons.NoteTakerCard.prototype._focusDefaultControl = function() {
    this._oOverlayCard._tagControls.tagButton.focus();
};

sap.suite.ui.commons.NoteTakerCard.prototype._handleTagInputLive = function(oEvent) {
    var sLiveValue = oEvent.getParameter("liveValue");
    var aNewTags = sLiveValue.split(" ");
    var sCurrentlyEntering = aNewTags[aNewTags.length - 1];
    this._filterListBox(sCurrentlyEntering);
};

sap.suite.ui.commons.NoteTakerCard.prototype._filterListBox = function(sInput) {
    if (sInput.length == 0) {
        this._addTagsToListBox(this.getAllTags());
        return;
    }

    var aFiltered = jQuery.grep(this.getAllTags(), function(a){
        if (a.indexOf(sInput) >= 0) {
            return true;
        }
    });

    this._addTagsToListBox(aFiltered);
};

sap.suite.ui.commons.NoteTakerCard.prototype._addTagsToListBox = function(aTags) {
    var aListItems = jQuery.map(aTags, function(v, i) {
        return new sap.ui.core.ListItem({text: v});
    });

    this._oOverlayCard._tagControls.tagList.setItems(aListItems, true);
    this._oOverlayCard._tagControls.tagList.rerender();
};

sap.suite.ui.commons.NoteTakerCard.prototype._handleListSelect = function(oEvent) {
    var sSelectedTag = oEvent.getParameter("selectedItem").getText();
    var oTagInput = this._oOverlayCard._tagControls.tagInput;
    var sTemp = oTagInput.getValue();
    var aNewTags = sTemp.split(" ");

    aNewTags.pop();

    if(aNewTags.length == 0) {
        oTagInput.setValue(sSelectedTag + " ");
    } else {
        oTagInput.setValue(aNewTags.join(" ") + " " + sSelectedTag + " ");
    }

    this._oOverlayCard._tagControls.tagList.setSelectedIndex(-1);
    oTagInput.focus();
};

sap.suite.ui.commons.NoteTakerCard.prototype._destroyTagControls = function() {
    var tagControls = this._oOverlayCard._tagControls;
    for (var controlName in tagControls) {
        tagControls[controlName].destroy();
    }
    this._oOverlayCard._tagControls = {};
};

sap.suite.ui.commons.NoteTakerCard.prototype._createTagSelectorControl = function() {

    var oTagControls = this._oOverlayCard._tagControls;

    var oTagSelectorLayout = new sap.ui.commons.layout.VerticalLayout({
        id: this.getId() + "-selectTag-panel"
    });
    oTagSelectorLayout.addStyleClass("sapSuiteUiCommonsNoteTakerFeederSelectTagPanel");
    oTagSelectorLayout.addStyleClass("sapUiShd");
    oTagControls.tagSelectorLayout = oTagSelectorLayout;

    // Arrow
    oTagSelectorLayout.addContent(new sap.ui.core.HTML(this.getId() + "-selectTag-arrow", {
        content: "<div class='sapSuiteUiCommonsNoteTakerFeederSelectTagArrow' ></div>"
    }));

    // Title
    oTagSelectorLayout.addContent(new sap.ui.core.HTML(this.getId() + "-selectTag-header", {
        content: ["<div class='sapSuiteUiCommonsNoteTakerFeederSelectTagHeader' >",
                    this._rb.getText("NOTETAKERFEEDER_TOOLPOPUP_TITLE"),
                  "</div>"].join("")
    }));

    oTagSelectorLayout.addContent(oTagControls.tagInput);
    oTagSelectorLayout.addContent(oTagControls.tagList);

    //Buttons
    var oTagSelectorButtonsLayout = new sap.ui.commons.layout.HorizontalLayout();
    oTagSelectorButtonsLayout.addStyleClass("sapSuiteUiCommonsNoteTakerFeederSelectTagButtons");
    oTagSelectorButtonsLayout.addContent(oTagControls.tagApplyBtn);
    oTagSelectorButtonsLayout.addContent(oTagControls.tagCancelBtn);
    oTagSelectorLayout.addContent(oTagSelectorButtonsLayout);

    return oTagSelectorLayout;
};

sap.suite.ui.commons.NoteTakerCard.prototype._prepareAttachmentPanel = function(bIsInOverlay) {
    var sIdPrefix = bIsInOverlay ? "-overlay" : "";
    var sCssPrefix = bIsInOverlay ? "Overlay" : "";

    var sId = [this.getId(), sIdPrefix, "-attachmentPanel"].join("");
    var oCurrentControl = sap.ui.getCore().byId(sId);
    if (oCurrentControl) {
        oCurrentControl.destroy();
    }

    var oAttachmentLayout = new sap.ui.commons.layout.HorizontalLayout(sId);
    oAttachmentLayout.addStyleClass(["suiteUiNtc", sCssPrefix, "AttachmentPanel"].join(""));
    oAttachmentLayout.addContent( new sap.ui.core.HTML({content: "<div class='suiteUiNtcAttachmentIcon'></div>"}) );
    var oAttachmentLink = new sap.ui.commons.Link({
        id: [this.getId(), sIdPrefix, "-attachmentLink"].join(""),
        text: this.getAttachmentFilename(),
        tooltip: this._rb.getText("NOTETAKERCARD_LINK_ATTACHMENT_TOOLTIP"),
        press: this._handleAttachmentDownload,
        href: this.getAttachmentUrl()
    });
    oAttachmentLink._ntc = this;
    oAttachmentLayout.addContent( oAttachmentLink );
    return oAttachmentLayout;
};

sap.suite.ui.commons.NoteTakerCard.prototype._prepareOverlayLayouts = function() {

    var oTopSectionLayout = new sap.ui.commons.layout.VerticalLayout();
    
    // Header&Timestamp (left side)
    var oHeaderLeftSideLayout = new sap.ui.commons.layout.VerticalLayout();
    oHeaderLeftSideLayout.addStyleClass("sapSuiteUiCommonsNtcOverlayTitle");
    
    // Edit&Delete buttons (right side)
    var oHeaderRightSideLayout = new sap.ui.commons.layout.HorizontalLayout();
    oHeaderRightSideLayout.addStyleClass("sapSuiteUiCommonsNtcHeaderButtons");

	// Title, timestamp and Edit&Delete buttons
    var oHeaderLayout = new sap.ui.commons.layout.HorizontalLayout(this.getId() + '-overlayHeader', {
    	content:[oHeaderLeftSideLayout, oHeaderRightSideLayout]
    });
    oHeaderLayout.addStyleClass("sapSuiteUiCommonsNtcOverlayHeader");
    oTopSectionLayout.addContent(oHeaderLayout);

    // Toolbar
    var oToolbarLayout = new sap.ui.commons.layout.HorizontalLayout(this.getId() + '-overlayToolbar');
    oToolbarLayout.addStyleClass("suiteUiNtcToolbar");

    // Left side section
    var oToolbarLeftSideLayout = new sap.ui.commons.layout.HorizontalLayout();
    oToolbarLeftSideLayout.addStyleClass("suiteUiNtcOverlayToolbarLeftPanel");

    // Thumbs section of the toolbar
    var oToolbarRightSideLayout = new sap.ui.commons.layout.HorizontalLayout();
    oToolbarRightSideLayout.addStyleClass("suiteUiNtcOverlayToolbarRightPanel");

    // Construct toolbar
    oToolbarLayout.addContent(oToolbarLeftSideLayout);
    oToolbarLayout.addContent(oToolbarRightSideLayout);
    oTopSectionLayout.addContent(oToolbarLayout);
    this._oOverlayCard.addContent(oTopSectionLayout);

    // Body section
    var oBodySectionVerticalLayout = new sap.ui.commons.layout.VerticalLayout();
    oBodySectionVerticalLayout.addStyleClass("sapSuiteUiCommonsNoteTakerCardContent");
    
    // Buttons section
    var oButtonsHorizontalLayout = new sap.ui.commons.layout.HorizontalLayout(this.getId() + "-buttons");
    oButtonsHorizontalLayout.addStyleClass("sapSuiteUiCommonsNoteTakerCardOverlayButtonPanel");

    this._oOverlayCard.layouts = {
        topSection: oTopSectionLayout,
        headerLeft: oHeaderLeftSideLayout,
        headerRight: oHeaderRightSideLayout,
        toolbar: oToolbarLayout,
        toolbarLeft: oToolbarLeftSideLayout,
        toolbarRight: oToolbarRightSideLayout,
        body: oBodySectionVerticalLayout,
        buttons: oButtonsHorizontalLayout
    };
};

sap.suite.ui.commons.NoteTakerCard.prototype._prepareOverlayHeaderBtns = function(bEditMode) {
    var that = this;

    // Edit button
    var oEditButton = new sap.ui.commons.Button(this.getId() + "-editButton", {
    	tooltip : this._rb.getText("NOTETAKERCARD_BUTTON_EDIT_TOOLTIP"),
        press : function() {
            that._fnEdit();
        }
    });
    that._oOverlayCard.layouts.headerRight.addContent(oEditButton, 0);
    if (bEditMode) {
    	oEditButton.setEnabled(false);
        oEditButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardEditButtonDsbl");
    }
    else {
    	oEditButton.setEnabled(true);
        oEditButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardEditButton");
    }
    
    // Delete button
    var oDeleteButton = new sap.ui.commons.Button(this.getId() + "-deleteButton", {
        tooltip : this._rb.getText("NOTETAKERCARD_BUTTON_DELETE_TOOLTIP"),
        press : function() {
            that._handleDelete(true);
        }
    });
    oDeleteButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardDeleteButton");
    that._oOverlayCard.layouts.headerRight.addContent(oDeleteButton, 1);
    
    // Timestamp
    var oTimeStamp = new sap.ui.commons.Label(this.getId() + "-overlayTimestamp", {
		text : that.getFormattedTimestamp()
		});
	oTimeStamp.addStyleClass("sapSuiteUiCommonsNoteTakerCardTimestamp");
	that._oOverlayCard.layouts.headerLeft.addContent(oTimeStamp, 1);
};

sap.suite.ui.commons.NoteTakerCard.prototype._prepareOverlayToolbar = function(bEditMode) {

    // Create tag list
    this._oOverlayCard._selectedTags = this.getTags();

    // Attachment panel
    if (this.getAttachmentFilename()!=="") {
        var oAttachmentPanel = this._prepareAttachmentPanel(true);
        this._oOverlayCard.layouts.topSection.addContent(oAttachmentPanel);

        this._oOverlayCard.layouts.body.addStyleClass("suiteUiNtcOverlayWithAttachment");
    } else {
        this._oOverlayCard.layouts.body.addStyleClass("suiteUiNtcOverlayWithoutAttachment");
    }
};


sap.suite.ui.commons.NoteTakerCard.prototype._prepareOverlayBody = function() {
    this._oOverlayCard.addContent(this._oOverlayCard.layouts.body);

};

sap.suite.ui.commons.NoteTakerCard.prototype._prepareOverlayButtons = function(bEditMode) {
    var that = this;

    // Close button
    var oCloseButton = new sap.ui.commons.Button(this.getId() + "-closeButton", {
        text : this._rb.getText("NOTETAKERCARD_BUTTON_CLOSE_OVERLAY"),
        tooltip : this._rb.getText("NOTETAKERCARD_BUTTON_CLOSE_OVERLAY_TOOLTIP"),
        press : function() {
        	that._handleOverlayCloseEvent(that._oOverlayCard);
        }
    });
    oCloseButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardOverlayButtonClose");

    // Save button
    var oSaveButton = new sap.ui.commons.Button(this.getId() + "-saveButton", {
        text : this._rb.getText("NOTETAKERCARD_BUTTON_SAVE_TEXT"),
        tooltip : this._rb.getText("NOTETAKERCARD_BUTTON_SAVE_TOOLTIP"),
        press : function() {
          that._fnSave();
        }
    });
    oSaveButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardOverlayButtonSave");
    that._oOverlayCard.layouts.buttons.addContent(oCloseButton, 0);
    that._oOverlayCard.layouts.buttons.addContent(oSaveButton, 1);

    if (bEditMode) {
    	oSaveButton.setEnabled(true);
        this._fnCreateInEditMode();
    }
    else {
    	oSaveButton.setEnabled(false);
        this._fnCreateInViewMode();
    }

    this._oOverlayCard.addContent(this._oOverlayCard.layouts.buttons);
};

// Adds components for the View mode of the overlay
sap.suite.ui.commons.NoteTakerCard.prototype._fnCreateInViewMode = function() {
    var that = this;
    that._oOverlayCard.bEditMode = false;

    //Title viewer section
    var oCardLabel = new sap.ui.commons.Label(that.getId() + "-overlayCardHeader", {
        text : that.getHeader()
    });
    oCardLabel.addStyleClass("sapSuiteUiCommonsNoteTakerCardTitle");
    that._oOverlayCard.layouts.headerLeft.insertContent(oCardLabel, 0);

    // Tag viewer section of the toolbar
    var oTagPanel = new sap.ui.core.HTML(that.getId() + '-overlayTagPanel');
    oTagPanel.setContent(that._wrapTagPanelToDiv(that._getFormattedTags(), that._oOverlayCard.bEditMode));

    that._oOverlayCard.layouts.toolbarLeft.addContent(oTagPanel);

    // Display thumb if any
    var oThumb = new sap.ui.core.HTML({
        id: that.getId() + "-overlay-thumb",
        content: that._wrapThumbToDiv()
    });
    that._oOverlayCard.layouts.toolbarRight.addContent(oThumb);

    // Display body
    var oCardBody = new sap.ui.core.HTML(that.getId() + "-overlayBody");
    oCardBody.setContent(that._wrapBodyToDiv(that._getFormattedBody()));
    oCardBody.addStyleClass("sapSuiteUiCommonsNoteTakerCardBody");
    that._oOverlayCard.layouts.body.addContent(oCardBody);

    // Display Save button in the correct state
    var oSaveButton = that._oOverlayCard.layouts.buttons.getContent()[1];
    oSaveButton.setEnabled(false);
    // Display Edit button in the correct state
    var oEditBtn = that._oOverlayCard.layouts.headerRight.getContent()[0];
    oEditBtn.setEnabled(true);
    oEditBtn.removeStyleClass("sapSuiteUiCommonsNoteTakerCardEditButtonDsbl");
    oEditBtn.addStyleClass("sapSuiteUiCommonsNoteTakerCardEditButton");
};

// Adds components for the Edit mode of the overlay
sap.suite.ui.commons.NoteTakerCard.prototype._fnCreateInEditMode = function() {
    var that = this;
    that._oOverlayCard.bEditMode = true;

    // Display editable title
	var oCardTitleField = new sap.ui.commons.TextField(that.getId() + "-overlayCardTitle", {
		maxLength : 50
	});
	oCardTitleField.setValue(that.getHeader());
	oCardTitleField.addStyleClass("sapSuiteUiCommonsNoteTakerCardTitle");
	var oTitleEdit = new sap.ui.commons.InPlaceEdit(that.getId() + "-overlayCardTitleEdit", {
		content: oCardTitleField,
		tooltip: that._rb.getText("NOTETAKERCARD_EDITFIELD_TITLE_TOOLTIP"),
		design: sap.ui.commons.TextViewDesign.H2,
		undoEnabled: false
	});
	oTitleEdit.addStyleClass("sapSuiteUiCommonsNtcdTitleEdit");
    that._oOverlayCard.layouts.headerLeft.insertContent(oTitleEdit, 0);

    // Tag viewer section of the toolbar
    var oTagPanel = new sap.ui.core.HTML(that.getId() + '-overlayTagPanel');
    oTagPanel.setContent(that._wrapTagPanelToDiv(that._getFormattedTags(), that._oOverlayCard.bEditMode));

    that._oOverlayCard.layouts.toolbarLeft.addContent(oTagPanel);

    // Create tag selector button
    var oTagButton = new sap.ui.commons.Button({
        id: that.getId() + "-tag-button",
        tooltip: that._rb.getText("NOTETAKERCARD_BUTTON_TAG_TOOLTIP"),
        press: function() {
            that._toggleTagPopup();
        }
    });
    oTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederTagButton");

    var oTagList = new sap.ui.commons.ListBox({
        id: that.getId() + "-tagListBox",
        visibleItems: 10,
        width: "100%",
        height: "194px",
        select: function(oEvent) {
            that._handleListSelect(oEvent);
        }
    });

    var oTagInput = new sap.ui.commons.TextField({
        id: that.getId() + "-inputTag",
        liveChange: function(oEvent) {
            that._handleTagInputLive(oEvent);
        }
    });
    oTagInput.onsapdown = function(oEvent) {
        oEvent.preventDefault();
        oEvent.stopPropagation();
        jQuery("#" + that.getId() + "-tagListBox li:eq(0)").focus();
    };

    var oCancelTagButton = new sap.ui.commons.Button({
        id: that.getId() + "-cancel-tags-button",
        text: that._rb.getText("NOTETAKERFEEDER_BUTTON_CANCEL_TAGS"),
        tooltip: that._rb.getText("NOTETAKERFEEDER_BUTTON_CANCEL_TAGS_TOOLTIP"),
        press: function() {
            that._toggleTagPopup();
        }
    });
    oCancelTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederCancelTagButton");

    var oAddTagButton = new sap.ui.commons.Button({
        id: that.getId() + "-add-tags-button",
        text: that._rb.getText("NOTETAKERFEEDER_BUTTON_ADD_TAGS"),
        tooltip: that._rb.getText("NOTETAKERFEEDER_BUTTON_ADD_TAGS_TOOLTIP"),
        press: function() {
            that._handleAddTag(oTagInput.getValue());
            oTagButton.rerender();
            that._toggleTagPopup();
        }
    });

    // Store tag controls
    that._oOverlayCard._tagControls = {
        tagButton: oTagButton,
        tagList: oTagList,
        tagInput: oTagInput,
        tagCancelBtn: oCancelTagButton,
        tagApplyBtn: oAddTagButton
    };

    that._oOverlayCard.addContent(that._createTagSelectorControl());

    // Create thumb up button
    var oThumbUpButton = new sap.ui.commons.Button({
        id: that.getId() + "-overlay-thumb-up-button",
        press: function(e){
            that._oOverlayCard.bThumbUp = !that._oOverlayCard.bThumbUp;
            if (that._oOverlayCard.bThumbUp) {
                that._oOverlayCard.bThumbDown = false;
            }

            fnSetThumbsView();
        },
        tooltip : that._rb.getText("NOTETAKERFEEDER_BUTTON_THUMB_UP_TOOLTIP")
    });
    oThumbUpButton.addStyleClass("sapSuiteUiCommonsNoteTakerThumbUpBtn");

    // Create thumb down button
    var oThumbDownButton = new sap.ui.commons.Button({
        id: that.getId() + "-overlay-thumb-down-button",
        press: function(e){
            that._oOverlayCard.bThumbDown = !that._oOverlayCard.bThumbDown;
            if (that._oOverlayCard.bThumbDown) {
                that._oOverlayCard.bThumbUp = false;
            }

            fnSetThumbsView();
        },
        tooltip : that._rb.getText("NOTETAKERFEEDER_BUTTON_THUMB_DOWN_TOOLTIP")
    });
    oThumbDownButton.addStyleClass("sapSuiteUiCommonsNoteTakerThumbDownBtn");

    // Thumb buttons adjustment
    var fnSetThumbsView = function() {
        if (that._oOverlayCard.bThumbUp) {
            oThumbUpButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardSelectedBtn");
            that._oOverlayCard.addStyleClass("suiteUiNtcPositiveCard");
        } else {
            oThumbUpButton.removeStyleClass("sapSuiteUiCommonsNoteTakerCardSelectedBtn");
            that._oOverlayCard.removeStyleClass("suiteUiNtcPositiveCard");
        }

        if (that._oOverlayCard.bThumbDown) {
            oThumbDownButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardSelectedBtn");
            that._oOverlayCard.addStyleClass("suiteUiNtcNegativeCard");
        } else {
            oThumbDownButton.removeStyleClass("sapSuiteUiCommonsNoteTakerCardSelectedBtn");
            that._oOverlayCard.removeStyleClass("suiteUiNtcNegativeCard");
        }
        
        jQuery.sap.byId(oThumbUpButton.getId()).attr("aria-pressed", that._oOverlayCard.bThumbUp);
        jQuery.sap.byId(oThumbDownButton.getId()).attr("aria-pressed", that._oOverlayCard.bThumbDown);
    };

    fnSetThumbsView();

    // Adding toolbar elements
    that._oOverlayCard.layouts.toolbarLeft.insertContent(oTagButton, 0);
    that._oOverlayCard.layouts.toolbarRight.addContent(oThumbUpButton);
    that._oOverlayCard.layouts.toolbarRight.addContent(oThumbDownButton);

    // Display editable body
    var oSaveButton = that._oOverlayCard.layouts.buttons.getContent()[1];
    oSaveButton.setEnabled(true);
    var oCardBody = new sap.ui.commons.TextArea(that.getId() + "-overlayBody" ,{
        liveChange : function(e) {
            var sEnteredText = e.getParameter("liveValue");
            var bEnabled = (sEnteredText != null) && !/^\s*$/.test(sEnteredText);

            if (bEnabled !== oSaveButton.getEnabled()) {
                oSaveButton.setEnabled(bEnabled);
            }
        }
    });
    oCardBody.setValue(that.getBody());
    oCardBody.addStyleClass("sapSuiteUiCommonsNoteTakerCardBody");
    that._oOverlayCard.layouts.body.addContent(oCardBody);

    // Display Edit button in the correct state
    var oEditBtn = that._oOverlayCard.layouts.headerRight.getContent()[0];
    oEditBtn.setEnabled(false);
    oEditBtn.removeStyleClass("sapSuiteUiCommonsNoteTakerCardEditButton");
    oEditBtn.addStyleClass("sapSuiteUiCommonsNoteTakerCardEditButtonDsbl");
    
};

sap.suite.ui.commons.NoteTakerCard.prototype._fnSave = function() {
    var that = this;
    //._ntc;
    var oTitleEdit = that._oOverlayCard.layouts.headerLeft.getContent()[0];
    var oCardTitleField = oTitleEdit.getContent();
    var oCardBody = that._oOverlayCard.layouts.body.getContent()[0];

    if (oCardBody.getValue()) {
        if(!this.getBinding("body")) {
            that.setHeader(oCardTitleField.getValue());
            that.setBody(oCardBody.getValue());
            that.setTimestamp(new Date());

            that.setThumbUp(that._oOverlayCard.bThumbUp);
            that.setThumbDown(that._oOverlayCard.bThumbDown);
            that.setTags(that._oOverlayCard._selectedTags);
        }

        var eData = {};
        eData.uid = that.getUid();
        eData.title = oCardTitleField.getValue();
        eData.body = oCardBody.getValue();
        eData.timestamp = new Date();
        eData.thumbUp = that._oOverlayCard.bThumbUp;
        eData.thumbDown = that._oOverlayCard.bThumbDown;
        eData.tags = that._oOverlayCard._selectedTags;
        that.fireEditNote(eData);

        that._oOverlayCard.layouts.headerLeft.removeContent(oTitleEdit);
        oTitleEdit.destroy();
        oCardTitleField.destroy();
        that._oOverlayCard.layouts.body.removeContent(oCardBody);
        oCardBody.destroy();

        that._destroyTagControls();
        that._oOverlayCard.layouts.toolbarLeft.destroyContent();
        that._oOverlayCard.layouts.toolbarRight.destroyContent();

        that._fnCreateInViewMode();

        jQuery.sap.byId(that.getId() + "-overlayTimestamp").html(that.getFormattedTimestamp());
        jQuery.sap.byId(that.getId() + "-overlay-close").focus();
    } else {
        //TODO oEditSaveButton.setEnabled(false);
    }
};

sap.suite.ui.commons.NoteTakerCard.prototype._fnEdit = function() {
    var that = this;
    var oCardLabel = that._oOverlayCard.layouts.headerLeft.getContent()[0];
    var oCardBody = that._oOverlayCard.layouts.body.getContent()[0];

    that._oOverlayCard.layouts.topSection.removeContent(oCardLabel);
    oCardLabel.destroy();
    that._oOverlayCard.layouts.body.removeContent(oCardBody);
    oCardBody.destroy();
    that._oOverlayCard.layouts.toolbarLeft.destroyContent();
    that._oOverlayCard.layouts.toolbarRight.destroyContent();

    that._fnCreateInEditMode();

    that._oOverlayCard.layouts.topSection.rerender();
    //set focus to text area. render it first
    that._oOverlayCard.layouts.body.rerender();
    jQuery.sap.focus(jQuery.sap.domById(that.getId() + "-overlayBody"));
};

sap.suite.ui.commons.NoteTakerCard.prototype._handleAttachmentDownload = function() {
    var that = this._ntc;

    var eData = {};
    eData.uid = that.getUid();
    eData.url = that.getAttachmentUrl();
    eData.filename = that.getAttachmentFilename();
    
    that.fireAttachmentClick(eData);
};

}; // end of sap/suite/ui/commons/NoteTakerCard.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NoteTakerCardRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.NoteTakerCardRenderer");



/**
 * @class NoteTakerCard renderer.
 * @static
 */
sap.suite.ui.commons.NoteTakerCardRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.NoteTakerCardRenderer.render = function(rm, oControl){

    // write the HTML into the render manager
    var sFullHeader = oControl.getHeader();
    var sTruncatedHeader = this.getTruncatedHeader(sFullHeader);
    var bShowViewAllLink = oControl.getBody().length > oControl.getViewAllTrigger();
    var bShowAttachment = oControl.getAttachmentFilename() !== "";
    var rh = new sap.suite.ui.commons.util.RenderingHelper(rm);

    // main DIV element
    rm.write("<div");
    rm.writeControlData(oControl);
    rm.addClass("sapSuiteUiCommonsNoteTakerCard");
    if (oControl.getThumbUp()) {
        rm.addClass("suiteUiNtcPositiveCard");
    }
    if (oControl.getThumbDown()) {
        rm.addClass("suiteUiNtcNegativeCard");
    }
    rm.writeClasses();
    rm.writeAttribute("tabindex", "0");
    
    var ariaInfo = {role : 'region'};
    
    if (!jQuery.browser.msie) {
	    ariaInfo.describedby = [oControl.getId() + "-headerLabel", oControl.getId() + "-timestamp",
	      		              oControl.getId() + "-toolbar", oControl.getId() + "-body"].join(" ");
    }	
    rm.writeAccessibilityState(oControl, ariaInfo);
    rm.write(">");

        // header DIV element
//      rm.write("<div");
//      rm.writeAttribute("id", oControl.getId() + "-header");
//      rm.addClass("sapSuiteUiCommonsNoteTakerCardHeader");
//      rm.writeClasses();
//      rm.write(">");
        rh.writeOpeningTag('div', {
            attributes: {id: oControl.getId() + "-header"},
            classes: ['sapSuiteUiCommonsNoteTakerCardHeader']
        });
//	        rm.write("<div");
//	        rm.writeAttribute("id", oControl.getId() + "-header-buttons");
//          rm.addClass("sapSuiteUiCommonsNoteTakerCardHeaderButtons");
//          rm.writeClasses();
//	        rm.write(">");
            rh.writeOpeningTag('div', {
                attributes: {id: oControl.getId() + "-header-buttons"},
                classes: ['sapSuiteUiCommonsNoteTakerCardHeaderButtons']
            });
            	rm.renderControl(oControl._oEditButton);
	            rm.renderControl(oControl._oDeleteButton);
	        rh.writeClosingTag('div');
	        //rm.write("</div>");

            if (!sFullHeader) {
                rm.write("&nbsp;");
            } else {
                rm.write("<label");
                rm.writeAttribute("id", oControl.getId() + "-headerLabel");
                if (sFullHeader !== sTruncatedHeader) {
                    rm.writeAttributeEscaped("title", sFullHeader);
                }
                rm.write(">");
                    rm.writeEscaped(sTruncatedHeader);
                rm.write("</label>");
            }

            // timestamp DIV element
            rm.write("<div");
            rm.writeAttribute("id", oControl.getId() + "-timestamp");
            rm.addClass("sapSuiteUiCommonsNoteTakerCardTimestamp");
            rm.writeClasses();
            rm.write(">");
                rm.writeEscaped(oControl.getFormattedTimestamp());
            rm.write("</div>");
        rm.write("</div>");

        //body container DIV
        rm.write("<div");
        rm.addClass("sapSuiteUiCommonsNoteTakerCardBodyContent");
        rm.writeClasses();
        rm.write(">");

            //tag panel DIV
            rm.write("<div");
            rm.writeAttribute("id", oControl.getId() + "-toolbar");
            rm.addClass("suiteUiNtcToolbar");
            rm.writeClasses();
            rm.write(">");
                this.renderToolbar(rm, oControl);
            rm.write("</div>");

            //attachment bar DIV
            if (bShowAttachment) {
                rm.renderControl(oControl._prepareAttachmentPanel(false));
            }

            // body DIV element
            rm.write("<div");
            rm.writeAttribute("id", oControl.getId() + "-body");
            rm.addClass("sapSuiteUiCommonsNoteTakerCardBody");
            if (bShowAttachment && bShowViewAllLink) {
                rm.addClass("sapSuiteUiCommonsNtcBodyViewAllAttach");
            } else if (bShowViewAllLink) {
                rm.addClass("sapSuiteUiCommonsNtcBodyViewAll");
            } else if (bShowAttachment) {
                rm.addClass("sapSuiteUiCommonsNtcBodyAttach");
            }
            rm.writeClasses();
            rm.write(">");
                rm.write(oControl._getFormattedBody());
            rm.write("</div>");

            // view all DIV element
            if (bShowViewAllLink) {
                rm.write("<div");
                rm.writeAttribute("id", oControl.getId() + "-viewAll");
                rm.addClass("sapSuiteUiCommonsNoteTakerCardViewAll");
                rm.writeClasses();
                rm.write(">&nbsp;");
                    oControl._oViewAllLink.addStyleClass("sapSuiteUiCommonsNoteTakerCardViewAllLink");
                    rm.renderControl(oControl._oViewAllLink);
                rm.write("</div>");
            }

        rm.write("</div>"); // body container div

    rm.write("</div>"); // card div
};

/*
 * Returns truncated version of the header if it exceeds iLength
 */
sap.suite.ui.commons.NoteTakerCardRenderer.getTruncatedHeader = function(sFullHeader) {
    var iLength = 20;
    var sTerminator = "...";
    if (sFullHeader && sFullHeader.length > iLength) {
        return sFullHeader.substr(0, iLength - sTerminator.length) + sTerminator;
    } else {
        return sFullHeader;
    }
};

sap.suite.ui.commons.NoteTakerCardRenderer.renderToolbar = function(rm, oControl) {
    rm.write("<div");
    rm.writeAttribute("id", oControl.getId() + "-left-toolbar");
    rm.addClass("sapSuiteUiCommonsNoteTakerCardLeftPanel");
    if(oControl.getThumbUp() || oControl.getThumbDown()) {
        rm.addClass("sapSuiteUiCommonsNoteTakerCardWithThumbs"); 
    } else {
        rm.addClass("sapSuiteUiCommonsNoteTakerCardNoThumbs");
    }
    rm.writeClasses();
    rm.write(">");
    rm.write(oControl._getFormattedTags());
    rm.write("</div>");
    
    rm.write("<div");
    rm.writeAttribute("id", oControl.getId() + "-right-toolbar");
    rm.addClass("sapSuiteUiCommonsNoteTakerCardRightPanel");
    rm.writeClasses();
    rm.write(">");
        rm.write("<div");
        rm.writeAttribute("id", oControl.getId() + "-thumb");
        
        var thumbTooltip = "";
        if(oControl.getThumbUp() && !oControl.getThumbDown()) {
            rm.writeAttribute("class", "sapSuiteUiCommonsNoteTakerCardThumbUp");
            thumbTooltip = oControl._rb.getText("NOTETAKERCARD_ICON_THUMB_UP_TOOLTIP");
            rm.writeAttribute("title", thumbTooltip);
        } else if(!oControl.getThumbUp() && oControl.getThumbDown()) {
            rm.writeAttribute("class", "sapSuiteUiCommonsNoteTakerCardThumbDown");
            thumbTooltip = oControl._rb.getText("NOTETAKERCARD_ICON_THUMB_DOWN_TOOLTIP");
            rm.writeAttribute("title", thumbTooltip);
        }
        rm.write(">");
        
        //ARIA info
        rm.write("<span");
        rm.writeAttribute("style", "visibility: hidden; display: none;");
        rm.write(">");
        rm.writeEscaped(thumbTooltip);
        rm.write("</span>");
        
        rm.write("</div>");
    rm.write("</div>");
};
}; // end of sap/suite/ui/commons/NoteTakerCardRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NoteTakerFeeder') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.NoteTakerFeeder.
jQuery.sap.declare("sap.suite.ui.commons.NoteTakerFeeder");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new NoteTakerFeeder.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBody body} : string</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getTags tags} : object (default: [])</li>
 * <li>{@link #getThumbUp thumbUp} : boolean</li>
 * <li>{@link #getThumbDown thumbDown} : boolean</li>
 * <li>{@link #getAttachmentUploadUrl attachmentUploadUrl} : string</li>
 * <li>{@link #getAttachmentName attachmentName} : string (default: 'attachment')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.NoteTakerFeeder#event:addNote addNote} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTakerFeeder#event:attachmentSelect attachmentSelect} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTakerFeeder#event:attachmentUploadComplete attachmentUploadComplete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTakerFeeder#event:attachmentDelete attachmentDelete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTakerFeeder#event:attachmentClick attachmentClick} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control allows you to enter a quick note and N note cards.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.NoteTakerFeeder", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"body" : {type : "string", group : "Data", defaultValue : null},
		"title" : {type : "string", group : "Data", defaultValue : null},
		"tags" : {type : "object", group : "Misc", defaultValue : []},
		"thumbUp" : {type : "boolean", group : "Misc", defaultValue : null},
		"thumbDown" : {type : "boolean", group : "Misc", defaultValue : null},
		"attachmentUploadUrl" : {type : "string", group : "Misc", defaultValue : null},
		"attachmentName" : {type : "string", group : "Misc", defaultValue : 'attachment'}
	},
	events : {
		"addNote" : {}, 
		"attachmentSelect" : {}, 
		"attachmentUploadComplete" : {}, 
		"attachmentDelete" : {}, 
		"attachmentClick" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.NoteTakerFeeder with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.NoteTakerFeeder.extend
 * @function
 */

sap.suite.ui.commons.NoteTakerFeeder.M_EVENTS = {'addNote':'addNote','attachmentSelect':'attachmentSelect','attachmentUploadComplete':'attachmentUploadComplete','attachmentDelete':'attachmentDelete','attachmentClick':'attachmentClick'};


/**
 * Getter for property <code>body</code>.
 * The text inside the note card.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>body</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#getBody
 * @function
 */

/**
 * Setter for property <code>body</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sBody  new value for property <code>body</code>
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#setBody
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * This text is the header of a new note.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#setTitle
 * @function
 */


/**
 * Getter for property <code>tags</code>.
 * The list of tags selected for addition to a new note card.
 *
 * Default value is <code>[]</code>
 *
 * @return {object} the value of property <code>tags</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#getTags
 * @function
 */

/**
 * Setter for property <code>tags</code>.
 *
 * Default value is <code>[]</code> 
 *
 * @param {object} oTags  new value for property <code>tags</code>
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#setTags
 * @function
 */


/**
 * Getter for property <code>thumbUp</code>.
 * Sets positive indication for a new note.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>thumbUp</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#getThumbUp
 * @function
 */

/**
 * Setter for property <code>thumbUp</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bThumbUp  new value for property <code>thumbUp</code>
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#setThumbUp
 * @function
 */


/**
 * Getter for property <code>thumbDown</code>.
 * Sets negative indication for a new note.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>thumbDown</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#getThumbDown
 * @function
 */

/**
 * Setter for property <code>thumbDown</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bThumbDown  new value for property <code>thumbDown</code>
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#setThumbDown
 * @function
 */


/**
 * Getter for property <code>attachmentUploadUrl</code>.
 * Sets the upload attachment URL for a new card.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>attachmentUploadUrl</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#getAttachmentUploadUrl
 * @function
 */

/**
 * Setter for property <code>attachmentUploadUrl</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAttachmentUploadUrl  new value for property <code>attachmentUploadUrl</code>
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#setAttachmentUploadUrl
 * @function
 */


/**
 * Getter for property <code>attachmentName</code>.
 * The attachment property name for identification on the server side after sending data to the server.
 *
 * Default value is <code>attachment</code>
 *
 * @return {string} the value of property <code>attachmentName</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#getAttachmentName
 * @function
 */

/**
 * Setter for property <code>attachmentName</code>.
 *
 * Default value is <code>attachment</code> 
 *
 * @param {string} sAttachmentName  new value for property <code>attachmentName</code>
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#setAttachmentName
 * @function
 */


/**
 * The event is fired when a user chooses the Add button in the control. 
 *
 * @name sap.suite.ui.commons.NoteTakerFeeder#addNote
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.title The title of the note to be added.
 * @param {string} oControlEvent.getParameters.body The text of the note to be added.
 * @param {object} oControlEvent.getParameters.timestamp The timestamp of the note to be added.
 * @param {boolean} oControlEvent.getParameters.thumbUp If set to true, a new card should be marked as positive one.
 * @param {boolean} oControlEvent.getParameters.thumbDown If set to true, a new card should be marked as negative one.
 * @param {string} oControlEvent.getParameters.attachmentFilename Stores the attachment file name for a new card.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'addNote' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself. 
 *  
 * The event is fired when a user chooses the Add button in the control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachAddNote
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'addNote' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#detachAddNote
 * @function
 */

/**
 * Fire event addNote to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'title' of type <code>string</code> The title of the note to be added.</li>
 * <li>'body' of type <code>string</code> The text of the note to be added.</li>
 * <li>'timestamp' of type <code>object</code> The timestamp of the note to be added.</li>
 * <li>'thumbUp' of type <code>boolean</code> If set to true, a new card should be marked as positive one.</li>
 * <li>'thumbDown' of type <code>boolean</code> If set to true, a new card should be marked as negative one.</li>
 * <li>'attachmentFilename' of type <code>string</code> Stores the attachment file name for a new card.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerFeeder#fireAddNote
 * @function
 */


/**
 * The event is fired when the value of attached file has been changed. 
 *
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachmentSelect
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.filename A name of the attached file.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentSelect' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself. 
 *  
 * The event is fired when the value of attached file has been changed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachAttachmentSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentSelect' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#detachAttachmentSelect
 * @function
 */

/**
 * Fire event attachmentSelect to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'filename' of type <code>string</code> A name of the attached file.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerFeeder#fireAttachmentSelect
 * @function
 */


/**
 * The event is fired when the upload of the file is completed. However this covers only the client side of the Upload process and does not give any success status from the server. 
 *
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachmentUploadComplete
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.response The response message that comes from the server. On the server side this response has to be put within the "body" tags of the response document of the iFrame. It can consist of a return code and an optional message. This does not work in cross-domain scenarios.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentUploadComplete' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself. 
 *  
 * The event is fired when the upload of the file is completed. However this covers only the client side of the Upload process and does not give any success status from the server. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachAttachmentUploadComplete
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentUploadComplete' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#detachAttachmentUploadComplete
 * @function
 */

/**
 * Fire event attachmentUploadComplete to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'response' of type <code>string</code> The response message that comes from the server. On the server side this response has to be put within the "body" tags of the response document of the iFrame. It can consist of a return code and an optional message. This does not work in cross-domain scenarios.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerFeeder#fireAttachmentUploadComplete
 * @function
 */


/**
 * The event is fired when a user presses the Delete button in the Feeder card. 
 *
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachmentDelete
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.filename A name of the attached file.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentDelete' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself. 
 *  
 * The event is fired when a user presses the Delete button in the Feeder card. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachAttachmentDelete
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentDelete' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#detachAttachmentDelete
 * @function
 */

/**
 * Fire event attachmentDelete to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'filename' of type <code>string</code> A name of the attached file.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerFeeder#fireAttachmentDelete
 * @function
 */


/**
 * The event is fired when a user presses the attachment link. 
 *
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachmentClick
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.filename A name of the attached file.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentClick' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself. 
 *  
 * The event is fired when a user presses the attachment link. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachAttachmentClick
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentClick' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#detachAttachmentClick
 * @function
 */

/**
 * Fire event attachmentClick to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'filename' of type <code>string</code> A name of the attached file.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerFeeder#fireAttachmentClick
 * @function
 */


// Start of sap/suite/ui/commons/NoteTakerFeeder.js
jQuery.sap.require('sap.ui.ux3.ToolPopup'); // unlisted dependency retained

///**
// * This file defines behavior for the control,
// */

sap.suite.ui.commons.NoteTakerFeeder.prototype.init = function() {
    this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
    this._selectedTags = [];
    this._bTagPopupOpen = false;
    var that = this;

    this._oAddButton = new sap.ui.commons.Button({
        id: this.getId() + "-add-button",
        text: this._rb.getText("NOTETAKERFEEDER_BUTTON_ADD_TEXT"),
        tooltip: this._rb.getText("NOTETAKERFEEDER_BUTTON_ADD_TOOLTIP"),
        press: function() {
            that._handleAdd();
        }
    });
    this._oAddButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederHeaderAddButton");

    this._oTagList = new sap.ui.commons.ListBox({
        id: this.getId() + "-tagListBox",
        visibleItems: 10,
        width: "100%",
        height: "194px",
        select: function(oEvent) {
            that._handleListSelect(oEvent);
        }
    });

    this._oTagInput = new sap.ui.commons.TextField({
        id: this.getId() + "-inputTag",
        liveChange: function(oEvent) {
            that._handleTagInputLive(oEvent);
        }
    });

    this._oTagInput.onsapdown = function(oEvent) {
        oEvent.preventDefault();
        oEvent.stopPropagation();
        jQuery("#" + that.getId() + "-tagListBox li:eq(0)").focus();
    };

    this._oCancelTagButton = new sap.ui.commons.Button({
        id: this.getId() + "-cancel-tags-button",
        text: this._rb.getText("NOTETAKERFEEDER_BUTTON_CANCEL_TAGS"),
        tooltip: this._rb.getText("NOTETAKERFEEDER_BUTTON_CANCEL_TAGS_TOOLTIP"),
        press: function() {
            that._toggleTagPopup();
        }
    });
    this._oCancelTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederCancelTagButton");

    this._oAddTagButton = new sap.ui.commons.Button({
        id: this.getId() + "-add-tags-button",
        text: this._rb.getText("NOTETAKERFEEDER_BUTTON_ADD_TAGS"),
        tooltip: this._rb.getText("NOTETAKERFEEDER_BUTTON_ADD_TAGS_TOOLTIP"),
        press: function() {
            that._handleAddTag(that._oTagInput.getValue());
            that._oTagButton.rerender();
            that._toggleTagPopup();
        }
    });

    this._oTagButton = new sap.ui.commons.Button({
        id: this.getId() + "-tag-button",
        tooltip: this._rb.getText("NOTETAKERFEEDER_BUTTON_TAG_TOOLTIP"),
        press: function() {
            that._toggleTagPopup();
        }
    });
    this._oTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederTagButton");
    
    // Extended UI5 TextField which does render placeholder attribute
    sap.ui.commons.TextField.extend("sap.suite.ui.commons.TextFieldWithPlaceholder", {
        renderer: {
            renderInnerAttributes: function(rm, oTextField) {
                rm.writeAttributeEscaped("data-placeholder", that._rb.getText("NOTETAKERFEEDER_PLACEHOLDER_HEADER") + "...");
            }
        }
    });

    // Extended UI5 TextArea which does render placeholder attribute
    sap.ui.commons.TextArea.extend("sap.suite.ui.commons.TextAreaWithPlaceholder", {
        renderer: {
            renderInnerAttributes: function(rm, oTextArea) {
                rm.writeAttributeEscaped("data-placeholder", that._rb.getText("NOTETAKERFEEDER_PLACEHOLDER_BODY") + "...");
            }
        }
    });

    this._oTitle = new sap.suite.ui.commons.TextFieldWithPlaceholder({
        id : this.getId() + "-title-field",
        maxLength : 50
    });
    
    this._oBody = new sap.suite.ui.commons.TextAreaWithPlaceholder({
        id : this.getId() + "-body-field",
        liveChange : function(e) {
            that._setAddButtonEnabled(e.getParameter("liveValue"));
        }
    });
    
    this._oThumbUpButton = new sap.ui.commons.Button({
        id: this.getId() + "-thumb-up-button",
        press: function(e){
            that._handleThumbUpButtonPress();
        },
        tooltip : this._rb.getText("NOTETAKERFEEDER_BUTTON_THUMB_UP_TOOLTIP")
    });
    this._oThumbUpButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederThumbUpButton");
    
    this._oThumbDownButton = new sap.ui.commons.Button({
        id: this.getId() + "-thumb-down-button",
        press: function(e){
            that._handleThumbDownButtonPress();
        },
        tooltip : this._rb.getText("NOTETAKERFEEDER_BUTTON_THUMB_DOWN_TOOLTIP")
    });
    this._oThumbDownButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederThumbDownButton");
    
    this._oFileUploader = new sap.ui.commons.FileUploader({
        id: this.getId() + "-attach",
        uploadOnChange: false,
        name : this.getAttachmentName(),
        change: function (oEvent) {
            that._disableAddAttachBtn();
            var name = oEvent.getParameter("newValue");
            that._oAttachmentLink.setText(name);
            that._oAttachmentLink.rerender();
            that._handleAddAttachUI();

            var eData = {};
            eData.filename = name;
            that.fireAttachmentSelect(eData);
            that._oTitle.focus();
        },
        uploadComplete : function(oEvent){
            that._handleUploadComplete(oEvent);
        }
    });
    
    this._oFileUploader.oBrowse.setText("");
    
    this._oAddAttachButton = new sap.ui.commons.Button({
        id: this.getId() + "-attach-button",
        press: function(e) {
            jQuery.sap.domById(that._oFileUploader.getId() + "-fu").click();
        },
        tooltip: that._rb.getText("NOTETAKER_BUTTON_ATTACH_TOOLTIP")
    });
    this._oAddAttachButton.addStyleClass("sapSuiteUiCommonsNtAttachIcon");
    
    this._oAttachmentLoadingLabel = new sap.ui.commons.Label({
        id : this.getId() + "-loading-label",
        text: this._rb.getText("NOTETAKERFEEDER_LABEL_ATTACHMENT_LOADING") + "...",
    });

    this._oDeleteAttachButton = new sap.ui.commons.Button({
        id: this.getId() + "-delete-attach-button",
        lite : true,
        press : function(e) {
            that._handleDeleteAttachUI();
            var eData = {filename: that._oFileUploader.getName()};
            that.fireAttachmentDelete(eData);
            
        },
        tooltip: this._rb.getText("NOTETAKERFEEDER_BUTTON_DELETE_ATTACHMENT"),
    });
    
    this._oAttachmentLink = new sap.ui.commons.Link({
        id: this.getId() + "-attachmentLink",
        tooltip: this._rb.getText("NOTETAKERFEEDER_LINK_ATTACHMENT_TOOLTIP"),
        press: function(e) {
            var eData = {filename: that._oFileUploader.getName()};
            that.fireAttachmentClick(eData);
        },
        width: "200px"
    });
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.exit = function() {
    this._oAddButton.destroy();
    this._oTitle.destroy();
    this._oBody.destroy();
    this._oTagButton.destroy();
    this._oTagList.destroy();
    this._oTagInput.destroy();
    this._oCancelTagButton.destroy();
    this._oAddTagButton.destroy();
    this._oThumbUpButton.destroy();
    this._oThumbDownButton.destroy();
    this._oFileUploader.destroy();
    this._oAddAttachButton.destroy();
    this._oAttachmentLoadingLabel.destroy();
    this._oDeleteAttachButton.destroy();   
    this._oAttachmentLink.destroy();
    
    this._oAddButton = null;
    this._oTitle = null;
    this._oBody = null;
    this._oTagButton = null;
    this._oTagList = null;
    this._oTagInput = null;
    this._oCancelTagButton = null;
    this._oAddTagButton = null;
    this._oThumbUpButton = null;
    this._oThumbDownButton = null;
    this._oFileUploader = null;
    this._oAddAttachButton = null;
    this._oAttachmentLoadingLabel = null;
    this._oDeleteAttachButton = null;
    this._oAttachmentLink = null;
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleAdd = function() {
    if (this.getBody()) {
        var eData = new Object();
        eData.title = this.getTitle();
        eData.body = this.getBody();
        eData.timestamp = this._getTimestamp();
        eData.tags = this._selectedTags;
        eData.thumbUp = this.getThumbUp();
        eData.thumbDown = this.getThumbDown();
        eData.attachmentFilename = this._oFileUploader.getValue();
        
        this.setTitle("");
        this.setBody("");
        
        this.setThumbDown(false);
        this.setThumbUp(false);
        
        this._oFileUploader.setValue("");
        this._enableAddAttachBtn();
        this.fireAddNote(eData);
        this._handleClearTag();
    } else {
        this._setAddButtonEnabled(this.getBody());
    }
    
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._getTimestamp = function() {
    return new Date();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.setTitle = function(sTitle) {
    this._oTitle.setValue(sTitle);
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.getTitle = function() {
    return jQuery.sap.byId(this.getId() + "-title-field").hasClass('sapSuiteUiCommonsPlaceholder') ? "" : this._oTitle.getValue();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.setBody = function(sBodyText) {
    this._oBody.setValue(sBodyText);
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.getBody = function() {
    return this._isBodyPlaceholderActive() ? "" : this._oBody.getValue();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._applyPlaceholder = function(){
    jQuery('[data-placeholder]').focus(
        function() {
            var input = jQuery(this);
            if (input.hasClass('sapSuiteUiCommonsPlaceholder')) {
                input.val('');
                input.removeClass('sapSuiteUiCommonsPlaceholder');
            }
        }
    ).blur(
        function() {
            var input = jQuery(this);
            if (jQuery.sap.equal(input.val(),'') || jQuery.sap.equal(input.val(), input.attr('data-placeholder'))) {
                input.addClass('sapSuiteUiCommonsPlaceholder');
                input.val(input.attr('data-placeholder'));
            }
        }
    ).blur();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._isBodyPlaceholderActive = function() {
    return jQuery.sap.byId(this.getId() + "-body-field").hasClass('sapSuiteUiCommonsPlaceholder');
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._setAddButtonEnabled = function(sBody, notRerender) {
    var bEnabled = sBody != null && !this._isBodyPlaceholderActive() && !/^\s*$/.test(sBody);
    if (bEnabled !== this._oAddButton.getEnabled()) {
        this._oAddButton.setEnabled(bEnabled);
        if (!notRerender) {
            this._oAddButton.rerender();
        }
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._adjustUploaderForIe = function() {
    this._oFileUploader.superOnkeydown = this._oFileUploader.onkeydown;
    this._oFileUploader.onkeydown = function(oEvent) {
    	var iKeyCode = oEvent.keyCode,
		eKC = jQuery.sap.KeyCodes;
    	if (iKeyCode != eKC.SPACE && iKeyCode != eKC.ENTER) {
    		this.superOnkeydown(oEvent);
    	}
    };
    
    jQuery(this._oFileUploader.oFilePath.getDomRef()).hide();
    jQuery(this._oFileUploader.oBrowse.getDomRef()).hide();
    jQuery(this._oAddAttachButton.getDomRef()).attr("tabindex", "-1");
    
    var that = this;
    jQuery(this._oFileUploader.oFileUpload).attr("tabindex", "0").attr("title", this._rb.getText("NOTETAKER_BUTTON_ATTACH_TOOLTIP"))
    .focus(function() {
    	this.hasFocus = true;
    	jQuery(that._oAddAttachButton.getDomRef()).addClass("sapUiBtnStdFocus");
    }).focusout(function() {
    	this.hasFocus = false;
    	jQuery(that._oAddAttachButton.getDomRef()).removeClass("sapUiBtnStdFocus");
    }).hover(function() {
    	jQuery(that._oAddAttachButton.getDomRef()).addClass("sapUiBtnStdFocus");
    }, function() {
    	if (!this.hasFocus) {
    		jQuery(that._oAddAttachButton.getDomRef()).removeClass("sapUiBtnStdFocus");
    	}
    	jQuery(that._oAddAttachButton.getDomRef()).removeClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    }).mousedown(function() {
    	jQuery(that._oAddAttachButton.getDomRef()).addClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected")
    	.addClass("sapUiBtnAct");
    }).mouseup(function() {
    	jQuery(that._oAddAttachButton.getDomRef()).removeClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    });
    
    jQuery(this._oFileUploader.oFileUpload).keydown(function(oEvent) {
		var eKC = jQuery.sap.KeyCodes;
    	if (oEvent.keyCode == eKC.TAB) {
    		if (oEvent.shiftKey) {
    			that._oThumbDownButton.focus();
    		} else {
    			that._oTitle.focus();
    		}
    		oEvent.preventDefault();
    		oEvent.stopPropagation();    		
    	}
    });
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._setAriaInfo = function() {
    jQuery.sap.byId(this._oThumbUpButton.getId()).attr("aria-pressed", this.getThumbUp());
    jQuery.sap.byId(this._oThumbDownButton.getId()).attr("aria-pressed", this.getThumbDown());

    jQuery.sap.byId(this._oTitle.getId()).attr("aria-label", this._rb.getText("NOTETAKERFEEDER_PLACEHOLDER_HEADER"));
    jQuery.sap.byId(this._oBody.getId()).attr("aria-label", this._rb.getText("NOTETAKERFEEDER_PLACEHOLDER_BODY"));
    jQuery(this._oFileUploader.oFileUpload).attr("aria-label", this._rb.getText("NOTETAKERFEEDER_PLACEHOLDER_BODY"));
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.onAfterRendering = function() {
    this._applyPlaceholder();
    this._adjustPopupState();
    
    if (this._oFileUploader.getValue()) {
        jQuery.sap.byId(this.getId() + "-attachment-panel").show();
        jQuery.sap.byId(this.getId() + "-attachment-loading").hide();
        jQuery.sap.byId(this.getId() + "-attachment-delete").show();
    }
    
    jQuery.sap.byId(this._oFileUploader.getId()).addClass("sapSuiteUiCommonsNtfUploader");
    
    this._setAriaInfo();
    
    if (jQuery.browser.msie) {
    	this._adjustUploaderForIe();
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.onBeforeRendering = function() {
    this._setAddButtonEnabled(this.getBody(), true);
    this._setThumbButtonsView();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.getFormattedTags = function() {
    return sap.suite.ui.commons.NoteTakerCard.prototype._getFormattedTags();  
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._adjustPopupState = function() {
    if (this._bTagPopupOpen) {
        jQuery.sap.byId(this.getId() + "-selectTag-panel").show();
    }
}; 

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleAddTag = function(sTag) {
    this._selectedTags = [];
    var aNewTags = sTag.split(new RegExp("\\s+"));

    var oTemp = {};
    
    for (var i = 0; i < aNewTags.length; i++) {
        if (aNewTags[i].length != 0) {
            oTemp[aNewTags[i]] = 0;
        }
    }

    for (var field in oTemp) {
        this._selectedTags.push(field);
    }
    
    if(this._oTagButton) {
        this._adjustTagButton();    
    }
    
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._adjustTagButton = function() {
    if (this._selectedTags.length) {
        this._oTagButton.setTooltip(this._rb.getText("NOTETAKERFEEDER_BUTTON_ADD_TAGS_SELECTED_TOOLTIP") + ": " + this._selectedTags.join(" "));
        this._oTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    } else {
        this._oTagButton.setTooltip(this._rb.getText("NOTETAKERFEEDER_BUTTON_TAG_TOOLTIP"));
        this._oTagButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleClearTag = function() {
    if(this._oTagInput) {
        this._oTagInput.setValue("");    
    }
    
    if(this._oTagList) {
        this._oTagList.clearSelection();    
    }
    
    this._selectedTags = [];
    
    if(this._oTagButton) {
        this._adjustTagButton();    
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.setTags = function(aTags) {
    this.setProperty("tags", aTags, true); // no automatic rerendering
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._toggleTagPopup = function() {
    if (this._bTagPopupOpen) {
        jQuery.sap.byId(this.getId() + "-selectTag-panel").slideToggle();
        this._focusDefaultControl();
        this._bTagPopupOpen = false;
    } else {
        this._addTagsToListBox(this.getTags());
        jQuery.sap.byId(this.getId() + "-selectTag-panel").slideToggle();
        jQuery.sap.byId(this.getId() + "-inputTag").val(this._selectedTags.length == 0 ? "" : this._selectedTags.join(" ") + " ");
        this._oTagInput.focus();
        this._bTagPopupOpen = true;
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._focusDefaultControl = function() {
    this._oTagButton.focus();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleTagInputLive = function(oEvent) {
    var sLiveValue = oEvent.getParameter("liveValue");
    var aNewTags = sLiveValue.split(" ");
    var sCurrentlyEntering = aNewTags[aNewTags.length - 1];
    this._filterListBox(sCurrentlyEntering);
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._filterListBox = function(sInput) {
    if (sInput.length == 0) {
        this._addTagsToListBox(this.getTags());
        return;
    }
    
   var aFiltered = jQuery.grep(this.getTags(), function(a){
        if (a.indexOf(sInput) >= 0) {
            return true;
        }
    });
   
   this._addTagsToListBox(aFiltered);
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._addTagsToListBox = function(aTags) {
    var aListItems = jQuery.map(aTags, function(v, i) {
        return new sap.ui.core.ListItem({text: v});
    });

    this._oTagList.setItems(aListItems, true);
    this._oTagList.rerender();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleListSelect = function(oEvent) {
    var sSelectedTag = oEvent.getParameter("selectedItem").getText();
    var sTemp = this._oTagInput.getValue();
    var aNewTags = sTemp.split(" ");
    
    aNewTags.pop();
    
    if(aNewTags.length == 0) {
        this._oTagInput.setValue(sSelectedTag + " ");
    } else {
        this._oTagInput.setValue(aNewTags.join(" ") + " " + sSelectedTag + " ");
    }
    
    this._oTagList.setSelectedIndex(-1);
    this._oTagInput.focus();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._setThumbButtonsView = function() {
    if (this.getThumbUp()) {
        this._oThumbUpButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    } else {
        this._oThumbUpButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    }
    
    if (this.getThumbDown()) {
        this._oThumbDownButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    } else {
        this._oThumbDownButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleThumbUpButtonPress = function() {
    this.setThumbUp(!this.getThumbUp());
    if (this.getThumbUp()) {
        this.setThumbDown(false);
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleThumbDownButtonPress = function() {
    this.setThumbDown(!this.getThumbDown());
    if (this.getThumbDown()) {
        this.setThumbUp(false);
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._disableAddAttachBtn = function() {
    this._oAddAttachButton.setEnabled(false);
    this._oAddAttachButton.removeStyleClass("sapSuiteUiCommonsNtAttachIcon");
    this._oAddAttachButton.addStyleClass("sapSuiteUiCommonsNtDsblAttachIcon");
    this._oAddAttachButton.setTooltip("");
    
    this._oAddAttachButton.rerender();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._enableAddAttachBtn = function() {
    this._oAddAttachButton.setEnabled(true);
    this._oAddAttachButton.removeStyleClass("sapSuiteUiCommonsNtDsblAttachIcon");
    this._oAddAttachButton.addStyleClass("sapSuiteUiCommonsNtAttachIcon");
    this._oAddAttachButton.setTooltip(this._rb.getText("NOTETAKER_BUTTON_ATTACH_TOOLTIP"));
    this._oAddAttachButton.rerender();
    
    if (jQuery.browser.msie) {
    	jQuery.sap.byId(this._oAddAttachButton.getId()).attr("tabindex", "-1");
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleAddAttachUI = function() {
	jQuery(this._oFileUploader.oFileUpload).hide();
    jQuery.sap.byId(this.getId() + "-attachment-loading").show("fast");
    jQuery.sap.byId(this.getId() + "-body").animate({
        height:"332px",
    },300);
    
    jQuery.sap.byId(this.getId() + "-attachment-panel").slideDown({duration: 300, queue: false});
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleDeleteAttachUI = function() {
	jQuery(this._oFileUploader.oFileUpload).show();
	jQuery.sap.byId(this.getId() + "-body").animate({
        height:"352px",
    },300);
    
    jQuery.sap.byId(this.getId() + "-attachment-delete").hide("fast");
    jQuery.sap.byId(this.getId() + "-attachment-panel").hide({duration: 300, queue: false});
    
    this._enableAddAttachBtn();
    
    this._oFileUploader.setValue("");
    this._oAttachmentLink.setText("");
    
    if (jQuery.browser.msie) {
    	jQuery(this._oFileUploader.oFileUpload).focus();
    } else {
    	this._oAddAttachButton.focus();
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.handleUploadResponse = function(sResponse) {
    
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleUploadComplete = function(oEvent) {
    jQuery.sap.byId(this.getId() + "-attachment-loading").hide("fast");
    jQuery.sap.byId(this.getId() + "-attachment-delete").show("fast");
    
    var eData = {
        response: oEvent.getParameter("response")
    };
    this.fireAttachmentUploadComplete(eData);
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.setAttachmentUploadUrl = function(sUrl) {
    this._oFileUploader.setUploadUrl(sUrl);
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.getAttachmentUploadUrl = function() {
    return this._oFileUploader.getUploadUrl();
};

}; // end of sap/suite/ui/commons/NoteTakerFeeder.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.RepeaterViewConfiguration') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.RepeaterViewConfiguration.
jQuery.sap.declare("sap.suite.ui.commons.RepeaterViewConfiguration");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new RepeaterViewConfiguration.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconHovered iconHovered} : sap.ui.core.URI</li>
 * <li>{@link #getPath path} : string</li>
 * <li>{@link #getItemMinWidth itemMinWidth} : int (default: -1)</li>
 * <li>{@link #getNumberOfTiles numberOfTiles} : int (default: -1)</li>
 * <li>{@link #getResponsive responsive} : any (default: false)</li>
 * <li>{@link #getExternal external} : boolean (default: false)</li>
 * <li>{@link #getIconSelected iconSelected} : sap.ui.core.URI</li>
 * <li>{@link #getItemHeight itemHeight} : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTemplate template} : sap.ui.core.Control</li>
 * <li>{@link #getExternalRepresentation externalRepresentation} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A configuration control defining how the content of the sap.suite.ui.commons.ViewRepeater control is displayed and what data is bound.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.RepeaterViewConfiguration", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"iconHovered" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"path" : {type : "string", group : "Misc", defaultValue : null},
		"itemMinWidth" : {type : "int", group : "Misc", defaultValue : -1},
		"numberOfTiles" : {type : "int", group : "Misc", defaultValue : -1},
		"responsive" : {type : "any", group : "Misc", defaultValue : false},
		"external" : {type : "boolean", group : "Misc", defaultValue : false},
		"iconSelected" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"itemHeight" : {type : "int", group : "Misc", defaultValue : null}
	},
	aggregations : {
    	"template" : {type : "sap.ui.core.Control", multiple : false}, 
    	"externalRepresentation" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.RepeaterViewConfiguration with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.RepeaterViewConfiguration.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * The title of the view to be displayed in sap.suite.ui.commons.ViewRepeater view selector. If neither this nor "icon" property are defined, the default title "View ##" will be shown, where ## is an index number of the view in View Repeater starting from 1.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setTitle
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setIcon
 * @function
 */


/**
 * Getter for property <code>iconHovered</code>.
 * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector when the regular icon is hovered.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconHovered</code>
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getIconHovered
 * @function
 */

/**
 * Setter for property <code>iconHovered</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconHovered  new value for property <code>iconHovered</code>
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setIconHovered
 * @function
 */


/**
 * Getter for property <code>path</code>.
 * A path used for rows/titles data binding.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>path</code>
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getPath
 * @function
 */

/**
 * Setter for property <code>path</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sPath  new value for property <code>path</code>
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setPath
 * @function
 */


/**
 * Getter for property <code>itemMinWidth</code>.
 * The minimal width of the tile in this view. Only applicable if "responsive" property is set to true.
 *
 * Default value is <code>-1</code>
 *
 * @return {int} the value of property <code>itemMinWidth</code>
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getItemMinWidth
 * @function
 */

/**
 * Setter for property <code>itemMinWidth</code>.
 *
 * Default value is <code>-1</code> 
 *
 * @param {int} iItemMinWidth  new value for property <code>itemMinWidth</code>
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setItemMinWidth
 * @function
 */


/**
 * Getter for property <code>numberOfTiles</code>.
 * The number of tiles/rows that will be shown on a single page in this view.
 *
 * Default value is <code>-1</code>
 *
 * @return {int} the value of property <code>numberOfTiles</code>
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getNumberOfTiles
 * @function
 */

/**
 * Setter for property <code>numberOfTiles</code>.
 *
 * Default value is <code>-1</code> 
 *
 * @param {int} iNumberOfTiles  new value for property <code>numberOfTiles</code>
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setNumberOfTiles
 * @function
 */


/**
 * Getter for property <code>responsive</code>.
 * This parameter indicates whether the content is shown in rows or tiles. If false, the content is shown in rows just like in core sap.ui.commons.RowRepeater. If true, the content is shown in tiles (similar to sap.ui.ux3.DataSet control) that have minimal width defined by the "itemMinWidth" property. The number of columns depends on the parent control's width. If you resize the control, the number of columns may change respectively so that the content tiles can fill the entire space of a row.
 *
 * Default value is <code>false</code>
 *
 * @return {any} the value of property <code>responsive</code>
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getResponsive
 * @function
 */

/**
 * Setter for property <code>responsive</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {any} oResponsive  new value for property <code>responsive</code>
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setResponsive
 * @function
 */


/**
 * Getter for property <code>external</code>.
 * Indicates if the external representation of this view is rendered instead of the row repeater's own content.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>external</code>
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getExternal
 * @function
 */

/**
 * Setter for property <code>external</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bExternal  new value for property <code>external</code>
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setExternal
 * @function
 */


/**
 * Getter for property <code>iconSelected</code>.
 * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector when the regular icon is selected.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconSelected</code>
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getIconSelected
 * @function
 */

/**
 * Setter for property <code>iconSelected</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconSelected  new value for property <code>iconSelected</code>
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setIconSelected
 * @function
 */


/**
 * Getter for property <code>itemHeight</code>.
 * The height of the tile in this view in pixels. Only applicable if the responsive property is set to true. This value is used for calculating the number of tile rows.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>itemHeight</code>
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getItemHeight
 * @function
 */

/**
 * Setter for property <code>itemHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iItemHeight  new value for property <code>itemHeight</code>
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setItemHeight
 * @function
 */


/**
 * Getter for aggregation <code>template</code>.<br/>
 * The control used as a template while displaying rows/tiles in this view. It should not have fixed width wider than defined by the "itemMinWidth" property, otherwise some content may appear cropped.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getTemplate
 * @function
 */


/**
 * Setter for the aggregated <code>template</code>.
 * @param oTemplate {sap.ui.core.Control}
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setTemplate
 * @function
 */
	

/**
 * Destroys the template in the aggregation 
 * named <code>template</code>.
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#destroyTemplate
 * @function
 */


/**
 * Getter for aggregation <code>externalRepresentation</code>.<br/>
 * The control to be rendered instead of sap.suite.ui.commons.ViewRepeater's own content. Only used if the "external" property is set to true. This allows you to create custom views, for example, Table views. The sap.suite.ui.commons.ViewRepeater control will share its model with this control if the control does not have its own model.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#getExternalRepresentation
 * @function
 */


/**
 * Setter for the aggregated <code>externalRepresentation</code>.
 * @param oExternalRepresentation {sap.ui.core.Control}
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#setExternalRepresentation
 * @function
 */
	

/**
 * Destroys the externalRepresentation in the aggregation 
 * named <code>externalRepresentation</code>.
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.RepeaterViewConfiguration#destroyExternalRepresentation
 * @function
 */


// Start of sap/suite/ui/commons/RepeaterViewConfiguration.js

}; // end of sap/suite/ui/commons/RepeaterViewConfiguration.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.SplitButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.SplitButton.
jQuery.sap.declare("sap.suite.ui.commons.SplitButton");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new SplitButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getLite lite} : boolean (default: false)</li>
 * <li>{@link #getStyle style} : sap.ui.commons.ButtonStyle (default: sap.ui.commons.ButtonStyle.Default)</li>
 * <li>{@link #getStyled styled} : boolean (default: true)</li>
 * <li>{@link #getIconFirst iconFirst} : boolean (default: true)</li>
 * <li>{@link #getText text} : string (default: '')</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI (default: '')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMenu menu} : sap.ui.commons.Menu</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Split Button Control is a composite control that consists of a default-action Button and a Menu Button control.
 * The default-action button control represents a simple push button. It is used for initiating actions, such as save or print. It can contain some text, an icon, or both; the order of the two can be configured. The action initiated by this button is considered to be the default action for the control, and it must be one of the selections defined in the Menu Button menu.
 * The Menu Button control is a button that opens a menu upon user's click. MenuButton is a composition of the Menu control and the Button control and thus inheriting all features. When a menu item is selected by the user, MenuButton throws an event called itemSelected. The event transfers the itemId of the selected item. As an alternative, the button press event can be used which has a similar behavior.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.SplitButton
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.SplitButton", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"visible" : {type : "boolean", group : "Misc", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"lite" : {type : "boolean", group : "Appearance", defaultValue : false},
		"style" : {type : "sap.ui.commons.ButtonStyle", group : "Appearance", defaultValue : sap.ui.commons.ButtonStyle.Default},
		"styled" : {type : "boolean", group : "Appearance", defaultValue : true},
		"iconFirst" : {type : "boolean", group : "Appearance", defaultValue : true},
		"text" : {type : "string", group : "Appearance", defaultValue : ''},
		"icon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : ''}
	},
	aggregations : {
    	"menu" : {type : "sap.ui.commons.Menu", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.SplitButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.SplitButton.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible split buttons are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setVisible
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Boolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setEnabled
 * @function
 */


/**
 * Getter for property <code>lite</code>.
 * The split button is rendered as lite split button.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>lite</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getLite
 * @function
 */

/**
 * Setter for property <code>lite</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bLite  new value for property <code>lite</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setLite
 * @function
 */


/**
 * Getter for property <code>style</code>.
 * Style of the control (e.g. emphasized, accept)
 *
 * Default value is <code>sap.ui.commons.ButtonStyle.Default</code>
 *
 * @return {sap.ui.commons.ButtonStyle} the value of property <code>style</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getStyle
 * @function
 */

/**
 * Setter for property <code>style</code>.
 *
 * Default value is <code>sap.ui.commons.ButtonStyle.Default</code> 
 *
 * @param {sap.ui.commons.ButtonStyle} oStyle  new value for property <code>style</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setStyle
 * @function
 */


/**
 * Getter for property <code>styled</code>.
 * Indicatied if the button is styled. If not it is rendered as native HTML-button. In this case a custom styling can be added usig addStyleClass.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>styled</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getStyled
 * @function
 */

/**
 * Setter for property <code>styled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bStyled  new value for property <code>styled</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setStyled
 * @function
 */


/**
 * Getter for property <code>iconFirst</code>.
 * If set to true (default), the display sequence is 1. icon 2. control text .
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconFirst</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getIconFirst
 * @function
 */

/**
 * Setter for property <code>iconFirst</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconFirst  new value for property <code>iconFirst</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setIconFirst
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Text to be displayed for the action button.
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setText
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Icon to be displayed as graphical element within the action button.
 *
 * Default value is <code>''</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setIcon
 * @function
 */


/**
 * Getter for aggregation <code>menu</code>.<br/>
 * Menu that shall be opened when the menu part of the button is clicked
 * 
 * @return {sap.ui.commons.Menu}
 * @public
 * @name sap.suite.ui.commons.SplitButton#getMenu
 * @function
 */


/**
 * Setter for the aggregated <code>menu</code>.
 * @param oMenu {sap.ui.commons.Menu}
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setMenu
 * @function
 */
	

/**
 * Destroys the menu in the aggregation 
 * named <code>menu</code>.
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#destroyMenu
 * @function
 */


// Start of sap/suite/ui/commons/SplitButton.js
jQuery.sap.require('sap.ui.commons.Button'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.MenuButton'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.MenuItem'); // unlisted dependency retained


(function() {

    /**
     * Checks that oMenuItem is in oMenu.
     * 
     * @param oMenu
     *                {sap.ui.commons.Menu}
     * @param oMenuItem
     *                {sap.ui.commons.MenuItem}
     * @return true if the oMenuItem exists in the menu, false otherwise
     * @private
     */
    function existingMenuItem(oMenu, oMenuItem) {

        if (!oMenuItem || !oMenu || oMenu.getItems().length === 0) {
            return false;
        }

        if (oMenu.indexOfItem(oMenuItem) >= 0) {
            return true;
        }

        var aItems = oMenu.getItems();
        var oSubmenu = null;

        for ( var i = 0; i < aItems.length; i++) {
            oSubmenu = aItems[i].getSubmenu();
            if (existingMenuItem(oSubmenu, oMenuItem)) {
                return true;
            }
        }

        return false;
    }

    /**
     * Interceptor method for menu item <code>setVisible()</code> method. Resets the menu is this menu item is not visible.
     * 
     * @param oSplitButton
     *                {sap.suite.ui.commons.SplitButton} the SplitButton control
     * @return {sap.ui.commons.MenuItem} the SplitButton menu item
     * @private
     */
    function menuItemSetVisibleInterceptor(oSplitButton) {

        return function() {

            sap.ui.commons.MenuItem.prototype.setVisible.apply(oSplitButton._oMenuItem, arguments);

            if (!oSplitButton._oMenuItem.getVisible()) {
                oSplitButton.setMenu(oSplitButton._oMenuButton.getMenu());
            }
            return oSplitButton._oMenuItem;
        };
    }

    /**
     * Interceptor method for menu item <code>setIcon()</code> method. Updates default action button icon as well if it is not set.
     * 
     * @param oSplitButton
     *                {sap.suite.ui.commons.SplitButton} the SplitButton control
     * @return {sap.ui.commons.MenuItem} the SplitButton menu item
     * @private
     */
    function menuItemSetIconInterceptor(oSplitButton) {

        return function() {

            sap.ui.commons.MenuItem.prototype.setIcon.apply(oSplitButton._oMenuItem, arguments);
            if (!oSplitButton.getIcon()) {
                oSplitButton._oDefaultActionButton.setIcon(oSplitButton._oMenuItem.getIcon());
            }
            return oSplitButton._oMenuItem;
        };
    }

    /**
     * Interceptor method for menu item <code>setTooltip()</code> method. Updates default action button tooltip as well.
     * 
     * @param oSplitButton
     *                {sap.suite.ui.commons.SplitButton}the SplitButton control
     * @return {sap.ui.commons.MenuItem} the SplitButton menu item
     * @private
     */
    function menuItemSetTooltipInterceptor(oSplitButton) {

        return function() {

            sap.ui.commons.MenuItem.prototype.setTooltip.apply(oSplitButton._oMenuItem, arguments);
            oSplitButton._oDefaultActionButton.setTooltip(oSplitButton._oMenuItem.getTooltip());
            return oSplitButton._oMenuItem;
        };
    }

    /**
     * Interceptor method for menu item <code>setTooltip()</code> method. Updates default action button text as well if it is not set.
     * 
     * @param oSplitButton
     *                {sap.suite.ui.commons.SplitButton}the SplitButton control
     * @return {sap.ui.commons.MenuItem} the SplitButton menu item
     * @private
     */
    var menuItemSetTextInterceptor = function(oSplitButton) {

        return function() {

            sap.ui.commons.MenuItem.prototype.setText.apply(oSplitButton._oMenuItem, arguments);
            if (!oSplitButton.getText()) {
                oSplitButton._oDefaultActionButton.setText(oSplitButton._oMenuItem.getText());
            }
            return oSplitButton._oMenuItem;
        };
    };

    /**
     * Interceptor method for menu item <code>setEnabled()</code> method. Updates default action button as well with new property value if the control is enabled.
     * 
     * @param oSplitButton
     *                {sap.suite.ui.commons.SplitButton}the SplitButton control
     * @return {sap.ui.commons.MenuItem} the SplitButton menu item
     * @private
     */
    var menuItemSetEnabledInterceptor = function(oSplitButton) {

        return function() {

            sap.ui.commons.MenuItem.prototype.setEnabled.apply(oSplitButton._oMenuItem, arguments);
            if (oSplitButton.getEnabled()) {
                oSplitButton._oDefaultActionButton.setEnabled(oSplitButton._oMenuItem.getEnabled());
            }
            return oSplitButton._oMenuItem;
        };
    };

    /**
     * Does the setup when the SplitButton is created.
     * 
     * @private
     */
    sap.suite.ui.commons.SplitButton.prototype.init = function() {

        this._oDefaultActionButton = new sap.ui.commons.Button(this.getId() + "-defaultActionButton");
        var that = this;
        // when default button is clicked and _menuItem is set then the event
        // will be fired
        this._oDefaultActionButton.attachPress(function() {

            if (that._oMenuItem) {
                that._oMenuItem.fireSelect();
            }
        });

        this._oMenuButton = new sap.ui.commons.MenuButton(this.getId() + "-menuButton");
        this._oMenuButton.addStyleClass("sapSuiteUiCommonsSplitButton-menuButton");
        if (this.getMenu()) {
            this._oMenuButton.setMenu(this.getMenu());
        }
    };

    /**
     * Cleans up the SplitButton instance before destruction.
     * 
     * @private
     */
    sap.suite.ui.commons.SplitButton.prototype.exit = function() {

        this.destroyAggregation("menu", true);
        this._oDefaultActionButton.destroy();
        this._oDefaultActionButton = null;
        this._oMenuButton.destroy();
        this._oMenuButton = null;
    };

    /**
     * Set the menu to the button and set menu item for the action button. The menu item for action button must exist in the menu. If it doesn't exist the first menu item is set by
     * default.
     * 
     * @param oMenu
     *                {sap.ui.commons.Menu}
     * @param oMenuItem
     *                {sap.ui.commons.MenuItem}
     * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setMenu = function(oMenu, oMenuItem) {

        var that = this;
        this._oMenuButton.setMenu(oMenu);

        if (existingMenuItem(oMenu, oMenuItem) && oMenuItem.getVisible()) {
            this._oMenuItem = oMenuItem;
        } else {
            // set first menu item by default
            if (oMenu && oMenu.getItems()) {
                var firstMenuItem = oMenu.getItems()[0];
                if (firstMenuItem && firstMenuItem.getVisible()) {
                    this._oMenuItem = firstMenuItem;
                } else {
                    this._oMenuItem = null;
                }
            }
        }

        if (this._oMenuItem) {
            if (!this.getText()) {
                this._oDefaultActionButton.setText(this._oMenuItem.getText() || null);
            }
            if (!this.getIcon()) {
                this._oDefaultActionButton.setIcon(this._oMenuItem.getIcon() || null);
            }
            if (this.getEnabled()) {
                this._oDefaultActionButton.setEnabled(this._oMenuItem.getEnabled());
            }

            this._oDefaultActionButton.setTooltip(this._oMenuItem.getTooltip() || null);

            this._oMenuItem.setTooltip = menuItemSetTooltipInterceptor(that);
            this._oMenuItem.setText = menuItemSetTextInterceptor(that);
            this._oMenuItem.setIcon = menuItemSetIconInterceptor(that);
            this._oMenuItem.setEnabled = menuItemSetEnabledInterceptor(that);
            this._oMenuItem.setVisible = menuItemSetVisibleInterceptor(that);
        }

        return this;
    };

    /**
     * Return the menu.
     * 
     * @return {sap.ui.commons.Menu}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.getMenu = function() {

        return this._oMenuButton.getMenu();
    };

    /**
     * Destroy the menu.
     * 
     * @return {sap.ui.commons.Menu}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.destroyMenu = function() {

        this._oMenuButton.destroyMenu();
        return this;
    };

    /**
     * set enabled property for the control
     * 
     * @param bEnabled
     *                {boolean}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setEnabled = function(bEnabled) {

        this._oDefaultActionButton.setEnabled(bEnabled);
        this._oMenuButton.setEnabled(bEnabled);
        this.setProperty("enabled", bEnabled);
    };

    /**
     * set lite property for the control
     * 
     * @param bLite
     *                {boolean}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setLite = function(bLite) {

        this._oDefaultActionButton.setLite(bLite);
        this._oMenuButton.setLite(bLite);
        this.setProperty("lite", bLite);
    };

    /**
     * set style for the control
     * 
     * @param oStyle
     *                {sap.ui.commons.ButtonStyle}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setStyle = function(oStyle) {

        this._oDefaultActionButton.setStyle(oStyle);
        this._oMenuButton.setStyle(oStyle);
        this.setProperty("style", oStyle);
    };

    /**
     * set if the control is styled or not
     * 
     * @param bStyled
     *                {boolean}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setStyled = function(bStyled) {

        this._oDefaultActionButton.setStyled(bStyled);
        this._oMenuButton.setStyled(bStyled);
        this.setProperty("styled", bStyled);
    };

    /**
     * set if the icon for the action button be displayed before or after text
     * 
     * @param bIconFirst
     *                {boolean}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setIconFirst = function(bIconFirst) {

        this._oDefaultActionButton.setIconFirst(bIconFirst);
        this.setProperty("iconFirst", bIconFirst);
    };

    /**
     * set icon (image) to be displayed in action button
     * 
     * @param sIcon
     *                {sap.ui.core.URI}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setIcon = function(sIcon) {

        this._oDefaultActionButton.setIcon(sIcon);
        this.setProperty("icon", sIcon);
    };

    /**
     * set text for the action button
     * 
     * @param sText
     *                {string}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setText = function(sText) {

        this._oDefaultActionButton.setText(sText);
        this.setProperty("text", sText);
    };

}());

}; // end of sap/suite/ui/commons/SplitButton.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ThingCollection') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.ThingCollection.
jQuery.sap.declare("sap.suite.ui.commons.ThingCollection");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ThingCollection.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getMinWidth minWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getMinHeight minHeight} : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.ux3.ThingViewer[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control contains a collection of the sap.ui.ux3.ThingViewer controls or descendants of sap.ui.ux3.ThingViewer. It allows you to navigate through them as well as delete them from the collection.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.ThingCollection
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.ThingCollection", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"shiftPrev", "shiftNext", "addNextContent"
	],

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '100%'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '100%'},
		"minWidth" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"minHeight" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null}
	},
	aggregations : {
    	"content" : {type : "sap.ui.ux3.ThingViewer", multiple : true, singularName : "content"}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.ThingCollection with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.ThingCollection.extend
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width of the control.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.suite.ui.commons.ThingCollection#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.suite.ui.commons.ThingCollection} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThingCollection#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The height of the control.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.suite.ui.commons.ThingCollection#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.suite.ui.commons.ThingCollection} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThingCollection#setHeight
 * @function
 */


/**
 * Getter for property <code>minWidth</code>.
 * The minimal width of the control.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>minWidth</code>
 * @public
 * @name sap.suite.ui.commons.ThingCollection#getMinWidth
 * @function
 */

/**
 * Setter for property <code>minWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMinWidth  new value for property <code>minWidth</code>
 * @return {sap.suite.ui.commons.ThingCollection} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThingCollection#setMinWidth
 * @function
 */


/**
 * Getter for property <code>minHeight</code>.
 * The minimal height of the control.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>minHeight</code>
 * @public
 * @name sap.suite.ui.commons.ThingCollection#getMinHeight
 * @function
 */

/**
 * Setter for property <code>minHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMinHeight  new value for property <code>minHeight</code>
 * @return {sap.suite.ui.commons.ThingCollection} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThingCollection#setMinHeight
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Contains a collection of sap.ui.ux3.ThingViewer controls or descendants of sap.ui.ux3.ThingViewer.
 * 
 * @return {sap.ui.ux3.ThingViewer[]}
 * @public
 * @name sap.suite.ui.commons.ThingCollection#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.ux3.ThingViewer}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.ThingCollection} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThingCollection#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.ux3.ThingViewer}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.ThingCollection} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThingCollection#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.ux3.ThingViewer} vContent the content to remove or its index or id
 * @return {sap.ui.ux3.ThingViewer} the removed content or null
 * @public
 * @name sap.suite.ui.commons.ThingCollection#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ThingViewer[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.ThingCollection#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.ux3.ThingViewer</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ThingViewer}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.ThingCollection#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.suite.ui.commons.ThingCollection} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThingCollection#destroyContent
 * @function
 */


/**
 * Displays a previous item in the collection.
 *
 * @name sap.suite.ui.commons.ThingCollection.prototype.shiftPrev
 * @function

 * @type void
 * @public
 */


/**
 * Displays the next item in the collection.
 *
 * @name sap.suite.ui.commons.ThingCollection.prototype.shiftNext
 * @function

 * @type void
 * @public
 */


/**
 * Inserts an element into the next display position.
 *
 * @name sap.suite.ui.commons.ThingCollection.prototype.addNextContent
 * @function
 * @param {sap.ui.ux3.ThingViewer} 
 *         oOContent
 *         An instance of ThingViewer or an instance of its descendant.

 * @type sap.suite.ui.commons.ThingCollection
 * @public
 */


// Start of sap/suite/ui/commons/ThingCollection.js
///**
// * This file defines behavior for the control,
// */
sap.suite.ui.commons.ThingCollection.prototype.init = function() {
	this._iCenterNum = 0;
    this._bScrollDisabled = false;
    var that = this;
    this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");

    this._oRemoveButton = new sap.ui.commons.Link({
        id: this.getId() + "-remove-button",
        tooltip: this._rb.getText("THINGCOLLECTION_BUTTON_REMOVE_TOOLTIP"),
        press: function() {
            that._removeCenterContent();
        }
    });
    this._oRemoveButton.addStyleClass("sapUiUx3OverlayCloseButton");

    this._initTouchEvents();
};

sap.suite.ui.commons.ThingCollection.prototype.exit = function() {
	this._oRemoveButton.destroy();
};

sap.suite.ui.commons.ThingCollection.prototype.onBeforeRendering = function() {
    this._oCenterControl = this.getContent()[this._iCenterNum] || null;
};

sap.suite.ui.commons.ThingCollection.prototype.onAfterRendering = function() {
    var that = this;

    jQuery.sap.byId(this.getId() + "-nav-prev").bind("click", function() { that.shiftPrev(); });
    jQuery.sap.byId(this.getId() + "-nav-next").bind("click", function() { that.shiftNext(); });

    this._updateArrows();
    
    if(this.getContent().length <= 1) {
        this._hideRemoveButton();        
    }
    
    jQuery.sap.byId(this._oRemoveButton.getId()).attr("role", "button");
    jQuery.sap.byId(this._oRemoveButton.getId()).attr("aria-disabled", "false");
};

sap.suite.ui.commons.ThingCollection.prototype.addContent = function(oContent) {
    this.addAggregation("content", oContent, true);
    this._updateArrows();
    this._showRemoveButton();
    return this;
};

sap.suite.ui.commons.ThingCollection.prototype.addNextContent = function(oContent) {
    this.insertAggregation("content", oContent, this._iCenterNum + 1, true);
    this._updateArrows();
    this._showRemoveButton();
    return this;  		
};

sap.suite.ui.commons.ThingCollection.prototype.shiftPrev = function() {
    if (this._isShiftPrevForbidden()) {
        return;
    }

    var that = this;
    this._hideRemoveButton();
    this._bScrollDisabled = true;

    var sContainerId = "#" + this.getId() + "-container";
    var oPrevPanel = jQuery(sContainerId + ">.sapSuiteTcPrev");
    var oCenterPanel = jQuery(sContainerId + ">.sapSuiteTcCenter");
    var oNextPanel = jQuery(sContainerId + ">.sapSuiteTcNext");

    var oRm = sap.ui.getCore().createRenderManager();
    
    var sDirection = sap.ui.getCore().getConfiguration().getRTL() ? "right" : "left";
    this._iCenterNum--;
    var oDirection = {};
    oDirection[sDirection] = "+=110%";
    
    this._renderPrevPanel(oRm, this.getContent()[this._iCenterNum]);

    oCenterPanel.animate(oDirection, 800);

    oPrevPanel.animate(oDirection, 800, function() {
        oNextPanel.css(sDirection, "-110%");

        that._renderNextPanel(oRm);        // clear next panel
        oRm.destroy();

        that._bScrollDisabled = false;
        that._updateArrows();
        that._showRemoveButton();
        jQuery(sContainerId).focus();
        oCenterPanel.show();                // restore center panel if it was hidden on removing content
    });
    
    oPrevPanel.removeClass("sapSuiteTcPrev").addClass("sapSuiteTcCenter").attr("aria-hidden", "false");
    oCenterPanel.removeClass("sapSuiteTcCenter").addClass("sapSuiteTcNext").attr("aria-hidden", "true");
    oNextPanel.removeClass("sapSuiteTcNext").addClass("sapSuiteTcPrev");
};

sap.suite.ui.commons.ThingCollection.prototype.shiftNext = function() {
    if (this._isShiftNextForbidden()) {
        return;
    }

    var that = this;
    this._hideRemoveButton();
    this._bScrollDisabled = true;

    var sContainerId = "#" + this.getId() + "-container";
    var oPrevPanel = jQuery(sContainerId + ">.sapSuiteTcPrev");
    var oCenterPanel = jQuery(sContainerId + ">.sapSuiteTcCenter");
    var oNextPanel = jQuery(sContainerId + ">.sapSuiteTcNext");

    var oRm = sap.ui.getCore().createRenderManager();
    
    var sDirection = sap.ui.getCore().getConfiguration().getRTL() ? "right" : "left";
    this._iCenterNum++;
    
    var oDirection = {};
    oDirection[sDirection] = "-=110%";
    
    this._renderNextPanel(oRm, this.getContent()[this._iCenterNum]);

    oCenterPanel.animate(oDirection, 800);

    oNextPanel.animate(oDirection, 800, function() {
        oPrevPanel.css(sDirection, "110%");

        that._renderPrevPanel(oRm);     // clear previous panel
        oRm.destroy();

        that._bScrollDisabled = false;
        that._updateArrows();
        that._showRemoveButton();
        jQuery(sContainerId).focus();
        oCenterPanel.show();            // restore center panel if it was hidden on removing content
    });

    oPrevPanel.removeClass("sapSuiteTcPrev").addClass("sapSuiteTcNext");
    oCenterPanel.removeClass("sapSuiteTcCenter").addClass("sapSuiteTcPrev").attr("aria-hidden", "true");
    oNextPanel.removeClass("sapSuiteTcNext").addClass("sapSuiteTcCenter").attr("aria-hidden", "false");
};

sap.suite.ui.commons.ThingCollection.prototype.onsapprevious = function(oEvent) {
    this.shiftPrev();
    oEvent.preventDefault();
};

sap.suite.ui.commons.ThingCollection.prototype.onsapnext = function(oEvent) {
    this.shiftNext();
    oEvent.preventDefault();
};

sap.suite.ui.commons.ThingCollection.prototype._initTouchEvents = function() {
    if (jQuery.sap.touchEventMode != "OFF") {
        var that = this;

        this.onswipeleft = function(oEvent) {
            oEvent.preventDefault();
            that.shiftNext();
        };
        this.onswiperight = function(oEvent) {
            oEvent.preventDefault();
            that.shiftPrev();
        };
    }
};

sap.suite.ui.commons.ThingCollection.prototype._removeCenterContent = function() {
    this._hideRemoveButton();           // hide remove button immediately to prevent double click
    this.removeAggregation("content", this.getContent()[this._iCenterNum], true);

    var that = this;
    var iContentLength = this.getContent().length;

    var oCenterPanel = jQuery("#" + this.getId() + "-container>.sapSuiteTcCenter");
    oCenterPanel.hide(600);

    if (that._iCenterNum >= iContentLength) {
        that._iCenterNum = iContentLength;
        that.shiftPrev();
    } else {
        that._iCenterNum -= 1;
        that.shiftNext();
    }
};

sap.suite.ui.commons.ThingCollection.prototype._showRemoveButton = function() {
    if (this.getContent().length > 1) {
        jQuery.sap.byId(this.getId() + "-remove-button").show();
    }
};

sap.suite.ui.commons.ThingCollection.prototype._hideRemoveButton = function() {
    jQuery.sap.byId(this.getId() + "-remove-button").hide();
};

sap.suite.ui.commons.ThingCollection.prototype._updateArrows = function() {
    var oNavPrev = jQuery.sap.byId(this.getId() + "-nav-prev");
    var oNavNext = jQuery.sap.byId(this.getId() + "-nav-next");
    var sPrevTooltip = "";
    var sNextTooltip = "";

	if (this._isShiftPrevForbidden()) {
        oNavPrev.removeClass("sapSuiteTcNavPrevArrow");
    } else {
        oNavPrev.addClass("sapSuiteTcNavPrevArrow");
        sPrevTooltip = this._rb.getText("THINGCOLLECTION_BUTTON_PREVIOUS_TOOLTIP");
    }
	oNavPrev.attr("title", sPrevTooltip);
	
    if (this._isShiftNextForbidden()) {
        oNavNext.removeClass("sapSuiteTcNavNextArrow");
    } else {
        oNavNext.addClass("sapSuiteTcNavNextArrow");
        sNextTooltip = this._rb.getText("THINGCOLLECTION_BUTTON_NEXT_TOOLTIP");
    }
    oNavNext.attr("title", sNextTooltip);
};

sap.suite.ui.commons.ThingCollection.prototype._isShiftPrevForbidden = function() {
	return this._bScrollDisabled || (this._iCenterNum <= 0);
};

sap.suite.ui.commons.ThingCollection.prototype._isShiftNextForbidden = function() {
	return this._bScrollDisabled || (this._iCenterNum >= this.getContent().length - 1);
};

sap.suite.ui.commons.ThingCollection.prototype._renderPrevPanel = function(oRm, oControl) {
	this._renderPanel(oRm, oControl, true);
};

sap.suite.ui.commons.ThingCollection.prototype._renderNextPanel = function(oRm, oControl) {
	this._renderPanel(oRm, oControl, false);
};

sap.suite.ui.commons.ThingCollection.prototype._renderPanel = function(oRm, oControl, bLeft) {
    var sPanelSelector = "#" + this.getId() + "-container>" + (bLeft ? ".sapSuiteTcPrev" : ".sapSuiteTcNext");
    var oPanel = jQuery(sPanelSelector);

    if (oPanel.length > 0) {

        if (oControl) {
            oRm.renderControl(oControl);
        } else {
            oRm.write("");
        }

        oRm.flush(oPanel[0]);
    }
};

}; // end of sap/suite/ui/commons/ThingCollection.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ThreePanelThingInspector') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.ThreePanelThingInspector.
jQuery.sap.declare("sap.suite.ui.commons.ThreePanelThingInspector");

jQuery.sap.require('sap.ui.ux3.ThingInspector'); // unlisted dependency retained



/**
 * Constructor for a new ThreePanelThingInspector.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getLogo logo} : sap.ui.core.URI</li>
 * <li>{@link #getSidebarWidth sidebarWidth} : sap.ui.core.CSSSize (default: '224px')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMenuContent menuContent} : sap.ui.commons.Link[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.ux3.ThingInspector#constructor sap.ui.ux3.ThingInspector}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control extends the sap.ui.ux3.ThingInspector control. It displays the sap.suite.ui.commons.ThreePanelThingViewer control in the sap.ui.ux3.Overlay control.
 * @extends sap.ui.ux3.ThingInspector
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector
 */
sap.ui.ux3.ThingInspector.extend("sap.suite.ui.commons.ThreePanelThingInspector", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"showHeader" : {type : "boolean", group : "Misc", defaultValue : true},
		"logo" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"sidebarWidth" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '224px'}
	},
	aggregations : {
    	"menuContent" : {type : "sap.ui.commons.Link", multiple : true, singularName : "menuContent"}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.ThreePanelThingInspector with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.ThreePanelThingInspector.extend
 * @function
 */


/**
 * Getter for property <code>showHeader</code>.
 * Shows or hides a middle panel of the ThingViewer named Header that contains general information.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#getShowHeader
 * @function
 */

/**
 * Setter for property <code>showHeader</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.suite.ui.commons.ThreePanelThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#setShowHeader
 * @function
 */


/**
 * Getter for property <code>logo</code>.
 * A URL of the source of the ThingViewer's key visual image.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>logo</code>
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#getLogo
 * @function
 */

/**
 * Setter for property <code>logo</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sLogo  new value for property <code>logo</code>
 * @return {sap.suite.ui.commons.ThreePanelThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#setLogo
 * @function
 */


/**
 * Getter for property <code>sidebarWidth</code>.
 * The width of the ThingViewer's navigation panel.
 *
 * Default value is <code>224px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>sidebarWidth</code>
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#getSidebarWidth
 * @function
 */

/**
 * Setter for property <code>sidebarWidth</code>.
 *
 * Default value is <code>224px</code> 
 *
 * @param {sap.ui.core.CSSSize} sSidebarWidth  new value for property <code>sidebarWidth</code>
 * @return {sap.suite.ui.commons.ThreePanelThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#setSidebarWidth
 * @function
 */


/**
 * Getter for aggregation <code>menuContent</code>.<br/>
 * The items of the ThingViewer's Action Menu.
 * 
 * @return {sap.ui.commons.Link[]}
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#getMenuContent
 * @function
 */


/**
 * Inserts a menuContent into the aggregation named <code>menuContent</code>.
 *
 * @param {sap.ui.commons.Link}
 *          oMenuContent the menuContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the menuContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the menuContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the menuContent is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.ThreePanelThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#insertMenuContent
 * @function
 */

/**
 * Adds some menuContent <code>oMenuContent</code> 
 * to the aggregation named <code>menuContent</code>.
 *
 * @param {sap.ui.commons.Link}
 *            oMenuContent the menuContent to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.ThreePanelThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#addMenuContent
 * @function
 */

/**
 * Removes an menuContent from the aggregation named <code>menuContent</code>.
 *
 * @param {int | string | sap.ui.commons.Link} vMenuContent the menuContent to remove or its index or id
 * @return {sap.ui.commons.Link} the removed menuContent or null
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#removeMenuContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>menuContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.Link[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#removeAllMenuContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.Link</code> in the aggregation named <code>menuContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.Link}
 *            oMenuContent the menuContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#indexOfMenuContent
 * @function
 */
	

/**
 * Destroys all the menuContent in the aggregation 
 * named <code>menuContent</code>.
 * @return {sap.suite.ui.commons.ThreePanelThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingInspector#destroyMenuContent
 * @function
 */


// Start of sap/suite/ui/commons/ThreePanelThingInspector.js
jQuery.sap.require('sap.ui.ux3.ThingInspector'); // unlisted dependency retained


sap.suite.ui.commons.ThreePanelThingInspector.prototype.init = function() {
    sap.ui.ux3.ThingInspector.prototype.init.apply(this);

    var that = this;
    this._oThingViewer.destroy();
    this._oThingViewer = new sap.suite.ui.commons.ThreePanelThingViewer(this.getId() + "-thingViewer");
    this.setAggregation("thingViewer", this._oThingViewer);

    this._oThingViewer.attachFacetSelected(function(oEvent) {
        var oItem = oEvent.getParameters().item;

        if (that.fireFacetSelected({ id: oItem.getId(), key: oItem.getKey(), item: oItem })) {
            that.setSelectedFacet(oItem);
        } else {
            oEvent.preventDefault();
        }
    });
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.setShowHeader = function(showHeader) {
    this._oThingViewer.setShowHeader(showHeader);
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.getShowHeader = function() {
    this._oThingViewer.getShowHeader();
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.setLogo = function(oUri) {
    this._oThingViewer.setLogo(oUri);
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.getLogo = function() {
    this._oThingViewer.getLogo();
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.getSidebarWidth = function() {
    this._oThingViewer.getSidebarWidth();
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.setSidebarWidth = function(oWidth) {
    this._oThingViewer.setSidebarWidth(oWidth);
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.addMenuContent = function(oContent) {
    this._oThingViewer.addMenuContent(oContent);
    return this;
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.insertMenuContent = function(oContent, iIndex) {
    this._oThingViewer.insertMenuContent(oContent, iIndex);
    return this;
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.getMenuContent = function() {
    return this._oThingViewer.getMenuContent();
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.removeMenuContent = function(oContent) {
    this._oThingViewer.removeMenuContent(oContent);
    return this;
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.removeAllMenuContent = function() {
    this._oThingViewer.removeAllMenuContent();
    return this;
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.indexOfMenuContent = function(oContent) {
    return this._oThingViewer.indexOfMenuContent(oContent);
};

sap.suite.ui.commons.ThreePanelThingInspector.prototype.destroyMenuContent = function() {
    this._oThingViewer.destroyMenuContent();
    return this;
};

}; // end of sap/suite/ui/commons/ThreePanelThingInspector.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.UnifiedThingGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.UnifiedThingGroup.
jQuery.sap.declare("sap.suite.ui.commons.UnifiedThingGroup");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new UnifiedThingGroup.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getDesign design} : sap.suite.ui.commons.ThingGroupDesign (default: sap.suite.ui.commons.ThingGroupDesign.ZeroIndent)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control is used in UnifiedThingInspector to display the facet header information.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.UnifiedThingGroup
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.UnifiedThingGroup", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"description" : {type : "string", group : "Misc", defaultValue : null},
		"design" : {type : "sap.suite.ui.commons.ThingGroupDesign", group : "Misc", defaultValue : sap.suite.ui.commons.ThingGroupDesign.ZeroIndent}
	},
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.UnifiedThingGroup with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.UnifiedThingGroup.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * The title of the group.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingGroup#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.UnifiedThingGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingGroup#setTitle
 * @function
 */


/**
 * Getter for property <code>description</code>.
 * The description of the group.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>description</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingGroup#getDescription
 * @function
 */

/**
 * Setter for property <code>description</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDescription  new value for property <code>description</code>
 * @return {sap.suite.ui.commons.UnifiedThingGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingGroup#setDescription
 * @function
 */


/**
 * Getter for property <code>design</code>.
 * Defines how the control is rendered.
 *
 * Default value is <code>ZeroIndent</code>
 *
 * @return {sap.suite.ui.commons.ThingGroupDesign} the value of property <code>design</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingGroup#getDesign
 * @function
 */

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>ZeroIndent</code> 
 *
 * @param {sap.suite.ui.commons.ThingGroupDesign} oDesign  new value for property <code>design</code>
 * @return {sap.suite.ui.commons.UnifiedThingGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingGroup#setDesign
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content of the group.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.suite.ui.commons.UnifiedThingGroup#getContent
 * @function
 */


/**
 * Setter for the aggregated <code>content</code>.
 * @param oContent {sap.ui.core.Control}
 * @return {sap.suite.ui.commons.UnifiedThingGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingGroup#setContent
 * @function
 */
	

/**
 * Destroys the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.suite.ui.commons.UnifiedThingGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingGroup#destroyContent
 * @function
 */


// Start of sap/suite/ui/commons/UnifiedThingGroup.js
///**
// * This file defines behavior for the control,
// */
//sap.suite.ui.commons.UnifiedThingGroup.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap/suite/ui/commons/UnifiedThingGroup.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.UnifiedThingInspector') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.UnifiedThingInspector.
jQuery.sap.declare("sap.suite.ui.commons.UnifiedThingInspector");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new UnifiedThingInspector.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getTransactionsVisible transactionsVisible} : boolean (default: false)</li>
 * <li>{@link #getActionsVisible actionsVisible} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getFacets facets} : sap.suite.ui.commons.FacetOverview[]</li>
 * <li>{@link #getFacetContent facetContent} : sap.ui.core.Control[]</li>
 * <li>{@link #getKpis kpis} : sap.suite.ui.commons.KpiTile[]</li>
 * <li>{@link #getTransactions transactions} : sap.ui.core.Control[]</li>
 * <li>{@link #getActions actions} : sap.m.Button[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.UnifiedThingInspector#event:backAction backAction} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.UnifiedThingInspector#event:transactionsButtonPress transactionsButtonPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.UnifiedThingInspector#event:actionsButtonPress actionsButtonPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.UnifiedThingInspector#event:configurationButtonPress configurationButtonPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control provides an ability to display a thing (for example, object factsheet) on the desktop, tablet, and phone devices in a Fiori style.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.UnifiedThingInspector", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"getSelectedFacet", "navigateToDetailWithContent", "navigateToDetail", "navigateToPage"
	],

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"height" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '100%'},
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"name" : {type : "string", group : "Misc", defaultValue : null},
		"description" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"transactionsVisible" : {type : "boolean", group : "Misc", defaultValue : false},
		"actionsVisible" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	aggregations : {
    	"facets" : {type : "sap.suite.ui.commons.FacetOverview", multiple : true, singularName : "facet"}, 
    	"facetContent" : {type : "sap.ui.core.Control", multiple : true, singularName : "facetContent"}, 
    	"navContainer" : {type : "sap.m.NavContainer", multiple : false, visibility : "hidden"}, 
    	"kpis" : {type : "sap.suite.ui.commons.KpiTile", multiple : true, singularName : "kpi"}, 
    	"transactions" : {type : "sap.ui.core.Control", multiple : true, singularName : "transaction"}, 
    	"actions" : {type : "sap.m.Button", multiple : true, singularName : "action"}
	},
	events : {
		"backAction" : {}, 
		"transactionsButtonPress" : {allowPreventDefault : true}, 
		"actionsButtonPress" : {allowPreventDefault : true}, 
		"configurationButtonPress" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.UnifiedThingInspector with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.UnifiedThingInspector.extend
 * @function
 */

sap.suite.ui.commons.UnifiedThingInspector.M_EVENTS = {'backAction':'backAction','transactionsButtonPress':'transactionsButtonPress','actionsButtonPress':'actionsButtonPress','configurationButtonPress':'configurationButtonPress'};


/**
 * Getter for property <code>height</code>.
 * The height of the control.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#setHeight
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * The title of the thing.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#setTitle
 * @function
 */


/**
 * Getter for property <code>name</code>.
 * The name of the thing.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#setName
 * @function
 */


/**
 * Getter for property <code>description</code>.
 * The description of the thing.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>description</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getDescription
 * @function
 */

/**
 * Setter for property <code>description</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDescription  new value for property <code>description</code>
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#setDescription
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * The icon to be displayed as a graphical element within the header. This can be an image or an icon from the icon font.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#setIcon
 * @function
 */


/**
 * Getter for property <code>transactionsVisible</code>.
 * If set to true, the Transaction button appears.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>transactionsVisible</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getTransactionsVisible
 * @function
 */

/**
 * Setter for property <code>transactionsVisible</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bTransactionsVisible  new value for property <code>transactionsVisible</code>
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#setTransactionsVisible
 * @function
 */


/**
 * Getter for property <code>actionsVisible</code>.
 * If set to true, the Actions button appears.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>actionsVisible</code>
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getActionsVisible
 * @function
 */

/**
 * Setter for property <code>actionsVisible</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bActionsVisible  new value for property <code>actionsVisible</code>
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#setActionsVisible
 * @function
 */


/**
 * Getter for aggregation <code>facets</code>.<br/>
 * The list of the sap.suite.ui.commons.FacetOverview objects.
 * 
 * @return {sap.suite.ui.commons.FacetOverview[]}
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getFacets
 * @function
 */


/**
 * Inserts a facet into the aggregation named <code>facets</code>.
 *
 * @param {sap.suite.ui.commons.FacetOverview}
 *          oFacet the facet to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the facet should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the facet is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the facet is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#insertFacet
 * @function
 */

/**
 * Adds some facet <code>oFacet</code> 
 * to the aggregation named <code>facets</code>.
 *
 * @param {sap.suite.ui.commons.FacetOverview}
 *            oFacet the facet to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#addFacet
 * @function
 */

/**
 * Removes an facet from the aggregation named <code>facets</code>.
 *
 * @param {int | string | sap.suite.ui.commons.FacetOverview} vFacet the facet to remove or its index or id
 * @return {sap.suite.ui.commons.FacetOverview} the removed facet or null
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#removeFacet
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>facets</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.FacetOverview[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#removeAllFacets
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.FacetOverview</code> in the aggregation named <code>facets</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.FacetOverview}
 *            oFacet the facet whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#indexOfFacet
 * @function
 */
	

/**
 * Destroys all the facets in the aggregation 
 * named <code>facets</code>.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#destroyFacets
 * @function
 */


/**
 * Getter for aggregation <code>facetContent</code>.<br/>
 * The content that appears on the detail page of the UnifiedThingInspector.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getFacetContent
 * @function
 */


/**
 * Inserts a facetContent into the aggregation named <code>facetContent</code>.
 *
 * @param {sap.ui.core.Control}
 *          oFacetContent the facetContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the facetContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the facetContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the facetContent is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#insertFacetContent
 * @function
 */

/**
 * Adds some facetContent <code>oFacetContent</code> 
 * to the aggregation named <code>facetContent</code>.
 *
 * @param {sap.ui.core.Control}
 *            oFacetContent the facetContent to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#addFacetContent
 * @function
 */

/**
 * Removes an facetContent from the aggregation named <code>facetContent</code>.
 *
 * @param {int | string | sap.ui.core.Control} vFacetContent the facetContent to remove or its index or id
 * @return {sap.ui.core.Control} the removed facetContent or null
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#removeFacetContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>facetContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#removeAllFacetContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>facetContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oFacetContent the facetContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#indexOfFacetContent
 * @function
 */
	

/**
 * Destroys all the facetContent in the aggregation 
 * named <code>facetContent</code>.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#destroyFacetContent
 * @function
 */


/**
 * Getter for aggregation <code>kpis</code>.<br/>
 * A set of the KPI tiles to be shown in the header. Currently only 3 tiles from the list are displayed on the desktop and tablet. On the phone, all tiles are displayed in a swipeable container.
 * 
 * @return {sap.suite.ui.commons.KpiTile[]}
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getKpis
 * @function
 */


/**
 * Inserts a kpi into the aggregation named <code>kpis</code>.
 *
 * @param {sap.suite.ui.commons.KpiTile}
 *          oKpi the kpi to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the kpi should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the kpi is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the kpi is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#insertKpi
 * @function
 */

/**
 * Adds some kpi <code>oKpi</code> 
 * to the aggregation named <code>kpis</code>.
 *
 * @param {sap.suite.ui.commons.KpiTile}
 *            oKpi the kpi to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#addKpi
 * @function
 */

/**
 * Removes an kpi from the aggregation named <code>kpis</code>.
 *
 * @param {int | string | sap.suite.ui.commons.KpiTile} vKpi the kpi to remove or its index or id
 * @return {sap.suite.ui.commons.KpiTile} the removed kpi or null
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#removeKpi
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>kpis</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.KpiTile[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#removeAllKpis
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.KpiTile</code> in the aggregation named <code>kpis</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.KpiTile}
 *            oKpi the kpi whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#indexOfKpi
 * @function
 */
	

/**
 * Destroys all the kpis in the aggregation 
 * named <code>kpis</code>.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#destroyKpis
 * @function
 */


/**
 * Getter for aggregation <code>transactions</code>.<br/>
 * Menu items for transaction popup.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getTransactions
 * @function
 */


/**
 * Inserts a transaction into the aggregation named <code>transactions</code>.
 *
 * @param {sap.ui.core.Control}
 *          oTransaction the transaction to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the transaction should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the transaction is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the transaction is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#insertTransaction
 * @function
 */

/**
 * Adds some transaction <code>oTransaction</code> 
 * to the aggregation named <code>transactions</code>.
 *
 * @param {sap.ui.core.Control}
 *            oTransaction the transaction to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#addTransaction
 * @function
 */

/**
 * Removes an transaction from the aggregation named <code>transactions</code>.
 *
 * @param {int | string | sap.ui.core.Control} vTransaction the transaction to remove or its index or id
 * @return {sap.ui.core.Control} the removed transaction or null
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#removeTransaction
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>transactions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#removeAllTransactions
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>transactions</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oTransaction the transaction whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#indexOfTransaction
 * @function
 */
	

/**
 * Destroys all the transactions in the aggregation 
 * named <code>transactions</code>.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#destroyTransactions
 * @function
 */


/**
 * Getter for aggregation <code>actions</code>.<br/>
 * Action sheet controls.
 * 
 * @return {sap.m.Button[]}
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#getActions
 * @function
 */


/**
 * Inserts a action into the aggregation named <code>actions</code>.
 *
 * @param {sap.m.Button}
 *          oAction the action to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the action should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the action is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the action is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#insertAction
 * @function
 */

/**
 * Adds some action <code>oAction</code> 
 * to the aggregation named <code>actions</code>.
 *
 * @param {sap.m.Button}
 *            oAction the action to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#addAction
 * @function
 */

/**
 * Removes an action from the aggregation named <code>actions</code>.
 *
 * @param {int | string | sap.m.Button} vAction the action to remove or its index or id
 * @return {sap.m.Button} the removed action or null
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#removeAction
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>actions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Button[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#removeAllActions
 * @function
 */

/**
 * Checks for the provided <code>sap.m.Button</code> in the aggregation named <code>actions</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.Button}
 *            oAction the action whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#indexOfAction
 * @function
 */
	

/**
 * Destroys all the actions in the aggregation 
 * named <code>actions</code>.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#destroyActions
 * @function
 */


/**
 * The event is fired when the user chooses the Back button. 
 *
 * @name sap.suite.ui.commons.UnifiedThingInspector#backAction
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'backAction' event of this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/> itself. 
 *  
 * The event is fired when the user chooses the Back button. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#attachBackAction
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'backAction' event of this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#detachBackAction
 * @function
 */

/**
 * Fire event backAction to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.UnifiedThingInspector#fireBackAction
 * @function
 */


/**
 * Event is thrown after transactions button was pressed. 
 *
 * @name sap.suite.ui.commons.UnifiedThingInspector#transactionsButtonPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {object} oControlEvent.getParameters.caller Object that initiated event.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'transactionsButtonPress' event of this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/> itself. 
 *  
 * Event is thrown after transactions button was pressed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#attachTransactionsButtonPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'transactionsButtonPress' event of this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#detachTransactionsButtonPress
 * @function
 */

/**
 * Fire event transactionsButtonPress to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * * 
 * Expects following event parameters:
 * <ul>
 * <li>'caller' of type <code>object</code> Object that initiated event.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.suite.ui.commons.UnifiedThingInspector#fireTransactionsButtonPress
 * @function
 */


/**
 * Event is thrown after actions button was pressed. 
 *
 * @name sap.suite.ui.commons.UnifiedThingInspector#actionsButtonPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {object} oControlEvent.getParameters.caller Object that initiated event.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'actionsButtonPress' event of this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/> itself. 
 *  
 * Event is thrown after actions button was pressed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#attachActionsButtonPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'actionsButtonPress' event of this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#detachActionsButtonPress
 * @function
 */

/**
 * Fire event actionsButtonPress to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * * 
 * Expects following event parameters:
 * <ul>
 * <li>'caller' of type <code>object</code> Object that initiated event.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.suite.ui.commons.UnifiedThingInspector#fireActionsButtonPress
 * @function
 */


/**
 * The event is fired when the user chooses the Configuration button. 
 *
 * @name sap.suite.ui.commons.UnifiedThingInspector#configurationButtonPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {object} oControlEvent.getParameters.caller Object that initiated event.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'configurationButtonPress' event of this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/> itself. 
 *  
 * The event is fired when the user chooses the Configuration button. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#attachConfigurationButtonPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'configurationButtonPress' event of this <code>sap.suite.ui.commons.UnifiedThingInspector</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.UnifiedThingInspector#detachConfigurationButtonPress
 * @function
 */

/**
 * Fire event configurationButtonPress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'caller' of type <code>object</code> Object that initiated event.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.UnifiedThingInspector} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.UnifiedThingInspector#fireConfigurationButtonPress
 * @function
 */


/**
 * Returns currently selected facet.
 *
 * @name sap.suite.ui.commons.UnifiedThingInspector.prototype.getSelectedFacet
 * @function

 * @type sap.suite.ui.commons.FacetOverview
 * @public
 */


/**
 * Navigate to detail screen.
 *
 * @name sap.suite.ui.commons.UnifiedThingInspector.prototype.navigateToDetailWithContent
 * @function
 * @param {object} 
 *         oAFacetData
 *         Contains content for detail page to which control should navigate.

 * @type void
 * @public
 */


/**
 * Control shows detail page which should already be set. Method can be used instead of navigateToDetailWithContent when content is already set by addFacetContent.
 *
 * @name sap.suite.ui.commons.UnifiedThingInspector.prototype.navigateToDetail
 * @function

 * @type void
 * @public
 */


/**
 * Method that could add any sap.m.Page to aggregated NavContainer. It will be deleted from navigation when user reach initial facet overview page.
 *
 * @name sap.suite.ui.commons.UnifiedThingInspector.prototype.navigateToPage
 * @function
 * @param {sap.m.Page} 
 *         oOPage
 *         sap.m.Page instance that will be added to Navigation Container of UnifiedThingInspector
 * @param {boolean} 
 *         bAddDefaultFooter
 *         If set to true default page footer will be added from UnifiedThingInspector.

 * @type void
 * @public
 */


// Start of sap/suite/ui/commons/UnifiedThingInspector.js
jQuery.sap.require('sap.m.NavContainer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.layout.Grid'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


sap.suite.ui.commons.UnifiedThingInspector.prototype.init = function(){
    var that = this;
    this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
    /*this boolean is used to determine if animation of transition to detail page has been finished.
    if true - animation is still happening and control does not allow to navigate to another detail page (in navigateToDetail()).
    */
    this._bDetailPageIsTransitioning = false;
    this._oNavContainer = new sap.m.NavContainer(this.getId() + "-nav-container", {
        navigate: function () {
            that._bDetailPageIsTransitioning = true;
        },
        afterNavigate: function (oEvent) {
            that._bDetailPageIsTransitioning = false;
            
            if(that._oDetailPage == oEvent.getParameter("from") && that._oMasterPage == oEvent.getParameter("to")) {
                var count = that._oNavContainer.getPages().length - 1;
                for (var i = count - 1; i > 1; i--) {
                    that._oNavContainer.removeAggregation("pages", i, true);
                }       
            }
        }
    });
    this.setAggregation("navContainer", this._oNavContainer);

    this._oActionSheet = new sap.m.ActionSheet(this.getId() + "-action-sheet", {
        showCancelButton: true,
        placement: sap.m.PlacementType.Top
    });

    this._oTransactionSheet = new sap.suite.ui.commons.LinkActionSheet(this.getId() + "-transaction-sheet", {
        showCancelButton: true,
        placement: sap.m.PlacementType.Top,
        itemPress: function(oEvent){
        	var oItem = oEvent.getParameter("item");
        	if (oItem.getMetadata().getName() == "sap.m.Link" && oItem._bEnterWasPressed) {
        		that._bDontOpenTransactions = true;
        	}
        }
    });

    this._oKpiScrollCont = new sap.m.ScrollContainer(this.getId() + "-kpi-scroll-container", {
        width : "100%",
        horizontal : this.isPhone()
    });
    
    this._oKpiScrollCont.addStyleClass("sapSuiteUtiKpiBox");

    this._oFacetsGrid = new sap.ui.layout.Grid(this.getId() + "-facets-grid", {
        defaultSpan: "L6 M12 S12",
        hSpacing: 1,
        vSpacing: 1,
        width: "auto"
    });
    this._oFacetsGrid.addStyleClass("sapSuiteUtiFacetGrid");

    this._oHeader = this._createHeaderObject(this.getId() + "-header");

    this._oHeaderGrid = new sap.ui.layout.Grid(this.getId() + "-header-grid", {
        hSpacing: 0,
        vSpacing: 0,
        content: [
            this._oHeader,
            this._oKpiScrollCont
        ]
    });
    this._oHeaderGrid.addStyleClass("sapSuiteUtiHeaderGrid");

    this._oMasterPage = new sap.m.Page(this.getId() + "-master-page", {
        content: [this._oHeaderGrid, this._oFacetsGrid],
        showNavButton: true,
        footer: new sap.m.Bar(this.getId() + "-master-footer", {
            contentLeft: [ new sap.m.Button(this.getId() + "-master-settings-button", {
                icon : "sap-icon://action-settings",
                press : function () {
                    var object = {};
                    object.caller = this;
                        that.fireConfigurationButtonPress(object);
                }
            })],
            contentRight: [
                new sap.m.Button(this.getId() + "-master-action-button", {
                    icon : "sap-icon://action",
                    press : function () {
                        var object = {};
                        object.caller = this;
                        if (that.fireActionsButtonPress(object)) {
	                        if (that._oActionSheet.getButtons().length) {
	                        	that._oActionSheet.openBy(this);
	                        } else {
	                        	jQuery.sap.log.info("The are no actions for displaying");
	                        }
                        }
                    }
                })
            ]
        }),
        navButtonPress: function () {
            that.fireBackAction();
        }
    });

    if (jQuery.device.is.desktop) {
        this._oMasterPage.getFooter().insertContentRight(
            new sap.m.Button(this.getId() + "-master-transaction-button", {
                text: that._rb.getText("UNIFIEDTHINGINSPECTOR_FOOTER_BUTTON_OPENWITH") + "...",
                press : function () {
                	if (!that._bDontOpenTransactions) {
	                	var object = {};
	                	object.caller = this;
	                	if (that.fireTransactionsButtonPress(object)) {
	                		if (that._oTransactionSheet.getItems().length) {
	                			that._oTransactionSheet.openBy(this);
	                		} else {
	                			jQuery.sap.log.info("The are no transactions for displaying");
	                		}
	                	}
                	} else {
                		that._bDontOpenTransactions = false;
                	}

                }
            }),
            0
        );
    }

    this._oDetailPage = new sap.m.Page(this.getId() + "-detail-page", {
        showNavButton: true,
        footer: new sap.m.Bar(this.getId() + "-detail-footer", {
            contentLeft: [ new sap.m.Button(this.getId() + "-detail-settings-button", {
                icon : "sap-icon://action-settings",
                press : function () {
                    var object = {};
                    object.caller = this;
                        that.fireConfigurationButtonPress(object);
                }
            })],
            contentRight: [
                new sap.m.Button(this.getId() + "-detail-action-button", {
                    icon : "sap-icon://action",
                    press : function () {
                        var object = {};
                        object.caller = this;
                        if (that.fireActionsButtonPress(object)) {
	                        if (that._oActionSheet.getButtons().length) {
	                        	that._oActionSheet.openBy(this);
	                        } else {
	                        	jQuery.sap.log.info("The are no actions for displaying");
	                        }
                        }
                    }
                })
            ]
        }),
        navButtonPress: function () {
            that._navigateToMaster();
        }
    });

    if (jQuery.device.is.desktop) {
        this._oDetailPage.getFooter().insertContentRight(
            new sap.m.Button(this.getId() + "-detail-transaction-button", {
                text: that._rb.getText("UNIFIEDTHINGINSPECTOR_FOOTER_BUTTON_OPENWITH") + "...",
                press : function () {
                        var object = {};
                        object.caller = this;
                    	if (that.fireTransactionsButtonPress(object)) {
                    		if (that._oTransactionSheet.getItems().length) {
                    			that._oTransactionSheet.openBy(this);
                    		} else {
                    			jQuery.sap.log.info("The are no transactions for displaying");
                    		}
                    	}
                }
            }),
            0
        );
    }

    this._oNavContainer.addPage(this._oMasterPage);
    this._oNavContainer.addPage(this._oDetailPage);
    
    if(!jQuery.device.is.desktop) {
        sap.ui.Device.orientation.attachHandler(function (oE) {
                that._updateHeaderLayoutData(oE);
        });
    }

    this.setModel = function (oModel, sName){
        sap.suite.ui.commons.UnifiedThingInspector.prototype.setModel.apply(this, arguments);
        this._oActionSheet.setModel(oModel, sName);
        this._oTransactionSheet.setModel(oModel, sName);
        return this;
    };
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.exit = function () {
    var that = this;
    this._oActionSheet.destroy();
    this._oTransactionSheet.destroy();

    sap.ui.Device.orientation.detachHandler(function () {
        that._updateHeaderLayoutData();
    });
    
    sap.ui.core.ResizeHandler.deregister(this._sTitleResizeHandlerId);
};

/*
Method is used to update layoutData only on phone when orientation is changed.
Control needs to update header grid and its content - scroll container and object header.
If phone is in portrait - control shows KPI tiles under object header. When in landscape - side-by-side.
*/
sap.suite.ui.commons.UnifiedThingInspector.prototype._updateHeaderLayoutData = function (oE) {
        var iKpiCount = this.getKpis().length;
        var sWidth = oE.landscape ? "148px" : 100/iKpiCount + "%";
    jQuery(".sapSuiteKTile").css("width", sWidth);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.onAfterRendering = function() {
	if(this._sTitleResizeHandlerId) {
		sap.ui.core.ResizeHandler.deregister(this._sTitleResizeHandlerId);
	}
	
    if (this.getName()) {
        var oHeader = jQuery.sap.domById(this.getId() + "-header");
        this._sTitleResizeHandlerId = sap.ui.core.ResizeHandler.register(oHeader,  jQuery.proxy(this._handleResize, this));
    }

    if(jQuery.device.is.desktop) {
        //Correct layout to avoid issues with gaps between cards
        var aFacets = this.getFacets();
        var iFacetBalance = 0;
        var bNonStandardUpper = false;
        
        for (var i = 0; i < aFacets.length; i++) {
            if (iFacetBalance > 0) {
            	iFacetBalance -= aFacets[i].getRowSpan();
            } else {
            	if (bNonStandardUpper && iFacetBalance == 0) {
            		jQuery.sap.byId(aFacets[i].getId()).parent().addClass("sapSuiteUtiFacetLeft");
            		bNonStandardUpper = false;
            	}
            	
            	iFacetBalance += aFacets[i].getRowSpan();
            }

            if (aFacets[i].getRowSpan() > 1) {
            	bNonStandardUpper = true;
            }
        }
    }
        
    if(jQuery.device.is.portrait) {
        var iKpiCount = this.getKpis().length;
        jQuery(".sapSuiteKTile").css("width", 100/iKpiCount + "%");
    }
};

sap.suite.ui.commons.UnifiedThingInspector.prototype._handleResize = function() {
    var oHeaderTitle = jQuery(jQuery.sap.domById(this.getId() + "-header-name"));
    var iTitleLength = this._oHeader.getName().length;

    var iWidth = oHeaderTitle.width();
    oHeaderTitle.css("font-size", this._getFontSize(iTitleLength, iWidth) + "px");
};

sap.suite.ui.commons.UnifiedThingInspector.prototype._getFontSize = function(iCont, iWidth) {
	var nSize = iWidth/(iCont*0.5);
	if(nSize > 28) {
		return 28;
	} else if(nSize < 20) {
		return 20;
	} else {
		return nSize;	
	}
	
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.onBeforeRendering = function() {
    sap.ui.getCore().byId(this.getId() + "-master-action-button").setVisible(this.getActionsVisible());
    sap.ui.getCore().byId(this.getId() + "-detail-action-button").setVisible(this.getActionsVisible());

    if (jQuery.device.is.desktop) {
        sap.ui.getCore().byId(this.getId() + "-master-transaction-button").setVisible(this.getTransactionsVisible());
        sap.ui.getCore().byId(this.getId() + "-detail-transaction-button").setVisible(this.getTransactionsVisible());
    }
    //If there are no KPIs - do not show scroll container at all.
    //This fixes issue when there are no KPIs but on phone we have two rows in header.
    this._oKpiScrollCont.setVisible(!!this.getKpis().length);
    
    //If there is less than 3 tiles - pass specific class flag
    if (this.getKpis().length < 3) {
        this._oKpiScrollCont.addStyleClass("sapSuiteUtiKpiLT3");
    }
    
    this._fitKpiTiles();
};

sap.suite.ui.commons.UnifiedThingInspector.prototype._fitKpiTiles = function() {
	var sHeaderSpan;
    var sKpiCntSpan;
    var iKpiLength = this.getKpis().length;

    switch (iKpiLength) {
        case 0:
            sHeaderSpan = "L12 M12 S12";
            sKpiCntSpan = "L12 M12 S12";
            break;
        case 1:
            sHeaderSpan = "L9 M12 S12";
            sKpiCntSpan = "L3 M12 S12";
            break;
        case 2:
            sHeaderSpan = "L8 M12 S12";
            sKpiCntSpan = "L4 M12 S12";
            break;
        default:
            sHeaderSpan = "L6 M12 S12";
            sKpiCntSpan = "L6 M12 S12";
    }

    this._oHeader.setLayoutData(new sap.ui.layout.GridData({span: sHeaderSpan}));
    this._oKpiScrollCont.setLayoutData(new sap.ui.layout.GridData({span: sKpiCntSpan}));
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.isPhone = function() {
    return jQuery.device.is.phone || jQuery.device.is.iphone;
};

// overridden properties setters
sap.suite.ui.commons.UnifiedThingInspector.prototype.setTitle = function(sTitle) {
    this.setProperty("title", sTitle, true);
    this._oMasterPage.setTitle(sTitle);
    this._oDetailPage.setTitle(sTitle);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.setName = function(sName) {
    this._oHeader.setName(sName);
    this.setProperty("name", sName, true);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.setDescription = function(sDescription) {
    this._oHeader.setDescription(sDescription);
    this.setProperty("description", sDescription, true);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.setIcon = function(sIcon) {
    this._oHeader.setIcon(sIcon);
    this.setProperty("icon", sIcon, true);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype._navigateToMaster = function() {
    this._oNavContainer.back();
};

/*Method should be called when user selects some facet. Developer should supply this method with content for detail page.
Method checks if there is any other already happening transition to detail page. E.g. user double clicked facet. If page is 
still transitioning - we cancel newly added navigation.
*/
sap.suite.ui.commons.UnifiedThingInspector.prototype.navigateToDetailWithContent = function(aFacetData) {
    if (!this._bDetailPageIsTransitioning) {
        this.removeAllFacetContent();
        if (jQuery.isArray(aFacetData)) {
            for (var i = 0; i < aFacetData.length; i++) {
                this.addFacetContent(aFacetData[i]);
            }
        } else {
            this.addFacetContent(aFacetData);
        }
        this._oNavContainer.to(this._oDetailPage.getId());
        this._oDetailPage.scrollTo(0);
    }
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.navigateToDetail = function() {
    this._oNavContainer.to(this._oDetailPage.getId());
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.navigateToPage = function(oPage, addDefaultFooter) {
        var that = this;
        oPage.attachNavButtonPress(function(oEvent){
                that._oNavContainer.back();     
        });
        
        if(addDefaultFooter == undefined || addDefaultFooter) {
                var oFooter = this._oMasterPage.getFooter().clone();
                oPage.setFooter(oFooter);               
        }

        this._oNavContainer.addPage(oPage);
        this._oNavContainer.to(oPage.getId());
};

/***** Actions aggregation overridden methods *****/

sap.suite.ui.commons.UnifiedThingInspector.prototype.getActions = function() {
    return this._oActionSheet.getButtons();
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.insertAction = function(oAction, iIndex) {
    this._oActionSheet.insertButton(oAction, iIndex);
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.addAction = function(oAction) {
    this._oActionSheet.addButton(oAction);
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.removeAction = function(vAction) {
    return this._oActionSheet.removeButton(vAction);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.removeAllActions = function() {
    return this._oActionSheet.removeAllButtons();
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.indexOfAction = function(oAction) {
    return this._oActionSheet.indexOfButton(oAction);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.destroyActions = function() {
    this._oActionSheet.destroyButtons();
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.getTransactions = function() {
    return this._oTransactionSheet.getItems();
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.addTransaction = function(oTransaction) {
	this._oTransactionSheet.addItem(oTransaction);
	return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.insertTransaction = function(oTransaction, iIndex) { 
	this._oTransactionSheet.insertItem(oTransaction, iIndex);
    return this;
}; 

sap.suite.ui.commons.UnifiedThingInspector.prototype.removeTransaction = function(oTransaction) { 
	return this._oTransactionSheet.removeItem(oTransaction);
}; 

sap.suite.ui.commons.UnifiedThingInspector.prototype.removeAllTransactions = function() { 
	return this._oTransactionSheet.removeAllItems();
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.indexOfTransaction = function(oTransaction) {
    return this._oTransactionSheet.indexOfItem(oTransaction);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.destroyTransactions = function() {
    this._oTransactionSheet.destroyItems();
    return this;
};

/**************************************************************
 * AGGREGATION FORWARDING inspired by Split Container
 **************************************************************/

sap.suite.ui.commons.UnifiedThingInspector.prototype._callMethodInManagedObject = function(sFunctionName, sAggregationName){
    var args = Array.prototype.slice.call(arguments);
    if(sAggregationName === "facets"){
        args[1] = "content";
        return this._oFacetsGrid[sFunctionName].apply(this._oFacetsGrid, args.slice(1));
    }else if(sAggregationName === "kpis"){
        args[1] = "content";
        return this._oKpiScrollCont[sFunctionName].apply(this._oKpiScrollCont, args.slice(1));
    }else if(sAggregationName === "facetContent"){
        args[1] = "content";
        return this._oDetailPage[sFunctionName].apply(this._oDetailPage, args.slice(1));
    }else {
        return sap.ui.base.ManagedObject.prototype[sFunctionName].apply(this, args.slice(1));
    }
};


/**************************************************************
 * START - forward aggregation related methods to the inner aggregation
 **************************************************************/
sap.suite.ui.commons.UnifiedThingInspector.prototype.validateAggregation = function(sAggregationName, oObject, bMultiple){
    return this._callMethodInManagedObject("validateAggregation", sAggregationName, oObject, bMultiple);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.setAggregation = function(sAggregationName, oObject, bSuppressInvalidate){
    this._callMethodInManagedObject("setAggregation", sAggregationName, oObject, bSuppressInvalidate);
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.getAggregation = function(sAggregationName, oDefaultForCreation){
    return this._callMethodInManagedObject("getAggregation", sAggregationName, oDefaultForCreation);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.indexOfAggregation = function(sAggregationName, oObject){
    return this._callMethodInManagedObject("indexOfAggregation", sAggregationName, oObject);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.insertAggregation = function(sAggregationName, oObject, iIndex, bSuppressInvalidate){
    this._callMethodInManagedObject("insertAggregation", sAggregationName, oObject, iIndex, bSuppressInvalidate);
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.addAggregation = function(sAggregationName, oObject, bSuppressInvalidate){
    this._callMethodInManagedObject("addAggregation", sAggregationName, oObject, bSuppressInvalidate);
    return this;
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.removeAggregation = function(sAggregationName, oObject, bSuppressInvalidate){
    return this._callMethodInManagedObject("removeAggregation", sAggregationName, oObject, bSuppressInvalidate);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.removeAllAggregation = function(sAggregationName, bSuppressInvalidate){
    return this._callMethodInManagedObject("removeAllAggregation", sAggregationName, bSuppressInvalidate);
};

sap.suite.ui.commons.UnifiedThingInspector.prototype.destroyAggregation = function(sAggregationName, bSuppressInvalidate){
    this._callMethodInManagedObject("destroyAggregation", sAggregationName, bSuppressInvalidate);
    return this;
};
/**************************************************************
 * END - forward aggregation related methods to the inner aggregation
 **************************************************************/

sap.suite.ui.commons.UnifiedThingInspector.prototype._createHeaderObject = function(sId) {
    sap.ui.core.Control.extend("sap.suite.ui.commons.UnifiedThingInspector.Header", {
        metadata: {
            properties: {
                name: "string",
                description: "string",
                icon: "sap.ui.core.URI"
            }
        },
        setIcon: function(sIcon) {
            var bValueChanged = !jQuery.sap.equal(this.getIcon(), sIcon);

            if (bValueChanged) {
                if (this._oIcon) {
                    this._oIcon.destroy();
                    this._oIcon = undefined;
                }

                if (sIcon) {
                    this._oIcon = sap.ui.core.IconPool.createControlByURI( {
                        id: this.getId() + "-icon-image",
                        src: sIcon
                    }, sap.m.Image);

                    this._oIcon.addStyleClass("sapSuiteUtiHeaderIconImage");

                    if (this._oIcon instanceof sap.ui.core.Icon) {
                        this._oIcon.setSize("64px");
                    }
                }
            }

            return this.setProperty("icon", sIcon);
        },
        exit: function() {
            if (this._oIcon) {
                this._oIcon.destroy();
            }
        },
        renderer: function(oRm, oControl) {
            oRm.write("<div");
            oRm.writeControlData(oControl);
            oRm.addClass("sapSuiteUtiHeader");
            oRm.writeClasses();
            oRm.write(">");

            if (oControl._oIcon) {
                oRm.write("<div");
                oRm.writeAttribute("id", oControl.getId() + "-icon");
                oRm.addClass("sapSuiteUtiHeaderIcon");
                oRm.writeClasses();
                oRm.write(">");
                    oRm.renderControl(oControl._oIcon);
                oRm.write("</div>");
            }
                oRm.write("<div");
                oRm.writeAttribute("id", oControl.getId() + "-content");
                oRm.addClass("sapSuiteUtiHeaderContent");
                if (oControl._oIcon) {
                    oRm.addClass("sapSuiteUtiHeaderContentWithIcon");
                } else {
                    oRm.addClass("sapSuiteUtiHeaderContent");
                }
                oRm.writeClasses();
                oRm.write(">");
                    oRm.write("<div");
                    oRm.writeAttribute("id", oControl.getId() + "-name");
                    oRm.addClass("sapSuiteUtiHeaderName");
                    oRm.writeClasses();
                    oRm.write(">");
                        oRm.writeEscaped(oControl.getName() ? oControl.getName() : "");
                    oRm.write("</div>");

                    oRm.write("<div");
                    oRm.writeAttribute("id", oControl.getId() + "-description");
                    oRm.addClass("sapSuiteUtiHeaderDesc");
                    oRm.writeClasses();
                    oRm.write(">");
                        oRm.writeEscaped(oControl.getDescription() ? oControl.getDescription() : "");
                    oRm.write("</div>");
                oRm.write("</div>");
            oRm.write("</div>");
        }
    });

    return new sap.suite.ui.commons.UnifiedThingInspector.Header(sId);
};

}; // end of sap/suite/ui/commons/UnifiedThingInspector.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.VerticalNavigationBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.VerticalNavigationBar.
jQuery.sap.declare("sap.suite.ui.commons.VerticalNavigationBar");

jQuery.sap.require('sap.ui.ux3.NavigationBar'); // unlisted dependency retained



/**
 * Constructor for a new VerticalNavigationBar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.ux3.NavigationBar#constructor sap.ui.ux3.NavigationBar}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control extends the sap.ui.ux3.NavigationBar and allows you to display navigation items vertically. The navigation list can contain sap.ui.ux3.NavigationItem or sap.suite.ui.commons.CountingNavigationItem controls.
 * @extends sap.ui.ux3.NavigationBar
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.VerticalNavigationBar
 */
sap.ui.ux3.NavigationBar.extend("sap.suite.ui.commons.VerticalNavigationBar", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons"
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.VerticalNavigationBar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.VerticalNavigationBar.extend
 * @function
 */


// Start of sap/suite/ui/commons/VerticalNavigationBar.js
///**
// * This file defines behavior for the control,
// */
//sap.suite.ui.commons.VerticalNavigationBar.prototype.init = function(){
//   // do something for initialization...
//};

sap.suite.ui.commons.VerticalNavigationBar.prototype._handleActivation = function(oEvent) {
    // add forwarding to parent since IE doesn't support 'pointer-events:none;'
    if (oEvent.target.tagName == "SPAN") {
        oEvent.target = oEvent.target.parentElement;
    }
    sap.ui.ux3.NavigationBar.prototype._handleActivation.call(this, oEvent);
};

sap.suite.ui.commons.VerticalNavigationBar.prototype.onAfterRendering = function() {
	sap.ui.ux3.NavigationBar.prototype.onAfterRendering.apply(this);
	
	if (!this._oBarItemsMap) {
		this._oBarItemsMap = {};
	}

	var that = this;
	
	jQuery(".sapSuiteTvNavBarItemLink").mousemove(function() {
        that._showTooltip(jQuery(this).attr("id"));
    }).mouseleave(function(oEvent) {
        that._hideTooltip(jQuery(this).attr("id"));
    });
};

sap.suite.ui.commons.VerticalNavigationBar.prototype.exit = function() {
	this._oBarItemsMap = null;
	sap.ui.ux3.NavigationBar.prototype.exit.apply(this);
};

sap.suite.ui.commons.VerticalNavigationBar.prototype._handleScroll = function() {
};

sap.suite.ui.commons.VerticalNavigationBar.prototype._showTooltip = function(sTargetId) {
    var oItem = this._oBarItemsMap[sTargetId];
    if (!oItem) {
    	oItem = sap.ui.getCore().byId(sTargetId);
    	
    	if (oItem) {
	    	this._oBarItemsMap[sTargetId] = oItem;
	    	
	        var oTooltip = new sap.ui.commons.RichTooltip({
	            text : oItem.getTooltip_AsString() || oItem.getText()
	        });
	
	        oTooltip.addStyleClass("sapSuiteTvNavBarItemTltp");

	        oTooltip._currentControl = oItem;
	        oItem.addDelegate(oTooltip);
	        oItem.setAggregation("tooltip", oTooltip, true);
    	}
    }
    
    if (oItem && !oItem.doOpen) {
    	oItem.doOpen = true;
        oItem.openTimer = setTimeout(function() {
                oItem.getTooltip().openPopup(oItem);
                
                oItem.closeTimer = setTimeout(function() {
                    oItem.getTooltip().closePopup();
                    oItem.doOpen = false;
                }, 10000);
        }, 2000);
    }
};

sap.suite.ui.commons.VerticalNavigationBar.prototype._hideTooltip = function(sTargetId) {
    var oItem = this._oBarItemsMap[sTargetId];
    if (oItem) {
    	oItem.doOpen = false;
    	clearTimeout(oItem.openTimer);
    	clearTimeout(oItem.closeTimer);
        oItem.getTooltip().closePopup();
    }
};
}; // end of sap/suite/ui/commons/VerticalNavigationBar.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ViewRepeater') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.ViewRepeater.
jQuery.sap.declare("sap.suite.ui.commons.ViewRepeater");

jQuery.sap.require('sap.ui.commons.RowRepeater'); // unlisted dependency retained



/**
 * Constructor for a new ViewRepeater.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getItemMinWidth itemMinWidth} : int</li>
 * <li>{@link #getResponsive responsive} : boolean (default: false)</li>
 * <li>{@link #getDefaultViewIndex defaultViewIndex} : int (default: 0)</li>
 * <li>{@link #getShowSearchField showSearchField} : boolean (default: true)</li>
 * <li>{@link #getShowViews showViews} : boolean (default: true)</li>
 * <li>{@link #getExternal external} : boolean (default: false)</li>
 * <li>{@link #getItemHeight itemHeight} : int</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getViews views} : sap.suite.ui.commons.RepeaterViewConfiguration[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getExternalRepresentation externalRepresentation} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.ViewRepeater#event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.ViewRepeater#event:changeView changeView} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.commons.RowRepeater#constructor sap.ui.commons.RowRepeater}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control extends the sap.ui.commons.RowRepeater control providing an ability to change data representation by switching between a number of views. The data can be displayed not only in rows but also in tiles that are adjusted to fill the entire horizontal space in a row.
 * @extends sap.ui.commons.RowRepeater
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.ViewRepeater
 */
sap.ui.commons.RowRepeater.extend("sap.suite.ui.commons.ViewRepeater", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"itemMinWidth" : {type : "int", group : "Misc", defaultValue : null},
		"responsive" : {type : "boolean", group : "Misc", defaultValue : false},
		"defaultViewIndex" : {type : "int", group : "Misc", defaultValue : 0},
		"showSearchField" : {type : "boolean", group : "Misc", defaultValue : true},
		"showViews" : {type : "boolean", group : "Misc", defaultValue : true},
		"external" : {type : "boolean", group : "Misc", defaultValue : false},
		"itemHeight" : {type : "int", group : "Misc", defaultValue : null},
		"height" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '100%'}
	},
	aggregations : {
    	"views" : {type : "sap.suite.ui.commons.RepeaterViewConfiguration", multiple : true, singularName : "view"}
	},
	associations : {
		"externalRepresentation" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"search" : {}, 
		"changeView" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.ViewRepeater with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.ViewRepeater.extend
 * @function
 */

sap.suite.ui.commons.ViewRepeater.M_EVENTS = {'search':'search','changeView':'changeView'};


/**
 * Getter for property <code>itemMinWidth</code>.
 * The minimal width of the tile for the current view. Only applicable if "responsive" property is set to true.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>itemMinWidth</code>
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#getItemMinWidth
 * @function
 */

/**
 * Setter for property <code>itemMinWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iItemMinWidth  new value for property <code>itemMinWidth</code>
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#setItemMinWidth
 * @function
 */


/**
 * Getter for property <code>responsive</code>.
 * This parameter indicates whether the content is shown in rows or tiles. If false, the content is shown in rows just like in core sap.ui.commons.RowRepeater. If true, the content is shown in tiles (similar to sap.ui.ux3.DataSet control) that have minimal width defined by the "itemMinWidth" property. The number of columns depends on the parent control's width. If you resize the control, the number of columns may change respectively so that the content tiles can fill the entire space of a row.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>responsive</code>
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#getResponsive
 * @function
 */

/**
 * Setter for property <code>responsive</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bResponsive  new value for property <code>responsive</code>
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#setResponsive
 * @function
 */


/**
 * Getter for property <code>defaultViewIndex</code>.
 * The index of the default view starting from 0. The view is selected on the initial rendering of the control. If the index is greater than the total quantity of the views, the last view is selected.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>defaultViewIndex</code>
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#getDefaultViewIndex
 * @function
 */

/**
 * Setter for property <code>defaultViewIndex</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iDefaultViewIndex  new value for property <code>defaultViewIndex</code>
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#setDefaultViewIndex
 * @function
 */


/**
 * Getter for property <code>showSearchField</code>.
 * Indicates if the search field panel is shown.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showSearchField</code>
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#getShowSearchField
 * @function
 */

/**
 * Setter for property <code>showSearchField</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowSearchField  new value for property <code>showSearchField</code>
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#setShowSearchField
 * @function
 */


/**
 * Getter for property <code>showViews</code>.
 * Indicates if the view selector panel is shown.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showViews</code>
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#getShowViews
 * @function
 */

/**
 * Setter for property <code>showViews</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowViews  new value for property <code>showViews</code>
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#setShowViews
 * @function
 */


/**
 * Getter for property <code>external</code>.
 * Indicates if the external representation of the current view is rendered.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>external</code>
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#getExternal
 * @function
 */

/**
 * Setter for property <code>external</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bExternal  new value for property <code>external</code>
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#setExternal
 * @function
 */


/**
 * Getter for property <code>itemHeight</code>.
 * The height of the tile in the current view in pixels. Only applicable if the responsive property is set to true. This value is used for calculating the number of tile rows.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>itemHeight</code>
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#getItemHeight
 * @function
 */

/**
 * Setter for property <code>itemHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iItemHeight  new value for property <code>itemHeight</code>
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#setItemHeight
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The height of the control. Only applicable if the responsive property is set to true.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#setHeight
 * @function
 */


/**
 * Getter for aggregation <code>views</code>.<br/>
 * The list of views for the data representation.
 * 
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration[]}
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#getViews
 * @function
 */


/**
 * Inserts a view into the aggregation named <code>views</code>.
 *
 * @param {sap.suite.ui.commons.RepeaterViewConfiguration}
 *          oView the view to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the view should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the view is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the view is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#insertView
 * @function
 */

/**
 * Adds some view <code>oView</code> 
 * to the aggregation named <code>views</code>.
 *
 * @param {sap.suite.ui.commons.RepeaterViewConfiguration}
 *            oView the view to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#addView
 * @function
 */

/**
 * Removes an view from the aggregation named <code>views</code>.
 *
 * @param {int | string | sap.suite.ui.commons.RepeaterViewConfiguration} vView the view to remove or its index or id
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration} the removed view or null
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#removeView
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>views</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.RepeaterViewConfiguration[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#removeAllViews
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.RepeaterViewConfiguration</code> in the aggregation named <code>views</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.RepeaterViewConfiguration}
 *            oView the view whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#indexOfView
 * @function
 */
	

/**
 * Destroys all the views in the aggregation 
 * named <code>views</code>.
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#destroyViews
 * @function
 */


/**
 * The control to be rendered instead of the repeater's own content.
 *
 * @return {string} Id of the element which is the current target of the <code>externalRepresentation</code> association, or null
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#getExternalRepresentation
 * @function
 */

/**
 * The control to be rendered instead of the repeater's own content.
 *
 * @param {string | sap.ui.core.Control} vExternalRepresentation 
 *    Id of an element which becomes the new target of this <code>externalRepresentation</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#setExternalRepresentation
 * @function
 */


	
/**
 * This event is fired when the user performs a search. 
 *
 * @name sap.suite.ui.commons.ViewRepeater#search
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.query The search query.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'search' event of this <code>sap.suite.ui.commons.ViewRepeater</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.ViewRepeater</code>.<br/> itself. 
 *  
 * This event is fired when the user performs a search. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.ViewRepeater</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#attachSearch
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'search' event of this <code>sap.suite.ui.commons.ViewRepeater</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#detachSearch
 * @function
 */

/**
 * Fire event search to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'query' of type <code>string</code> The search query.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.ViewRepeater#fireSearch
 * @function
 */


/**
 * This event is fired when a user switches between views. 
 *
 * @name sap.suite.ui.commons.ViewRepeater#changeView
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.oldViewIndex Contains an index of the previous view in the Views aggregation.
 * @param {int} oControlEvent.getParameters.newViewIndex Contains an index of the new view in the Views aggregation.
 * @param {string} oControlEvent.getParameters.filterId Contains an ID of the filter in the Filters aggregation.
 * @param {string} oControlEvent.getParameters.sorterId Contains an ID of the sorter in the Sorters aggregation.
 * @param {int} oControlEvent.getParameters.page Contains a page number.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'changeView' event of this <code>sap.suite.ui.commons.ViewRepeater</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.ViewRepeater</code>.<br/> itself. 
 *  
 * This event is fired when a user switches between views. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.ViewRepeater</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#attachChangeView
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'changeView' event of this <code>sap.suite.ui.commons.ViewRepeater</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ViewRepeater#detachChangeView
 * @function
 */

/**
 * Fire event changeView to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'oldViewIndex' of type <code>int</code> Contains an index of the previous view in the Views aggregation.</li>
 * <li>'newViewIndex' of type <code>int</code> Contains an index of the new view in the Views aggregation.</li>
 * <li>'filterId' of type <code>string</code> Contains an ID of the filter in the Filters aggregation.</li>
 * <li>'sorterId' of type <code>string</code> Contains an ID of the sorter in the Sorters aggregation.</li>
 * <li>'page' of type <code>int</code> Contains a page number.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.ViewRepeater} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.ViewRepeater#fireChangeView
 * @function
 */


// Start of sap/suite/ui/commons/ViewRepeater.js
///**
// * This file defines behavior for the control,
// */

sap.suite.ui.commons.ViewRepeater.prototype.init = function() {
    var that = this;

    this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");

    this.addStyleClass("suiteUiVr");
    
    sap.ui.commons.RowRepeater.prototype.init.call(this);

    this._oSegBtn = new sap.ui.commons.SegmentedButton({
        id: this.getId()+"-segBtn"
    });
    this._repopulateViewSelector();

    this._oSearchField = new sap.ui.commons.SearchField({
        id: this.getId()+"-searchFld",
        enableFilterMode: true,
        enableListSuggest: false,
        search: function(oEvent) {
            that.fireSearch({query: oEvent.getParameter("query")});
        }
    });
    
    this.attachFilter(function(oEvent) {
    	this._currentFilterId = oEvent.getParameter("filterId");
    });
    
    this.attachSort(function(oEvent) {
    	this._currentSorterId = oEvent.getParameter("sorterId");
    });
    
};

sap.suite.ui.commons.ViewRepeater.prototype.setDefaultViewIndex = function(value) {
    this.setProperty("defaultViewIndex", value);
    this._selectDefaultView();
};

sap.suite.ui.commons.ViewRepeater.prototype._selectDefaultView = function() {
    var iView = this.getDefaultViewIndex();
    if (iView === this._currentViewIndex) return;
    var aViews = this.getViews() || [];
    if ( aViews.length > 0) {
        if (iView >= aViews.length) iView = aViews.length-1;
        this.selectView(iView);
        var sDefViewBtnId = this.getId()+"-"+aViews[iView].getId()+"-triggerBtn";
        this._oSegBtn.setSelectedButton(sDefViewBtnId);
    }
};

sap.suite.ui.commons.ViewRepeater.prototype._repopulateViewSelector = function() {
    var that = this;

    var result = that._oSegBtn.removeAllAggregation("buttons", true);
    jQuery.each(result, function(i, oButton) {
        oButton.destroy();
    });

    var aViews = this.getViews() || [];
    for (var i=0; i<aViews.length; i++) {
        var oView = aViews[i];

        if (oView.getExternal() === true) {
            var oExtRepr = oView.getExternalRepresentation();
            if (!oExtRepr.getModel()) {
                oExtRepr.setModel(this.getModel());
            }
        }

        var oViewButton = new sap.ui.commons.Button({
            id: this.getId() + "-" + oView.getId() + "-triggerBtn",
            text: oView.getTitle() || ( oView.getIcon() ? undefined : this._rb.getText("VIEWREPEATER_TAB_DEFAULT_NAME", [(i+1)]) ),
            icon: oView.getIcon(),
            iconHovered: oView.getIconHovered(),
            iconSelected: oView.getIconSelected(),
            tooltip: oView.getTooltip(),
            lite: true
        });
        // this would overwrite button press
        that._oSegBtn.addButton(oViewButton);
        // restore needed button press

        //call selector passing view itself
        oViewButton.attachPress(oView, function(ev, oViewData) {
            that.selectView(oViewData);
            //rerendering is needed because in Chrome there is a bug in rendering of the last button
            that._oSegBtn.rerender();
        });

    }

    this._selectDefaultView();
};

sap.suite.ui.commons.ViewRepeater.prototype.setModel = function(oModel, sName) {
    sap.ui.base.ManagedObject.prototype.setModel.call(this, oModel, sName);
    this._repopulateViewSelector();
};

sap.suite.ui.commons.ViewRepeater.prototype.addView = function(oRowRepeaterView) {
    this.addAggregation("views", oRowRepeaterView);
    this._repopulateViewSelector();
    
    return this;
};

sap.suite.ui.commons.ViewRepeater.prototype.removeAllViews = function() {
    this.removeAllAggregation("views");
    this._repopulateViewSelector();
    
    return this;
};

sap.suite.ui.commons.ViewRepeater.prototype.insertView = function(oView, iIndex) {
	this.insertAggregation("views", oView, iIndex);
	this._repopulateViewSelector();
	
	return this;
};
    
sap.suite.ui.commons.ViewRepeater.prototype.removeView = function(oView) {
	this.removeAggregation("views", oView);
	this._repopulateViewSelector();
	
	return this;
};
    
//TODO write correct jsdoc
//the method switch view to selected one
// vView can be the instance of RowRepeaterView or its index in the views aggregation
sap.suite.ui.commons.ViewRepeater.prototype.selectView = function(vView) {
    var oView, iViewIndex = 0;
    switch (typeof vView) {
        case "number": {
            oView = this.getViews()[vView];
            iViewIndex = vView;
            break;
        }
        case "object": {
        	var iViewsNumber = this.getViews().length;
        	
            for (var i = 0; i < iViewsNumber; i++) {
            	if (vView.getId() === this.getViews()[i].getId()) {
            		oView = vView;
            		iViewIndex = i;
            		break;
            	}
            }
        }
    }
    if (!oView) {
    	return;
    }

    //set Responsive
    var bResponsive = oView.getResponsive();
    if (typeof bResponsive == "boolean") {
        this.setResponsive(bResponsive);
    }
    //set Item Min Width
    var iItemMinWidth = oView.getItemMinWidth();
    if (typeof iItemMinWidth == "number" &&
        iItemMinWidth > 0 &&
        iItemMinWidth != this.setItemMinWidth()) {
        this.setItemMinWidth(iItemMinWidth);
    }
    
    var iItemHeight = oView.getItemHeight();
    if (iItemHeight != this.getItemHeight() && iItemHeight > 0) {
    	this.setItemHeight(iItemHeight);
    }
    
    //set Number Of Tiles
    if (oView.getNumberOfTiles() > 0 &&
    		oView.getNumberOfTiles() != this.setNumberOfRows()) {
    	this.setNumberOfRows(oView.getNumberOfTiles());
    	
    }
    
    //set External flag
    var bExternal = oView.getExternal();
    if (bExternal === true) {
        this.setExternal(true);
        this.setExternalRepresentation( oView.getExternalRepresentation() );
    } else {
        this.setExternal(false);
        this.setExternalRepresentation(null);
    }

    var iCurrentPage = this.getCurrentPage();

    //bind Template
    var sPath = oView.getPath();
    var oTemplate = oView.getTemplate();
    if (sPath && oTemplate) {
        this.bindRows(sPath, oTemplate);

        this._applyFilter(this._currentFilterId);
        this._applySorter(this._currentSorterId);
    }

    if (this._currentViewIndex || iViewIndex != this._currentViewIndex) {
    	this.fireChangeView({
    		newViewIndex: iViewIndex,
    		oldViewIndex: this._currentViewIndex,
    		filterId: this._currentFilterId,
    		sorterId: this._currentSorterId,
    		page: iCurrentPage
    	});
    }

    this._currentViewIndex = iViewIndex;

    this._oView = oView;
};

sap.suite.ui.commons.ViewRepeater.prototype._applyFilter = function(sFilterId, oListBinding) {
    if (sFilterId) {
        if (!oListBinding) {
        	oListBinding = this.getBinding("rows");
        }
        
    	var aFilters = this.getFilters();
    	var i = aFilters.length;
    	
	    for (var n = 0; n < i; n++) {
			if(aFilters[n].getId() === sFilterId) {
				var oFilter = aFilters[n];
				break;
			}
		}
		if (oFilter) {
			oListBinding.filter(oFilter.getFilters());
		}
    }	
};

sap.suite.ui.commons.ViewRepeater.prototype._applySorter = function(sSorterId, oListBinding) {
    if (sSorterId) {
        if (!oListBinding) {
        	oListBinding = this.getBinding("rows");
        }
        
    	var aSorters = this.getSorters();
    	var i = aSorters.length;
    	
	    for (var n = 0; n < i; n++) {
			if(aSorters[n].getId() === sSorterId) {
				var oSorter = aSorters[n];
				break;
			}
		}
		if (oSorter) {
			oListBinding.sort(oSorter.getSorter());
		}
    }	
};

sap.suite.ui.commons.ViewRepeater.prototype.onBeforeRendering = function() {
    if (this.getResponsive() && this.getShowMoreSteps() == 0) {
    	if (!this._bInit) {
	    	this.setNumberOfRows(0);
    	}
    } else if (this._oView && this._oView.getNumberOfTiles() > 0 &&
        		this._oView.getNumberOfTiles() != this.getNumberOfRows()
        		&& !this.getResponsive()) {
        	this.setNumberOfRows(this._oView.getNumberOfTiles());
    }
    this._bInit = false;
};

sap.suite.ui.commons.ViewRepeater.prototype._updateBodyPosition = function() {
	var iViewSwHeight = jQuery("#" + this.getId() + ">div.suiteUiVrViewSwHolder").outerHeight();
	var iPtbHeight = jQuery("#" + this.getId() + ">div.sapUiRrPtb").outerHeight();
	var iStbHeight = jQuery("#" + this.getId() + ">div.sapUiRrStb").outerHeight();
	var iFtrHeight = jQuery("#" + this.getId() + ">div.sapUiRrFtr").outerHeight();
	
	var oBody = jQuery.sap.byId(this.getId() + "-body");
	oBody.css("top", iViewSwHeight + iPtbHeight + iStbHeight + 3);
	oBody.css("bottom", iFtrHeight);
};

sap.suite.ui.commons.ViewRepeater.prototype.onAfterRendering = function() {
	this._computeWidths(true);

	sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
	if (this.getResponsive()) {
		if (this.getShowMoreSteps() == 0) {
			jQuery("#" + this.getId() + ">div.sapUiRrFtr").hide();
		}
		
		jQuery.sap.delayedCall(100, this, function () {
			this._sResizeListenerId = sap.ui.core.ResizeHandler.register(jQuery.sap.domById(this.getId() + "-body"),  jQuery.proxy(this._handleResize, this));
			
			if (this.getShowMoreSteps() == 0) {
				this._updateBodyPosition();
			}
		});
	}
};

sap.suite.ui.commons.ViewRepeater.prototype._handleResize = function () {
    if(!this.getDomRef()){
        return;
    }

    this._computeWidths();
    
    if (this.getResponsive() && this.getShowMoreSteps() == 0) {
		var oBody = jQuery.sap.byId(this.getId() + "-body");
		var iBodyHeight = oBody.height();
		
		var iNumberOfTilesInRow = this._itemsPerRow;
		//+3px for the spaces between tiles
		var iNumberOfRows = Math.floor(iBodyHeight / (this.getItemHeight() + 3));
		
		var iNumberOfTiles = iNumberOfRows * iNumberOfTilesInRow;
		if (iNumberOfTiles != this.getNumberOfRows()) {
			this._bInit = true;
			this.setNumberOfRows(iNumberOfTiles);
		} else {
			jQuery("#" + this.getId() + ">div.sapUiRrFtr").show();
		}
    }
};

sap.suite.ui.commons.ViewRepeater.prototype._computeWidths = function (bInitial) {
    var oThis = this;       // UI5 object
    var $This = this.$();   // DOM object
    var iItemMinWidth = oThis.getItemMinWidth();

    var iNumberOfCols =
        (this.getResponsive()===true) ? Math.floor($This.width()/iItemMinWidth) : 1;
    var iPercentWidth = Math.floor(100/iNumberOfCols);

    // since one percent includes several pixels
    // rounding error may cause an overflow above the actual width of control
    if($This.width()*iPercentWidth/100 < iItemMinWidth){
        iNumberOfCols--;
        iPercentWidth = Math.floor(100/iNumberOfCols);
    }

    if (bInitial || oThis._height != $This.height() || oThis._itemsPerRow != iNumberOfCols) {
        jQuery("#"+this.getId()+" .sapUiRrBody").css("width", "100%");

        var iOrphanedPercents = 100-(iNumberOfCols*iPercentWidth);
        var w;

        jQuery("#"+this.getId()+" .sapUiRrBody li").each( function(index) {
            //distribute orphaned percents along the row
            w = iPercentWidth;
            if (index % iNumberOfCols < iOrphanedPercents) w++;
            jQuery(this).css("width", w+"%");
            jQuery(this).css("margin", "0");
        });

        oThis._height = $This.height();
        oThis._itemsPerRow = iNumberOfCols;
        oThis._percentWidth = iPercentWidth;
    }

};

sap.suite.ui.commons.ViewRepeater.prototype.startPagingAnimation = function() {
	sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
	
    // local variables
    var oCore = sap.ui.getCore(),
        oRenderManager = oCore.getRenderManager(),
        sId = this.getId(),
        iPageFrom = this.iPreviousPage,
        iPageTo = this.getCurrentPage(),
        iNumberOfRows = this.getNumberOfRows(),
        iStartIndex = (iPageTo-1) * iNumberOfRows,
        aRows = this.getRows(),
        iCurrentVisibleRows = this._getRowCount()>iNumberOfRows*iPageTo ? iNumberOfRows : this._getRowCount()-iNumberOfRows*(iPageTo-1),
        iLastPage = Math.ceil( this._getRowCount()/iNumberOfRows ),
        n, i, w,
        oBinding = this.getBinding("rows");

    // DOM elements
    var oDomCurrentLI,
        oJQDomULFrom = jQuery(jQuery.sap.domById(sId+"-page_"+iPageFrom)),
        oDomBodyDIV = jQuery.sap.domById(sId+"-body"),
        oJQDomBodyDIV = jQuery(oDomBodyDIV);

    // fix the height on the body DIV to allow an animated height change
    oJQDomBodyDIV.css("height",oJQDomBodyDIV.outerHeight());

    // create UL for new page
    var sDirection;
    if(sap.ui.getCore() && sap.ui.getCore().getConfiguration() && sap.ui.getCore().getConfiguration().getRTL()) {
        sDirection = (iPageTo<iPageFrom) ? "left" : "right";
    }else{
        sDirection = (iPageTo<iPageFrom) ? "right" : "left";
    }

    // load the required contexts
    if (oBinding) {
        // update the rows aggregation
        this._bSecondPage = !this._bSecondPage;
        this.updateRows(true);
        aRows = this.getRows();
        iStartIndex = (this._bSecondPage ? 1 : 0) * iNumberOfRows;
    }

    // create the rows where we navigate to in the DOM
    var sStyleString = "\"top:-" + oJQDomULFrom.outerHeight(true) + "px;" + sDirection + ":" + oJQDomULFrom.outerWidth(true) + "px;\"";
    jQuery("<ul id=\"" + sId + "-page_" + iPageTo + "\" class=\"sapUiRrPage\" style=" + sStyleString + "/>").appendTo(oDomBodyDIV);
    var oDomULTo = oDomBodyDIV.lastChild;
    var oJQDomULTo = jQuery(oDomULTo);
    var iOrphanedPercents = 100-(this._itemsPerRow*this._percentWidth);
    for( n=iStartIndex, i=0; n<iStartIndex+iCurrentVisibleRows; n++, i++ ) {
        //distribute orphaned percents along the row
        w = this._percentWidth;
        if (i % this._itemsPerRow < iOrphanedPercents) w++;
        jQuery("<li id=\"" + sId + "-row_" + n + "\" style=\"width:"+w+"%\" class=\"sapUiRrRow\"/>").appendTo(oDomULTo);
        oDomCurrentLI =  oDomULTo.lastChild;
        oRenderManager.render(aRows[n], oDomCurrentLI);
    }

    // animate the paging effect
    if(sDirection==="right") {
        oJQDomULFrom.animate({right:-oJQDomULFrom.outerWidth(true)},"slow");
        oJQDomULTo.animate({right:0},"slow");
    } else {
        oJQDomULFrom.animate({left:-oJQDomULFrom.outerWidth(true)},"slow");
        oJQDomULTo.animate({left:0},"slow");
    }

    // animate the height change if number of displayed rows changes
    oJQDomBodyDIV.animate({height:oJQDomULTo.outerHeight(true)},"slow",jQuery.proxy(this.endPagingAnimation,this));
};

sap.suite.ui.commons.ViewRepeater.prototype.endPagingAnimation = function() {
	sap.ui.commons.RowRepeater.prototype.endPagingAnimation.call(this);
	this._sResizeListenerId = sap.ui.core.ResizeHandler.register(jQuery.sap.domById(this.getId() + "-body"),  jQuery.proxy(this._handleResize, this));
};

sap.suite.ui.commons.ViewRepeater.prototype.exit = function() {
	this._oSegBtn.destroy();
	this._oSearchField.destroy();
	sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
};
}; // end of sap/suite/ui/commons/ViewRepeater.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ThreePanelThingViewer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.ThreePanelThingViewer.
jQuery.sap.declare("sap.suite.ui.commons.ThreePanelThingViewer");

jQuery.sap.require('sap.ui.ux3.ThingViewer'); // unlisted dependency retained



/**
 * Constructor for a new ThreePanelThingViewer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLogo logo} : sap.ui.core.URI</li>
 * <li>{@link #getShowHeader showHeader} : boolean</li>
 * <li>{@link #getSidebarWidth sidebarWidth} : sap.ui.core.CSSSize (default: '244px')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMenuContent menuContent} : sap.ui.commons.Link[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.ux3.ThingViewer#constructor sap.ui.ux3.ThingViewer}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control extends the sap.ui.ux3.ThingViewer control. The first panel can display a thing icon, a title, the Action Menu button, up to two rows of text descriptions (the first is wrapped, the second is truncated), vertical navigation bar (sap.suite.ui.commons.VerticalNavigationBar), and an image aka key visual. The second panel displays the header area as a vertical panel containing ThingGroup objects. The third panel is a main content area designed to display ThingGroup objects.
 * @extends sap.ui.ux3.ThingViewer
 *
 * @author  
 * @version 1.16.3
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer
 */
sap.ui.ux3.ThingViewer.extend("sap.suite.ui.commons.ThreePanelThingViewer", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"selectDefaultFacet"
	],

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"logo" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"showHeader" : {type : "boolean", group : "Misc", defaultValue : null},
		"sidebarWidth" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '244px'}
	},
	aggregations : {
    	"menuContent" : {type : "sap.ui.commons.Link", multiple : true, singularName : "menuContent"}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.ThreePanelThingViewer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.ThreePanelThingViewer.extend
 * @function
 */


/**
 * Getter for property <code>logo</code>.
 * A URL of the source of an image known as key visual. This can be a company logo or other essential graphics.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>logo</code>
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#getLogo
 * @function
 */

/**
 * Setter for property <code>logo</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sLogo  new value for property <code>logo</code>
 * @return {sap.suite.ui.commons.ThreePanelThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#setLogo
 * @function
 */


/**
 * Getter for property <code>showHeader</code>.
 * Shows or hides a middle panel named Header that contains general information.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#getShowHeader
 * @function
 */

/**
 * Setter for property <code>showHeader</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.suite.ui.commons.ThreePanelThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#setShowHeader
 * @function
 */


/**
 * Getter for property <code>sidebarWidth</code>.
 * The width of the first panel that contains thing's title, icon, key visual and navigation bar. The default value is "244px".
 *
 * Default value is <code>244px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>sidebarWidth</code>
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#getSidebarWidth
 * @function
 */

/**
 * Setter for property <code>sidebarWidth</code>.
 *
 * Default value is <code>244px</code> 
 *
 * @param {sap.ui.core.CSSSize} sSidebarWidth  new value for property <code>sidebarWidth</code>
 * @return {sap.suite.ui.commons.ThreePanelThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#setSidebarWidth
 * @function
 */


/**
 * Getter for aggregation <code>menuContent</code>.<br/>
 * This aggregation allows you to add sap.ui.commons.Link items to the Action Menu. The menu appears as a popup when a user chooses a button in the top title section of the navigation panel.
 * 
 * @return {sap.ui.commons.Link[]}
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#getMenuContent
 * @function
 */


/**
 * Inserts a menuContent into the aggregation named <code>menuContent</code>.
 *
 * @param {sap.ui.commons.Link}
 *          oMenuContent the menuContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the menuContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the menuContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the menuContent is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.ThreePanelThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#insertMenuContent
 * @function
 */

/**
 * Adds some menuContent <code>oMenuContent</code> 
 * to the aggregation named <code>menuContent</code>.
 *
 * @param {sap.ui.commons.Link}
 *            oMenuContent the menuContent to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.ThreePanelThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#addMenuContent
 * @function
 */

/**
 * Removes an menuContent from the aggregation named <code>menuContent</code>.
 *
 * @param {int | string | sap.ui.commons.Link} vMenuContent the menuContent to remove or its index or id
 * @return {sap.ui.commons.Link} the removed menuContent or null
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#removeMenuContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>menuContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.Link[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#removeAllMenuContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.Link</code> in the aggregation named <code>menuContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.Link}
 *            oMenuContent the menuContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#indexOfMenuContent
 * @function
 */
	

/**
 * Destroys all the menuContent in the aggregation 
 * named <code>menuContent</code>.
 * @return {sap.suite.ui.commons.ThreePanelThingViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.ThreePanelThingViewer#destroyMenuContent
 * @function
 */


/**
 * Marks the first facet(navigation item) as selected if no facets selected and fires facetSelected event.
 *
 * @name sap.suite.ui.commons.ThreePanelThingViewer.prototype.selectDefaultFacet
 * @function

 * @type void
 * @public
 */


// Start of sap/suite/ui/commons/ThreePanelThingViewer.js

jQuery.sap.require('sap.ui.ux3.NavigationBar'); // unlisted dependency retained

jQuery.sap.require('sap.ui.ux3.ThingViewer'); // unlisted dependency retained

///*
// * This file defines behavior for the control,
// */
sap.suite.ui.commons.ThreePanelThingViewer.prototype.init = function() {
    var that = this;
    this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
    this._oNavBar = new sap.suite.ui.commons.VerticalNavigationBar();
    this.setAggregation("navBar",this._oNavBar);

    this._oNavBar.attachSelect(function(oControlEvent) {
        var item = oControlEvent.getParameters().item;
        if (that.fireFacetSelected({id: item.getId(), key: item.getKey(), item: item})) {
            that.setSelectedFacet(item);
        } else {
            oControlEvent.preventDefault();
        }
    });

    this._iSelectedMenuItem = 0;
    this._oMenuButton = new sap.ui.commons.Button({
        id: this.getId() + "-menu-button",
        tooltip: this._rb.getText("THREEPANELTHINGVIEWER_BUTTON_MENU_TOOLTIP"),
        lite: true,
        press: function() {
            that._toggleMenuPopup();
        }
    });
    this._oMenuButton.addStyleClass("sapSuiteTvTitleMb");
    this.fAnyEventHandlerProxy = jQuery.proxy(this.onAnyEvent, this);
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype.exit = function() {
    this._oMenuButton.destroy();
    jQuery.sap.unbindAnyEvent(this.fAnyEventHandlerProxy);
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype.onAfterRendering = function() {
    this._bMenuOpened = false;
    this._updateMenuPopup();
    this._toggleHeaderContent();
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype.selectDefaultFacet = function() {
    this._selectDefault();
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype._toggleMenuPopup = function() {
    jQuery.sap.byId(this.getId() + "-menu-popup").toggle();
    this._bMenuOpened = !this._bMenuOpened;

    if (this._bMenuOpened) {
        jQuery.sap.bindAnyEvent(this.fAnyEventHandlerProxy);
        this.getMenuContent()[0].focus();
        this._iSelectedMenuItem = 0;
    } else {
        jQuery.sap.unbindAnyEvent(this.fAnyEventHandlerProxy);
    }
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype._updateMenuPopup = function() {
    var iHeaderWidth = jQuery.sap.byId(this.getId() + "-header").width();
    var oMenuPopup = jQuery.sap.byId(this.getId() + "-menu-popup");
    var sStyle = sap.ui.getCore().getConfiguration().getRTL() ? "right":"left";
    var iSize = this.getMenuContent().length;

    oMenuPopup.css(sStyle, (iHeaderWidth - 22) + "px");
    oMenuPopup.children().each(function (index) {
        var $this = jQuery(this);
        $this.attr("tabindex", "-1");
        $this.attr("role", "menuitem");
        $this.attr("aria-posinset", index+1);
        $this.attr("aria-setsize", iSize);
    });
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype._rerenderFacetContent = function() {
    var $content = jQuery.sap.byId(this.getId() + "-facetContent");
    if ($content.length > 0) {
        var oRm = sap.ui.getCore().createRenderManager();
        sap.suite.ui.commons.ThreePanelThingViewerRenderer.renderFacetContent(oRm, this);
        oRm.flush($content[0]);
        oRm.destroy();
        this._resize = false;
        this._setTriggerValue();
        this._onresize();
    }
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype._rerenderHeader = function() {
	var $content = jQuery.sap.byId(this.getId() + "-header");
	if ($content.length > 0) {
		var oRm = sap.ui.getCore().createRenderManager();
		sap.suite.ui.commons.ThreePanelThingViewerRenderer.renderHeader(oRm, this);
        oRm.flush($content[0]);
        oRm.destroy();
	}
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype._rerenderHeaderContent = function() {
    var $content = jQuery.sap.byId(this.getId() + "-headerContent");
    if ($content.length > 0) {
        var oRm = sap.ui.getCore().createRenderManager();
        sap.suite.ui.commons.ThreePanelThingViewerRenderer.renderHeaderContent(oRm, this);
        oRm.flush($content[0]);
        oRm.destroy();
    }
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype._toggleHeaderContent = function() {
    var oContent = jQuery.sap.byId(this.getId() + "-headerContent");
    if (this.getShowHeader()) {
        oContent.show();
    } else {
        oContent.hide();
    }
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype.onAnyEvent = function(oEvent) {
    if (this._bMenuOpened && (oEvent.type == "mousedown" || oEvent.type == "focusin")) {
        var oSource = oEvent.target;
        var oDomRef = jQuery.sap.domById(this.getId() + "-menu-popup");

        if (!jQuery.sap.containsOrEquals(oDomRef, oSource) || oSource.tagName == "BODY") {
            this._toggleMenuPopup();
        }
    }
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype.onsapescape = function() {
    if (this._bMenuOpened) {
        this._toggleMenuPopup();
        this._oMenuButton.focus();
    }
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype.onsapnext = function(oEvent) {
    if (this._bMenuOpened) {
        var aMenuContent = this.getMenuContent();
        this._iSelectedMenuItem++;

        if (this._iSelectedMenuItem >= aMenuContent.length) {
            this._iSelectedMenuItem = 0;
        }

        aMenuContent[this._iSelectedMenuItem].focus();
        oEvent.preventDefault();
        oEvent.stopPropagation();
    }
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype.onsapprevious = function(oEvent) {
    if (this._bMenuOpened) {
        var aMenuContent = this.getMenuContent();
        this._iSelectedMenuItem--;

        if (this._iSelectedMenuItem < 0) {
            this._iSelectedMenuItem = aMenuContent.length - 1;
        }

        aMenuContent[this._iSelectedMenuItem].focus();
        oEvent.preventDefault();
        oEvent.stopPropagation();
    }
};

sap.suite.ui.commons.ThreePanelThingViewer.prototype.setShowHeader = function(bShowHeader) {
    this.setProperty("showHeader", bShowHeader, true);
    this._toggleHeaderContent();
};

}; // end of sap/suite/ui/commons/ThreePanelThingViewer.js
